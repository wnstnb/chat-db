Directory structure:
└── assistant-ui-assistant-ui/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── SECURITY.md
    ├── eslint.config.mjs
    ├── package.json
    ├── pnpm-lock.yaml
    ├── pnpm-workspace.yaml
    ├── turbo.json
    ├── .npmrc
    ├── apps/
    │   ├── docs/
    │   │   ├── components.json
    │   │   ├── instrumentation.ts
    │   │   ├── mdx-components.tsx
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.js
    │   │   ├── sentry.client.config.ts
    │   │   ├── sentry.edge.config.ts
    │   │   ├── sentry.server.config.ts
    │   │   ├── source.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── global-error.tsx
    │   │   │   ├── global.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── provider.tsx
    │   │   │   ├── source.tsx
    │   │   │   ├── (home)/
    │   │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   │   ├── layout.tsx
    │   │   │   │   ├── page.tsx
    │   │   │   │   ├── blog/
    │   │   │   │   │   ├── page.tsx
    │   │   │   │   │   └── [slug]/
    │   │   │   │   │       └── page.tsx
    │   │   │   │   ├── examples/
    │   │   │   │   │   ├── page.tsx
    │   │   │   │   │   ├── ai-sdk/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── artifacts/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── chatgpt/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── claude/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── form-demo/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── mem0/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── modal/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   ├── perplexity/
    │   │   │   │   │   │   └── page.tsx
    │   │   │   │   │   └── stockbroker/
    │   │   │   │   │       └── page.tsx
    │   │   │   │   ├── home/
    │   │   │   │   │   └── StarPill.tsx
    │   │   │   │   ├── llms.txt/
    │   │   │   │   │   └── route.ts
    │   │   │   │   ├── logos/
    │   │   │   │   │   └── cust/
    │   │   │   │   ├── pricing/
    │   │   │   │   │   ├── open-source-card.tsx
    │   │   │   │   │   ├── page.tsx
    │   │   │   │   │   └── pricing-section.tsx
    │   │   │   │   ├── shadcn-ui/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   └── showcase/
    │   │   │   │       └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   ├── chat/
    │   │   │   │   │   └── route.ts
    │   │   │   │   ├── entelligence/
    │   │   │   │   │   └── route.ts
    │   │   │   │   ├── entelligence-history/
    │   │   │   │   │   └── route.ts
    │   │   │   │   └── search/
    │   │   │   │       └── route.ts
    │   │   │   ├── docs/
    │   │   │   │   ├── layout.config.tsx
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── [[...slug]]/
    │   │   │   │       └── page.tsx
    │   │   │   └── static.json/
    │   │   │       └── route.ts
    │   │   ├── assets/
    │   │   │   ├── docs/
    │   │   │   └── providers/
    │   │   ├── components/
    │   │   │   ├── github-stars.tsx
    │   │   │   ├── artifacts/
    │   │   │   │   └── Artifacts.tsx
    │   │   │   ├── assistant-ui/
    │   │   │   │   ├── assistant-modal.tsx
    │   │   │   │   ├── attachment.tsx
    │   │   │   │   ├── markdown-text.tsx
    │   │   │   │   ├── syntax-highlighter.tsx
    │   │   │   │   ├── thread-list.tsx
    │   │   │   │   ├── thread.tsx
    │   │   │   │   └── tooltip-icon-button.tsx
    │   │   │   ├── chatgpt/
    │   │   │   │   └── ChatGPT.tsx
    │   │   │   ├── claude/
    │   │   │   │   └── Claude.tsx
    │   │   │   ├── docs/
    │   │   │   │   ├── DataAttributesTable.tsx
    │   │   │   │   ├── KeyboardTable.tsx
    │   │   │   │   ├── ParametersTable.tsx
    │   │   │   │   ├── index.ts
    │   │   │   │   └── parameters/
    │   │   │   │       ├── context.tsx
    │   │   │   │       └── runtime.tsx
    │   │   │   ├── docs-chat/
    │   │   │   │   └── DocsChat.tsx
    │   │   │   ├── genui/
    │   │   │   │   └── GenUI.tsx
    │   │   │   ├── magicui/
    │   │   │   │   ├── marquee.tsx
    │   │   │   │   ├── shine-border.tsx
    │   │   │   │   └── terminal.tsx
    │   │   │   ├── modal/
    │   │   │   │   └── ModalChat.tsx
    │   │   │   ├── perplexity/
    │   │   │   │   ├── Perplexity.tsx
    │   │   │   │   └── thread.tsx
    │   │   │   ├── shadcn/
    │   │   │   │   ├── ModelPicker.tsx
    │   │   │   │   └── Shadcn.tsx
    │   │   │   ├── testimonials/
    │   │   │   │   ├── TestimonialContainer.tsx
    │   │   │   │   ├── testimonials.ts
    │   │   │   │   └── profiles/
    │   │   │   └── ui/
    │   │   │       ├── avatar.tsx
    │   │   │       ├── badge.tsx
    │   │   │       ├── button.tsx
    │   │   │       ├── card.tsx
    │   │   │       ├── dialog.tsx
    │   │   │       ├── resizable.tsx
    │   │   │       ├── select.tsx
    │   │   │       ├── sheet.tsx
    │   │   │       └── tooltip.tsx
    │   │   ├── content/
    │   │   │   ├── auto-generated/
    │   │   │   │   └── typeDocs.ts
    │   │   │   ├── blog/
    │   │   │   │   ├── 2024-07-29-hello/
    │   │   │   │   │   └── index.mdx
    │   │   │   │   ├── 2024-09-11/
    │   │   │   │   │   ├── index.mdx
    │   │   │   │   │   └── redirect.tsx
    │   │   │   │   ├── 2024-12-15/
    │   │   │   │   │   ├── index.mdx
    │   │   │   │   │   └── redirect.tsx
    │   │   │   │   └── 2025-01-31-changelog/
    │   │   │   │       └── index.mdx
    │   │   │   └── docs/
    │   │   │       ├── getting-started.mdx
    │   │   │       ├── index.mdx
    │   │   │       ├── meta.json
    │   │   │       ├── api-reference/
    │   │   │       │   ├── context.tsx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── overview.mdx
    │   │   │       │   ├── context-providers/
    │   │   │       │   │   ├── AssistantRuntimeProvider.mdx
    │   │   │       │   │   └── TextContentPartProvider.mdx
    │   │   │       │   ├── integrations/
    │   │   │       │   │   ├── meta.json
    │   │   │       │   │   ├── react-hook-form.mdx
    │   │   │       │   │   └── vercel-ai-sdk.mdx
    │   │   │       │   ├── primitives/
    │   │   │       │   │   ├── ActionBar.mdx
    │   │   │       │   │   ├── AssistantModal.mdx
    │   │   │       │   │   ├── Attachment.mdx
    │   │   │       │   │   ├── BranchPicker.mdx
    │   │   │       │   │   ├── Composer.mdx
    │   │   │       │   │   ├── ContentPart.mdx
    │   │   │       │   │   ├── Message.mdx
    │   │   │       │   │   ├── Thread.mdx
    │   │   │       │   │   ├── composition.mdx
    │   │   │       │   │   └── meta.json
    │   │   │       │   └── runtimes/
    │   │   │       │       ├── AssistantRuntime.mdx
    │   │   │       │       ├── AttachmentRuntime.mdx
    │   │   │       │       ├── ComposerRuntime.mdx
    │   │   │       │       ├── ContentPartRuntime.mdx
    │   │   │       │       ├── MessageRuntime.mdx
    │   │   │       │       ├── ThreadListItemRuntime.mdx
    │   │   │       │       ├── ThreadListRuntime.mdx
    │   │   │       │       ├── ThreadRuntime.mdx
    │   │   │       │       └── meta.json
    │   │   │       ├── cloud/
    │   │   │       │   ├── authorization.mdx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── overview.mdx
    │   │   │       │   └── persistence/
    │   │   │       │       ├── ai-sdk.mdx
    │   │   │       │       ├── langgraph.mdx
    │   │   │       │       └── meta.json
    │   │   │       ├── concepts/
    │   │   │       │   ├── architecture.mdx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── runtime-layer.mdx
    │   │   │       │   └── why.mdx
    │   │   │       ├── copilots/
    │   │   │       │   ├── make-assistant-readable.mdx
    │   │   │       │   ├── make-assistant-tool.mdx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── model-context.mdx
    │   │   │       │   ├── motivation.mdx
    │   │   │       │   └── use-assistant-instructions.mdx
    │   │   │       ├── guides/
    │   │   │       │   ├── Attachments.mdx
    │   │   │       │   ├── Branching.mdx
    │   │   │       │   ├── Editing.mdx
    │   │   │       │   ├── Speech.mdx
    │   │   │       │   ├── ToolUI.mdx
    │   │   │       │   └── meta.json
    │   │   │       ├── legacy/
    │   │   │       │   └── styled/
    │   │   │       │       ├── AssistantModal.mdx
    │   │   │       │       ├── Decomposition.mdx
    │   │   │       │       ├── Markdown.mdx
    │   │   │       │       ├── Scrollbar.mdx
    │   │   │       │       ├── Thread.mdx
    │   │   │       │       ├── ThreadWidth.mdx
    │   │   │       │       └── meta.json
    │   │   │       ├── migrations/
    │   │   │       │   ├── deprecation-policy.mdx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── v0-7.mdx
    │   │   │       │   └── v0-8.mdx
    │   │   │       ├── runtimes/
    │   │   │       │   ├── helicone.mdx
    │   │   │       │   ├── langserve.mdx
    │   │   │       │   ├── meta.json
    │   │   │       │   ├── pick-a-runtime.mdx
    │   │   │       │   ├── ai-sdk/
    │   │   │       │   │   ├── meta.json
    │   │   │       │   │   ├── rsc.mdx
    │   │   │       │   │   ├── use-assistant-hook.mdx
    │   │   │       │   │   ├── use-chat-hook.mdx
    │   │   │       │   │   └── use-chat.mdx
    │   │   │       │   ├── custom/
    │   │   │       │   │   ├── external-store.mdx
    │   │   │       │   │   ├── local.mdx
    │   │   │       │   │   └── meta.json
    │   │   │       │   └── langgraph/
    │   │   │       │       ├── index.mdx
    │   │   │       │       ├── meta.json
    │   │   │       │       └── tutorial/
    │   │   │       │           ├── index.mdx
    │   │   │       │           ├── introduction.mdx
    │   │   │       │           ├── meta.json
    │   │   │       │           ├── part-1.mdx
    │   │   │       │           ├── part-2.mdx
    │   │   │       │           ├── part-3.mdx
    │   │   │       │           └── images/
    │   │   │       └── ui/
    │   │   │           ├── AssistantModal.mdx
    │   │   │           ├── AssistantSidebar.mdx
    │   │   │           ├── Attachment.mdx
    │   │   │           ├── Markdown.mdx
    │   │   │           ├── Scrollbar.mdx
    │   │   │           ├── Thread.mdx
    │   │   │           ├── ThreadList.mdx
    │   │   │           ├── ToolFallback.mdx
    │   │   │           ├── meta.json
    │   │   │           └── primitives/
    │   │   │               └── Thread.mdx
    │   │   ├── lib/
    │   │   │   ├── useMediaQuery.ts
    │   │   │   └── utils.ts
    │   │   ├── public/
    │   │   │   ├── favicon/
    │   │   │   └── screenshot/
    │   │   │       └── examples/
    │   │   └── scripts/
    │   │       └── generate-docs.mts
    │   └── registry/
    │       ├── components.json
    │       ├── package.json
    │       ├── tailwind.config.ts
    │       ├── tsconfig.json
    │       ├── vercel.json
    │       ├── .gitignore
    │       ├── app/
    │       │   ├── ai-sdk/
    │       │   │   └── assistant.tsx
    │       │   └── api/
    │       │       └── chat/
    │       │           └── route.ts
    │       ├── components/
    │       │   ├── assistant-ui/
    │       │   │   ├── assistant-modal.tsx
    │       │   │   ├── assistant-sidebar.tsx
    │       │   │   ├── attachment.tsx
    │       │   │   ├── follow-up-suggestions.tsx
    │       │   │   ├── markdown-text.tsx
    │       │   │   ├── syntax-highlighter.tsx
    │       │   │   ├── thread-list.tsx
    │       │   │   ├── thread.tsx
    │       │   │   ├── tool-fallback.tsx
    │       │   │   └── tooltip-icon-button.tsx
    │       │   └── ui/
    │       │       ├── avatar.tsx
    │       │       ├── button.tsx
    │       │       ├── dialog.tsx
    │       │       ├── resizable.tsx
    │       │       └── tooltip.tsx
    │       ├── lib/
    │       │   └── utils.ts
    │       ├── scripts/
    │       │   └── build-registry.ts
    │       └── src/
    │           ├── registry.ts
    │           └── schema.ts
    ├── examples/
    │   ├── local-ollama/
    │   │   ├── README.md
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── chat/
    │   │   │   │       └── route.ts
    │   │   │   └── fonts/
    │   │   │       ├── GeistMonoVF.woff
    │   │   │       └── GeistVF.woff
    │   │   └── components/
    │   │       └── MyAssistant.tsx
    │   ├── search-agent-for-e-commerce/
    │   │   ├── README.md
    │   │   ├── components.json
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── start.sh
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── vercel.json
    │   │   ├── .gitignore
    │   │   ├── public/
    │   │   │   ├── dummy-ecommerce-website.html
    │   │   │   └── shop_info.txt
    │   │   └── src/
    │   │       ├── app/
    │   │       │   ├── MyRuntimeProvider.tsx
    │   │       │   ├── actions.tsx
    │   │       │   ├── globals.css
    │   │       │   ├── layout.tsx
    │   │       │   └── page.tsx
    │   │       ├── components/
    │   │       │   └── ui/
    │   │       │       ├── avatar.tsx
    │   │       │       ├── button.tsx
    │   │       │       ├── card.tsx
    │   │       │       ├── carousel.tsx
    │   │       │       ├── popover.tsx
    │   │       │       ├── productcarousel.tsx
    │   │       │       ├── tooltip.tsx
    │   │       │       └── assistant-ui/
    │   │       │           ├── assistant-modal.tsx
    │   │       │           └── thread.tsx
    │   │       └── lib/
    │   │           └── utils.ts
    │   ├── with-ai-sdk/
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   └── app/
    │   │       ├── MyRuntimeProvider.tsx
    │   │       ├── globals.css
    │   │       ├── layout.tsx
    │   │       ├── page.tsx
    │   │       └── api/
    │   │           └── chat/
    │   │               └── route.ts
    │   ├── with-cloud/
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   └── app/
    │   │       ├── MyRuntimeProvider.tsx
    │   │       ├── globals.css
    │   │       ├── layout.tsx
    │   │       ├── page.tsx
    │   │       └── api/
    │   │           ├── assistant-ui-token/
    │   │           │   └── route.ts
    │   │           └── chat/
    │   │               └── route.ts
    │   ├── with-external-store/
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   └── app/
    │   │       ├── MyRuntimeProvider.tsx
    │   │       ├── globals.css
    │   │       ├── layout.tsx
    │   │       ├── page.tsx
    │   │       └── api/
    │   │           └── chat/
    │   │               └── route.ts
    │   ├── with-ffmpeg/
    │   │   ├── components.json
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   ├── NoSSRWrapper.tsx
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       └── chat/
    │   │   │           └── route.ts
    │   │   └── lib/
    │   │       └── utils.ts
    │   ├── with-inline-suggestions/
    │   │   ├── README.md
    │   │   ├── LICENSE
    │   │   ├── components.json
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       └── chat/
    │   │   │           └── route.ts
    │   │   ├── components/
    │   │   │   └── ui/
    │   │   │       ├── avatar.tsx
    │   │   │       ├── button.tsx
    │   │   │       ├── tooltip.tsx
    │   │   │       └── assistant-ui/
    │   │   │           ├── AI_ThreadSuggestion.tsx
    │   │   │           ├── LastMessageHook.tsx
    │   │   │           ├── ThreadSuggestion.tsx
    │   │   │           ├── actions.ts
    │   │   │           └── thread.tsx
    │   │   └── lib/
    │   │       └── utils.ts
    │   ├── with-langgraph/
    │   │   ├── README.md
    │   │   ├── components.json
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       ├── [..._path]/
    │   │   │       │   └── route.ts
    │   │   │       └── assistant-ui-token/
    │   │   │           └── route.ts
    │   │   ├── components/
    │   │   │   ├── tools/
    │   │   │   │   ├── ToolFallback.tsx
    │   │   │   │   ├── price-snapshot/
    │   │   │   │   │   ├── PriceSnapshotTool.tsx
    │   │   │   │   │   └── price-snapshot.tsx
    │   │   │   │   └── purchase-stock/
    │   │   │   │       ├── PurchaseStockTool.tsx
    │   │   │   │       ├── transaction-confirmation-final.tsx
    │   │   │   │       └── transaction-confirmation-pending.tsx
    │   │   │   └── ui/
    │   │   │       ├── button.tsx
    │   │   │       └── card.tsx
    │   │   └── lib/
    │   │       ├── chatApi.ts
    │   │       └── utils.ts
    │   ├── with-openai-assistants/
    │   │   ├── components.json
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       └── assistant/
    │   │   │           └── route.ts
    │   │   ├── components/
    │   │   │   └── ui/
    │   │   │       ├── avatar.tsx
    │   │   │       └── assistant-ui/
    │   │   │           └── thread.tsx
    │   │   └── lib/
    │   │       └── utils.ts
    │   ├── with-react-hook-form/
    │   │   ├── components.json
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── MyRuntimeProvider.tsx
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       └── chat/
    │   │   │           └── route.ts
    │   │   ├── components/
    │   │   │   ├── SignupForm.tsx
    │   │   │   └── ui/
    │   │   │       ├── button.tsx
    │   │   │       ├── form.tsx
    │   │   │       ├── input.tsx
    │   │   │       ├── label.tsx
    │   │   │       ├── resizable.tsx
    │   │   │       ├── tabs.tsx
    │   │   │       └── assistant-ui/
    │   │   │           └── assistant-sidebar.tsx
    │   │   └── lib/
    │   │       ├── submitSignup.tsx
    │   │       └── utils.ts
    │   └── with-vercel-ai-rsc/
    │       ├── components.json
    │       ├── next-env.d.ts
    │       ├── next.config.mjs
    │       ├── package.json
    │       ├── postcss.config.mjs
    │       ├── tailwind.config.ts
    │       ├── tsconfig.json
    │       ├── app/
    │       │   ├── actions.tsx
    │       │   ├── globals.css
    │       │   ├── layout.tsx
    │       │   └── page.tsx
    │       ├── components/
    │       │   └── ui/
    │       │       ├── avatar.tsx
    │       │       ├── button.tsx
    │       │       ├── tooltip.tsx
    │       │       └── assistant-ui/
    │       │           └── thread.tsx
    │       ├── lib/
    │       │   └── utils.ts
    │       └── public/
    ├── packages/
    │   ├── assistant-stream/
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── ai-sdk/
    │   │   │   ├── README.md
    │   │   │   └── package.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   └── src/
    │   │       ├── ai-sdk.ts
    │   │       ├── index.ts
    │   │       ├── ai-sdk/
    │   │       │   └── index.ts
    │   │       └── core/
    │   │           ├── AssistantStream.ts
    │   │           ├── index.ts
    │   │           ├── test.ts
    │   │           ├── accumulators/
    │   │           │   ├── AssistantMessageStream.ts
    │   │           │   ├── assistantMessageAccumulator.ts
    │   │           │   └── partial-json/
    │   │           │       ├── fix-json.ts
    │   │           │       └── parse-partial-json.ts
    │   │           ├── modules/
    │   │           │   ├── runs.ts
    │   │           │   ├── text.ts
    │   │           │   └── tool-call.ts
    │   │           ├── serialization/
    │   │           │   ├── DataStream.ts
    │   │           │   ├── PlainText.ts
    │   │           │   └── streamPart/
    │   │           │       └── StreamPart.ts
    │   │           └── utils/
    │   │               ├── PipeableTransformStream.ts
    │   │               ├── UnderlyingReadable.ts
    │   │               ├── generateId.tsx
    │   │               └── types.ts
    │   ├── cli/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.declarations.json
    │   │   ├── tsconfig.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── codemods/
    │   │       │   ├── utils/
    │   │       │   │   └── createTransformer.ts
    │   │       │   └── v0-8/
    │   │       │       └── ui-package-split.ts
    │   │       ├── commands/
    │   │       │   ├── create.ts
    │   │       │   ├── init.ts
    │   │       │   ├── upgrade.ts
    │   │       │   └── shadcn/
    │   │       │       └── add.ts
    │   │       └── lib/
    │   │           ├── install-ui-lib.ts
    │   │           ├── transform-options.ts
    │   │           ├── transform.ts
    │   │           └── upgrade.ts
    │   ├── create-assistant-ui/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   └── src/
    │   │       └── index.ts
    │   ├── react/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.declarations.json
    │   │   ├── tsconfig.json
    │   │   ├── edge/
    │   │   │   ├── README.md
    │   │   │   └── package.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   └── src/
    │   │       ├── edge.ts
    │   │       ├── index.ts
    │   │       ├── internal.ts
    │   │       ├── api/
    │   │       │   ├── AssistantRuntime.ts
    │   │       │   ├── AttachmentRuntime.ts
    │   │       │   ├── ComposerRuntime.ts
    │   │       │   ├── ContentPartRuntime.ts
    │   │       │   ├── MessageRuntime.ts
    │   │       │   ├── RuntimePathTypes.ts
    │   │       │   ├── ThreadListItemRuntime.ts
    │   │       │   ├── ThreadListRuntime.ts
    │   │       │   ├── ThreadRuntime.ts
    │   │       │   ├── index.ts
    │   │       │   └── subscribable/
    │   │       │       ├── BaseSubject.ts
    │   │       │       ├── EventSubscriptionSubject.ts
    │   │       │       ├── LazyMemoizeSubject.ts
    │   │       │       ├── NestedSubscriptionSubject.ts
    │   │       │       ├── SKIP_UPDATE.ts
    │   │       │       ├── ShallowMemoizeSubject.ts
    │   │       │       ├── Subscribable.ts
    │   │       │       └── shallowEqual.ts
    │   │       ├── cloud/
    │   │       │   ├── AssistantCloud.tsx
    │   │       │   ├── AssistantCloudAPI.tsx
    │   │       │   ├── AssistantCloudAuthStrategy.tsx
    │   │       │   ├── AssistantCloudAuthTokens.tsx
    │   │       │   ├── AssistantCloudRuns.tsx
    │   │       │   ├── AssistantCloudThreadHistoryAdapter.tsx
    │   │       │   ├── AssistantCloudThreadMessages.tsx
    │   │       │   ├── AssistantCloudThreads.tsx
    │   │       │   ├── auiV0.ts
    │   │       │   ├── index.ts
    │   │       │   └── useCloudThreadListRuntime.tsx
    │   │       ├── context/
    │   │       │   ├── ReadonlyStore.ts
    │   │       │   ├── index.ts
    │   │       │   ├── providers/
    │   │       │   │   ├── AssistantRuntimeProvider.tsx
    │   │       │   │   ├── AttachmentRuntimeProvider.tsx
    │   │       │   │   ├── ContentPartRuntimeProvider.tsx
    │   │       │   │   ├── MessageRuntimeProvider.tsx
    │   │       │   │   ├── TextContentPartProvider.tsx
    │   │       │   │   ├── ThreadListItemRuntimeProvider.tsx
    │   │       │   │   ├── ThreadRuntimeProvider.tsx
    │   │       │   │   ├── ThreadViewportProvider.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── react/
    │   │       │   │   ├── AssistantContext.ts
    │   │       │   │   ├── AttachmentContext.ts
    │   │       │   │   ├── ComposerContext.ts
    │   │       │   │   ├── ContentPartContext.ts
    │   │       │   │   ├── MessageContext.ts
    │   │       │   │   ├── ThreadContext.ts
    │   │       │   │   ├── ThreadListItemContext.ts
    │   │       │   │   ├── ThreadViewportContext.ts
    │   │       │   │   ├── index.ts
    │   │       │   │   └── utils/
    │   │       │   │       ├── createContextHook.ts
    │   │       │   │       ├── createContextStoreHook.ts
    │   │       │   │       ├── createStateHookForRuntime.ts
    │   │       │   │       ├── ensureBinding.ts
    │   │       │   │       └── useRuntimeState.ts
    │   │       │   └── stores/
    │   │       │       ├── AssistantToolUIs.ts
    │   │       │       ├── MessageUtils.ts
    │   │       │       ├── ThreadViewport.tsx
    │   │       │       └── index.ts
    │   │       ├── model-context/
    │   │       │   ├── ModelContextTypes.ts
    │   │       │   ├── index.ts
    │   │       │   ├── makeAssistantTool.tsx
    │   │       │   ├── makeAssistantToolUI.tsx
    │   │       │   ├── makeAssistantVisible.tsx
    │   │       │   ├── tool.ts
    │   │       │   ├── useAssistantInstructions.tsx
    │   │       │   ├── useAssistantTool.tsx
    │   │       │   ├── useAssistantToolUI.tsx
    │   │       │   └── useInlineRender.tsx
    │   │       ├── primitives/
    │   │       │   ├── index.ts
    │   │       │   ├── actionBar/
    │   │       │   │   ├── ActionBarCopy.tsx
    │   │       │   │   ├── ActionBarEdit.tsx
    │   │       │   │   ├── ActionBarFeedbackNegative.tsx
    │   │       │   │   ├── ActionBarFeedbackPositive.tsx
    │   │       │   │   ├── ActionBarReload.tsx
    │   │       │   │   ├── ActionBarRoot.tsx
    │   │       │   │   ├── ActionBarSpeak.tsx
    │   │       │   │   ├── ActionBarStopSpeaking.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   └── useActionBarFloatStatus.tsx
    │   │       │   ├── assistantModal/
    │   │       │   │   ├── AssistantModalAnchor.tsx
    │   │       │   │   ├── AssistantModalContent.tsx
    │   │       │   │   ├── AssistantModalRoot.tsx
    │   │       │   │   ├── AssistantModalTrigger.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   └── scope.tsx
    │   │       │   ├── attachment/
    │   │       │   │   ├── AttachmentName.tsx
    │   │       │   │   ├── AttachmentRemove.tsx
    │   │       │   │   ├── AttachmentRoot.tsx
    │   │       │   │   ├── AttachmentThumb.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── branchPicker/
    │   │       │   │   ├── BranchPickerCount.tsx
    │   │       │   │   ├── BranchPickerNext.tsx
    │   │       │   │   ├── BranchPickerNumber.tsx
    │   │       │   │   ├── BranchPickerPrevious.tsx
    │   │       │   │   ├── BranchPickerRoot.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── composer/
    │   │       │   │   ├── ComposerAddAttachment.tsx
    │   │       │   │   ├── ComposerAttachments.tsx
    │   │       │   │   ├── ComposerCancel.tsx
    │   │       │   │   ├── ComposerIf.tsx
    │   │       │   │   ├── ComposerInput.tsx
    │   │       │   │   ├── ComposerRoot.tsx
    │   │       │   │   ├── ComposerSend.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── contentPart/
    │   │       │   │   ├── ContentPartImage.tsx
    │   │       │   │   ├── ContentPartInProgress.tsx
    │   │       │   │   ├── ContentPartText.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── useContentPartImage.tsx
    │   │       │   │   ├── useContentPartReasoning.tsx
    │   │       │   │   └── useContentPartText.tsx
    │   │       │   ├── message/
    │   │       │   │   ├── MessageAttachments.tsx
    │   │       │   │   ├── MessageContent.tsx
    │   │       │   │   ├── MessageIf.tsx
    │   │       │   │   ├── MessageRoot.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── thread/
    │   │       │   │   ├── ThreadEmpty.tsx
    │   │       │   │   ├── ThreadIf.tsx
    │   │       │   │   ├── ThreadMessages.tsx
    │   │       │   │   ├── ThreadRoot.tsx
    │   │       │   │   ├── ThreadScrollToBottom.tsx
    │   │       │   │   ├── ThreadSuggestion.tsx
    │   │       │   │   ├── ThreadViewport.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   └── useThreadViewportAutoScroll.tsx
    │   │       │   ├── threadList/
    │   │       │   │   ├── ThreadListItems.tsx
    │   │       │   │   ├── ThreadListNew.tsx
    │   │       │   │   ├── ThreadListRoot.tsx
    │   │       │   │   └── index.ts
    │   │       │   └── threadListItem/
    │   │       │       ├── ThreadListItemArchive.ts
    │   │       │       ├── ThreadListItemDelete.ts
    │   │       │       ├── ThreadListItemRoot.tsx
    │   │       │       ├── ThreadListItemTitle.tsx
    │   │       │       ├── ThreadListItemTrigger.ts
    │   │       │       ├── ThreadListItemUnarchive.ts
    │   │       │       └── index.ts
    │   │       ├── runtimes/
    │   │       │   ├── index.ts
    │   │       │   ├── adapters/
    │   │       │   │   ├── RuntimeAdapterProvider.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── attachment/
    │   │       │   │   │   ├── AttachmentAdapter.ts
    │   │       │   │   │   ├── CompositeAttachmentAdapter.ts
    │   │       │   │   │   ├── SimpleImageAttachmentAdapter.ts
    │   │       │   │   │   ├── SimpleTextAttachmentAdapter.ts
    │   │       │   │   │   └── index.ts
    │   │       │   │   ├── feedback/
    │   │       │   │   │   ├── FeedbackAdapter.ts
    │   │       │   │   │   └── index.ts
    │   │       │   │   ├── speech/
    │   │       │   │   │   ├── SpeechAdapterTypes.ts
    │   │       │   │   │   ├── WebSpeechSynthesisAdapter.ts
    │   │       │   │   │   └── index.ts
    │   │       │   │   ├── suggestion/
    │   │       │   │   │   ├── SuggestionAdapter.ts
    │   │       │   │   │   └── index.ts
    │   │       │   │   └── thread-history/
    │   │       │   │       └── ThreadHistoryAdapter.ts
    │   │       │   ├── composer/
    │   │       │   │   ├── BaseComposerRuntimeCore.tsx
    │   │       │   │   ├── DefaultEditComposerRuntimeCore.tsx
    │   │       │   │   └── DefaultThreadComposerRuntimeCore.tsx
    │   │       │   ├── core/
    │   │       │   │   ├── AssistantRuntimeCore.tsx
    │   │       │   │   ├── BaseAssistantRuntimeCore.tsx
    │   │       │   │   ├── BaseThreadRuntimeCore.tsx
    │   │       │   │   ├── ComposerRuntimeCore.tsx
    │   │       │   │   ├── ThreadListRuntimeCore.tsx
    │   │       │   │   ├── ThreadRuntimeCore.tsx
    │   │       │   │   └── index.ts
    │   │       │   ├── dangerous-in-browser/
    │   │       │   │   ├── DangerousInBrowserAdapter.ts
    │   │       │   │   ├── index.ts
    │   │       │   │   └── useDangerousInBrowserRuntime.ts
    │   │       │   ├── edge/
    │   │       │   │   ├── EdgeChatAdapter.ts
    │   │       │   │   ├── EdgeRuntimeRequestOptions.ts
    │   │       │   │   ├── createEdgeRuntimeAPI.ts
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── useEdgeRuntime.ts
    │   │       │   │   ├── converters/
    │   │       │   │   │   ├── fromCoreMessage.ts
    │   │       │   │   │   ├── fromLanguageModelMessages.ts
    │   │       │   │   │   ├── fromLanguageModelTools.ts
    │   │       │   │   │   ├── index.ts
    │   │       │   │   │   ├── toCoreMessages.ts
    │   │       │   │   │   ├── toLanguageModelMessages.ts
    │   │       │   │   │   └── toLanguageModelTools.ts
    │   │       │   │   └── streams/
    │   │       │   │       ├── AssistantStreamChunkType.ts
    │   │       │   │       ├── assistantDecoderStream.ts
    │   │       │   │       ├── assistantEncoderStream.ts
    │   │       │   │       ├── runResultStream.ts
    │   │       │   │       ├── toolResultStream.ts
    │   │       │   │       └── utils/
    │   │       │   │           ├── PipeableTransformStream.ts
    │   │       │   │           ├── StreamPart.ts
    │   │       │   │           ├── chunkByLineStream.ts
    │   │       │   │           ├── index.ts
    │   │       │   │           ├── streamPartDecoderStream.ts
    │   │       │   │           └── streamPartEncoderStream.ts
    │   │       │   ├── external-store/
    │   │       │   │   ├── ExternalStoreAdapter.tsx
    │   │       │   │   ├── ExternalStoreRuntimeCore.tsx
    │   │       │   │   ├── ExternalStoreThreadListRuntimeCore.tsx
    │   │       │   │   ├── ExternalStoreThreadRuntimeCore.tsx
    │   │       │   │   ├── ThreadMessageConverter.ts
    │   │       │   │   ├── ThreadMessageLike.tsx
    │   │       │   │   ├── auto-status.tsx
    │   │       │   │   ├── createMessageConverter.tsx
    │   │       │   │   ├── external-message-converter.tsx
    │   │       │   │   ├── getExternalStoreMessage.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   └── useExternalStoreRuntime.tsx
    │   │       │   ├── local/
    │   │       │   │   ├── ChatModelAdapter.tsx
    │   │       │   │   ├── LocalRuntimeCore.tsx
    │   │       │   │   ├── LocalRuntimeOptions.tsx
    │   │       │   │   ├── LocalThreadListRuntimeCore.tsx
    │   │       │   │   ├── LocalThreadRuntimeCore.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── shouldContinue.tsx
    │   │       │   │   └── useLocalRuntime.tsx
    │   │       │   ├── remote-thread-list/
    │   │       │   │   ├── BaseSubscribable.tsx
    │   │       │   │   ├── EMPTY_THREAD_CORE.tsx
    │   │       │   │   ├── OptimisticState.ts
    │   │       │   │   ├── RemoteThreadListHookInstanceManager.tsx
    │   │       │   │   ├── RemoteThreadListThreadListRuntimeCore.tsx
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── types.tsx
    │   │       │   │   ├── useRemoteThreadListRuntime.tsx
    │   │       │   │   └── adapter/
    │   │       │   │       ├── cloud.tsx
    │   │       │   │       └── in-memory.tsx
    │   │       │   └── utils/
    │   │       │       └── MessageRepository.tsx
    │   │       ├── types/
    │   │       │   ├── AssistantTypes.ts
    │   │       │   ├── AttachmentTypes.ts
    │   │       │   ├── ContentPartComponentTypes.tsx
    │   │       │   ├── Unsubscribe.tsx
    │   │       │   └── index.ts
    │   │       └── utils/
    │   │           ├── CompositeContextProvider.ts
    │   │           ├── RequireAtLeastOne.tsx
    │   │           ├── createActionButton.tsx
    │   │           ├── getThreadMessageText.tsx
    │   │           ├── idUtils.tsx
    │   │           ├── combined/
    │   │           │   ├── createCombinedStore.ts
    │   │           │   └── useCombinedStore.ts
    │   │           ├── hooks/
    │   │           │   ├── useManagedRef.ts
    │   │           │   ├── useOnResizeContent.tsx
    │   │           │   └── useOnScrollToBottom.tsx
    │   │           ├── json/
    │   │           │   ├── fix-json.ts
    │   │           │   ├── is-json.ts
    │   │           │   ├── json-value.ts
    │   │           │   └── parse-partial-json.ts
    │   │           └── smooth/
    │   │               ├── SmoothContext.tsx
    │   │               ├── index.ts
    │   │               └── useSmooth.tsx
    │   ├── react-ai-sdk/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── useChatRuntime.ts
    │   │       ├── rsc/
    │   │       │   ├── RSCDisplay.tsx
    │   │       │   ├── VercelRSCAdapter.tsx
    │   │       │   ├── VercelRSCMessage.tsx
    │   │       │   ├── getVercelRSCMessage.tsx
    │   │       │   ├── index.ts
    │   │       │   ├── useVercelRSCRuntime.tsx
    │   │       │   └── utils/
    │   │       │       └── RSCThreadExtras.tsx
    │   │       └── ui/
    │   │           ├── getVercelAIMessages.tsx
    │   │           ├── index.ts
    │   │           ├── use-assistant/
    │   │           │   └── useVercelUseAssistantRuntime.tsx
    │   │           ├── use-chat/
    │   │           │   └── useVercelUseChatRuntime.tsx
    │   │           └── utils/
    │   │               ├── convertMessage.ts
    │   │               ├── sliceMessagesUntil.tsx
    │   │               ├── toCreateMessage.ts
    │   │               ├── useInputSync.tsx
    │   │               └── vercelAttachmentAdapter.ts
    │   ├── react-hook-form/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       ├── formTools.tsx
    │   │       ├── index.ts
    │   │       └── useAssistantForm.tsx
    │   ├── react-langgraph/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       ├── LangGraphMessageAccumulator.ts
    │   │       ├── appendLangChainChunk.ts
    │   │       ├── convertLangChainMessages.ts
    │   │       ├── index.ts
    │   │       ├── types.ts
    │   │       ├── useLangGraphMessages.ts
    │   │       └── useLangGraphRuntime.ts
    │   ├── react-markdown/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.declarations.json
    │   │   ├── tsconfig.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   ├── src/
    │   │   │   ├── index.ts
    │   │   │   ├── memoization.tsx
    │   │   │   ├── overrides/
    │   │   │   │   ├── CodeBlock.tsx
    │   │   │   │   ├── CodeOverride.tsx
    │   │   │   │   ├── PreOverride.tsx
    │   │   │   │   ├── defaultComponents.tsx
    │   │   │   │   ├── types.ts
    │   │   │   │   └── withDefaults.tsx
    │   │   │   └── primitives/
    │   │   │       └── MarkdownText.tsx
    │   │   └── styles/
    │   │       └── dot.css
    │   ├── react-syntax-highlighter/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       └── react-syntax-highlighter.tsx
    │   ├── react-ui/
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.declarations.json
    │   │   ├── tsconfig.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   ├── src/
    │   │   │   ├── index.ts
    │   │   │   ├── styles/
    │   │   │   │   ├── base.css
    │   │   │   │   ├── index.css
    │   │   │   │   ├── modal.css
    │   │   │   │   ├── tailwindcss/
    │   │   │   │   │   ├── base-components.css
    │   │   │   │   │   ├── markdown.css
    │   │   │   │   │   ├── modal.css
    │   │   │   │   │   └── thread.css
    │   │   │   │   └── themes/
    │   │   │   │       ├── default.css
    │   │   │   │       └── shadcn-extras.css
    │   │   │   ├── tailwindcss/
    │   │   │   │   └── index.ts
    │   │   │   └── ui/
    │   │   │       ├── assistant-action-bar.tsx
    │   │   │       ├── assistant-message.tsx
    │   │   │       ├── assistant-modal.tsx
    │   │   │       ├── attachment-ui.tsx
    │   │   │       ├── branch-picker.tsx
    │   │   │       ├── composer.tsx
    │   │   │       ├── content-part.tsx
    │   │   │       ├── edit-composer.tsx
    │   │   │       ├── index.ts
    │   │   │       ├── thread-config.tsx
    │   │   │       ├── thread-list-item.tsx
    │   │   │       ├── thread-list.tsx
    │   │   │       ├── thread-welcome.tsx
    │   │   │       ├── thread.tsx
    │   │   │       ├── user-action-bar.tsx
    │   │   │       ├── user-message.tsx
    │   │   │       ├── base/
    │   │   │       │   ├── CircleStopIcon.tsx
    │   │   │       │   ├── avatar.tsx
    │   │   │       │   ├── button.tsx
    │   │   │       │   ├── dialog.tsx
    │   │   │       │   ├── index.ts
    │   │   │       │   ├── tooltip-icon-button.tsx
    │   │   │       │   └── tooltip.tsx
    │   │   │       ├── markdown/
    │   │   │       │   ├── code-header.tsx
    │   │   │       │   ├── markdown-text.tsx
    │   │   │       │   └── useCopyToClipboard.tsx
    │   │   │       └── utils/
    │   │   │           └── withDefaults.tsx
    │   │   └── tailwindcss/
    │   │       ├── README.md
    │   │       ├── package-lock.json
    │   │       └── package.json
    │   ├── tailwindcss-transformer/
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       └── index.ts
    │   ├── tool-ui-weather/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── package.json
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── scripts/
    │   │   │   └── build.mts
    │   │   └── src/
    │   │       ├── Weather.tsx
    │   │       └── index.ts
    │   ├── tsbuildutils/
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── src/
    │   │       └── index.ts
    │   └── tsconfig/
    │       ├── base.json
    │       ├── package-lock.json
    │       └── package.json
    ├── python/
    │   ├── assistant-stream/
    │   │   ├── README.md
    │   │   ├── LICENSE
    │   │   ├── poetry.lock
    │   │   ├── pyproject.toml
    │   │   └── src/
    │   │       └── assistant_stream/
    │   │           ├── __init__.py
    │   │           ├── assistant_stream_chunk.py
    │   │           ├── create_run.py
    │   │           ├── modules/
    │   │           │   ├── text.py
    │   │           │   └── tool_call.py
    │   │           └── serialization/
    │   │               ├── __init__.py
    │   │               ├── assistant_stream_response.py
    │   │               ├── data_stream.py
    │   │               ├── openai_stream.py
    │   │               └── stream_encoder.py
    │   └── assistant-stream-hello-world/
    │       ├── requirements.txt
    │       ├── .gitignore
    │       └── api/
    │           └── chat/
    │               └── completions/
    │                   └── index.py
    ├── .changeset/
    │   ├── README.md
    │   ├── config.json
    │   └── short-plants-march.md
    └── .github/
        ├── assets/
        └── workflows/
            ├── changeset.yaml
            ├── code-quality.yaml
            └── registry.yaml

================================================
File: README.md
================================================
<a href="https://www.assistant-ui.com">
  <img src="https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/header.svg" alt="assistant-ui Header" width="100%" style="width: 1000px" />
</a>

<p align="center">
  <a href="https://www.assistant-ui.com">Product</a> ·
  <a href="https://www.assistant-ui.com/docs/getting-started">Documentation</a> ·
  <a href="https://www.assistant-ui.com/examples">Examples</a> ·
  <a href="https://discord.gg/S9dwgCNEFs">Discord Community</a> ·
  <a href="https://cal.com/simon-farshid/assistant-ui">Contact Sales</a>
</p>

[![Weave Badge](https://img.shields.io/endpoint?url=https%3A%2F%2Fapp.workweave.ai%2Fapi%2Frepository%2Fbadge%2Forg_GhSIrtWo37b5B3Mv0At3wQ1Q%2F722184017&cacheSeconds=3600)](https://app.workweave.ai/reports/repository/org_GhSIrtWo37b5B3Mv0At3wQ1Q/722184017)
![Backed by Y Combinator](https://img.shields.io/badge/Backed_by-Y_Combinator-orange)

- [⭐️ Star us on GitHub](https://github.com/assistant-ui/assistant-ui)

## The UX of ChatGPT in your React app 💬🚀

**assistant-ui** is an open source Typescript/React library for AI chat.

The library handles essential chat features such as auto-scrolling, accessibility, and real-time updates, while providing easy integration with LangGraph, AI SDK and custom backends.

The API of assistant-ui is inspired by libraries like shadcn/ui and cmdk. Instead of a single monolithic chat component, developers get primitive components that can be fully customized.

We have wide model provider support (OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, Replicate, Ollama) out of the box and the ability to integrate custom APIs.

## Getting Started

You can get started by running `npx assistant-ui create` (new project) or `npx assistant-ui init` (existing project) in your terminal.

[![assistant-ui starter template](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/assistant-ui-starter.gif)](https://youtu.be/k6Dc8URmLjk)

## Features

- shadcn/ui
  - Radix UI-inspired primitives for AI Chat
  - Beautiful shadcn/ui theme to get you started
- Chat UI
  - Streaming, Auto-scrolling, Markdown, Code Highlighting, File Attachments, and more
- Keyboard shortcuts and accessibility features
- Generative UI
  - Map LLM tool calls and JSONs to custom UI components
- Frontend tool calls
  - Let LLMs take action in your frontend application
- Human tool calls
  - Human approvals and input collection
- Chat history and analytics
  - Sign up for assistant-cloud and configure by simply setting an environment variable

## Choose your backend

- AI SDK
  - First class integration into AI SDK by Vercel. Connect to any LLM provider supported by AI SDK.
- LangGraph
  - First class integration into LangGraph and LangGraph Cloud. Connect to any LLM provider supported by LangChain.
- Custom
  - Use assistant-ui as the visualization layer on top your own backend/streaming protocols.

## Customization

The API of assistant-ui is inspired by libraries like Radix UI and cmdk. Instead of a single monolithic chat component, we give you composable primitives and a great starter configuration. You have full control over the look and feel of every pixel while leaving auto-scrolling, LLM streaming and accessibility to us.

![Overview of components](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/components.png)

Sample customization to make a perplexity lookalike:

![Perplexity clone created with assistant-ui](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/perplexity.gif)

## **Demo Video**

[![Short Demo](https://img.youtube.com/vi/ZW56UHlqTCQ/hqdefault.jpg)](https://youtu.be/ZW56UHlqTCQ)

[![Long Demo](https://img.youtube.com/vi/9eLKs9AM4tU/hqdefault.jpg)](https://youtu.be/9eLKs9AM4tU)

## Traction

Hundreds of projects use assistant-ui to build in-app AI assistants, including companies like LangChain, AthenaIntelligence, Browser Use, and more.

With >50k+ monthly downloads, assistant-ui is the most popular UI library for AI chat.

<img src="https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/growth.png" alt="Growth" style="max-width: 400px;">

## 2025 Q1 Roadmap

- [x] Assistant Cloud
- [x] Chat Persistence
- [x] React 19, Tailwind v4, NextJS 19 support
- [x] Improved Markdown rendering performance
- [x] LangGraph `interrupt()` support
- [x] Open in v0 support
- [ ] Improved documentation (work in progress)
- [ ] OpenAI Realtime Voice (work in progress)
- [ ] Resume interrupted LLM calls (work in progress)
- [ ] Native PDF attachment support
- [ ] Follow-up suggestions

## Next Steps

- [Check out example demos](https://www.assistant-ui.com/)
- [Read our docs](https://www.assistant-ui.com/docs/)
- [Join our Discord](https://discord.com/invite/S9dwgCNEFs)
- [Book a sales call](https://cal.com/simon-farshid/assistant-ui)



================================================
File: CONTRIBUTING.md
================================================
## CONTRIBUTING

A big welcome and thank you for considering contributing to assistant-ui! It’s people like you that make it a reality for users in our community.

You can contribute by opening an issue, or by making a pull request. For large pull requests, we ask that you open an issue first to discuss the changes before submitting a pull request.

### Setting up your environment

You need to have Node.js installed on your computer. We develop with the latest LTS version of Node.js.

Install the dependencies:

```sh
pnpm install
```

Make an initial build:

```sh
pnpm turbo build
```

(some packages rely on build outputs from other packages, even if you want to start the project in development mode)

### Running the project

To run the docs project in development mode: 

```sh
cd apps/docs
pnpm dev
```

To run the examples project in development mode: 

```sh
cd examples/<your-example>
pnpm dev
```



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2025 AgentbaseAI Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: SECURITY.md
================================================
# Reporting Security Issues

We security bugs in assistant-ui seriously. We appreciate your efforts to responsibly disclose your findings, and will make every effort to acknowledge your contributions.

To report a security issue, please use the GitHub Security Advisory ["Report a Vulnerability"](https://github.com/assistant-ui/assistant-ui/security/advisories/new) tab.

Our team will send a response indicating the next steps in handling your report. After the initial reply to your report, the security team will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.



================================================
File: eslint.config.mjs
================================================
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

const config = [
    ...compat.config({
        extends: ["next/core-web-vitals", "next/typescript"],
        rules: {
            "@typescript-eslint/no-unused-vars": "off",
            "@typescript-eslint/no-namespace": "off",
            "@typescript-eslint/no-explicit-any": "off",
        },
    }),
    {
        ignores: ["**/tailwind.config.ts"],
    }
];

export default config;


================================================
File: package.json
================================================
{
  "name": "@assistant-ui/monorepo",
  "private": true,
  "scripts": {
    "docs:dev": "pnpm --filter=@assistant-ui/docs dev",
    "ci:version": "changeset version && pnpm install --no-frozen-lockfile",
    "ci:publish": "turbo build --filter=\"./packages/*\" && changeset publish",
    "eslint": "eslint",
    "prettier": "prettier \"{examples,packages,apps}/**/*.{js,jsx,ts,tsx}\" --check",
    "prettier:fix": "prettier \"{examples,packages,apps}/**/*.{js,jsx,ts,tsx}\" --write"
  },
  "devDependencies": {
    "@changesets/cli": "^2.28.1",
    "@eslint/eslintrc": "^3.3.0",
    "@eslint/js": "^9.21.0",
    "eslint": "^9",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "0.6.11",
    "turbo": "^2.4.4",
    "typescript": "^5.8.2"
  },
  "prettier": {
    "trailingComma": "all",
    "plugins": [
      "prettier-plugin-tailwindcss"
    ]
  },
  "packageManager": "pnpm@10.6.2",
  "resolutions": {
    "react": "19.0.0",
    "react-dom": "19.0.0"
  }
}



================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

overrides:
  react: 19.0.0
  react-dom: 19.0.0

importers:

  .:
    devDependencies:
      '@changesets/cli':
        specifier: ^2.28.1
        version: 2.28.1
      '@eslint/eslintrc':
        specifier: ^3.3.0
        version: 3.3.0
      '@eslint/js':
        specifier: ^9.21.0
        version: 9.22.0
      eslint:
        specifier: ^9
        version: 9.22.0(jiti@2.4.2)
      prettier:
        specifier: ^3.5.3
        version: 3.5.3
      prettier-plugin-tailwindcss:
        specifier: 0.6.11
        version: 0.6.11(prettier@3.5.3)
      turbo:
        specifier: ^2.4.4
        version: 2.4.4
      typescript:
        specifier: ^5.8.2
        version: 5.8.2

  apps/docs:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@ai-sdk/provider':
        specifier: ^1.0.7
        version: 1.0.7
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:*
        version: link:../../packages/react-ai-sdk
      '@assistant-ui/react-langgraph':
        specifier: workspace:*
        version: link:../../packages/react-langgraph
      '@assistant-ui/react-markdown':
        specifier: workspace:*
        version: link:../../packages/react-markdown
      '@assistant-ui/react-syntax-highlighter':
        specifier: workspace:*
        version: link:../../packages/react-syntax-highlighter
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@langchain/core':
        specifier: ^0.3.39
        version: 0.3.39(openai@4.83.0(zod@3.24.1))
      '@langchain/langgraph-sdk':
        specifier: ^0.0.37
        version: 0.0.37
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dialog':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.2
        version: 1.3.2(react@19.0.0)
      '@radix-ui/react-select':
        specifier: ^2.1.6
        version: 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/themes':
        specifier: ^3.2.0
        version: 3.2.0(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@sentry/nextjs':
        specifier: ^8
        version: 8.54.0(@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react@19.0.0)(webpack@5.97.1)
      '@shikijs/transformers':
        specifier: ^2.3.2
        version: 2.3.2
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      dotenv:
        specifier: ^16.4.7
        version: 16.4.7
      fast-glob:
        specifier: ^3.3.3
        version: 3.3.3
      fumadocs-core:
        specifier: 15.0.4
        version: 15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      fumadocs-mdx:
        specifier: 11.5.1
        version: 11.5.1(acorn@8.14.0)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))
      fumadocs-twoslash:
        specifier: ^3.0.0
        version: 3.0.0(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-ui@15.0.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(tailwindcss@4.0.4))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(shiki@2.3.2)(typescript@5.7.3)
      fumadocs-ui:
        specifier: 15.0.4
        version: 15.0.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(tailwindcss@4.0.4)
      geist:
        specifier: ^1.3.1
        version: 1.3.1(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      jsonwebtoken:
        specifier: ^9.0.2
        version: 9.0.2
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      motion:
        specifier: ^12.4.1
        version: 12.4.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      openai:
        specifier: ^4.83.0
        version: 4.83.0(zod@3.24.1)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.7(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react-syntax-highlighter:
        specifier: ^15.6.1
        version: 15.6.1(react@19.0.0)
      remark:
        specifier: ^15.0.1
        version: 15.0.1
      remark-gfm:
        specifier: ^4.0.0
        version: 4.0.0
      remark-mdx:
        specifier: ^3.1.0
        version: 3.1.0
      remark-stringify:
        specifier: ^11.0.0
        version: 11.0.0
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@4.0.4)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@tailwindcss/postcss':
        specifier: ^4.0.0
        version: 4.0.4
      '@types/jsonwebtoken':
        specifier: ^9.0.8
        version: 9.0.8
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      '@types/react':
        specifier: ^19.0.8
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19.0.3
        version: 19.0.3(@types/react@19.0.8)
      '@types/react-syntax-highlighter':
        specifier: ^15.5.13
        version: 15.5.13
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8.5.1
        version: 8.5.1
      tailwindcss:
        specifier: ^4.0.4
        version: 4.0.4
      ts-morph:
        specifier: ^25.0.1
        version: 25.0.1
      tsx:
        specifier: ^4.19.2
        version: 4.19.2
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  apps/registry:
    dependencies:
      ai:
        specifier: ^4.1.34
        version: 4.1.34(react@19.0.0)(zod@3.24.1)
    devDependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-markdown':
        specifier: workspace:*
        version: link:../../packages/react-markdown
      '@assistant-ui/react-syntax-highlighter':
        specifier: workspace:*
        version: link:../../packages/react-syntax-highlighter
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dialog':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.2
        version: 1.3.2(react@19.0.0)
      '@radix-ui/react-popover':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-syntax-highlighter':
        specifier: ^15.5.13
        version: 15.5.13
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.7(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react-syntax-highlighter:
        specifier: ^15.6.1
        version: 15.6.1(react@19.0.0)
      rehype-katex:
        specifier: ^7.0.1
        version: 7.0.1
      remark-gfm:
        specifier: ^4.0.0
        version: 4.0.0
      remark-math:
        specifier: ^6.0.0
        version: 6.0.0
      rimraf:
        specifier: ^6.0.1
        version: 6.0.1
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2
      typescript:
        specifier: ^5.7.3
        version: 5.7.3
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))

  examples/local-ollama:
    dependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-markdown':
        specifier: workspace:*
        version: link:../../packages/react-markdown
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      ollama-ai-provider:
        specifier: ^1.2.0
        version: 1.2.0(zod@3.24.1)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/search-agent-for-e-commerce:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:*
        version: link:../../packages/react-ai-sdk
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-popover':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      embla-carousel-autoplay:
        specifier: ^8.5.2
        version: 8.5.2(embla-carousel@8.5.2)
      embla-carousel-react:
        specifier: ^8.5.2
        version: 8.5.2(react@19.0.0)
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      '@types/react':
        specifier: ^19.0.8
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19.0.3
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8.5.1
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  examples/with-ai-sdk:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:^
        version: link:../../packages/react-ai-sdk
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/with-cloud:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:^
        version: link:../../packages/react-ai-sdk
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      jsonwebtoken:
        specifier: ^9.0.2
        version: 9.0.2
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/jsonwebtoken':
        specifier: ^9.0.8
        version: 9.0.8
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/with-external-store:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/with-ffmpeg:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-hook-form':
        specifier: workspace:*
        version: link:../../packages/react-hook-form
      '@assistant-ui/react-ui':
        specifier: workspace:*
        version: link:../../packages/react-ui
      '@ffmpeg/ffmpeg':
        specifier: ^0.12.15
        version: 0.12.15
      '@ffmpeg/util':
        specifier: ^0.12.2
        version: 0.12.2
      '@hookform/resolvers':
        specifier: ^3.10.0
        version: 3.10.0(react-hook-form@7.54.2(react@19.0.0))
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.2
        version: 1.3.2(react@19.0.0)
      '@radix-ui/react-label':
        specifier: ^2.1.2
        version: 2.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tabs':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@react-hook/media-query':
        specifier: ^1.1.1
        version: 1.1.1(react@19.0.0)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      json-schema-to-zod:
        specifier: ^2.6.0
        version: 2.6.0
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      react-hook-form:
        specifier: ^7.54.2
        version: 7.54.2(react@19.0.0)
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.7(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zod-to-json-schema:
        specifier: ^3.24.1
        version: 3.24.1(zod@3.24.1)
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  examples/with-inline-suggestions:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:*
        version: link:../../packages/react-ai-sdk
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/with-langgraph:
    dependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-langgraph':
        specifier: workspace:*
        version: link:../../packages/react-langgraph
      '@assistant-ui/react-markdown':
        specifier: workspace:*
        version: link:../../packages/react-markdown
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      '@langchain/langgraph-sdk':
        specifier: ^0.0.37
        version: 0.0.37
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      js-cookie:
        specifier: ^3.0.5
        version: 3.0.5
      jsonwebtoken:
        specifier: ^9.0.2
        version: 9.0.2
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/js-cookie':
        specifier: ^3.0.6
        version: 3.0.6
      '@types/jsonwebtoken':
        specifier: ^9.0.8
        version: 9.0.8
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  examples/with-openai-assistants:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:*
        version: link:../../packages/react-ai-sdk
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      openai:
        specifier: ^4.83.0
        version: 4.83.0(zod@3.24.1)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.7.3

  examples/with-react-hook-form:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-hook-form':
        specifier: workspace:*
        version: link:../../packages/react-hook-form
      '@assistant-ui/react-ui':
        specifier: workspace:^
        version: link:../../packages/react-ui
      '@hookform/resolvers':
        specifier: ^3.10.0
        version: 3.10.0(react-hook-form@7.54.2(react@19.0.0))
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.2
        version: 1.3.2(react@19.0.0)
      '@radix-ui/react-label':
        specifier: ^2.1.2
        version: 2.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tabs':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@react-hook/media-query':
        specifier: ^1.1.1
        version: 1.1.1(react@19.0.0)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      json-schema-to-zod:
        specifier: ^2.6.0
        version: 2.6.0
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      react-hook-form:
        specifier: ^7.54.2
        version: 7.54.2(react@19.0.0)
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.7(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zod-to-json-schema:
        specifier: ^3.24.1
        version: 3.24.1(zod@3.24.1)
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  examples/with-vercel-ai-rsc:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.1.9
        version: 1.1.9(zod@3.24.1)
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../../packages/react
      '@assistant-ui/react-ai-sdk':
        specifier: workspace:*
        version: link:../../packages/react-ai-sdk
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.2
        version: 1.3.2(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      ai:
        specifier: 4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      next:
        specifier: 15.1.6
        version: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tailwind-merge:
        specifier: ^3.0.1
        version: 3.0.1
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../../packages/tsconfig
      '@types/node':
        specifier: ^22
        version: 22.13.1
      '@types/react':
        specifier: ^19
        version: 19.0.8
      '@types/react-dom':
        specifier: ^19
        version: 19.0.3(@types/react@19.0.8)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      postcss:
        specifier: ^8
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5.7.3
        version: 5.7.3

  packages/assistant-stream:
    dependencies:
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      secure-json-parse:
        specifier: ^3.0.2
        version: 3.0.2
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      ai:
        specifier: ^4.1.25
        version: 4.1.25(react@19.0.0)(zod@3.24.1)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/cli:
    dependencies:
      chalk:
        specifier: ^5.4.1
        version: 5.4.1
      cli-progress:
        specifier: ^3.12.0
        version: 3.12.0
      commander:
        specifier: ^13.1.0
        version: 13.1.0
      cross-spawn:
        specifier: ^7.0.6
        version: 7.0.6
      debug:
        specifier: ^4.4.0
        version: 4.4.0
      detect-package-manager:
        specifier: ^3.0.2
        version: 3.0.2
      glob:
        specifier: ^11.0.1
        version: 11.0.1
      jscodeshift:
        specifier: ^17.1.2
        version: 17.1.2
    devDependencies:
      '@assistant-ui/tsbuildutils':
        specifier: workspace:^
        version: link:../tsbuildutils
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/cli-progress':
        specifier: ^3.11.6
        version: 3.11.6
      '@types/cross-spawn':
        specifier: ^6.0.6
        version: 6.0.6
      '@types/debug':
        specifier: ^4.1.12
        version: 4.1.12
      '@types/jscodeshift':
        specifier: ^0.12.0
        version: 0.12.0
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/create-assistant-ui:
    dependencies:
      chalk:
        specifier: ^5.4.1
        version: 5.4.1
      commander:
        specifier: ^13.1.0
        version: 13.1.0
      cosmiconfig:
        specifier: ^9.0.0
        version: 9.0.0(typescript@5.8.2)
      cross-spawn:
        specifier: ^7.0.6
        version: 7.0.6
      tsconfig-paths:
        specifier: ^4.2.0
        version: 4.2.0
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@assistant-ui/tsbuildutils':
        specifier: workspace:^
        version: link:../tsbuildutils
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/cross-spawn':
        specifier: ^6.0.6
        version: 6.0.6
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/react:
    dependencies:
      '@ai-sdk/provider':
        specifier: ^1.0.7
        version: 1.0.7
      '@radix-ui/primitive':
        specifier: ^1.1.1
        version: 1.1.1
      '@radix-ui/react-compose-refs':
        specifier: ^1.1.1
        version: 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context':
        specifier: ^1.1.1
        version: 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-popover':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive':
        specifier: ^2.0.2
        version: 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot':
        specifier: ^1.1.2
        version: 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-callback-ref':
        specifier: ^1.1.0
        version: 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-escape-keydown':
        specifier: ^1.1.0
        version: 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@types/react':
        specifier: '*'
        version: 19.0.8
      '@types/react-dom':
        specifier: '*'
        version: 19.0.3(@types/react@19.0.8)
      assistant-stream:
        specifier: workspace:^
        version: link:../assistant-stream
      json-schema:
        specifier: ^0.4.0
        version: 0.4.0
      nanoid:
        specifier: 3.3.8
        version: 3.3.8
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      react-textarea-autosize:
        specifier: ^8.5.7
        version: 8.5.7(@types/react@19.0.8)(react@19.0.0)
      secure-json-parse:
        specifier: ^3.0.2
        version: 3.0.2
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zod-to-json-schema:
        specifier: ^3.24.1
        version: 3.24.1(zod@3.24.1)
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@assistant-ui/tsbuildutils':
        specifier: workspace:^
        version: link:../tsbuildutils
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/json-schema':
        specifier: ^7.0.15
        version: 7.0.15
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/react-ai-sdk:
    dependencies:
      '@ai-sdk/react':
        specifier: '*'
        version: 1.1.10(react@19.0.0)(zod@3.24.1)
      '@ai-sdk/ui-utils':
        specifier: '*'
        version: 1.1.10(zod@3.24.1)
      '@radix-ui/react-use-callback-ref':
        specifier: ^1.1.0
        version: 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@types/react':
        specifier: '*'
        version: 19.0.8
      react:
        specifier: 19.0.0
        version: 19.0.0
      zod:
        specifier: ^3.24.1
        version: 3.24.1
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../react
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)

  packages/react-hook-form:
    dependencies:
      '@types/react':
        specifier: '*'
        version: 19.0.8
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-hook-form:
        specifier: ^7
        version: 7.54.2(react@19.0.0)
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../react
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)

  packages/react-langgraph:
    dependencies:
      '@types/react':
        specifier: '*'
        version: 19.0.8
      react:
        specifier: 19.0.0
        version: 19.0.0
      uuid:
        specifier: ^11.0.5
        version: 11.0.5
      zod:
        specifier: ^3.24.1
        version: 3.24.1
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../react
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)

  packages/react-markdown:
    dependencies:
      '@radix-ui/react-primitive':
        specifier: ^2.0.2
        version: 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref':
        specifier: ^1.1.0
        version: 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/react':
        specifier: '*'
        version: 19.0.8
      classnames:
        specifier: ^2.5.1
        version: 2.5.1
      react-markdown:
        specifier: ^9.0.3
        version: 9.0.3(@types/react@19.0.8)(react@19.0.0)
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../react
      '@assistant-ui/tsbuildutils':
        specifier: workspace:^
        version: link:../tsbuildutils
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/react-syntax-highlighter:
    dependencies:
      '@types/react':
        specifier: '*'
        version: 19.0.8
      '@types/react-syntax-highlighter':
        specifier: '*'
        version: 15.5.13
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-syntax-highlighter:
        specifier: ^15.5.0
        version: 15.6.1(react@19.0.0)
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:*
        version: link:../react
      '@assistant-ui/react-markdown':
        specifier: workspace:*
        version: link:../react-markdown
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)

  packages/react-ui:
    dependencies:
      '@radix-ui/react-avatar':
        specifier: ^1.1.3
        version: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dialog':
        specifier: ^1.1.6
        version: 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive':
        specifier: ^2.0.2
        version: 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.1.8
        version: 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@types/react':
        specifier: '*'
        version: 19.0.8
      '@types/react-dom':
        specifier: '*'
        version: 19.0.3(@types/react@19.0.8)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      classnames:
        specifier: ^2.5.1
        version: 2.5.1
      lucide-react:
        specifier: ^0.475.0
        version: 0.475.0(react@19.0.0)
      react:
        specifier: 19.0.0
        version: 19.0.0
      react-dom:
        specifier: 19.0.0
        version: 19.0.0(react@19.0.0)
      zustand:
        specifier: ^5.0.3
        version: 5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0))
    devDependencies:
      '@assistant-ui/react':
        specifier: workspace:^
        version: link:../react
      '@assistant-ui/react-markdown':
        specifier: workspace:^
        version: link:../react-markdown
      '@assistant-ui/tailwindcss-transformer':
        specifier: workspace:*
        version: link:../tailwindcss-transformer
      '@assistant-ui/tsbuildutils':
        specifier: workspace:^
        version: link:../tsbuildutils
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      autoprefixer:
        specifier: ^10.4.20
        version: 10.4.20(postcss@8.5.1)
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      postcss:
        specifier: ^8.5.1
        version: 8.5.1
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/tailwindcss-transformer:
    dependencies:
      postcss:
        specifier: ^8.5.1
        version: 8.5.1
      postcss-value-parser:
        specifier: ^4.2.0
        version: 4.2.0
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)

  packages/tool-ui-weather:
    dependencies:
      '@types/react':
        specifier: '*'
        version: 19.0.8
      react:
        specifier: 19.0.0
        version: 19.0.0
    devDependencies:
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      eslint:
        specifier: ^9
        version: 9.20.0(jiti@2.4.2)
      eslint-config-next:
        specifier: 15.1.6
        version: 15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0)
      tsx:
        specifier: ^4.19.2
        version: 4.19.2

  packages/tsbuildutils:
    dependencies:
      '@assistant-ui/tailwindcss-transformer':
        specifier: workspace:^
        version: link:../tailwindcss-transformer
      '@assistant-ui/tsconfig':
        specifier: workspace:*
        version: link:../tsconfig
      cross-spawn:
        specifier: ^7.0.6
        version: 7.0.6
      esbuild-plugin-file-path-extensions:
        specifier: ^2.1.4
        version: 2.1.4
      postcss:
        specifier: ^8.5.1
        version: 8.5.1
      postcss-js:
        specifier: ^4.0.1
        version: 4.0.1(postcss@8.5.1)
      tsup:
        specifier: 8.3.6
        version: 8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.7.3)(yaml@2.7.0)
      typescript:
        specifier: ^5.7.3
        version: 5.7.3
    devDependencies:
      '@types/cross-spawn':
        specifier: ^6.0.6
        version: 6.0.6
      '@types/node':
        specifier: ^22.13.1
        version: 22.13.1
      '@types/postcss-js':
        specifier: ^4.0.4
        version: 4.0.4

  packages/tsconfig:
    dependencies:
      '@tsconfig/strictest':
        specifier: ^2.0.5
        version: 2.0.5

packages:

  '@ai-sdk/openai@1.1.9':
    resolution: {integrity: sha512-t/CpC4TLipdbgBJTMX/otzzqzCMBSPQwUOkYPGbT/jyuC86F+YO9o+LS0Ty2pGUE1kyT+B3WmJ318B16ZCg4hw==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0

  '@ai-sdk/provider-utils@2.1.6':
    resolution: {integrity: sha512-Pfyaj0QZS22qyVn5Iz7IXcJ8nKIKlu2MeSAdKJzTwkAks7zdLaKVB+396Rqcp1bfQnxl7vaduQVMQiXUrgK8Gw==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  '@ai-sdk/provider@1.0.7':
    resolution: {integrity: sha512-q1PJEZ0qD9rVR+8JFEd01/QM++csMT5UVwYXSN2u54BrVw/D8TZLTeg2FEfKK00DgAx0UtWd8XOhhwITP9BT5g==}
    engines: {node: '>=18'}

  '@ai-sdk/react@1.1.10':
    resolution: {integrity: sha512-RTkEVYKq7qO6Ct3XdVTgbaCTyjX+q1HLqb+t2YvZigimzMCQbHkpZCtt2H2Fgpt1UOTqnAAlXjEAgTW3X60Y9g==}
    engines: {node: '>=18'}
    peerDependencies:
      react: 19.0.0
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  '@ai-sdk/react@1.1.11':
    resolution: {integrity: sha512-vfjZ7w2M+Me83HTMMrnnrmXotz39UDCMd27YQSrvt2f1YCLPloVpLhP+Y9TLZeFE/QiiRCrPYLDQm6aQJYJ9PQ==}
    engines: {node: '>=18'}
    peerDependencies:
      react: 19.0.0
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  '@ai-sdk/ui-utils@1.1.10':
    resolution: {integrity: sha512-x+A1Nfy8RTSatdCe+7nRpHAZVzPFB6H+r+2JKoapSvrwsu9mw2pAbmFgV8Zaj94TsmUdTlO0/j97e63f+yYuWg==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  '@ai-sdk/ui-utils@1.1.11':
    resolution: {integrity: sha512-1SC9W4VZLcJtxHRv4Y0aX20EFeaEP6gUvVqoKLBBtMLOgtcZrv/F/HQRjGavGugiwlS3dsVza4X+E78fiwtlTA==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.26.5':
    resolution: {integrity: sha512-XvcZi1KWf88RVbF9wn8MN6tYFloU5qX8KjuF3E1PVBmJ9eypXfs4GRiJwLuTZL0iSnJUKn1BFPa5BPZZJyFzPg==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.26.7':
    resolution: {integrity: sha512-SRijHmF0PSPgLIBYlWnG0hyeJLwXE2CgpsXaMOrtt2yp9/86ALw6oUlj9KYuZ0JN07T4eBMVIW4li/9S1j2BGA==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.26.5':
    resolution: {integrity: sha512-2caSP6fN9I7HOe6nqhtft7V4g7/V/gfDsC3Ag4W7kEzzvRGKqiv0pu0HogPiZ3KaVSoNDhUws6IJjDjpfmYIXw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-annotate-as-pure@7.25.9':
    resolution: {integrity: sha512-gv7320KBUFJz1RnylIg5WWYPRXKZ884AGkYpgpWW02TH66Dl+HaC1t1CKd0z3R4b6hdYEcmrNZHUmfCP+1u3/g==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.26.5':
    resolution: {integrity: sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-create-class-features-plugin@7.25.9':
    resolution: {integrity: sha512-UTZQMvt0d/rSz6KI+qdu7GQze5TIajwTS++GUozlw8VBJDEOAqSXwm1WvmYEZwqdqSGQshRocPDqrt4HBZB3fQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-member-expression-to-functions@7.25.9':
    resolution: {integrity: sha512-wbfdZ9w5vk0C0oyHqAJbc62+vet5prjj01jjJ8sKn3j9h3MQQlflEdXYvuqRWjHnM12coDEqiC1IRCi0U/EKwQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.25.9':
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.26.0':
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-optimise-call-expression@7.25.9':
    resolution: {integrity: sha512-FIpuNaz5ow8VyrYcnXQTDRGvV6tTjkNtCK/RYNDXGSLlUD6cBuQTSw43CShGxjvfBTfcUA/r6UhUCbtYqkhcuQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-plugin-utils@7.26.5':
    resolution: {integrity: sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-replace-supers@7.26.5':
    resolution: {integrity: sha512-bJ6iIVdYX1YooY2X7w1q6VITt+LnUILtNk7zT78ykuwStx8BauCzxvFqFaHjOpW1bVnSUM1PN1f0p5P21wHxvg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-skip-transparent-expression-wrappers@7.25.9':
    resolution: {integrity: sha512-K4Du3BFa3gvyhzgPcntrkDgZzQaq6uozzcpGbOO1OEJaI+EJdqWIMTLgFgQf6lrfiDFo5FU+BxKepI9RmZqahA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.25.9':
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.26.7':
    resolution: {integrity: sha512-8NHiL98vsi0mbPQmYAGWwfcFaOy4j2HY49fXJCfuDcdE7fMIsH9a7GdaeXpIBsbT7307WU8KCMp5pUVDNL4f9A==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.26.7':
    resolution: {integrity: sha512-kEvgGGgEjRUutvdVvZhbn/BxVt+5VSpwXz1j3WYXQbXDo8KzFOPNG2GQbdAiNq8g6wn1yKk7C/qrke03a84V+w==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-flow@7.26.0':
    resolution: {integrity: sha512-B+O2DnPc0iG+YXFqOxv2WNuNU97ToWjOomUQ78DouOENWUaM5sVrmet9mcomUGQFwpJd//gvUagXBSdzO1fRKg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.25.9':
    resolution: {integrity: sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.25.9':
    resolution: {integrity: sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-class-properties@7.25.9':
    resolution: {integrity: sha512-bbMAII8GRSkcd0h0b4X+36GksxuheLFjP65ul9w6C3KgAamI3JqErNgSrosX6ZPj+Mpim5VvEbawXxJCyEUV3Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-flow-strip-types@7.26.5':
    resolution: {integrity: sha512-eGK26RsbIkYUns3Y8qKl362juDDYK+wEdPGHGrhzUl6CewZFo55VZ7hg+CyMFU4dd5QQakBN86nBMpRsFpRvbQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-commonjs@7.26.3':
    resolution: {integrity: sha512-MgR55l4q9KddUDITEzEFYn5ZsGDXMSsU9E+kh7fjRXTIC3RHqfCo8RPRbyReYJh44HQ/yomFkqbOFohXvDCiIQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-nullish-coalescing-operator@7.26.6':
    resolution: {integrity: sha512-CKW8Vu+uUZneQCPtXmSBUC6NCAUdya26hWCElAWh5mVSlSRsmiCPUUDKb3Z0szng1hiAJa098Hkhg9o4SE35Qw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-optional-chaining@7.25.9':
    resolution: {integrity: sha512-6AvV0FsLULbpnXeBjrY4dmWF8F7gf8QnvTEoO/wX/5xm/xE1Xo8oPuD3MPS+KS9f9XBEAWN7X1aWr4z9HdOr7A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-private-methods@7.25.9':
    resolution: {integrity: sha512-D/JUozNpQLAPUVusvqMxyvjzllRaF8/nSrP1s2YGQT/W4LHK4xxsMcHjhOGTS01mp9Hda8nswb+FblLdJornQw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typescript@7.26.7':
    resolution: {integrity: sha512-5cJurntg+AT+cgelGP9Bt788DKiAw9gIMSMU2NJrLAilnj0m8WZWUNZPSLOmadYsujHutpgElO+50foX+ib/Wg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-flow@7.25.9':
    resolution: {integrity: sha512-EASHsAhE+SSlEzJ4bzfusnXSHiU+JfAYzj+jbw2vgQKgq5HrUr8qs+vgtiEL5dOH6sEweI+PNt2D7AqrDSHyqQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-typescript@7.26.0':
    resolution: {integrity: sha512-NMk1IGZ5I/oHhoXEElcm+xUnL/szL6xflkFZmoEU9xj1qSJXpiS7rsspYo92B4DRCDvZn2erT5LdsCeXAKNCkg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/register@7.25.9':
    resolution: {integrity: sha512-8D43jXtGsYmEeDvm4MWHYUpWf8iiXgWYx3fW7E7Wb7Oe6FWqJPl5K6TuFW0dOwNZzEE5rjlaSJYH9JjrUKJszA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/runtime@7.26.7':
    resolution: {integrity: sha512-AOPI3D+a8dXnja+iwsUqGRjr1BbZIe771sXdapOtYI531gSqpi92vXivKcq2asu/DFpdl1ceFAKZyRzK2PCVcQ==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.25.9':
    resolution: {integrity: sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.26.7':
    resolution: {integrity: sha512-1x1sgeyRLC3r5fQOM0/xtQKsYjyxmFjaOrLJNtZ81inNjyJHGIolTULPiSc/2qe1/qfpFLisLQYFnnZl7QoedA==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.26.7':
    resolution: {integrity: sha512-t8kDRGrKXyp6+tjUh7hw2RLyclsW4TRoRvRHtSyAX9Bb5ldlFh+90YAYY6awRXrlB4G5G2izNeGySpATlFzmOg==}
    engines: {node: '>=6.9.0'}

  '@cfworker/json-schema@4.1.1':
    resolution: {integrity: sha512-gAmrUZSGtKc3AiBL71iNWxDsyUC5uMaKKGdvzYsBoTW/xi42JQHl7eKV2OYzCUqvc+D2RCcf7EXY2iCyFIk6og==}

  '@changesets/apply-release-plan@7.0.10':
    resolution: {integrity: sha512-wNyeIJ3yDsVspYvHnEz1xQDq18D9ifed3lI+wxRQRK4pArUcuHgCTrHv0QRnnwjhVCQACxZ+CBih3wgOct6UXw==}

  '@changesets/assemble-release-plan@6.0.6':
    resolution: {integrity: sha512-Frkj8hWJ1FRZiY3kzVCKzS0N5mMwWKwmv9vpam7vt8rZjLL1JMthdh6pSDVSPumHPshTTkKZ0VtNbE0cJHZZUg==}

  '@changesets/changelog-git@0.2.1':
    resolution: {integrity: sha512-x/xEleCFLH28c3bQeQIyeZf8lFXyDFVn1SgcBiR2Tw/r4IAWlk1fzxCEZ6NxQAjF2Nwtczoen3OA2qR+UawQ8Q==}

  '@changesets/cli@2.28.1':
    resolution: {integrity: sha512-PiIyGRmSc6JddQJe/W1hRPjiN4VrMvb2VfQ6Uydy2punBioQrsxppyG5WafinKcW1mT0jOe/wU4k9Zy5ff21AA==}
    hasBin: true

  '@changesets/config@3.1.1':
    resolution: {integrity: sha512-bd+3Ap2TKXxljCggI0mKPfzCQKeV/TU4yO2h2C6vAihIo8tzseAn2e7klSuiyYYXvgu53zMN1OeYMIQkaQoWnA==}

  '@changesets/errors@0.2.0':
    resolution: {integrity: sha512-6BLOQUscTpZeGljvyQXlWOItQyU71kCdGz7Pi8H8zdw6BI0g3m43iL4xKUVPWtG+qrrL9DTjpdn8eYuCQSRpow==}

  '@changesets/get-dependents-graph@2.1.3':
    resolution: {integrity: sha512-gphr+v0mv2I3Oxt19VdWRRUxq3sseyUpX9DaHpTUmLj92Y10AGy+XOtV+kbM6L/fDcpx7/ISDFK6T8A/P3lOdQ==}

  '@changesets/get-release-plan@4.0.8':
    resolution: {integrity: sha512-MM4mq2+DQU1ZT7nqxnpveDMTkMBLnwNX44cX7NSxlXmr7f8hO6/S2MXNiXG54uf/0nYnefv0cfy4Czf/ZL/EKQ==}

  '@changesets/get-version-range-type@0.4.0':
    resolution: {integrity: sha512-hwawtob9DryoGTpixy1D3ZXbGgJu1Rhr+ySH2PvTLHvkZuQ7sRT4oQwMh0hbqZH1weAooedEjRsbrWcGLCeyVQ==}

  '@changesets/git@3.0.2':
    resolution: {integrity: sha512-r1/Kju9Y8OxRRdvna+nxpQIsMsRQn9dhhAZt94FLDeu0Hij2hnOozW8iqnHBgvu+KdnJppCveQwK4odwfw/aWQ==}

  '@changesets/logger@0.1.1':
    resolution: {integrity: sha512-OQtR36ZlnuTxKqoW4Sv6x5YIhOmClRd5pWsjZsddYxpWs517R0HkyiefQPIytCVh4ZcC5x9XaG8KTdd5iRQUfg==}

  '@changesets/parse@0.4.1':
    resolution: {integrity: sha512-iwksMs5Bf/wUItfcg+OXrEpravm5rEd9Bf4oyIPL4kVTmJQ7PNDSd6MDYkpSJR1pn7tz/k8Zf2DhTCqX08Ou+Q==}

  '@changesets/pre@2.0.2':
    resolution: {integrity: sha512-HaL/gEyFVvkf9KFg6484wR9s0qjAXlZ8qWPDkTyKF6+zqjBe/I2mygg3MbpZ++hdi0ToqNUF8cjj7fBy0dg8Ug==}

  '@changesets/read@0.6.3':
    resolution: {integrity: sha512-9H4p/OuJ3jXEUTjaVGdQEhBdqoT2cO5Ts95JTFsQyawmKzpL8FnIeJSyhTDPW1MBRDnwZlHFEM9SpPwJDY5wIg==}

  '@changesets/should-skip-package@0.1.2':
    resolution: {integrity: sha512-qAK/WrqWLNCP22UDdBTMPH5f41elVDlsNyat180A33dWxuUDyNpg6fPi/FyTZwRriVjg0L8gnjJn2F9XAoF0qw==}

  '@changesets/types@4.1.0':
    resolution: {integrity: sha512-LDQvVDv5Kb50ny2s25Fhm3d9QSZimsoUGBsUioj6MC3qbMUCuC8GPIvk/M6IvXx3lYhAs0lwWUQLb+VIEUCECw==}

  '@changesets/types@6.1.0':
    resolution: {integrity: sha512-rKQcJ+o1nKNgeoYRHKOS07tAMNd3YSN0uHaJOZYjBAgxfV7TUE7JE+z4BzZdQwb5hKaYbayKN5KrYV7ODb2rAA==}

  '@changesets/write@0.4.0':
    resolution: {integrity: sha512-CdTLvIOPiCNuH71pyDu3rA+Q0n65cmAbXnwWH84rKGiFumFzkmHNT8KHTMEchcxN+Kl8I54xGUhJ7l3E7X396Q==}

  '@emnapi/runtime@1.3.1':
    resolution: {integrity: sha512-kEBmG8KyqtxJZv+ygbEim+KCGtIq1fC22Ms3S4ziXmYKm8uyoLX0MHONVKwp+9opg390VaKRNt4a7A9NwmpNhw==}

  '@esbuild/aix-ppc64@0.23.1':
    resolution: {integrity: sha512-6VhYk1diRqrhBAqpJEdjASR/+WVRtfjpqKuNw11cLiaWpAT/Uu+nokB+UJnevzy/P9C/ty6AOe0dwueMrGh/iQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/aix-ppc64@0.24.2':
    resolution: {integrity: sha512-thpVCb/rhxE/BnMLQ7GReQLLN8q9qbHmI55F4489/ByVg2aQaQ6kbcLb6FHkocZzQhxc4gx0sCk0tJkKBFzDhA==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.23.1':
    resolution: {integrity: sha512-xw50ipykXcLstLeWH7WRdQuysJqejuAGPd30vd1i5zSyKK3WE+ijzHmLKxdiCMtH1pHz78rOg0BKSYOSB/2Khw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.24.2':
    resolution: {integrity: sha512-cNLgeqCqV8WxfcTIOeL4OAtSmL8JjcN6m09XIgro1Wi7cF4t/THaWEa7eL5CMoMBdjoHOTh/vwTO/o2TRXIyzg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.23.1':
    resolution: {integrity: sha512-uz6/tEy2IFm9RYOyvKl88zdzZfwEfKZmnX9Cj1BHjeSGNuGLuMD1kR8y5bteYmwqKm1tj8m4cb/aKEorr6fHWQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.24.2':
    resolution: {integrity: sha512-tmwl4hJkCfNHwFB3nBa8z1Uy3ypZpxqxfTQOcHX+xRByyYgunVbZ9MzUUfb0RxaHIMnbHagwAxuTL+tnNM+1/Q==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.23.1':
    resolution: {integrity: sha512-nlN9B69St9BwUoB+jkyU090bru8L0NA3yFvAd7k8dNsVH8bi9a8cUAUSEcEEgTp2z3dbEDGJGfP6VUnkQnlReg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.24.2':
    resolution: {integrity: sha512-B6Q0YQDqMx9D7rvIcsXfmJfvUYLoP722bgfBlO5cGvNVb5V/+Y7nhBE3mHV9OpxBf4eAS2S68KZztiPaWq4XYw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.23.1':
    resolution: {integrity: sha512-YsS2e3Wtgnw7Wq53XXBLcV6JhRsEq8hkfg91ESVadIrzr9wO6jJDMZnCQbHm1Guc5t/CdDiFSSfWP58FNuvT3Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.24.2':
    resolution: {integrity: sha512-kj3AnYWc+CekmZnS5IPu9D+HWtUI49hbnyqk0FLEJDbzCIQt7hg7ucF1SQAilhtYpIujfaHr6O0UHlzzSPdOeA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.23.1':
    resolution: {integrity: sha512-aClqdgTDVPSEGgoCS8QDG37Gu8yc9lTHNAQlsztQ6ENetKEO//b8y31MMu2ZaPbn4kVsIABzVLXYLhCGekGDqw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.24.2':
    resolution: {integrity: sha512-WeSrmwwHaPkNR5H3yYfowhZcbriGqooyu3zI/3GGpF8AyUdsrrP0X6KumITGA9WOyiJavnGZUwPGvxvwfWPHIA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.23.1':
    resolution: {integrity: sha512-h1k6yS8/pN/NHlMl5+v4XPfikhJulk4G+tKGFIOwURBSFzE8bixw1ebjluLOjfwtLqY0kewfjLSrO6tN2MgIhA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.24.2':
    resolution: {integrity: sha512-UN8HXjtJ0k/Mj6a9+5u6+2eZ2ERD7Edt1Q9IZiB5UZAIdPnVKDoG7mdTVGhHJIeEml60JteamR3qhsr1r8gXvg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.23.1':
    resolution: {integrity: sha512-lK1eJeyk1ZX8UklqFd/3A60UuZ/6UVfGT2LuGo3Wp4/z7eRTRYY+0xOu2kpClP+vMTi9wKOfXi2vjUpO1Ro76g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.24.2':
    resolution: {integrity: sha512-TvW7wE/89PYW+IevEJXZ5sF6gJRDY/14hyIGFXdIucxCsbRmLUcjseQu1SyTko+2idmCw94TgyaEZi9HUSOe3Q==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.23.1':
    resolution: {integrity: sha512-/93bf2yxencYDnItMYV/v116zff6UyTjo4EtEQjUBeGiVpMmffDNUyD9UN2zV+V3LRV3/on4xdZ26NKzn6754g==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.24.2':
    resolution: {integrity: sha512-7HnAD6074BW43YvvUmE/35Id9/NB7BeX5EoNkK9obndmZBUk8xmJJeU7DwmUeN7tkysslb2eSl6CTrYz6oEMQg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.23.1':
    resolution: {integrity: sha512-CXXkzgn+dXAPs3WBwE+Kvnrf4WECwBdfjfeYHpMeVxWE0EceB6vhWGShs6wi0IYEqMSIzdOF1XjQ/Mkm5d7ZdQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.24.2':
    resolution: {integrity: sha512-n0WRM/gWIdU29J57hJyUdIsk0WarGd6To0s+Y+LwvlC55wt+GT/OgkwoXCXvIue1i1sSNWblHEig00GBWiJgfA==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.23.1':
    resolution: {integrity: sha512-VTN4EuOHwXEkXzX5nTvVY4s7E/Krz7COC8xkftbbKRYAl96vPiUssGkeMELQMOnLOJ8k3BY1+ZY52tttZnHcXQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.24.2':
    resolution: {integrity: sha512-sfv0tGPQhcZOgTKO3oBE9xpHuUqguHvSo4jl+wjnKwFpapx+vUDcawbwPNuBIAYdRAvIDBfZVvXprIj3HA+Ugw==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.23.1':
    resolution: {integrity: sha512-Vx09LzEoBa5zDnieH8LSMRToj7ir/Jeq0Gu6qJ/1GcBq9GkfoEAoXvLiW1U9J1qE/Y/Oyaq33w5p2ZWrNNHNEw==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.24.2':
    resolution: {integrity: sha512-CN9AZr8kEndGooS35ntToZLTQLHEjtVB5n7dl8ZcTZMonJ7CCfStrYhrzF97eAecqVbVJ7APOEe18RPI4KLhwQ==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.23.1':
    resolution: {integrity: sha512-nrFzzMQ7W4WRLNUOU5dlWAqa6yVeI0P78WKGUo7lg2HShq/yx+UYkeNSE0SSfSure0SqgnsxPvmAUu/vu0E+3Q==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.24.2':
    resolution: {integrity: sha512-iMkk7qr/wl3exJATwkISxI7kTcmHKE+BlymIAbHO8xanq/TjHaaVThFF6ipWzPHryoFsesNQJPE/3wFJw4+huw==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.23.1':
    resolution: {integrity: sha512-dKN8fgVqd0vUIjxuJI6P/9SSSe/mB9rvA98CSH2sJnlZ/OCZWO1DJvxj8jvKTfYUdGfcq2dDxoKaC6bHuTlgcw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.24.2':
    resolution: {integrity: sha512-shsVrgCZ57Vr2L8mm39kO5PPIb+843FStGt7sGGoqiiWYconSxwTiuswC1VJZLCjNiMLAMh34jg4VSEQb+iEbw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.23.1':
    resolution: {integrity: sha512-5AV4Pzp80fhHL83JM6LoA6pTQVWgB1HovMBsLQ9OZWLDqVY8MVobBXNSmAJi//Csh6tcY7e7Lny2Hg1tElMjIA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.24.2':
    resolution: {integrity: sha512-4eSFWnU9Hhd68fW16GD0TINewo1L6dRrB+oLNNbYyMUAeOD2yCK5KXGK1GH4qD/kT+bTEXjsyTCiJGHPZ3eM9Q==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.23.1':
    resolution: {integrity: sha512-9ygs73tuFCe6f6m/Tb+9LtYxWR4c9yg7zjt2cYkjDbDpV/xVn+68cQxMXCjUpYwEkze2RcU/rMnfIXNRFmSoDw==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.24.2':
    resolution: {integrity: sha512-S0Bh0A53b0YHL2XEXC20bHLuGMOhFDO6GN4b3YjRLK//Ep3ql3erpNcPlEFed93hsQAjAQDNsvcK+hV90FubSw==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.23.1':
    resolution: {integrity: sha512-EV6+ovTsEXCPAp58g2dD68LxoP/wK5pRvgy0J/HxPGB009omFPv3Yet0HiaqvrIrgPTBuC6wCH1LTOY91EO5hQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.24.2':
    resolution: {integrity: sha512-8Qi4nQcCTbLnK9WoMjdC9NiTG6/E38RNICU6sUNqK0QFxCYgoARqVqxdFmWkdonVsvGqWhmm7MO0jyTqLqwj0Q==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.24.2':
    resolution: {integrity: sha512-wuLK/VztRRpMt9zyHSazyCVdCXlpHkKm34WUyinD2lzK07FAHTq0KQvZZlXikNWkDGoT6x3TD51jKQ7gMVpopw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.23.1':
    resolution: {integrity: sha512-aevEkCNu7KlPRpYLjwmdcuNz6bDFiE7Z8XC4CPqExjTvrHugh28QzUXVOZtiYghciKUacNktqxdpymplil1beA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.24.2':
    resolution: {integrity: sha512-VefFaQUc4FMmJuAxmIHgUmfNiLXY438XrL4GDNV1Y1H/RW3qow68xTwjZKfj/+Plp9NANmzbH5R40Meudu8mmw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.23.1':
    resolution: {integrity: sha512-3x37szhLexNA4bXhLrCC/LImN/YtWis6WXr1VESlfVtVeoFJBRINPJ3f0a/6LV8zpikqoUg4hyXw0sFBt5Cr+Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-arm64@0.24.2':
    resolution: {integrity: sha512-YQbi46SBct6iKnszhSvdluqDmxCJA+Pu280Av9WICNwQmMxV7nLRHZfjQzwbPs3jeWnuAhE9Jy0NrnJ12Oz+0A==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.23.1':
    resolution: {integrity: sha512-aY2gMmKmPhxfU+0EdnN+XNtGbjfQgwZj43k8G3fyrDM/UdZww6xrWxmDkuz2eCZchqVeABjV5BpildOrUbBTqA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.24.2':
    resolution: {integrity: sha512-+iDS6zpNM6EnJyWv0bMGLWSWeXGN/HTaF/LXHXHwejGsVi+ooqDfMCCTerNFxEkM3wYVcExkeGXNqshc9iMaOA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.23.1':
    resolution: {integrity: sha512-RBRT2gqEl0IKQABT4XTj78tpk9v7ehp+mazn2HbUeZl1YMdaGAQqhapjGTCe7uw7y0frDi4gS0uHzhvpFuI1sA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.24.2':
    resolution: {integrity: sha512-hTdsW27jcktEvpwNHJU4ZwWFGkz2zRJUz8pvddmXPtXDzVKTTINmlmga3ZzwcuMpUvLw7JkLy9QLKyGpD2Yxig==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.23.1':
    resolution: {integrity: sha512-4O+gPR5rEBe2FpKOVyiJ7wNDPA8nGzDuJ6gN4okSA1gEOYZ67N8JPk58tkWtdtPeLz7lBnY6I5L3jdsr3S+A6A==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.24.2':
    resolution: {integrity: sha512-LihEQ2BBKVFLOC9ZItT9iFprsE9tqjDjnbulhHoFxYQtQfai7qfluVODIYxt1PgdoyQkz23+01rzwNwYfutxUQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.23.1':
    resolution: {integrity: sha512-BcaL0Vn6QwCwre3Y717nVHZbAa4UBEigzFm6VdsVdT/MbZ38xoj1X9HPkZhbmaBGUD1W8vxAfffbDe8bA6AKnQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.24.2':
    resolution: {integrity: sha512-q+iGUwfs8tncmFC9pcnD5IvRHAzmbwQ3GPS5/ceCyHdjXubwQWI12MKWSNSMYLJMq23/IUCvJMS76PDqXe1fxA==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.23.1':
    resolution: {integrity: sha512-BHpFFeslkWrXWyUPnbKm+xYYVYruCinGcftSBaa8zoF9hZO4BcSCFUvHVTtzpIY6YzUnYtuEhZ+C9iEXjxnasg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.24.2':
    resolution: {integrity: sha512-7VTgWzgMGvup6aSqDPLiW5zHaxYJGTO4OokMjIlrCtf+VpEL+cXKtCvg723iguPYI5oaUNdS+/V7OU2gvXVWEg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.1':
    resolution: {integrity: sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.19.2':
    resolution: {integrity: sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/config-helpers@0.1.0':
    resolution: {integrity: sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.10.0':
    resolution: {integrity: sha512-gFHJ+xBOo4G3WRlR1e/3G8A6/KZAH6zcE/hkLRCZTi/B9avAG365QhFA8uOGzTMqgTghpn7/fSnscW++dpMSAw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.11.0':
    resolution: {integrity: sha512-DWUB2pksgNEb6Bz2fggIy1wh6fGgZP4Xyy/Mt0QZPiloKKXerbqq9D3SBQTlCRYOrcRPu4vuz+CGjwdfqxnoWA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.12.0':
    resolution: {integrity: sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.0':
    resolution: {integrity: sha512-yaVPAiNAalnCZedKLdR21GOGILMLKPyqSLWaAjQFvYA2i/ciDi8ArYVr69Anohb6cH2Ukhqti4aFnYyPm8wdwQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.20.0':
    resolution: {integrity: sha512-iZA07H9io9Wn836aVTytRaNqh00Sad+EamwOVJT12GTLw1VGMFV/4JaME+JjLtr9fiGaoWgYnS54wrfWsSs4oQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.22.0':
    resolution: {integrity: sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.2.5':
    resolution: {integrity: sha512-lB05FkqEdUg2AA0xEbUz0SnkXT1LcCTa438W4IWTUh4hdOnVbQyOJ81OrDXsJk/LSiJHubgGEFoR5EHq1NsH1A==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.2.7':
    resolution: {integrity: sha512-JubJ5B2pJ4k4yGxaNLdbjrnk9d/iDz6/q8wOilpIowd6PJPgaxCuHBnBszq7Ce2TyMrywm5r4PnKm6V3iiZF+g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@ffmpeg/ffmpeg@0.12.15':
    resolution: {integrity: sha512-1C8Obr4GsN3xw+/1Ww6PFM84wSQAGsdoTuTWPOj2OizsRDLT4CXTaVjPhkw6ARyDus1B9X/L2LiXHqYYsGnRFw==}
    engines: {node: '>=18.x'}

  '@ffmpeg/types@0.12.4':
    resolution: {integrity: sha512-k9vJQNBGTxE5AhYDtOYR5rO5fKsspbg51gbcwtbkw2lCdoIILzklulcjJfIDwrtn7XhDeF2M+THwJ2FGrLeV6A==}
    engines: {node: '>=16.x'}

  '@ffmpeg/util@0.12.2':
    resolution: {integrity: sha512-ouyoW+4JB7WxjeZ2y6KpRvB+dLp7Cp4ro8z0HIVpZVCM7AwFlHa0c4R8Y/a4M3wMqATpYKhC7lSFHQ0T11MEDw==}
    engines: {node: '>=18.x'}

  '@floating-ui/core@1.6.9':
    resolution: {integrity: sha512-uMXCuQ3BItDUbAMhIXw7UPXRfAlOAvZzdK9BWpE60MCn+Svt3aLn9jsPTi/WNGlRUu2uI0v5S7JiIUsbsvh3fw==}

  '@floating-ui/dom@1.6.13':
    resolution: {integrity: sha512-umqzocjDgNRGTuO7Q8CU32dkHkECqI8ZdMZ5Swb6QAM0t5rnlrN3lGo1hdpscRd3WS8T6DKYK4ephgIH9iRh3w==}

  '@floating-ui/react-dom@2.1.2':
    resolution: {integrity: sha512-06okr5cgPzMNBy+Ycse2A6udMi4bqwW/zgBF/rwjcNqWkyr82Mcg8b0vjX8OJpZFy/FKjJmw6wV7t44kK6kW7A==}
    peerDependencies:
      react: 19.0.0
      react-dom: 19.0.0

  '@floating-ui/utils@0.2.9':
    resolution: {integrity: sha512-MDWhGtE+eHw5JW7lq4qhc5yRLS11ERl1c7Z6Xd0a58DozHES6EnNNwUWbMiG4J9Cgj053Bhk8zvlhFYKVhULwg==}

  '@formatjs/intl-localematcher@0.5.10':
    resolution: {integrity: sha512-af3qATX+m4Rnd9+wHcjJ4w2ijq+rAVP3CCinJQvFv1kgSu1W6jypUmvleJxcewdxmutM8dmIRZFxO/IQBZmP2Q==}

  '@hookform/resolvers@3.10.0':
    resolution: {integrity: sha512-79Dv+3mDF7i+2ajj7SkypSKHhl1cbln1OGavqrsF7p6mbUv11xpqpacPsGDCTRvCSjEEIez2ef1NveSVL3b0Ag==}
    peerDependencies:
      react-hook-form: ^7.0.0

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.1':
    resolution: {integrity: sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.2':
    resolution: {integrity: sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==}
    engines: {node: '>=18.18'}

  '@img/sharp-darwin-arm64@0.33.5':
    resolution: {integrity: sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.33.5':
    resolution: {integrity: sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    resolution: {integrity: sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.0.4':
    resolution: {integrity: sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.0.4':
    resolution: {integrity: sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.0.5':
    resolution: {integrity: sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.0.4':
    resolution: {integrity: sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.0.4':
    resolution: {integrity: sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    resolution: {integrity: sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    resolution: {integrity: sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.33.5':
    resolution: {integrity: sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.33.5':
    resolution: {integrity: sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-s390x@0.33.5':
    resolution: {integrity: sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.33.5':
    resolution: {integrity: sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.33.5':
    resolution: {integrity: sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.33.5':
    resolution: {integrity: sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.33.5':
    resolution: {integrity: sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-ia32@0.33.5':
    resolution: {integrity: sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.33.5':
    resolution: {integrity: sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@langchain/core@0.3.39':
    resolution: {integrity: sha512-muXs4asy1A7qDtcdznxqyBfxf4N6qxofY/S0c95vbsWa0r9YAE2PttHIjcuxSy1q2jUiTkpCcgFEjNJRQRVhEw==}
    engines: {node: '>=18'}

  '@langchain/langgraph-sdk@0.0.37':
    resolution: {integrity: sha512-+6aTfUQZsAQBrz2DuKyMt6SrCElJvNWm8Iw8gYZhlHFVwJHrpu0cvn5leOzWrG2gO1DDH9aR4Zi2AzJ95gT0ig==}

  '@manypkg/find-root@1.1.0':
    resolution: {integrity: sha512-mki5uBvhHzO8kYYix/WRy2WX8S3B5wdVSc9D6KcU5lQNglP2yt58/VfLuAK49glRXChosY8ap2oJ1qgma3GUVA==}

  '@manypkg/get-packages@1.1.3':
    resolution: {integrity: sha512-fo+QhuU3qE/2TQMQmbVMqaQ6EWbMhi4ABWP+O4AM1NqPBuy0OrApV5LO6BrrgnhtAHS2NH6RrVk9OL181tTi8A==}

  '@mdx-js/mdx@3.1.0':
    resolution: {integrity: sha512-/QxEhPAvGwbQmy1Px8F899L5Uc2KZ6JtXwlCgJmjSTBedwOZkByYcBG4GceIGPXRDsmfxhHazuS+hlOShRLeDw==}

  '@next/env@15.1.6':
    resolution: {integrity: sha512-d9AFQVPEYNr+aqokIiPLNK/MTyt3DWa/dpKveiAaVccUadFbhFEvY6FXYX2LJO2Hv7PHnLBu2oWwB4uBuHjr/w==}

  '@next/eslint-plugin-next@15.1.6':
    resolution: {integrity: sha512-+slMxhTgILUntZDGNgsKEYHUvpn72WP1YTlkmEhS51vnVd7S9jEEy0n9YAMcI21vUG4akTw9voWH02lrClt/yw==}

  '@next/swc-darwin-arm64@15.1.6':
    resolution: {integrity: sha512-u7lg4Mpl9qWpKgy6NzEkz/w0/keEHtOybmIl0ykgItBxEM5mYotS5PmqTpo+Rhg8FiOiWgwr8USxmKQkqLBCrw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.1.6':
    resolution: {integrity: sha512-x1jGpbHbZoZ69nRuogGL2MYPLqohlhnT9OCU6E6QFewwup+z+M6r8oU47BTeJcWsF2sdBahp5cKiAcDbwwK/lg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.1.6':
    resolution: {integrity: sha512-jar9sFw0XewXsBzPf9runGzoivajeWJUc/JkfbLTC4it9EhU8v7tCRLH7l5Y1ReTMN6zKJO0kKAGqDk8YSO2bg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.1.6':
    resolution: {integrity: sha512-+n3u//bfsrIaZch4cgOJ3tXCTbSxz0s6brJtU3SzLOvkJlPQMJ+eHVRi6qM2kKKKLuMY+tcau8XD9CJ1OjeSQQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.1.6':
    resolution: {integrity: sha512-SpuDEXixM3PycniL4iVCLyUyvcl6Lt0mtv3am08sucskpG0tYkW1KlRhTgj4LI5ehyxriVVcfdoxuuP8csi3kQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.1.6':
    resolution: {integrity: sha512-L4druWmdFSZIIRhF+G60API5sFB7suTbDRhYWSjiw0RbE+15igQvE2g2+S973pMGvwN3guw7cJUjA/TmbPWTHQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.1.6':
    resolution: {integrity: sha512-s8w6EeqNmi6gdvM19tqKKWbCyOBvXFbndkGHl+c9YrzsLARRdCHsD9S1fMj8gsXm9v8vhC8s3N8rjuC/XrtkEg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.1.6':
    resolution: {integrity: sha512-6xomMuu54FAFxttYr5PJbEfu96godcxBTRk1OhAvJq0/EnmFU/Ybiax30Snis4vdWZ9LGpf7Roy5fSs7v/5ROQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@opentelemetry/api-logs@0.53.0':
    resolution: {integrity: sha512-8HArjKx+RaAI8uEIgcORbZIPklyh1YLjPSBus8hjRmvLi6DeFzgOcdZ7KwPabKj8mXF8dX0hyfAyGfycz0DbFw==}
    engines: {node: '>=14'}

  '@opentelemetry/api-logs@0.57.1':
    resolution: {integrity: sha512-I4PHczeujhQAQv6ZBzqHYEUiggZL4IdSMixtVD3EYqbdrjujE7kRfI5QohjlPoJm8BvenoW5YaTMWRrbpot6tg==}
    engines: {node: '>=14'}

  '@opentelemetry/api@1.9.0':
    resolution: {integrity: sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==}
    engines: {node: '>=8.0.0'}

  '@opentelemetry/context-async-hooks@1.30.1':
    resolution: {integrity: sha512-s5vvxXPVdjqS3kTLKMeBMvop9hbWkwzBpu+mUO2M7sZtlkyDJGwFe33wRKnbaYDo8ExRVBIIdwIGrqpxHuKttA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/core@1.30.1':
    resolution: {integrity: sha512-OOCM2C/QIURhJMuKaekP3TRBxBKxG/TWWA0TL2J6nXUtDnuCtccy49LUJF8xPFXMX+0LMcxFpCo8M9cGY1W6rQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/instrumentation-amqplib@0.46.0':
    resolution: {integrity: sha512-04VHHV1KIN/c1wLWwzmLI02d/welgscBJ4BuDqrHaxd+ZIdlVXK9UYQsYf3JwSeF52z/4YoSzr8bfdVBSWoMAg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-connect@0.43.0':
    resolution: {integrity: sha512-Q57JGpH6T4dkYHo9tKXONgLtxzsh1ZEW5M9A/OwKrZFyEpLqWgjhcZ3hIuVvDlhb426iDF1f9FPToV/mi5rpeA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-dataloader@0.16.0':
    resolution: {integrity: sha512-88+qCHZC02up8PwKHk0UQKLLqGGURzS3hFQBZC7PnGwReuoKjHXS1o29H58S+QkXJpkTr2GACbx8j6mUoGjNPA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-express@0.47.0':
    resolution: {integrity: sha512-XFWVx6k0XlU8lu6cBlCa29ONtVt6ADEjmxtyAyeF2+rifk8uBJbk1La0yIVfI0DoKURGbaEDTNelaXG9l/lNNQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-fastify@0.44.1':
    resolution: {integrity: sha512-RoVeMGKcNttNfXMSl6W4fsYoCAYP1vi6ZAWIGhBY+o7R9Y0afA7f9JJL0j8LHbyb0P0QhSYk+6O56OwI2k4iRQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-fs@0.19.0':
    resolution: {integrity: sha512-JGwmHhBkRT2G/BYNV1aGI+bBjJu4fJUD/5/Jat0EWZa2ftrLV3YE8z84Fiij/wK32oMZ88eS8DI4ecLGZhpqsQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-generic-pool@0.43.0':
    resolution: {integrity: sha512-at8GceTtNxD1NfFKGAuwtqM41ot/TpcLh+YsGe4dhf7gvv1HW/ZWdq6nfRtS6UjIvZJOokViqLPJ3GVtZItAnQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-graphql@0.47.0':
    resolution: {integrity: sha512-Cc8SMf+nLqp0fi8oAnooNEfwZWFnzMiBHCGmDFYqmgjPylyLmi83b+NiTns/rKGwlErpW0AGPt0sMpkbNlzn8w==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-hapi@0.45.1':
    resolution: {integrity: sha512-VH6mU3YqAKTePPfUPwfq4/xr049774qWtfTuJqVHoVspCLiT3bW+fCQ1toZxt6cxRPYASoYaBsMA3CWo8B8rcw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-http@0.57.1':
    resolution: {integrity: sha512-ThLmzAQDs7b/tdKI3BV2+yawuF09jF111OFsovqT1Qj3D8vjwKBwhi/rDE5xethwn4tSXtZcJ9hBsVAlWFQZ7g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-ioredis@0.47.0':
    resolution: {integrity: sha512-4HqP9IBC8e7pW9p90P3q4ox0XlbLGme65YTrA3UTLvqvo4Z6b0puqZQP203YFu8m9rE/luLfaG7/xrwwqMUpJw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-kafkajs@0.7.0':
    resolution: {integrity: sha512-LB+3xiNzc034zHfCtgs4ITWhq6Xvdo8bsq7amR058jZlf2aXXDrN9SV4si4z2ya9QX4tz6r4eZJwDkXOp14/AQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-knex@0.44.0':
    resolution: {integrity: sha512-SlT0+bLA0Lg3VthGje+bSZatlGHw/vwgQywx0R/5u9QC59FddTQSPJeWNw29M6f8ScORMeUOOTwihlQAn4GkJQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-koa@0.47.0':
    resolution: {integrity: sha512-HFdvqf2+w8sWOuwtEXayGzdZ2vWpCKEQv5F7+2DSA74Te/Cv4rvb2E5So5/lh+ok4/RAIPuvCbCb/SHQFzMmbw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-lru-memoizer@0.44.0':
    resolution: {integrity: sha512-Tn7emHAlvYDFik3vGU0mdwvWJDwtITtkJ+5eT2cUquct6nIs+H8M47sqMJkCpyPe5QIBJoTOHxmc6mj9lz6zDw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mongodb@0.51.0':
    resolution: {integrity: sha512-cMKASxCX4aFxesoj3WK8uoQ0YUrRvnfxaO72QWI2xLu5ZtgX/QvdGBlU3Ehdond5eb74c2s1cqRQUIptBnKz1g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mongoose@0.46.0':
    resolution: {integrity: sha512-mtVv6UeaaSaWTeZtLo4cx4P5/ING2obSqfWGItIFSunQBrYROfhuVe7wdIrFUs2RH1tn2YYpAJyMaRe/bnTTIQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mysql2@0.45.0':
    resolution: {integrity: sha512-qLslv/EPuLj0IXFvcE3b0EqhWI8LKmrgRPIa4gUd8DllbBpqJAvLNJSv3cC6vWwovpbSI3bagNO/3Q2SuXv2xA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mysql@0.45.0':
    resolution: {integrity: sha512-tWWyymgwYcTwZ4t8/rLDfPYbOTF3oYB8SxnYMtIQ1zEf5uDm90Ku3i6U/vhaMyfHNlIHvDhvJh+qx5Nc4Z3Acg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-nestjs-core@0.44.0':
    resolution: {integrity: sha512-t16pQ7A4WYu1yyQJZhRKIfUNvl5PAaF2pEteLvgJb/BWdd1oNuU1rOYt4S825kMy+0q4ngiX281Ss9qiwHfxFQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-pg@0.50.0':
    resolution: {integrity: sha512-TtLxDdYZmBhFswm8UIsrDjh/HFBeDXd4BLmE8h2MxirNHewLJ0VS9UUddKKEverb5Sm2qFVjqRjcU+8Iw4FJ3w==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-redis-4@0.46.0':
    resolution: {integrity: sha512-aTUWbzbFMFeRODn3720TZO0tsh/49T8H3h8vVnVKJ+yE36AeW38Uj/8zykQ/9nO8Vrtjr5yKuX3uMiG/W8FKNw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-tedious@0.18.0':
    resolution: {integrity: sha512-9zhjDpUDOtD+coeADnYEJQ0IeLVCj7w/hqzIutdp5NqS1VqTAanaEfsEcSypyvYv5DX3YOsTUoF+nr2wDXPETA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-undici@0.10.0':
    resolution: {integrity: sha512-vm+V255NGw9gaSsPD6CP0oGo8L55BffBc8KnxqsMuc6XiAD1L8SFNzsW0RHhxJFqy9CJaJh+YiJ5EHXuZ5rZBw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.7.0

  '@opentelemetry/instrumentation@0.53.0':
    resolution: {integrity: sha512-DMwg0hy4wzf7K73JJtl95m/e0boSoWhH07rfvHvYzQtBD3Bmv0Wc1x733vyZBqmFm8OjJD0/pfiUg1W3JjFX0A==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation@0.57.1':
    resolution: {integrity: sha512-SgHEKXoVxOjc20ZYusPG3Fh+RLIZTSa4x8QtD3NfgAUDyqdFFS9W1F2ZVbZkqDCdyMcQG02Ok4duUGLHJXHgbA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/redis-common@0.36.2':
    resolution: {integrity: sha512-faYX1N0gpLhej/6nyp6bgRjzAKXn5GOEMYY7YhciSfCoITAktLUtQ36d24QEWNA1/WA1y6qQunCe0OhHRkVl9g==}
    engines: {node: '>=14'}

  '@opentelemetry/resources@1.30.1':
    resolution: {integrity: sha512-5UxZqiAgLYGFjS4s9qm5mBVo433u+dSPUFWVWXmLAD4wB65oMCoXaJP1KJa9DIYYMeHu3z4BZcStG3LC593cWA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/sdk-trace-base@1.30.1':
    resolution: {integrity: sha512-jVPgBbH1gCy2Lb7X0AVQ8XAfgg0pJ4nvl8/IiQA6nxOsPvS+0zMJaFSs2ltXe0J6C8dqjcnpyqINDJmU30+uOg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/semantic-conventions@1.27.0':
    resolution: {integrity: sha512-sAay1RrB+ONOem0OZanAR1ZI/k7yDpnOQSQmTMuGImUQb2y8EbSaCJ94FQluM74xoU03vlb2d2U90hZluL6nQg==}
    engines: {node: '>=14'}

  '@opentelemetry/semantic-conventions@1.28.0':
    resolution: {integrity: sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==}
    engines: {node: '>=14'}

  '@opentelemetry/semantic-conventions@1.29.0':
    resolution: {integrity: sha512-KZ1JsXcP2pqunfsJBNk+py6AJ5R6ZJ3yvM5Lhhf93rHPHvdDzgfMYPS4F7GNO3j/MVDCtfbttrkcpu7sl0Wu/Q==}
    engines: {node: '>=14'}

  '@opentelemetry/sql-common@0.40.1':
    resolution: {integrity: sha512-nSDlnHSqzC3pXn/wZEZVLuAuJ1MYMXPBwtv2qAbCa3847SaHItdE7SzUq/Jtb0KZmh1zfAbNi3AAMjztTT4Ugg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.1.0

  '@orama/orama@2.1.1':
    resolution: {integrity: sha512-euTV/2kya290SNkl5m8e/H1na8iDygk74nNtl4E0YZNyYIrEMwE1JwamoroMKGZw2Uz+in/8gH3m1+2YfP0j1w==}
    engines: {node: '>= 16.0.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@prisma/instrumentation@5.22.0':
    resolution: {integrity: sha512-LxccF392NN37ISGxIurUljZSh1YWnphO34V5a0+T7FVQG2u9bhAXRTJpgmQ3483woVhkraQZFF7cbRrpbw/F4Q==}

  '@radix-ui/colors@3.0.0':
    resolution: {integrity: sha512-FUOsGBkHrYJwCSEtWRCIfQbZG7q1e6DgxCIOe1SUQzDe/7rXXeA47s8yCn6fuTNQAj1Zq4oTFi9Yjp3wzElcxg==}

  '@radix-ui/number@1.1.0':
    resolution: {integrity: sha512-V3gRzhVNU1ldS5XhAPTom1fOIo4ccrjjJgmE+LI2h/WaFpHmx0MQApT+KZHnx8abG6Avtfcz4WoEciMnpFT3HQ==}

  '@radix-ui/primitive@1.1.1':
    resolution: {integrity: sha512-SJ31y+Q/zAyShtXJc8x83i9TYdbAfHZ++tUZnvjJJqFjzsdUnKsxPL6IEtBlxKkU7yzer//GQtZSV4GbldL3YA==}

  '@radix-ui/react-accessible-icon@1.1.2':
    resolution: {integrity: sha512-+rnMO0SEfzkcHr93RshkQVpOA26MtGOv4pcS9QUnLg4F8+GDmCJ8c2FEPhPz5e7arf31EzbTqJxFbzg3qen14g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-accordion@1.2.3':
    resolution: {integrity: sha512-RIQ15mrcvqIkDARJeERSuXSry2N8uYnxkdDetpfmalT/+0ntOXLkFOsh9iwlAsCv+qcmhZjbdJogIm6WBa6c4A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-alert-dialog@1.1.6':
    resolution: {integrity: sha512-p4XnPqgej8sZAAReCAKgz1REYZEBLR8hU9Pg27wFnCWIMc8g1ccCs0FjBcy05V15VTu8pAePw/VDYeOm/uZ6yQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.1.2':
    resolution: {integrity: sha512-G+KcpzXHq24iH0uGG/pF8LyzpFJYGD4RfLjCIBfGdSLXvjLHST31RUiRVrupIBMvIppMgSzQ6l66iAxl03tdlg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-aspect-ratio@1.1.2':
    resolution: {integrity: sha512-TaJxYoCpxJ7vfEkv2PTNox/6zzmpKXT6ewvCuf2tTOIVN45/Jahhlld29Yw4pciOXS2Xq91/rSGEdmEnUWZCqA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-avatar@1.1.3':
    resolution: {integrity: sha512-Paen00T4P8L8gd9bNsRMw7Cbaz85oxiv+hzomsRZgFm2byltPFDtfcoqlWJ8GyZlIBWgLssJlzLCnKU0G0302g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-checkbox@1.1.4':
    resolution: {integrity: sha512-wP0CPAHq+P5I4INKe3hJrIa1WoNqqrejzW+zoU0rOvo1b9gDEJJFl2rYfO1PYJUQCc2H1WZxIJmyv9BS8i5fLw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collapsible@1.1.3':
    resolution: {integrity: sha512-jFSerheto1X03MUC0g6R7LedNW9EEGWdg9W1+MlpkMLwGkgkbUXLPBH/KIuWKXUoeYRVY11llqbTBDzuLg7qrw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.1.2':
    resolution: {integrity: sha512-9z54IEKRxIa9VityapoEYMuByaG42iSy1ZXlY2KcuLSEtq8x4987/N6m15ppoMffgZX72gER2uHe1D9Y6Unlcw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.1.1':
    resolution: {integrity: sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context-menu@2.2.6':
    resolution: {integrity: sha512-aUP99QZ3VU84NPsHeaFt4cQUNgJqFsLLOt/RbbWXszZ6MP0DpDyjkFZORr4RpAEx3sUBk+Kc8h13yGtC5Qw8dg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-context@1.1.1':
    resolution: {integrity: sha512-UASk9zi+crv9WteK/NU4PLvOoL3OuE6BWVKNF6hPRBtYBDXQ2u5iu3O59zUlJiTVvkyuycnqrztsHVJwcK9K+Q==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.1.6':
    resolution: {integrity: sha512-/IVhJV5AceX620DUJ4uYVMymzsipdKBzo3edo+omeskCKGm9FRHM0ebIdbPnlQVJqyuHbuBltQUOG2mOTq2IYw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.1.0':
    resolution: {integrity: sha512-BUuBvgThEiAXh2DWu93XsT+a3aWrGqolGlqqw5VU1kG7p/ZH2cuDlM1sRLNnY3QcBS69UIz2mcKhMxDsdewhjg==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.1.5':
    resolution: {integrity: sha512-E4TywXY6UsXNRhFrECa5HAvE5/4BFcGyfTyK36gP+pAW1ed7UTK4vKwdr53gAJYwqbfCWC6ATvJa3J3R/9+Qrg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-dropdown-menu@2.1.6':
    resolution: {integrity: sha512-no3X7V5fD487wab/ZYSHXq3H37u4NVeLDKI/Ks724X/eEFSSEFYZxWgsIlr1UBeEyDaM29HM5x9p1Nv8DuTYPA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.1.1':
    resolution: {integrity: sha512-pSIwfrT1a6sIoDASCSpFwOasEwKTZWDw/iBdtnqKO7v6FeOzYJ7U53cPzYFVR3geGGXgVHaH+CdngrrAzqUGxg==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.1.2':
    resolution: {integrity: sha512-zxwE80FCU7lcXUGWkdt6XpTTCKPitG1XKOwViTxHVKIJhZl9MvIl2dVHeZENCWD9+EdWv05wlaEkRXUykU27RA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-form@0.1.2':
    resolution: {integrity: sha512-Owj1MjLq6/Rp85bgzYI+zRK5APLiWDtXDM63Z39FW15bNdehrcS+FjQgLGQYswFzipYu4GAA+t5w/VqvvNZ3ag==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.1.6':
    resolution: {integrity: sha512-E4ozl35jq0VRlrdc4dhHrNSV0JqBb4Jy73WAhBEK7JoYnQ83ED5r0Rb/XdVKw89ReAJN38N492BAPBZQ57VmqQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-icons@1.3.2':
    resolution: {integrity: sha512-fyQIhGDhzfc9pK2kH6Pl9c4BDJGfMkPqkyIgYDthyNYoNg3wVhoJMMh19WS4Up/1KMPFVpNsT2q3WmXn2N1m6g==}
    peerDependencies:
      react: 19.0.0

  '@radix-ui/react-id@1.1.0':
    resolution: {integrity: sha512-EJUrI8yYh7WOjNOqpoJaf1jlFIH2LvtgAl+YcFqNCa+4hj64ZXmPkAKOFs/ukjz3byN6bdb/AVUqHkI8/uWWMA==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-label@2.1.2':
    resolution: {integrity: sha512-zo1uGMTaNlHehDyFQcDZXRJhUPDuukcnHz0/jnrup0JA6qL+AFpAnty+7VKa9esuU5xTblAZzTGYJKSKaBxBhw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menu@2.1.6':
    resolution: {integrity: sha512-tBBb5CXDJW3t2mo9WlO7r6GTmWV0F0uzHZVFmlRmYpiSK1CDU5IKojP1pm7oknpBOrFZx/YgBRW9oorPO2S/Lg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menubar@1.1.6':
    resolution: {integrity: sha512-FHq7+3DlXwh/7FOM4i0G4bC4vPjiq89VEEvNF4VMLchGnaUuUbE5uKXMUCjdKaOghEEMeiKa5XCa2Pk4kteWmg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-navigation-menu@1.2.5':
    resolution: {integrity: sha512-myMHHQUZ3ZLTi8W381/Vu43Ia0NqakkQZ2vzynMmTUtQQ9kNkjzhOwkZC9TAM5R07OZUVIQyHC06f/9JZJpvvA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popover@1.1.6':
    resolution: {integrity: sha512-NQouW0x4/GnkFJ/pRqsIS3rM/k97VzKnVb2jB7Gq7VEGPy5g7uNV1ykySFt7eWSp3i2uSGFwaJcvIRJBAHmmFg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.2.2':
    resolution: {integrity: sha512-Rvqc3nOpwseCyj/rgjlJDYAgyfw7OC1tTkKn2ivhaMGcYt8FSBlahHOZak2i3QwkRXUXgGgzeEe2RuqeEHuHgA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.1.4':
    resolution: {integrity: sha512-sn2O9k1rPFYVyKd5LAJfo96JlSGVFpa1fS6UuBJfrZadudiw5tAmru+n1x7aMRQ84qDM71Zh1+SzK5QwU0tJfA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.1.2':
    resolution: {integrity: sha512-18TFr80t5EVgL9x1SwF/YGtfG+l0BS0PRAlCWBDoBEiDQjeKgnNZRVJp/oVBl24sr3Gbfwc/Qpj4OcWTQMsAEg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.0.2':
    resolution: {integrity: sha512-Ec/0d38EIuvDF+GZjcMU/Ze6MxntVJYO/fRlCPhCaVUyPY9WTalHJw54tp9sXeJo3tlShWpy41vQRgLRGOuz+w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-progress@1.1.2':
    resolution: {integrity: sha512-u1IgJFQ4zNAUTjGdDL5dcl/U8ntOR6jsnhxKb5RKp5Ozwl88xKR9EqRZOe/Mk8tnx0x5tNUe2F+MzsyjqMg0MA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-radio-group@1.2.3':
    resolution: {integrity: sha512-xtCsqt8Rp09FK50ItqEqTJ7Sxanz8EM8dnkVIhJrc/wkMMomSmXHvYbhv3E7Zx4oXh98aaLt9W679SUYXg4IDA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.1.2':
    resolution: {integrity: sha512-zgMQWkNO169GtGqRvYrzb0Zf8NhMHS2DuEB/TiEmVnpr5OqPU3i8lfbxaAmC2J/KYuIQxyoQQ6DxepyXp61/xw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.2.3':
    resolution: {integrity: sha512-l7+NNBfBYYJa9tNqVcP2AGvxdE3lmE6kFTBXdvHgUaZuy+4wGCL1Cl2AfaR7RKyimj7lZURGLwFO59k4eBnDJQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.1.6':
    resolution: {integrity: sha512-T6ajELxRvTuAMWH0YmRJ1qez+x4/7Nq7QIx7zJ0VK3qaEWdnWpNbEDnmWldG1zBDwqrLy5aLMUWcoGirVj5kMg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-separator@1.1.2':
    resolution: {integrity: sha512-oZfHcaAp2Y6KFBX6I5P1u7CQoy4lheCGiYj+pGFrHy8E/VNRb5E39TkTr3JrV520csPBTZjkuKFdEsjS5EUNKQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slider@1.2.3':
    resolution: {integrity: sha512-nNrLAWLjGESnhqBqcCNW4w2nn7LxudyMzeB6VgdyAnFLC6kfQgnAjSL2v6UkQTnDctJBlxrmxfplWS4iYjdUTw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.1.2':
    resolution: {integrity: sha512-YAKxaiGsSQJ38VzKH86/BPRC4rh+b1Jpa+JneA5LRE7skmLPNAyeG8kPJj/oo4STLvlrs8vkf/iYyc3A5stYCQ==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-switch@1.1.3':
    resolution: {integrity: sha512-1nc+vjEOQkJVsJtWPSiISGT6OKm4SiOdjMo+/icLxo2G4vxz1GntC5MzfL4v8ey9OEfw787QCD1y3mUv0NiFEQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tabs@1.1.3':
    resolution: {integrity: sha512-9mFyI30cuRDImbmFF6O2KUJdgEOsGh9Vmx9x/Dh9tOhL7BngmQPQfwW4aejKm5OHpfWIdmeV6ySyuxoOGjtNng==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toast@1.2.6':
    resolution: {integrity: sha512-gN4dpuIVKEgpLn1z5FhzT9mYRUitbfZq9XqN/7kkBMUgFTzTG8x/KszWJugJXHcwxckY8xcKDZPz7kG3o6DsUA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle-group@1.1.2':
    resolution: {integrity: sha512-JBm6s6aVG/nwuY5eadhU2zDi/IwYS0sDM5ZWb4nymv/hn3hZdkw+gENn0LP4iY1yCd7+bgJaCwueMYJIU3vk4A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle@1.1.2':
    resolution: {integrity: sha512-lntKchNWx3aCHuWKiDY+8WudiegQvBpDRAYL8dKLRvKEH8VOpl0XX6SSU/bUBqIRJbcTy4+MW06Wv8vgp10rzQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toolbar@1.1.2':
    resolution: {integrity: sha512-wT20eQ7ScFk+kBMDmHp+lMk18cgxhu35b2Bn5deUcPxiVwfn5vuZgi7NGcHu8ocdkinahmp4FaSZysKDyRVPWQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tooltip@1.1.8':
    resolution: {integrity: sha512-YAA2cu48EkJZdAMHC0dqo9kialOcRStbtiY4nJPaht7Ptrhcvpo+eDChaM6BIs8kL6a8Z5l5poiqLnXcNduOkA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.1.0':
    resolution: {integrity: sha512-CasTfvsy+frcFkbXtSJ2Zu9JHpN8TYKxkgJGWbjiZhFivxaeW7rMeZt7QELGVLaYVfFMsKHjb7Ak0nMEe+2Vfw==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.1.0':
    resolution: {integrity: sha512-MtfMVJiSr2NjzS0Aa90NPTnvTSg6C/JLCV7ma0W6+OMV78vd8OyRpID+Ng9LxzsPbLeuBnWBA1Nq30AtBIDChw==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.1.0':
    resolution: {integrity: sha512-L7vwWlR1kTTQ3oh7g1O0CBF3YCyyTj8NmhLR+phShpyA50HCfBFKVJTpshm9PzLiKmehsrQzTYTpX9HvmC9rhw==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.0':
    resolution: {integrity: sha512-+FPE0rOdziWSrH9athwI1R0HDVbWlEhd+FR+aSDk4uWGmSJ9Z54sdZVDQPZAinJhJXwfT+qnj969mCsT2gfm5w==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.1.0':
    resolution: {integrity: sha512-Z/e78qg2YFnnXcW88A4JmTtm4ADckLno6F7OXotmkQfeuCVaKuYzqAATPhVzl3delXE7CxIV8shofPn3jPc5Og==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.1.0':
    resolution: {integrity: sha512-0Fmkebhr6PiseyZlYAOtLS+nb7jLmpqTrJyv61Pe68MKYW6OWdRE2kI70TaYY27u7H0lajqM3hSMMLFq18Z7nQ==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.1.0':
    resolution: {integrity: sha512-XW3/vWuIXHa+2Uwcc2ABSfcCledmXhhQPlGbfcRXbiUQI5Icjcg19BGCZVKKInYbvUCut/ufbbLLPFC5cbb1hw==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.1.2':
    resolution: {integrity: sha512-1SzA4ns2M1aRlvxErqhLHsBHoS5eI5UUcI2awAMgGUp4LoaoWOKYmvqDY2s/tltuPkh3Yk77YF/r3IRj+Amx4Q==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.1.0':
    resolution: {integrity: sha512-A9+lCBZoaMJlVKcRBz2YByCG+Cp2t6nAnMnNba+XiWxnj6r4JUFqfsgwocMBZU9LPtdxC6wB56ySYpc7LQIoJg==}

  '@radix-ui/themes@3.2.0':
    resolution: {integrity: sha512-cG/47tfHN9FW1ZoAigd3oUeJaIm591vGtQ97PrhfwS22IJgWhE5h6D0w2m+NVbKRVo8qIWCG+hiWN04MlLoW4A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@react-hook/media-query@1.1.1':
    resolution: {integrity: sha512-VM14wDOX5CW5Dn6b2lTiMd79BFMTut9AZj2+vIRT3LCKgMCYmdqruTtzDPSnIVDQdtxdPgtOzvU9oK20LopuOw==}
    peerDependencies:
      react: 19.0.0

  '@rollup/plugin-commonjs@28.0.1':
    resolution: {integrity: sha512-+tNWdlWKbpB3WgBN7ijjYkq9X5uhjmcvyjEght4NmH5fAU++zfQzAJ6wumLS+dNcvwEZhKx2Z+skY8m7v0wGSA==}
    engines: {node: '>=16.0.0 || 14 >= 14.17'}
    peerDependencies:
      rollup: ^2.68.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/pluginutils@5.1.4':
    resolution: {integrity: sha512-USm05zrsFxYLPdWWq+K3STlWiT/3ELn3RcV5hJMghpeAIhxfsUIg6mt12CBJBInWMV4VneoV7SfGv8xIwo2qNQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/rollup-android-arm-eabi@4.34.6':
    resolution: {integrity: sha512-+GcCXtOQoWuC7hhX1P00LqjjIiS/iOouHXhMdiDSnq/1DGTox4SpUvO52Xm+div6+106r+TcvOeo/cxvyEyTgg==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.34.6':
    resolution: {integrity: sha512-E8+2qCIjciYUnCa1AiVF1BkRgqIGW9KzJeesQqVfyRITGQN+dFuoivO0hnro1DjT74wXLRZ7QF8MIbz+luGaJA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.34.6':
    resolution: {integrity: sha512-z9Ib+OzqN3DZEjX7PDQMHEhtF+t6Mi2z/ueChQPLS/qUMKY7Ybn5A2ggFoKRNRh1q1T03YTQfBTQCJZiepESAg==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.34.6':
    resolution: {integrity: sha512-PShKVY4u0FDAR7jskyFIYVyHEPCPnIQY8s5OcXkdU8mz3Y7eXDJPdyM/ZWjkYdR2m0izD9HHWA8sGcXn+Qrsyg==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.34.6':
    resolution: {integrity: sha512-YSwyOqlDAdKqs0iKuqvRHLN4SrD2TiswfoLfvYXseKbL47ht1grQpq46MSiQAx6rQEN8o8URtpXARCpqabqxGQ==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.34.6':
    resolution: {integrity: sha512-HEP4CgPAY1RxXwwL5sPFv6BBM3tVeLnshF03HMhJYCNc6kvSqBgTMmsEjb72RkZBAWIqiPUyF1JpEBv5XT9wKQ==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.34.6':
    resolution: {integrity: sha512-88fSzjC5xeH9S2Vg3rPgXJULkHcLYMkh8faix8DX4h4TIAL65ekwuQMA/g2CXq8W+NJC43V6fUpYZNjaX3+IIg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.34.6':
    resolution: {integrity: sha512-wM4ztnutBqYFyvNeR7Av+reWI/enK9tDOTKNF+6Kk2Q96k9bwhDDOlnCUNRPvromlVXo04riSliMBs/Z7RteEg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.34.6':
    resolution: {integrity: sha512-9RyprECbRa9zEjXLtvvshhw4CMrRa3K+0wcp3KME0zmBe1ILmvcVHnypZ/aIDXpRyfhSYSuN4EPdCCj5Du8FIA==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.34.6':
    resolution: {integrity: sha512-qTmklhCTyaJSB05S+iSovfo++EwnIEZxHkzv5dep4qoszUMX5Ca4WM4zAVUMbfdviLgCSQOu5oU8YoGk1s6M9Q==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.34.6':
    resolution: {integrity: sha512-4Qmkaps9yqmpjY5pvpkfOerYgKNUGzQpFxV6rnS7c/JfYbDSU0y6WpbbredB5cCpLFGJEqYX40WUmxMkwhWCjw==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.34.6':
    resolution: {integrity: sha512-Zsrtux3PuaxuBTX/zHdLaFmcofWGzaWW1scwLU3ZbW/X+hSsFbz9wDIp6XvnT7pzYRl9MezWqEqKy7ssmDEnuQ==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.34.6':
    resolution: {integrity: sha512-aK+Zp+CRM55iPrlyKiU3/zyhgzWBxLVrw2mwiQSYJRobCURb781+XstzvA8Gkjg/hbdQFuDw44aUOxVQFycrAg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.34.6':
    resolution: {integrity: sha512-WoKLVrY9ogmaYPXwTH326+ErlCIgMmsoRSx6bO+l68YgJnlOXhygDYSZe/qbUJCSiCiZAQ+tKm88NcWuUXqOzw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.34.6':
    resolution: {integrity: sha512-Sht4aFvmA4ToHd2vFzwMFaQCiYm2lDFho5rPcvPBT5pCdC+GwHG6CMch4GQfmWTQ1SwRKS0dhDYb54khSrjDWw==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.34.6':
    resolution: {integrity: sha512-zmmpOQh8vXc2QITsnCiODCDGXFC8LMi64+/oPpPx5qz3pqv0s6x46ps4xoycfUiVZps5PFn1gksZzo4RGTKT+A==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.34.6':
    resolution: {integrity: sha512-3/q1qUsO/tLqGBaD4uXsB6coVGB3usxw3qyeVb59aArCgedSF66MPdgRStUd7vbZOsko/CgVaY5fo2vkvPLWiA==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.34.6':
    resolution: {integrity: sha512-oLHxuyywc6efdKVTxvc0135zPrRdtYVjtVD5GUm55I3ODxhU/PwkQFD97z16Xzxa1Fz0AEe4W/2hzRtd+IfpOA==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.34.6':
    resolution: {integrity: sha512-0PVwmgzZ8+TZ9oGBmdZoQVXflbvuwzN/HRclujpl4N/q3i+y0lqLw8n1bXA8ru3sApDjlmONaNAuYr38y1Kr9w==}
    cpu: [x64]
    os: [win32]

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@rushstack/eslint-patch@1.10.5':
    resolution: {integrity: sha512-kkKUDVlII2DQiKy7UstOR1ErJP8kUKAQ4oa+SQtM0K+lPdmmjj0YnnxBgtTVYH7mUKtbsxeFC9y0AmK7Yb78/A==}

  '@sentry-internal/browser-utils@8.54.0':
    resolution: {integrity: sha512-DKWCqb4YQosKn6aD45fhKyzhkdG7N6goGFDeyTaJFREJDFVDXiNDsYZu30nJ6BxMM7uQIaARhPAC5BXfoED3pQ==}
    engines: {node: '>=14.18'}

  '@sentry-internal/feedback@8.54.0':
    resolution: {integrity: sha512-nQqRacOXoElpE0L0ADxUUII0I3A94niqG9Z4Fmsw6057QvyrV/LvTiMQBop6r5qLjwMqK+T33iR4/NQI5RhsXQ==}
    engines: {node: '>=14.18'}

  '@sentry-internal/replay-canvas@8.54.0':
    resolution: {integrity: sha512-K/On3OAUBeq/TV2n+1EvObKC+WMV9npVXpVyJqCCyn8HYMm8FUGzuxeajzm0mlW4wDTPCQor6mK9/IgOquUzCw==}
    engines: {node: '>=14.18'}

  '@sentry-internal/replay@8.54.0':
    resolution: {integrity: sha512-8xuBe06IaYIGJec53wUC12tY2q4z2Z0RPS2s1sLtbA00EvK1YDGuXp96IDD+HB9mnDMrQ/jW5f97g9TvPsPQUg==}
    engines: {node: '>=14.18'}

  '@sentry/babel-plugin-component-annotate@2.22.7':
    resolution: {integrity: sha512-aa7XKgZMVl6l04NY+3X7BP7yvQ/s8scn8KzQfTLrGRarziTlMGrsCOBQtCNWXOPEbtxAIHpZ9dsrAn5EJSivOQ==}
    engines: {node: '>= 14'}

  '@sentry/browser@8.54.0':
    resolution: {integrity: sha512-BgUtvxFHin0fS0CmJVKTLXXZcke0Av729IVfi+2fJ4COX8HO7/HAP02RKaSQGmL2HmvWYTfNZ7529AnUtrM4Rg==}
    engines: {node: '>=14.18'}

  '@sentry/bundler-plugin-core@2.22.7':
    resolution: {integrity: sha512-ouQh5sqcB8vsJ8yTTe0rf+iaUkwmeUlGNFi35IkCFUQlWJ22qS6OfvNjOqFI19e6eGUXks0c/2ieFC4+9wJ+1g==}
    engines: {node: '>= 14'}

  '@sentry/cli-darwin@2.39.1':
    resolution: {integrity: sha512-kiNGNSAkg46LNGatfNH5tfsmI/kCAaPA62KQuFZloZiemTNzhy9/6NJP8HZ/GxGs8GDMxic6wNrV9CkVEgFLJQ==}
    engines: {node: '>=10'}
    os: [darwin]

  '@sentry/cli-linux-arm64@2.39.1':
    resolution: {integrity: sha512-5VbVJDatolDrWOgaffsEM7znjs0cR8bHt9Bq0mStM3tBolgAeSDHE89NgHggfZR+DJ2VWOy4vgCwkObrUD6NQw==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux, freebsd]

  '@sentry/cli-linux-arm@2.39.1':
    resolution: {integrity: sha512-DkENbxyRxUrfLnJLXTA4s5UL/GoctU5Cm4ER1eB7XN7p9WsamFJd/yf2KpltkjEyiTuplv0yAbdjl1KX3vKmEQ==}
    engines: {node: '>=10'}
    cpu: [arm]
    os: [linux, freebsd]

  '@sentry/cli-linux-i686@2.39.1':
    resolution: {integrity: sha512-pXWVoKXCRrY7N8vc9H7mETiV9ZCz+zSnX65JQCzZxgYrayQPJTc+NPRnZTdYdk5RlAupXaFicBI2GwOCRqVRkg==}
    engines: {node: '>=10'}
    cpu: [x86, ia32]
    os: [linux, freebsd]

  '@sentry/cli-linux-x64@2.39.1':
    resolution: {integrity: sha512-IwayNZy+it7FWG4M9LayyUmG1a/8kT9+/IEm67sT5+7dkMIMcpmHDqL8rWcPojOXuTKaOBBjkVdNMBTXy0mXlA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux, freebsd]

  '@sentry/cli-win32-i686@2.39.1':
    resolution: {integrity: sha512-NglnNoqHSmE+Dz/wHeIVRnV2bLMx7tIn3IQ8vXGO5HWA2f8zYJGktbkLq1Lg23PaQmeZLPGlja3gBQfZYSG10Q==}
    engines: {node: '>=10'}
    cpu: [x86, ia32]
    os: [win32]

  '@sentry/cli-win32-x64@2.39.1':
    resolution: {integrity: sha512-xv0R2CMf/X1Fte3cMWie1NXuHmUyQPDBfCyIt6k6RPFPxAYUgcqgMPznYwVMwWEA1W43PaOkSn3d8ZylsDaETw==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [win32]

  '@sentry/cli@2.39.1':
    resolution: {integrity: sha512-JIb3e9vh0+OmQ0KxmexMXg9oZsR/G7HMwxt5BUIKAXZ9m17Xll4ETXTRnRUBT3sf7EpNGAmlQk1xEmVN9pYZYQ==}
    engines: {node: '>= 10'}
    hasBin: true

  '@sentry/core@8.54.0':
    resolution: {integrity: sha512-03bWf+D1j28unOocY/5FDB6bUHtYlm6m6ollVejhg45ZmK9iPjdtxNWbrLsjT1WRym0Tjzowu+A3p+eebYEv0Q==}
    engines: {node: '>=14.18'}

  '@sentry/nextjs@8.54.0':
    resolution: {integrity: sha512-TiNrT98+3AdeX/CMM8uhx0yOt/ITkx8EOJ8d1FjiRZdrR/UcY1dpq1S/m3h3T2NkwTQ9Os1A/GpDJz7LHPoL/w==}
    engines: {node: '>=14.18'}
    peerDependencies:
      next: ^13.2.0 || ^14.0 || ^15.0.0-rc.0

  '@sentry/node@8.54.0':
    resolution: {integrity: sha512-z9ak481OtCw3V4l55ke/9FOiorF2J/niO1J1gvGefXpgFucpw0M3qqEFjB5cpg9HoZM8Y1WtA1OFusfTAnvcXg==}
    engines: {node: '>=14.18'}

  '@sentry/opentelemetry@8.54.0':
    resolution: {integrity: sha512-Tkmd8bmXMx0PKZF53ywk/FfvDrphX8NdPH5N53HxyMvGxSf2trZkTuOSFJg6zKibyGYO6+PUeGO3g2WJKUxwGA==}
    engines: {node: '>=14.18'}
    peerDependencies:
      '@opentelemetry/api': ^1.9.0
      '@opentelemetry/context-async-hooks': ^1.30.1
      '@opentelemetry/core': ^1.30.1
      '@opentelemetry/instrumentation': ^0.57.1
      '@opentelemetry/sdk-trace-base': ^1.30.1
      '@opentelemetry/semantic-conventions': ^1.28.0

  '@sentry/react@8.54.0':
    resolution: {integrity: sha512-42T/fp8snYN19Fy/2P0Mwotu4gcdy+1Lx+uYCNcYP1o7wNGigJ7qb27sW7W34GyCCHjoCCfQgeOqDQsyY8LC9w==}
    engines: {node: '>=14.18'}
    peerDependencies:
      react: 19.0.0

  '@sentry/vercel-edge@8.54.0':
    resolution: {integrity: sha512-1oct5P0iTPJOBCzNKZZ+H1ja7b1izZNCObBRhxscOsDHM4fUFwCP8MfjxGIphzj9XLibzo+4dsn6JtkxIdn5GQ==}
    engines: {node: '>=14.18'}

  '@sentry/webpack-plugin@2.22.7':
    resolution: {integrity: sha512-j5h5LZHWDlm/FQCCmEghQ9FzYXwfZdlOf3FE/X6rK6lrtx0JCAkq+uhMSasoyP4XYKL4P4vRS6WFSos4jxf/UA==}
    engines: {node: '>= 14'}
    peerDependencies:
      webpack: '>=4.40.0'

  '@shikijs/core@2.3.2':
    resolution: {integrity: sha512-s7vyL3LzUKm3Qwf36zRWlavX9BQMZTIq9B1almM63M5xBuSldnsTHCmsXzoF/Kyw4k7Xgas7yAyJz9VR/vcP1A==}

  '@shikijs/engine-javascript@2.3.2':
    resolution: {integrity: sha512-w3IEMu5HfL/OaJTsMbIfZ1HRPnWVYRANeDtmsdIIEgUOcLjzFJFQwlnkckGjKHekEzNqlMLbgB/twnfZ/EEAGg==}

  '@shikijs/engine-oniguruma@2.3.2':
    resolution: {integrity: sha512-vikMY1TroyZXUHIXbMnvY/mjtOxMn+tavcfAeQPgWS9FHcgFSUoEtywF5B5sOLb9NXb8P2vb7odkh3nj15/00A==}

  '@shikijs/langs@2.3.2':
    resolution: {integrity: sha512-UqI6bSxFzhexIJficZLKeB1L2Sc3xoNiAV0yHpfbg5meck93du+EKQtsGbBv66Ki53XZPhnR/kYkOr85elIuFw==}

  '@shikijs/rehype@2.3.2':
    resolution: {integrity: sha512-ikzqbG46CXQLo+Ew86Fc7wOSoBRgoRKT+520e4hwI6gsJsJHSc/pTgzBZhs1xTw+pq6iGMhNunBVdDzxfhagYw==}

  '@shikijs/themes@2.3.2':
    resolution: {integrity: sha512-QAh7D/hhfYKHibkG2tti8vxNt3ekAH5EqkXJeJbTh7FGvTCWEI7BHqNCtMdjFvZ0vav5nvUgdvA7/HI7pfsB4w==}

  '@shikijs/transformers@2.3.2':
    resolution: {integrity: sha512-2HDnJumw8A/9GecRpTgvfqSbPjEbJ4DPWq5J++OVP1gNMLvbV0MqFsP4canqRNM1LqB7VmWY45Stipb0ZIJ+0A==}

  '@shikijs/twoslash@2.3.2':
    resolution: {integrity: sha512-eYLSPNKH7qWpoStesZlDix+Mdppb/VUBc7LFZyOwTvTzZ6H+DS3OMUDH0wndc6ZWYUR27cyDMtFZoBjyzxRL0A==}

  '@shikijs/types@2.3.2':
    resolution: {integrity: sha512-CBaMY+a3pepyC4SETi7+bSzO0f6hxEQJUUuS4uD7zppzjmrN4ZRtBqxaT+wOan26CR9eeJ5iBhc4qvWEwn7Eeg==}

  '@shikijs/vscode-textmate@10.0.1':
    resolution: {integrity: sha512-fTIQwLF+Qhuws31iw7Ncl1R3HUDtGwIipiJ9iU+UsDUwMhegFcQKQHd51nZjb7CArq0MvON8rbgCGQYWHUKAdg==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.15':
    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}

  '@tailwindcss/node@4.0.4':
    resolution: {integrity: sha512-VLFq80IyoV1hsHPcCm1mmlyPyUT6NlovQLoO2y7PGm84mW94ZrNJ7ax5H6K4M7Aj/fdMfem5IX7Ka+LXWZpDGg==}

  '@tailwindcss/oxide-android-arm64@4.0.4':
    resolution: {integrity: sha512-hiGUA8d15ynH/LdurQNObnuTjri7i4ApAzhesusNxoz4br7vhZ6QO5CFgniYAYNZvf8Q8wCTBg0nj61RalBeVQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [android]

  '@tailwindcss/oxide-darwin-arm64@4.0.4':
    resolution: {integrity: sha512-vTca+ysNl8BYmYJTni9pLC+L3S4bvrj0ai1eUV3yYXYa5Cpugr5Fni6ylV0gcTZOyETm2RCCJ/0azU6MgqE6HA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@tailwindcss/oxide-darwin-x64@4.0.4':
    resolution: {integrity: sha512-rxPWb5AQJ/aAM/5UDCjaQaMYIcrZHe/Dr9xZu9+P9nJf3WAweNsGi+e+SW9EYGRiF3hkBtP2dvxVNAkTiEbNQQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@tailwindcss/oxide-freebsd-x64@4.0.4':
    resolution: {integrity: sha512-UOnRHzlS5V5cxaMgBo6rk1E92tTDUtO/falc9vOpNiRdWhNcofYNN9zvZP63Wuo5FC6/XCyAnJo6OXUm18TwrQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [freebsd]

  '@tailwindcss/oxide-linux-arm-gnueabihf@4.0.4':
    resolution: {integrity: sha512-0Ry9Qfnf22rmJwHxsCFmHQIl5RZw+yOUUGHaqNT42REL8r308cU/bi4UqdrjqVRfAlu51gOGxTRf2NRueczuIA==}
    engines: {node: '>= 10'}
    cpu: [arm]
    os: [linux]

  '@tailwindcss/oxide-linux-arm64-gnu@4.0.4':
    resolution: {integrity: sha512-5a7WD30nVdI7Rl1ohZ0Ojj9t5yRnZkJBizvh3uIW52h9UeNpon8TfoknF6rU/TwD32dQ0Cjo5CcCHtQ2wW9PCA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tailwindcss/oxide-linux-arm64-musl@4.0.4':
    resolution: {integrity: sha512-m6s5jKSqos07l6NtHFd49Ljcaw4jIWHE7jq6eNPNz9SCzQqRzs4esP1t7jH8UljQ7JffKOl7yZPwK5Nf+irliw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tailwindcss/oxide-linux-x64-gnu@4.0.4':
    resolution: {integrity: sha512-K5dBjGHzby9eyUBwy9YHFhKY+5i8fzIBZM1NBWp6L2xpM7OzW9WJDgNcgESkZami9g+EozkQLt3ZmMZHAieXkw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tailwindcss/oxide-linux-x64-musl@4.0.4':
    resolution: {integrity: sha512-J8sskt+fA5ooq+kxy0Tf4E2TRWZD9Y8j3K+pnBwp9zdilLmSd8OHrB3e0/rO78KveZ6BE9ae75cKOWrT6wONmw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tailwindcss/oxide-win32-arm64-msvc@4.0.4':
    resolution: {integrity: sha512-flFaaMc77NQbz0Fq73wBs9EH2lX1Oc2Z/3JuxoewpnGHpAGJ/j05tvBNMyTaGrKcHvf/+dk+mCDxb6+PmzGgnQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@tailwindcss/oxide-win32-x64-msvc@4.0.4':
    resolution: {integrity: sha512-WzMA0aL/24/JyNrv2Yhr/Og24QGRPWJMjRyCJ4HRoGMs6/8svOQKrnnZ/9LUFwn56irAndFBjWWnlaqykH+g5Q==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@tailwindcss/oxide@4.0.4':
    resolution: {integrity: sha512-vPpu30KFLiGyPOoElkYt8WRvzGKVrrOz49KpfiGGtnQGmyUpL8VCbJzzEEcpKT5BpaaQidhFok+OXscf6hHjOQ==}
    engines: {node: '>= 10'}

  '@tailwindcss/postcss@4.0.4':
    resolution: {integrity: sha512-Up8fB+DUhy8qvDqlHgZAWaL5iVEbypcuOjzlW4K6EyU+aGEvXK0/wrcKBKOTvg3KKP5givJMexJ0aG1hDPOuRg==}

  '@ts-morph/common@0.26.1':
    resolution: {integrity: sha512-Sn28TGl/4cFpcM+jwsH1wLncYq3FtN/BIpem+HOygfBWPT5pAeS5dB4VFVzV8FbnOKHpDLZmvAl4AjPEev5idA==}

  '@tsconfig/strictest@2.0.5':
    resolution: {integrity: sha512-ec4tjL2Rr0pkZ5hww65c+EEPYwxOi4Ryv+0MtjeaSQRJyq322Q27eOQiFbuNgw2hpL4hB1/W/HBGk3VKS43osg==}

  '@types/acorn@4.0.6':
    resolution: {integrity: sha512-veQTnWP+1D/xbxVrPC3zHnCZRjSrKfhbMUlEA43iMZLu7EsnTtkJklIuwrCPbOi8YkvDQAiW05VQQFvvz9oieQ==}

  '@types/cli-progress@3.11.6':
    resolution: {integrity: sha512-cE3+jb9WRlu+uOSAugewNpITJDt1VF8dHOopPO4IABFc3SXYL5WE/+PTz/FCdZRRfIujiWW3n3aMbv1eIGVRWA==}

  '@types/connect@3.4.36':
    resolution: {integrity: sha512-P63Zd/JUGq+PdrM1lv0Wv5SBYeA2+CORvbrXbngriYY0jzLUWfQMQQxOhjONEz/wlHOAxOdY7CY65rgQdTjq2w==}

  '@types/cross-spawn@6.0.6':
    resolution: {integrity: sha512-fXRhhUkG4H3TQk5dBhQ7m/JDdSNHKwR2BBia62lhwEIq9xGiQKLxd6LymNhn47SjXhsUEPmxi+PKw2OkW4LLjA==}

  '@types/debug@4.1.12':
    resolution: {integrity: sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==}

  '@types/diff-match-patch@1.0.36':
    resolution: {integrity: sha512-xFdR6tkm0MWvBfO8xXCSsinYxHcqkQUlcHeSpMC2ukzOb6lwQAfDmW+Qt0AvlGd8HpsS28qKsB+oPeJn9I39jg==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@9.6.1':
    resolution: {integrity: sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==}

  '@types/estree-jsx@1.0.5':
    resolution: {integrity: sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==}

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/hast@2.3.10':
    resolution: {integrity: sha512-McWspRw8xx8J9HurkVBfYj0xKoE25tOFlHGdx4MJ5xORQrMGZNqJhVQWaIbm6Oyla5kYOXtDiopzKRJzEOkwJw==}

  '@types/hast@3.0.4':
    resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}

  '@types/js-cookie@3.0.6':
    resolution: {integrity: sha512-wkw9yd1kEXOPnvEeEV1Go1MmxtBJL0RR79aOTAApecWFVu7w0NNXNqhcWgvw2YgZDYadliXkl14pa3WXw5jlCQ==}

  '@types/jscodeshift@0.12.0':
    resolution: {integrity: sha512-Jr2fQbEoDmjwEa92TreR/mX2t9iAaY/l5P/GKezvK4BodXahex60PDLXaQR0vAgP0KfCzc1CivHusQB9NhzX8w==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/jsonwebtoken@9.0.8':
    resolution: {integrity: sha512-7fx54m60nLFUVYlxAB1xpe9CBWX2vSrk50Y6ogRJ1v5xxtba7qXTg5BgYDN5dq+yuQQ9HaVlHJyAAt1/mxryFg==}

  '@types/katex@0.16.7':
    resolution: {integrity: sha512-HMwFiRujE5PjrgwHQ25+bsLJgowjGjm5Z8FVSf0N6PwgJrwxH0QxzHYDcKsTfV3wva0vzrpqMTJS2jXPr5BMEQ==}

  '@types/mdast@4.0.4':
    resolution: {integrity: sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==}

  '@types/mdx@2.0.13':
    resolution: {integrity: sha512-+OWZQfAYyio6YkJb3HLxDrvnx6SWWDbC0zVPfBRzUk0/nqoDyf6dNxQi3eArPe8rJ473nobTMQ/8Zk+LxJ+Yuw==}

  '@types/ms@2.1.0':
    resolution: {integrity: sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==}

  '@types/mysql@2.15.26':
    resolution: {integrity: sha512-DSLCOXhkvfS5WNNPbfn2KdICAmk8lLc+/PNvnPnF7gOdMZCxopXduqv0OQ13y/yA/zXTSikZZqVgybUxOEg6YQ==}

  '@types/node-fetch@2.6.12':
    resolution: {integrity: sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==}

  '@types/node@12.20.55':
    resolution: {integrity: sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ==}

  '@types/node@18.19.75':
    resolution: {integrity: sha512-UIksWtThob6ZVSyxcOqCLOUNg/dyO1Qvx4McgeuhrEtHTLFTf7BBhEazaE4K806FGTPtzd/2sE90qn4fVr7cyw==}

  '@types/node@22.13.1':
    resolution: {integrity: sha512-jK8uzQlrvXqEU91UxiK5J7pKHyzgnI1Qnl0QDHIgVGuolJhRb9EEl28Cj9b3rGR8B2lhFCtvIm5os8lFnO/1Ew==}

  '@types/pg-pool@2.0.6':
    resolution: {integrity: sha512-TaAUE5rq2VQYxab5Ts7WZhKNmuN78Q6PiFonTDdpbx8a1H0M1vhy3rhiMjl+e2iHmogyMw7jZF4FrE6eJUy5HQ==}

  '@types/pg@8.6.1':
    resolution: {integrity: sha512-1Kc4oAGzAl7uqUStZCDvaLFqZrW9qWSjXOmBfdgyBP5La7Us6Mg4GBvRlSoaZMhQF/zSj1C8CtKMBkoiT8eL8w==}

  '@types/postcss-js@4.0.4':
    resolution: {integrity: sha512-j5+GMZVIPCJpRTwI/mO64mCzv7X+zAEq3JP0EV2lo/BrLWHAohEubUJimIAY23rH27+wKce0fXUYjAdBoqlaYw==}

  '@types/react-dom@19.0.3':
    resolution: {integrity: sha512-0Knk+HJiMP/qOZgMyNFamlIjw9OFCsyC2ZbigmEEyXXixgre6IQpm/4V+r3qH4GC1JPvRJKInw+on2rV6YZLeA==}
    peerDependencies:
      '@types/react': ^19.0.0

  '@types/react-syntax-highlighter@15.5.13':
    resolution: {integrity: sha512-uLGJ87j6Sz8UaBAooU0T6lWJ0dBmjZgN1PZTrj05TNql2/XpC6+4HhMT5syIdFUUt+FASfCeLLv4kBygNU+8qA==}

  '@types/react@19.0.8':
    resolution: {integrity: sha512-9P/o1IGdfmQxrujGbIMDyYaaCykhLKc0NGCtYcECNUr9UAaDe4gwvV9bR6tvd5Br1SG0j+PBpbKr2UYY8CwqSw==}

  '@types/retry@0.12.0':
    resolution: {integrity: sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==}

  '@types/shimmer@1.2.0':
    resolution: {integrity: sha512-UE7oxhQLLd9gub6JKIAhDq06T0F6FnztwMNRvYgjeQSBeMc1ZG/tA47EwfduvkuQS8apbkM/lpLpWsaCeYsXVg==}

  '@types/tedious@4.0.14':
    resolution: {integrity: sha512-KHPsfX/FoVbUGbyYvk1q9MMQHLPeRZhRJZdO45Q4YjvFkv4hMNghCWTvy7rdKessBsmtz4euWCWAB6/tVpI1Iw==}

  '@types/unist@2.0.11':
    resolution: {integrity: sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==}

  '@types/unist@3.0.3':
    resolution: {integrity: sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==}

  '@types/uuid@10.0.0':
    resolution: {integrity: sha512-7gqG38EyHgyP1S+7+xomFtL+ZNHcKv6DwNaCZmJmo1vgMugyF3TCnXVg4t1uk89mLNwnLtnY3TpOpCOyp1/xHQ==}

  '@typescript-eslint/eslint-plugin@8.23.0':
    resolution: {integrity: sha512-vBz65tJgRrA1Q5gWlRfvoH+w943dq9K1p1yDBY2pc+a1nbBLZp7fB9+Hk8DaALUbzjqlMfgaqlVPT1REJdkt/w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.0.0 || ^8.0.0-alpha.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/parser@8.23.0':
    resolution: {integrity: sha512-h2lUByouOXFAlMec2mILeELUbME5SZRN/7R9Cw2RD2lRQQY08MWMM+PmVVKKJNK1aIwqTo9t/0CvOxwPbRIE2Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/scope-manager@8.23.0':
    resolution: {integrity: sha512-OGqo7+dXHqI7Hfm+WqkZjKjsiRtFUQHPdGMXzk5mYXhJUedO7e/Y7i8AK3MyLMgZR93TX4bIzYrfyVjLC+0VSw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/type-utils@8.23.0':
    resolution: {integrity: sha512-iIuLdYpQWZKbiH+RkCGc6iu+VwscP5rCtQ1lyQ7TYuKLrcZoeJVpcLiG8DliXVkUxirW/PWlmS+d6yD51L9jvA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/types@8.23.0':
    resolution: {integrity: sha512-1sK4ILJbCmZOTt9k4vkoulT6/y5CHJ1qUYxqpF1K/DBAd8+ZUL4LlSCxOssuH5m4rUaaN0uS0HlVPvd45zjduQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.23.0':
    resolution: {integrity: sha512-LcqzfipsB8RTvH8FX24W4UUFk1bl+0yTOf9ZA08XngFwMg4Kj8A+9hwz8Cr/ZS4KwHrmo9PJiLZkOt49vPnuvQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/utils@8.23.0':
    resolution: {integrity: sha512-uB/+PSo6Exu02b5ZEiVtmY6RVYO7YU5xqgzTIVZwTHvvK3HsL8tZZHFaTLFtRG3CsV4A5mhOv+NZx5BlhXPyIA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/visitor-keys@8.23.0':
    resolution: {integrity: sha512-oWWhcWDLwDfu++BGTZcmXWqpwtkwb5o7fxUIGksMQQDSdPW9prsSnfIOZMlsj4vBOSrcnjIUZMiIjODgGosFhQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript/vfs@1.6.1':
    resolution: {integrity: sha512-JwoxboBh7Oz1v38tPbkrZ62ZXNHAk9bJ7c9x0eI5zBfBnBYGhURdbnh7Z4smN/MV48Y5OCcZb58n972UtbazsA==}
    peerDependencies:
      typescript: '*'

  '@ungap/structured-clone@1.3.0':
    resolution: {integrity: sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==}

  '@webassemblyjs/ast@1.14.1':
    resolution: {integrity: sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==}

  '@webassemblyjs/floating-point-hex-parser@1.13.2':
    resolution: {integrity: sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==}

  '@webassemblyjs/helper-api-error@1.13.2':
    resolution: {integrity: sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==}

  '@webassemblyjs/helper-buffer@1.14.1':
    resolution: {integrity: sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==}

  '@webassemblyjs/helper-numbers@1.13.2':
    resolution: {integrity: sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==}

  '@webassemblyjs/helper-wasm-bytecode@1.13.2':
    resolution: {integrity: sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    resolution: {integrity: sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==}

  '@webassemblyjs/ieee754@1.13.2':
    resolution: {integrity: sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==}

  '@webassemblyjs/leb128@1.13.2':
    resolution: {integrity: sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==}

  '@webassemblyjs/utf8@1.13.2':
    resolution: {integrity: sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==}

  '@webassemblyjs/wasm-edit@1.14.1':
    resolution: {integrity: sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==}

  '@webassemblyjs/wasm-gen@1.14.1':
    resolution: {integrity: sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==}

  '@webassemblyjs/wasm-opt@1.14.1':
    resolution: {integrity: sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==}

  '@webassemblyjs/wasm-parser@1.14.1':
    resolution: {integrity: sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==}

  '@webassemblyjs/wast-printer@1.14.1':
    resolution: {integrity: sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  acorn-import-attributes@1.9.5:
    resolution: {integrity: sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==}
    peerDependencies:
      acorn: ^8

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@6.0.2:
    resolution: {integrity: sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==}
    engines: {node: '>= 6.0.0'}

  agentkeepalive@4.6.0:
    resolution: {integrity: sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==}
    engines: {node: '>= 8.0.0'}

  ai@4.1.25:
    resolution: {integrity: sha512-gBdx5QqM3EK97F9/opVicP3WMHfiR0/cc96xdNnsFLpcuPBXPtm6lcK56G6ok19+NZggnVcS+KIHzFtp0aHC+g==}
    engines: {node: '>=18'}
    peerDependencies:
      react: 19.0.0
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  ai@4.1.34:
    resolution: {integrity: sha512-9IB5duz6VbXvjibqNrvKz6++PwE8Ui5UfbOC9/CtcQN5Z9sudUQErss+maj7ptoPysD2NPjj99e0Hp183Cz5LQ==}
    engines: {node: '>=18'}
    peerDependencies:
      react: 19.0.0
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@3.5.2:
    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
    peerDependencies:
      ajv: ^6.9.1

  ajv-keywords@5.1.0:
    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
    peerDependencies:
      ajv: ^8.8.2

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  ansi-colors@4.1.3:
    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}
    engines: {node: '>=6'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.4:
    resolution: {integrity: sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A==}
    engines: {node: '>=10'}

  aria-query@5.3.2:
    resolution: {integrity: sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==}
    engines: {node: '>= 0.4'}

  array-buffer-byte-length@1.0.2:
    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.5:
    resolution: {integrity: sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.3:
    resolution: {integrity: sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.3:
    resolution: {integrity: sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.4:
    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
    engines: {node: '>= 0.4'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  ast-types@0.14.2:
    resolution: {integrity: sha512-O0yuUDnZeQDL+ncNGlJ78BiO4jnYI3bvMsD5prT0/nsgijG/LpNBIr63gTjVTNsiGkgQhiyCShTgxt8oXOrklA==}
    engines: {node: '>=4'}

  ast-types@0.16.1:
    resolution: {integrity: sha512-6t10qk83GOG8p0vKmaCr8eiilZwO171AvbROMtvvNiwrTly62t+7XkA8RdIIVbpMhCASAsxgAzdRSwh6nw/5Dg==}
    engines: {node: '>=4'}

  astring@1.9.0:
    resolution: {integrity: sha512-LElXdjswlqjWrPpJFg1Fx4wpkOCxj1TDHlSV4PlaRxHGWko024xICaa97ZkMfs6DRKlCguiAI+rbXv5GWwXIkg==}
    hasBin: true

  async-function@1.0.0:
    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
    engines: {node: '>= 0.4'}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  autoprefixer@10.4.20:
    resolution: {integrity: sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axe-core@4.10.2:
    resolution: {integrity: sha512-RE3mdQ7P3FRSe7eqCWoeQ/Z9QXrtniSjp1wUjt5nRC3WIpz5rSCve6o3fsZ2aCpJtrZjSZgjwXAoTO5k4tEI0w==}
    engines: {node: '>=4'}

  axobject-query@4.1.0:
    resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
    engines: {node: '>= 0.4'}

  bail@2.0.2:
    resolution: {integrity: sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  better-path-resolve@1.0.0:
    resolution: {integrity: sha512-pbnl5XzGBdrFU/wT4jqmJVPn2B6UHPBOhzMQkY/SPUPB6QtUXtmBHBIwCbXJol93mOpGMnQyP/+BB19q04xj7g==}
    engines: {node: '>=4'}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.24.4:
    resolution: {integrity: sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  buffer-equal-constant-time@1.0.1:
    resolution: {integrity: sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  bundle-require@5.1.0:
    resolution: {integrity: sha512-3WrrOuZiyaaZPWiEt4G3+IffISVC9HYlWueJEBWED4ZH4aIAC2PnkdnuRrR94M+w6yGWn4AglWtJtBI8YqvgoA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
    peerDependencies:
      esbuild: '>=0.18'

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  call-bind-apply-helpers@1.0.1:
    resolution: {integrity: sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.3:
    resolution: {integrity: sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001698:
    resolution: {integrity: sha512-xJ3km2oiG/MbNU8G6zIq6XRZ6HtAOVXsbOrP/blGazi52kc5Yy7b6sDA5O+FbROzRrV7BSTllLHuNvmawYUJjw==}

  ccount@2.0.1:
    resolution: {integrity: sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==}

  chalk@3.0.0:
    resolution: {integrity: sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==}
    engines: {node: '>=8'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.4.1:
    resolution: {integrity: sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  character-entities-html4@2.1.0:
    resolution: {integrity: sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==}

  character-entities-legacy@1.1.4:
    resolution: {integrity: sha512-3Xnr+7ZFS1uxeiUDvV02wQ+QDbc55o97tIV5zHScSPJpcLm/r0DFPcoY3tYRp+VZukxuMeKgXYmsXQHO05zQeA==}

  character-entities-legacy@3.0.0:
    resolution: {integrity: sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==}

  character-entities@1.2.4:
    resolution: {integrity: sha512-iBMyeEHxfVnIakwOuDXpVkc54HijNgCyQB2w0VfGQThle6NXn50zU6V/u+LDhxHcDUPojn6Kpga3PTAD8W1bQw==}

  character-entities@2.0.2:
    resolution: {integrity: sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==}

  character-reference-invalid@1.1.4:
    resolution: {integrity: sha512-mKKUkUbhPpQlCOfIuZkvSEgktjPFIsZKRRbC6KWVEMvlzblj3i3asQv5ODsrwt0N3pHAEvjP8KTQPHkp0+6jOg==}

  character-reference-invalid@2.0.1:
    resolution: {integrity: sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==}

  chardet@0.7.0:
    resolution: {integrity: sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chokidar@4.0.3:
    resolution: {integrity: sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==}
    engines: {node: '>= 14.16.0'}

  chrome-trace-event@1.0.4:
    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
    engines: {node: '>=6.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cjs-module-lexer@1.4.3:
    resolution: {integrity: sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==}

  class-variance-authority@0.7.1:
    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}

  classnames@2.5.1:
    resolution: {integrity: sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==}

  cli-progress@3.12.0:
    resolution: {integrity: sha512-tRkV3HJ1ASwm19THiiLIXLO7Im7wlTuKnvkYaTkyoAPefqjNg7W7DHKUlGRxy9vxDvbyCYQkQozvptuMkGCg8A==}
    engines: {node: '>=4'}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  clone-deep@4.0.1:
    resolution: {integrity: sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==}
    engines: {node: '>=6'}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  code-block-writer@13.0.3:
    resolution: {integrity: sha512-Oofo0pq3IKnsFtuHqSF7TqBfr71aeyZDVJ0HpmqB7FBM2qEigL0iPONSCZSO9pE9dZTAxANe5XHG9Uy0YMv8cg==}

  collapse-white-space@2.1.0:
    resolution: {integrity: sha512-loKTxY1zCOuG4j9f6EPnuyyYkf58RnhhWTvRoZEokgB+WbdXehfjFviyOVYkqzEWz1Q5kRiZdBYS5SwxbQYwzw==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  comma-separated-tokens@1.0.8:
    resolution: {integrity: sha512-GHuDRO12Sypu2cV70d1dkA2EUmXHgntrzbpvOB+Qy+49ypNfGgFQIC2fhhXbnyrJRynDCAARsT7Ou0M6hirpfw==}

  comma-separated-tokens@2.0.3:
    resolution: {integrity: sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==}

  commander@13.1.0:
    resolution: {integrity: sha512-/rFeCpNJQbhSZjGVwO9RFV3xPqbnERS8MmIQzCtD/zl6gpJuV/bMLuN92oG3F7d8oDEHHRrujSXNUr8fpjntKw==}
    engines: {node: '>=18'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commander@8.3.0:
    resolution: {integrity: sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==}
    engines: {node: '>= 12'}

  commondir@1.0.1:
    resolution: {integrity: sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==}

  compute-scroll-into-view@3.1.1:
    resolution: {integrity: sha512-VRhuHOLoKYOy4UbilLbUzbYg93XLjv2PncJC50EuTWPA3gaja1UjBsUP/D/9/juV3vQFr6XBEzn9KCAHdUvOHw==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  consola@3.4.0:
    resolution: {integrity: sha512-EiPU8G6dQG0GFHNR8ljnZFki/8a+cQwEQ+7wpxdChl02Q8HXlwEZWD5lqAF8vC2sEC3Tehr8hy7vErz88LHyUA==}
    engines: {node: ^14.18.0 || >=16.10.0}

  console-table-printer@2.12.1:
    resolution: {integrity: sha512-wKGOQRRvdnd89pCeH96e2Fn4wkbenSP6LMHfjfyNLMbGuHEFbMqQNuxXqd0oXG9caIOQ1FTvc5Uijp9/4jujnQ==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cosmiconfig@9.0.0:
    resolution: {integrity: sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=4.9.5'
    peerDependenciesMeta:
      typescript:
        optional: true

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-view-buffer@1.0.2:
    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.2:
    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.1:
    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
    engines: {node: '>= 0.4'}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decamelize@1.2.0:
    resolution: {integrity: sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==}
    engines: {node: '>=0.10.0'}

  decode-named-character-reference@1.0.2:
    resolution: {integrity: sha512-O8x12RzrUF8xyVcY0KJowWsmaJxQbmy0/EtnNtHRpsOcT7dFk5W598coHqBVpmWo1oQQfsCqfCmkZN5DJrZVdg==}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  detect-indent@6.1.0:
    resolution: {integrity: sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==}
    engines: {node: '>=8'}

  detect-libc@1.0.3:
    resolution: {integrity: sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==}
    engines: {node: '>=0.10'}
    hasBin: true

  detect-libc@2.0.3:
    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}
    engines: {node: '>=8'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  detect-package-manager@3.0.2:
    resolution: {integrity: sha512-8JFjJHutStYrfWwzfretQoyNGoZVW1Fsrp4JO9spa7h/fBfwgTMEIy4/LBzRDGsxwVPHU0q+T9YvwLDJoOApLQ==}
    engines: {node: '>=12'}

  devlop@1.1.0:
    resolution: {integrity: sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  diff-match-patch@1.0.5:
    resolution: {integrity: sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  dotenv@16.4.7:
    resolution: {integrity: sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==}
    engines: {node: '>=12'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ecdsa-sig-formatter@1.0.11:
    resolution: {integrity: sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==}

  electron-to-chromium@1.5.96:
    resolution: {integrity: sha512-8AJUW6dh75Fm/ny8+kZKJzI1pgoE8bKLZlzDU2W1ENd+DXKJrx7I7l9hb8UWR4ojlnb5OlixMt00QWiYJoVw1w==}

  embla-carousel-autoplay@8.5.2:
    resolution: {integrity: sha512-27emJ0px3q/c0kCHCjwRrEbYcyYUPfGO3g5IBWF1i7714TTzE6L9P81V6PHLoSMAKJ1aHoT2e7YFOsuFKCbyag==}
    peerDependencies:
      embla-carousel: 8.5.2

  embla-carousel-react@8.5.2:
    resolution: {integrity: sha512-Tmx+uY3MqseIGdwp0ScyUuxpBgx5jX1f7od4Cm5mDwg/dptEiTKf9xp6tw0lZN2VA9JbnVMl/aikmbc53c6QFA==}
    peerDependencies:
      react: 19.0.0

  embla-carousel-reactive-utils@8.5.2:
    resolution: {integrity: sha512-QC8/hYSK/pEmqEdU1IO5O+XNc/Ptmmq7uCB44vKplgLKhB/l0+yvYx0+Cv0sF6Ena8Srld5vUErZkT+yTahtDg==}
    peerDependencies:
      embla-carousel: 8.5.2

  embla-carousel@8.5.2:
    resolution: {integrity: sha512-xQ9oVLrun/eCG/7ru3R+I5bJ7shsD8fFwLEY7yPe27/+fDHCNj0OT5EoG5ZbFyOxOcG6yTwW8oTz/dWyFnyGpg==}

  emoji-regex-xs@1.0.0:
    resolution: {integrity: sha512-LRlerrMYoIDrT6jgpeZ2YYl/L8EulRTt5hQcYjy5AInh7HWXKimpqx68aknBFpGL2+/IcogTcaydJEgaTmOpDg==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  enhanced-resolve@5.18.1:
    resolution: {integrity: sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==}
    engines: {node: '>=10.13.0'}

  enquirer@2.4.1:
    resolution: {integrity: sha512-rRqJg/6gd538VHvR3PSrdRBb/1Vy2YfzHqzvbhGIQpDRKIa4FgV/54b5Q1xYSxOOwKvjXweS26E0Q+nAMwp2pQ==}
    engines: {node: '>=8.6'}

  entities@4.5.0:
    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
    engines: {node: '>=0.12'}

  env-paths@2.2.1:
    resolution: {integrity: sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==}
    engines: {node: '>=6'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-abstract@1.23.9:
    resolution: {integrity: sha512-py07lI0wjxAC/DcfK1S6G7iANonniZwTISvdPzk9hzeH0IZIshbuuFxLIU96OyF89Yb9hiqWn8M/bY83KY5vzA==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-iterator-helpers@1.2.1:
    resolution: {integrity: sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.6.0:
    resolution: {integrity: sha512-qqnD1yMU6tk/jnaMosogGySTZP8YtUgAffA9nMN+E/rjxcfRQ6IEk7IiozUjgxKoFHBGjTLnrHB/YC45r/59EQ==}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.0.2:
    resolution: {integrity: sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  esast-util-from-estree@2.0.0:
    resolution: {integrity: sha512-4CyanoAudUSBAn5K13H4JhsMH6L9ZP7XbLVe/dKybkxMO7eDyLsT8UHl9TRNrU2Gr9nz+FovfSIjuXWJ81uVwQ==}

  esast-util-from-js@2.0.1:
    resolution: {integrity: sha512-8Ja+rNJ0Lt56Pcf3TAmpBZjmx8ZcK5Ts4cAzIOjsjevg9oSXJnl6SUQ2EevU8tv3h6ZLWmoKL5H4fgWvdvfETw==}

  esbuild-plugin-file-path-extensions@2.1.4:
    resolution: {integrity: sha512-lNjylaAsJMprYg28zjUyBivP3y0ms9b7RJZ5tdhDUFLa3sCbqZw4wDnbFUSmnyZYWhCYDPxxp7KkXM2TXGw3PQ==}
    engines: {node: '>=v14.0.0', npm: '>=7.0.0'}

  esbuild@0.23.1:
    resolution: {integrity: sha512-VVNz/9Sa0bs5SELtn3f7qhJCDPCF5oMEl5cO9/SSinpE9hbPVvxbd572HH5AKiP7WD8INO53GgfDDhRjkylHEg==}
    engines: {node: '>=18'}
    hasBin: true

  esbuild@0.24.2:
    resolution: {integrity: sha512-+9egpBW8I3CD5XPe0n6BfT5fxLzxrlDzqydF3aviG+9ni1lDC/OvMHcxqEFV0+LANZG5R1bFMWfUrjVsdwxJvA==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  escape-string-regexp@5.0.0:
    resolution: {integrity: sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==}
    engines: {node: '>=12'}

  eslint-config-next@15.1.6:
    resolution: {integrity: sha512-Wd1uy6y7nBbXUSg9QAuQ+xYEKli5CgUhLjz1QHW11jLDis5vK5XB3PemL6jEmy7HrdhaRFDz+GTZ/3FoH+EUjg==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0 || ^9.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.7.0:
    resolution: {integrity: sha512-Vrwyi8HHxY97K5ebydMtffsWAn1SCR9eol49eCd5fJS4O1WV7PaAjbcjmbfJJSMz/t4Mal212Uz/fQZrOB8mow==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.12.0:
    resolution: {integrity: sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.31.0:
    resolution: {integrity: sha512-ixmkI62Rbc2/w8Vfxyh1jQRTdRTF52VxwRVHl/ykPAmqG+Nb7/kNn+byLP0LxPgI7zWA16Jt82SybJInmMia3A==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.10.2:
    resolution: {integrity: sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9

  eslint-plugin-react-hooks@5.1.0:
    resolution: {integrity: sha512-mpJRtPgHN2tNAvZ35AMfqeB3Xqeo273QxrHJsbBEPWODRM4r0yB6jfoROqKEYrOn27UtRPpcpHc2UqyBSuUNTw==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0

  eslint-plugin-react@7.37.4:
    resolution: {integrity: sha512-BGP0jRmfYyvOyvMoRX/uoUeW+GqNj9y16bPQzqAHf3AYII/tDs+jMN0dBVkl88/OZwNGwrVFxE7riHsXVfy/LQ==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  eslint-scope@8.2.0:
    resolution: {integrity: sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-scope@8.3.0:
    resolution: {integrity: sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.0:
    resolution: {integrity: sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.20.0:
    resolution: {integrity: sha512-aL4F8167Hg4IvsW89ejnpTwx+B/UQRzJPGgbIOl+4XqffWsahVVsLEWoZvnrVuwpWmnRd7XeXmQI1zlKcFDteA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  eslint@9.22.0:
    resolution: {integrity: sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.3.0:
    resolution: {integrity: sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-util-attach-comments@3.0.0:
    resolution: {integrity: sha512-cKUwm/HUcTDsYh/9FgnuFqpfquUbwIqwKM26BVCGDPVgvaCl/nDCCjUfiLlx6lsEZ3Z4RFxNbOQ60pkaEwFxGw==}

  estree-util-build-jsx@3.0.1:
    resolution: {integrity: sha512-8U5eiL6BTrPxp/CHbs2yMgP8ftMhR5ww1eIKoWRMlqvltHF8fZn5LRDvTKuxD3DUn+shRbLGqXemcP51oFCsGQ==}

  estree-util-is-identifier-name@3.0.0:
    resolution: {integrity: sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==}

  estree-util-scope@1.0.0:
    resolution: {integrity: sha512-2CAASclonf+JFWBNJPndcOpA8EMJwa0Q8LUFJEKqXLW6+qBvbFZuF5gItbQOs/umBUkjviCSDCbBwU2cXbmrhQ==}

  estree-util-to-js@2.0.0:
    resolution: {integrity: sha512-WDF+xj5rRWmD5tj6bIqRi6CkLIXbbNQUcxQHzGysQzvHmdYG2G7p/Tf0J0gpxGgkeMZNTIjT/AoSvC9Xehcgdg==}

  estree-util-value-to-estree@3.3.2:
    resolution: {integrity: sha512-hYH1aSvQI63Cvq3T3loaem6LW4u72F187zW4FHpTrReJSm6W66vYTFNO1vH/chmcOulp1HlAj1pxn8Ag0oXI5Q==}

  estree-util-visit@2.0.0:
    resolution: {integrity: sha512-m5KgiH85xAhhW8Wta0vShLcUvOsh3LLPI2YVwcbio1l7E09NTLL1EyMZFM1OyWowoH0skScNbhOPl4kcBgzTww==}

  estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  eventsource-parser@3.0.0:
    resolution: {integrity: sha512-T1C0XCUimhxVQzW4zFipdx0SficT651NnkR0ZSH3yQwh+mFMdLfgjABVi4YtMTtaL4s168593DaoaRLMqryavA==}
    engines: {node: '>=18.0.0'}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  extend-shallow@2.0.1:
    resolution: {integrity: sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==}
    engines: {node: '>=0.10.0'}

  extend@3.0.2:
    resolution: {integrity: sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==}

  extendable-error@0.1.7:
    resolution: {integrity: sha512-UOiS2in6/Q0FK0R0q6UY9vYpQ21mr/Qn1KOnte7vsACuNJf514WvCCUHSRCPcgjPT2bAhNIJdlE6bVap1GKmeg==}

  external-editor@3.1.0:
    resolution: {integrity: sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==}
    engines: {node: '>=4'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-uri@3.0.6:
    resolution: {integrity: sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==}

  fastq@1.19.0:
    resolution: {integrity: sha512-7SFSRCNjBQIZH/xZR3iy5iQYR8aGBE0h3VG6/cwlbrpdciNYBMotQav8c1XI3HjHH+NikUpP53nPdlZSdWmFzA==}

  fault@1.0.4:
    resolution: {integrity: sha512-CJ0HCB5tL5fYTEA7ToAq5+kTwd++Borf1/bifxd9iT70QcXr4MRrO3Llf8Ifs70q+SJcGHFtnIE/Nw6giCtECA==}

  fdir@6.4.3:
    resolution: {integrity: sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==}
    peerDependencies:
      picomatch: ^3 || ^4
    peerDependenciesMeta:
      picomatch:
        optional: true

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-cache-dir@2.1.0:
    resolution: {integrity: sha512-Tq6PixE0w/VMFfCgbONnkiQIVol/JJL7nRMi20fqzA4NRs9AfeqMGeRdPi3wIhYkxjeBaWh2rxwapn5Tu3IqOQ==}
    engines: {node: '>=6'}

  find-up@3.0.0:
    resolution: {integrity: sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==}
    engines: {node: '>=6'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.2:
    resolution: {integrity: sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==}

  flow-parser@0.259.1:
    resolution: {integrity: sha512-xiXLmMH2Z7OmdE9Q+MjljUMr/rbemFqZIRxaeZieVScG4HzQrKKhNcCYZbWTGpoN7ZPi7z8ClQbeVPq6t5AszQ==}
    engines: {node: '>=0.4.0'}

  for-each@0.3.4:
    resolution: {integrity: sha512-kKaIINnFpzW6ffJNDjjyjrk21BkDx38c0xa/klsT8VzLCaMEefv4ZTacrcVR4DmgTeBra++jMDAfS/tS799YDw==}
    engines: {node: '>= 0.4'}

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  form-data-encoder@1.7.2:
    resolution: {integrity: sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==}

  form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}

  format@0.2.2:
    resolution: {integrity: sha512-wzsgA6WOq+09wrU1tsJ09udeR/YZRaeArL9e1wPbFg3GG2yDnC2ldKpxs4xunpFF9DgqCqOIra3bc1HWrJ37Ww==}
    engines: {node: '>=0.4.x'}

  formdata-node@4.4.1:
    resolution: {integrity: sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==}
    engines: {node: '>= 12.20'}

  forwarded-parse@2.1.2:
    resolution: {integrity: sha512-alTFZZQDKMporBH77856pXgzhEzaUVmLCDk+egLgIgHst3Tpndzz8MnKe+GzRJRfvVdn69HhpW7cmXzvtLvJAw==}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  framer-motion@12.4.1:
    resolution: {integrity: sha512-5Ijbea3topSZjadQ0hgc/TcWj2ldMZmNREM7RvAhvsThYOA1HHOA8TT1yKvMu1YXP3jWaFwoZ6Vo9Nw+DUZrzA==}
    peerDependencies:
      '@emotion/is-prop-valid': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@emotion/is-prop-valid':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  fs-extra@7.0.1:
    resolution: {integrity: sha512-YJDaCJZEnBmcbw13fvdAM9AwNOJwOzrE4pqMqBq5nFiEqXUqHwlK4B+3pUw6JNvfSPtX05xFHtYy/1ni01eGCw==}
    engines: {node: '>=6 <7 || >=8'}

  fs-extra@8.1.0:
    resolution: {integrity: sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==}
    engines: {node: '>=6 <7 || >=8'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  fumadocs-core@15.0.4:
    resolution: {integrity: sha512-k2fr02N0XwdxnR2KOUFGG0aV/5XBw2EN0r6cUEJH/Zk6kWf7mjoG82GuQjxAqnzNBF6qxxXvRzpQ3La22drvBQ==}
    peerDependencies:
      '@orama/tokenizers': 2.x.x
      '@oramacloud/client': 1.x.x || 2.x.x
      algoliasearch: 4.24.0
      next: 14.x.x || 15.x.x
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@orama/tokenizers':
        optional: true
      '@oramacloud/client':
        optional: true
      algoliasearch:
        optional: true
      next:
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  fumadocs-mdx@11.5.1:
    resolution: {integrity: sha512-YSujA/yoM2OiYt4kPa0YXkd54T9QzGR/iM7c+2YAn+7waBvBv9+xMDHnCNMvCroFkfmj8IVtDbLwfSyLZ1RT9g==}
    hasBin: true
    peerDependencies:
      '@fumadocs/mdx-remote': ^1.2.0
      fumadocs-core: ^14.0.0 || ^15.0.0
      next: 14.x.x || 15.x.x
    peerDependenciesMeta:
      '@fumadocs/mdx-remote':
        optional: true

  fumadocs-twoslash@3.0.0:
    resolution: {integrity: sha512-6fcNTkhMANMsVt0qUYiYI/W5pjpylfHE6114M+flnlJdf9S5eN4sH9Tmaoylp02Txwn0NanZQDOOyVJoS7vqOA==}
    peerDependencies:
      fumadocs-ui: ^15.0.0
      react: 19.0.0
      shiki: 1.x.x || 2.x.x

  fumadocs-ui@15.0.4:
    resolution: {integrity: sha512-+Yb9y0TpRzRueic6jp46gzjxnyys/GiqMb5x+er9CUNHnhPQpQW+zo9Snx7PQ2yPDefXj3lgPuMZPdsoKFfh6g==}
    peerDependencies:
      fumadocs-core: 15.0.4
      next: 14.x.x || 15.x.x
      react: 19.0.0
      react-dom: 19.0.0
      tailwindcss: ^3.4.14 || ^4.0.0
    peerDependenciesMeta:
      tailwindcss:
        optional: true

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.8:
    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  geist@1.3.1:
    resolution: {integrity: sha512-Q4gC1pBVPN+D579pBaz0TRRnGA4p9UK6elDY/xizXdFk/g4EKR5g0I+4p/Kj6gM0SajDBZ/0FvDV9ey9ud7BWw==}
    peerDependencies:
      next: '>=13.2.0'

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-intrinsic@1.2.7:
    resolution: {integrity: sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==}
    engines: {node: '>= 0.4'}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  get-symbol-description@1.1.0:
    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.0:
    resolution: {integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==}

  github-slugger@2.0.0:
    resolution: {integrity: sha512-IaOQ9puYtjrkq7Y0Ygl9KDZnrf/aiUJYUpVf89y8kyaxbRG7Y1SrX/jaumrv81vc61+kiMempujsM3Yw7w5qcw==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@11.0.1:
    resolution: {integrity: sha512-zrQDm8XPnYEKawJScsnM0QzobJxlT/kHOOlRTio8IH/GrmxRE5fjllkzdaHclIuNjUQTJYH2xHNIGfdpJkDJUw==}
    engines: {node: 20 || >=22}
    hasBin: true

  glob@9.3.5:
    resolution: {integrity: sha512-e1LleDykUz2Iu+MTYdkSsuWX8lvAjAcs0Xef0lNIu0S2wOAzuTxCJtcd9S3cijlwYF18EsU3rzb8jPVobxDh9Q==}
    engines: {node: '>=16 || 14 >=14.17'}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  gray-matter@4.0.3:
    resolution: {integrity: sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==}
    engines: {node: '>=6.0'}

  has-bigints@1.1.0:
    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
    engines: {node: '>= 0.4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.2.0:
    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hast-util-from-dom@5.0.1:
    resolution: {integrity: sha512-N+LqofjR2zuzTjCPzyDUdSshy4Ma6li7p/c3pA78uTwzFgENbgbUrm2ugwsOdcjI1muO+o6Dgzp9p8WHtn/39Q==}

  hast-util-from-html-isomorphic@2.0.0:
    resolution: {integrity: sha512-zJfpXq44yff2hmE0XmwEOzdWin5xwH+QIhMLOScpX91e/NSGPsAzNCvLQDIEPyO2TXi+lBmU6hjLIhV8MwP2kw==}

  hast-util-from-html@2.0.3:
    resolution: {integrity: sha512-CUSRHXyKjzHov8yKsQjGOElXy/3EKpyX56ELnkHH34vDVw1N1XSQ1ZcAvTyAPtGqLTuKP/uxM+aLkSPqF/EtMw==}

  hast-util-from-parse5@8.0.2:
    resolution: {integrity: sha512-SfMzfdAi/zAoZ1KkFEyyeXBn7u/ShQrfd675ZEE9M3qj+PMFX05xubzRyF76CCSJu8au9jgVxDV1+okFvgZU4A==}

  hast-util-is-element@3.0.0:
    resolution: {integrity: sha512-Val9mnv2IWpLbNPqc/pUem+a7Ipj2aHacCwgNfTiK0vJKl0LF+4Ba4+v1oPHFpf3bLYmreq0/l3Gud9S5OH42g==}

  hast-util-parse-selector@2.2.5:
    resolution: {integrity: sha512-7j6mrk/qqkSehsM92wQjdIgWM2/BW61u/53G6xmC8i1OmEdKLHbk419QKQUjz6LglWsfqoiHmyMRkP1BGjecNQ==}

  hast-util-parse-selector@4.0.0:
    resolution: {integrity: sha512-wkQCkSYoOGCRKERFWcxMVMOcYE2K1AaNLU8DXS9arxnLOUEWbOXKXiJUNzEpqZ3JOKpnha3jkFrumEjVliDe7A==}

  hast-util-to-estree@3.1.1:
    resolution: {integrity: sha512-IWtwwmPskfSmma9RpzCappDUitC8t5jhAynHhc1m2+5trOgsrp7txscUSavc5Ic8PATyAjfrCK1wgtxh2cICVQ==}

  hast-util-to-html@9.0.4:
    resolution: {integrity: sha512-wxQzXtdbhiwGAUKrnQJXlOPmHnEehzphwkK7aluUPQ+lEc1xefC8pblMgpp2w5ldBTEfveRIrADcrhGIWrlTDA==}

  hast-util-to-jsx-runtime@2.3.2:
    resolution: {integrity: sha512-1ngXYb+V9UT5h+PxNRa1O1FYguZK/XL+gkeqvp7EdHlB9oHUG0eYRo/vY5inBdcqo3RkPMC58/H94HvkbfGdyg==}

  hast-util-to-string@3.0.1:
    resolution: {integrity: sha512-XelQVTDWvqcl3axRfI0xSeoVKzyIFPwsAGSLIsKdJKQMXDYJS4WYrBNF/8J7RdhIcFI2BOHgAifggsvsxp/3+A==}

  hast-util-to-text@4.0.2:
    resolution: {integrity: sha512-KK6y/BN8lbaq654j7JgBydev7wuNMcID54lkRav1P0CaE1e47P72AWWPiGKXTJU271ooYzcvTAn/Zt0REnvc7A==}

  hast-util-whitespace@3.0.0:
    resolution: {integrity: sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==}

  hastscript@6.0.0:
    resolution: {integrity: sha512-nDM6bvd7lIqDUiYEiu5Sl/+6ReP0BMk/2f4U/Rooccxkj0P5nm+acM5PrGJ/t5I8qPGiqZSE6hVAwZEdZIvP4w==}

  hastscript@9.0.0:
    resolution: {integrity: sha512-jzaLBGavEDKHrc5EfFImKN7nZKKBdSLIdGvCwDZ9TfzbF2ffXiov8CKE445L2Z1Ek2t/m4SKQ2j6Ipv7NyUolw==}

  highlight.js@10.7.3:
    resolution: {integrity: sha512-tzcUFauisWKNHaRkN4Wjl/ZA07gENAjFl3J/c480dprkGTg5EQstgaNFqBfUqCq54kZRIEcreTsAgF/m2quD7A==}

  highlightjs-vue@1.0.0:
    resolution: {integrity: sha512-PDEfEF102G23vHmPhLyPboFCD+BkMGu+GuJe2d9/eH4FsCwvgBpnc9n0pGE+ffKdph38s6foEZiEjdgHdzp+IA==}

  hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}

  html-url-attributes@3.0.1:
    resolution: {integrity: sha512-ol6UPyBWqsrO6EJySPz2O7ZSr856WDrEzM5zMqp+FJJLGMW35cLYmmZnl0vztAZxRUoNZJFTCohfjuIJ8I4QBQ==}

  html-void-elements@3.0.0:
    resolution: {integrity: sha512-bEqo66MRXsUGxWHV5IP0PUiAWwoEjba4VCzg0LjFJBpchPaTfyfCKTG6bc5F8ucKec3q5y6qOdGyYTSBEvhCrg==}

  https-proxy-agent@5.0.1:
    resolution: {integrity: sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==}
    engines: {node: '>= 6'}

  human-id@4.1.1:
    resolution: {integrity: sha512-3gKm/gCSUipeLsRYZbbdA1BD83lBoWUkZ7G9VFrhWPAU76KwYo5KR8V28bpoPm/ygy0x5/GCbpRQdY7VLYCoIg==}
    hasBin: true

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  humanize-ms@1.2.1:
    resolution: {integrity: sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  image-size@1.2.0:
    resolution: {integrity: sha512-4S8fwbO6w3GeCVN6OPtA9I5IGKkcDMPcKndtUlpJuCwu7JLjtj7JZpwqLuyY2nrmQT3AWsCJLSKPsc2mPBSl3w==}
    engines: {node: '>=16.x'}
    hasBin: true

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  import-in-the-middle@1.13.0:
    resolution: {integrity: sha512-YG86SYDtrL/Yu8JgfWb7kjQ0myLeT1whw6fs/ZHFkXFcbk9zJU9lOCsSJHpvaPumU11nN3US7NW6x1YTk+HrUA==}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  inline-style-parser@0.2.4:
    resolution: {integrity: sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q==}

  internal-slot@1.1.0:
    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
    engines: {node: '>= 0.4'}

  is-alphabetical@1.0.4:
    resolution: {integrity: sha512-DwzsA04LQ10FHTZuL0/grVDk4rFoVH1pjAToYwBrHSxcrBIGQuXrQMtD5U1b0U2XVgKZCTLLP8u2Qxqhy3l2Vg==}

  is-alphabetical@2.0.1:
    resolution: {integrity: sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==}

  is-alphanumerical@1.0.4:
    resolution: {integrity: sha512-UzoZUr+XfVz3t3v4KyGEniVL9BDRoQtY7tOyrRybkVNjDFWyo1yhXNGrrBTQxp3ib9BLAWs7k2YKBQsFRkZG9A==}

  is-alphanumerical@2.0.1:
    resolution: {integrity: sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==}

  is-array-buffer@3.0.5:
    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-async-function@2.1.1:
    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
    engines: {node: '>= 0.4'}

  is-bigint@1.1.0:
    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
    engines: {node: '>= 0.4'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.2.2:
    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
    engines: {node: '>= 0.4'}

  is-bun-module@1.3.0:
    resolution: {integrity: sha512-DgXeu5UWI0IsMQundYb5UAOzm6G2eVnarJ0byP6Tm55iZNKceD59LNPA2L4VvsScTtHcw0yEkVwSf7PC+QoLSA==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.2:
    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
    engines: {node: '>= 0.4'}

  is-date-object@1.1.0:
    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
    engines: {node: '>= 0.4'}

  is-decimal@1.0.4:
    resolution: {integrity: sha512-RGdriMmQQvZ2aqaQq3awNA6dCGtKpiDFcOzrTWrDAT2MiWrKQVPmxLGHl7Y2nNu6led0kEyoX0enY0qXYsv9zw==}

  is-decimal@2.0.1:
    resolution: {integrity: sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==}

  is-extendable@0.1.1:
    resolution: {integrity: sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==}
    engines: {node: '>=0.10.0'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.1:
    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-hexadecimal@1.0.4:
    resolution: {integrity: sha512-gyPJuv83bHMpocVYoqof5VDiZveEoGoFL8m3BXNb2VW8Xs+rz9kqO8LOQ5DH6EsuvilT1ApazU0pyl+ytbPtlw==}

  is-hexadecimal@2.0.1:
    resolution: {integrity: sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.1.1:
    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-plain-obj@4.1.0:
    resolution: {integrity: sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==}
    engines: {node: '>=12'}

  is-plain-object@2.0.4:
    resolution: {integrity: sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==}
    engines: {node: '>=0.10.0'}

  is-reference@1.2.1:
    resolution: {integrity: sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.4:
    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-string@1.1.1:
    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
    engines: {node: '>= 0.4'}

  is-subdir@1.2.0:
    resolution: {integrity: sha512-2AT6j+gXe/1ueqbW6fLZJiIw3F8iXGJtt0yDrZaBhAZEG1raiTxKWU+IPqMCzQAXOUCKdA4UDMgacKH25XG2Cw==}
    engines: {node: '>=4'}

  is-symbol@1.1.1:
    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.1.1:
    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
    engines: {node: '>= 0.4'}

  is-weakset@2.0.4:
    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
    engines: {node: '>= 0.4'}

  is-windows@1.0.2:
    resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
    engines: {node: '>=0.10.0'}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isobject@3.0.1:
    resolution: {integrity: sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==}
    engines: {node: '>=0.10.0'}

  iterator.prototype@1.1.5:
    resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
    engines: {node: '>= 0.4'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jackspeak@4.0.2:
    resolution: {integrity: sha512-bZsjR/iRjl1Nk1UkjGpAzLNfQtzuijhn2g+pbZb98HQ1Gk8vM9hfbxeMBP+M2/UUdwj0RqGG3mlvk2MsAqwvEw==}
    engines: {node: 20 || >=22}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jiti@1.21.7:
    resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
    hasBin: true

  jiti@2.4.2:
    resolution: {integrity: sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==}
    hasBin: true

  joycon@3.1.1:
    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
    engines: {node: '>=10'}

  js-cookie@3.0.5:
    resolution: {integrity: sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==}
    engines: {node: '>=14'}

  js-tiktoken@1.0.18:
    resolution: {integrity: sha512-hFYx4xYf6URgcttcGvGuOBJhTxPYZ2R5eIesqCaNRJmYH8sNmsfTeWg4yu//7u1VD/qIUkgKJTpGom9oHXmB4g==}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jscodeshift@17.1.2:
    resolution: {integrity: sha512-uime4vFOiZ1o3ICT4Sm/AbItHEVw2oCxQ3a0egYVy3JMMOctxe07H3SKL1v175YqjMt27jn1N+3+Bj9SKDNgdQ==}
    engines: {node: '>=16'}
    hasBin: true
    peerDependencies:
      '@babel/preset-env': ^7.1.6
    peerDependenciesMeta:
      '@babel/preset-env':
        optional: true

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-to-zod@2.6.0:
    resolution: {integrity: sha512-6sFZqOzHZeON8g2ZW5HJ114Hb/FffNCjWh8dgulJaKFkUqKCEWZAzF4+g07SQpfBZF7HXemwedtdLypZzmnVpQ==}
    hasBin: true

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-schema@0.4.0:
    resolution: {integrity: sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsondiffpatch@0.6.0:
    resolution: {integrity: sha512-3QItJOXp2AP1uv7waBkao5nCvhEv+QmJAd38Ybq7wNI74Q+BBmnLn4EDKz6yI9xGAIQoUF87qHt+kc1IVxB4zQ==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true

  jsonfile@4.0.0:
    resolution: {integrity: sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==}

  jsonwebtoken@9.0.2:
    resolution: {integrity: sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==}
    engines: {node: '>=12', npm: '>=6'}

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  jwa@1.4.1:
    resolution: {integrity: sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==}

  jws@3.2.2:
    resolution: {integrity: sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==}

  katex@0.16.21:
    resolution: {integrity: sha512-XvqR7FgOHtWupfMiigNzmh+MgUVmDGU2kXZm899ZkPfcuoPuFxyHmXsgATDpFZDAXCI8tvinaVcDo8PIIJSo4A==}
    hasBin: true

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kind-of@6.0.3:
    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
    engines: {node: '>=0.10.0'}

  langsmith@0.3.7:
    resolution: {integrity: sha512-wakN1hxGkm1JR2PpAV7fiT7oC99LKcgxiuUrYGZWPbuj7Y8EPF19F7VNr4B+hA219bfaeWTa4Lxy2YrtPSKnQA==}
    peerDependencies:
      openai: '*'
    peerDependenciesMeta:
      openai:
        optional: true

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lightningcss-darwin-arm64@1.29.1:
    resolution: {integrity: sha512-HtR5XJ5A0lvCqYAoSv2QdZZyoHNttBpa5EP9aNuzBQeKGfbyH5+UipLWvVzpP4Uml5ej4BYs5I9Lco9u1fECqw==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [darwin]

  lightningcss-darwin-x64@1.29.1:
    resolution: {integrity: sha512-k33G9IzKUpHy/J/3+9MCO4e+PzaFblsgBjSGlpAaFikeBFm8B/CkO3cKU9oI4g+fjS2KlkLM/Bza9K/aw8wsNA==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [darwin]

  lightningcss-freebsd-x64@1.29.1:
    resolution: {integrity: sha512-0SUW22fv/8kln2LnIdOCmSuXnxgxVC276W5KLTwoehiO0hxkacBxjHOL5EtHD8BAXg2BvuhsJPmVMasvby3LiQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [freebsd]

  lightningcss-linux-arm-gnueabihf@1.29.1:
    resolution: {integrity: sha512-sD32pFvlR0kDlqsOZmYqH/68SqUMPNj+0pucGxToXZi4XZgZmqeX/NkxNKCPsswAXU3UeYgDSpGhu05eAufjDg==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm]
    os: [linux]

  lightningcss-linux-arm64-gnu@1.29.1:
    resolution: {integrity: sha512-0+vClRIZ6mmJl/dxGuRsE197o1HDEeeRk6nzycSy2GofC2JsY4ifCRnvUWf/CUBQmlrvMzt6SMQNMSEu22csWQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-arm64-musl@1.29.1:
    resolution: {integrity: sha512-UKMFrG4rL/uHNgelBsDwJcBqVpzNJbzsKkbI3Ja5fg00sgQnHw/VrzUTEc4jhZ+AN2BvQYz/tkHu4vt1kLuJyw==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-x64-gnu@1.29.1:
    resolution: {integrity: sha512-u1S+xdODy/eEtjADqirA774y3jLcm8RPtYztwReEXoZKdzgsHYPl0s5V52Tst+GKzqjebkULT86XMSxejzfISw==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-linux-x64-musl@1.29.1:
    resolution: {integrity: sha512-L0Tx0DtaNUTzXv0lbGCLB/c/qEADanHbu4QdcNOXLIe1i8i22rZRpbT3gpWYsCh9aSL9zFujY/WmEXIatWvXbw==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-win32-arm64-msvc@1.29.1:
    resolution: {integrity: sha512-QoOVnkIEFfbW4xPi+dpdft/zAKmgLgsRHfJalEPYuJDOWf7cLQzYg0DEh8/sn737FaeMJxHZRc1oBreiwZCjog==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [win32]

  lightningcss-win32-x64-msvc@1.29.1:
    resolution: {integrity: sha512-NygcbThNBe4JElP+olyTI/doBNGJvLs3bFCRPdvuCcxZCcCZ71B858IHpdm7L1btZex0FvCmM17FK98Y9MRy1Q==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [win32]

  lightningcss@1.29.1:
    resolution: {integrity: sha512-FmGoeD4S05ewj+AkhTY+D+myDvXI6eL27FjHIjoyUkO/uw7WZD1fBVs0QxeYWa7E17CUHJaYX/RUGISCtcrG4Q==}
    engines: {node: '>= 12.0.0'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  load-tsconfig@0.2.5:
    resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  locate-path@3.0.0:
    resolution: {integrity: sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==}
    engines: {node: '>=6'}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.includes@4.3.0:
    resolution: {integrity: sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==}

  lodash.isboolean@3.0.3:
    resolution: {integrity: sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==}

  lodash.isinteger@4.0.4:
    resolution: {integrity: sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==}

  lodash.isnumber@3.0.3:
    resolution: {integrity: sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==}

  lodash.isplainobject@4.0.6:
    resolution: {integrity: sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==}

  lodash.isstring@4.0.1:
    resolution: {integrity: sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash.once@4.1.1:
    resolution: {integrity: sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==}

  lodash.sortby@4.7.0:
    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}

  lodash.startcase@4.4.0:
    resolution: {integrity: sha512-+WKqsK294HMSc2jEbNgpHpd0JfIBhp7rEV4aqXWqFr6AlXov+SlcgB1Fv01y2kGe3Gc8nMW7VA0SrGuSkRfIEg==}

  longest-streak@3.1.0:
    resolution: {integrity: sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lowlight@1.20.0:
    resolution: {integrity: sha512-8Ktj+prEb1RoCPkEOrPMYUN/nCggB7qAWe3a7OpMjWQkh3l2RD5wKRQ+o8Q8YuI9RG/xs95waaI/E6ym/7NsTw==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@11.0.2:
    resolution: {integrity: sha512-123qHRfJBmo2jXDbo/a5YOQrJoHF/GNQTLzQ5+IdK5pWpceK17yRc6ozlWd25FxvGKQbIUs91fDFkXmDHTKcyA==}
    engines: {node: 20 || >=22}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lucide-react@0.474.0:
    resolution: {integrity: sha512-CmghgHkh0OJNmxGKWc0qfPJCYHASPMVSyGY8fj3xgk4v84ItqDg64JNKFZn5hC6E0vHi6gxnbCgwhyVB09wQtA==}
    peerDependencies:
      react: 19.0.0

  lucide-react@0.475.0:
    resolution: {integrity: sha512-NJzvVu1HwFVeZ+Gwq2q00KygM1aBhy/ZrhY9FsAgJtpB+E4R7uxRk9M2iKvHa6/vNxZydIB59htha4c2vvwvVg==}
    peerDependencies:
      react: 19.0.0

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  magic-string@0.30.8:
    resolution: {integrity: sha512-ISQTe55T2ao7XtlAStud6qwYPZjE4GK1S/BeVPus4jrq6JuOnQ00YKQC581RWhR122W7msZV263KzVeLoqidyQ==}
    engines: {node: '>=12'}

  make-dir@2.1.0:
    resolution: {integrity: sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==}
    engines: {node: '>=6'}

  markdown-extensions@2.0.0:
    resolution: {integrity: sha512-o5vL7aDWatOTX8LzaS1WMoaoxIiLRQJuIKKe2wAw6IeULDHaqbiqiggmx+pKvZDb1Sj+pE46Sn1T7lCqfFtg1Q==}
    engines: {node: '>=16'}

  markdown-table@3.0.4:
    resolution: {integrity: sha512-wiYz4+JrLyb/DqW2hkFJxP7Vd7JuTDm77fvbM8VfEQdmSMqcImWeeRbHwZjBjIFki/VaMK2BhFi7oUUZeM5bqw==}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  mdast-util-find-and-replace@3.0.2:
    resolution: {integrity: sha512-Tmd1Vg/m3Xz43afeNxDIhWRtFZgM2VLyaf4vSTYwudTyeuTneoL3qtWMA5jeLyz/O1vDJmmV4QuScFCA2tBPwg==}

  mdast-util-from-markdown@2.0.2:
    resolution: {integrity: sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==}

  mdast-util-gfm-autolink-literal@2.0.1:
    resolution: {integrity: sha512-5HVP2MKaP6L+G6YaxPNjuL0BPrq9orG3TsrZ9YXbA3vDw/ACI4MEsnoDpn6ZNm7GnZgtAcONJyPhOP8tNJQavQ==}

  mdast-util-gfm-footnote@2.0.0:
    resolution: {integrity: sha512-5jOT2boTSVkMnQ7LTrd6n/18kqwjmuYqo7JUPe+tRCY6O7dAuTFMtTPauYYrMPpox9hlN0uOx/FL8XvEfG9/mQ==}

  mdast-util-gfm-strikethrough@2.0.0:
    resolution: {integrity: sha512-mKKb915TF+OC5ptj5bJ7WFRPdYtuHv0yTRxK2tJvi+BDqbkiG7h7u/9SI89nRAYcmap2xHQL9D+QG/6wSrTtXg==}

  mdast-util-gfm-table@2.0.0:
    resolution: {integrity: sha512-78UEvebzz/rJIxLvE7ZtDd/vIQ0RHv+3Mh5DR96p7cS7HsBhYIICDBCu8csTNWNO6tBWfqXPWekRuj2FNOGOZg==}

  mdast-util-gfm-task-list-item@2.0.0:
    resolution: {integrity: sha512-IrtvNvjxC1o06taBAVJznEnkiHxLFTzgonUdy8hzFVeDun0uTjxxrRGVaNFqkU1wJR3RBPEfsxmU6jDWPofrTQ==}

  mdast-util-gfm@3.0.0:
    resolution: {integrity: sha512-dgQEX5Amaq+DuUqf26jJqSK9qgixgd6rYDHAv4aTBuA92cTknZlKpPfa86Z/s8Dj8xsAQpFfBmPUHWJBWqS4Bw==}

  mdast-util-math@3.0.0:
    resolution: {integrity: sha512-Tl9GBNeG/AhJnQM221bJR2HPvLOSnLE/T9cJI9tlc6zwQk2nPk/4f0cHkOdEixQPC/j8UtKDdITswvLAy1OZ1w==}

  mdast-util-mdx-expression@2.0.1:
    resolution: {integrity: sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==}

  mdast-util-mdx-jsx@3.2.0:
    resolution: {integrity: sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q==}

  mdast-util-mdx@3.0.0:
    resolution: {integrity: sha512-JfbYLAW7XnYTTbUsmpu0kdBUVe+yKVJZBItEjwyYJiDJuZ9w4eeaqks4HQO+R7objWgS2ymV60GYpI14Ug554w==}

  mdast-util-mdxjs-esm@2.0.1:
    resolution: {integrity: sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==}

  mdast-util-phrasing@4.1.0:
    resolution: {integrity: sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==}

  mdast-util-to-hast@13.2.0:
    resolution: {integrity: sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==}

  mdast-util-to-markdown@2.1.2:
    resolution: {integrity: sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==}

  mdast-util-to-string@4.0.0:
    resolution: {integrity: sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromark-core-commonmark@2.0.2:
    resolution: {integrity: sha512-FKjQKbxd1cibWMM1P9N+H8TwlgGgSkWZMmfuVucLCHaYqeSvJ0hFeHsIa65pA2nYbes0f8LDHPMrd9X7Ujxg9w==}

  micromark-extension-gfm-autolink-literal@2.1.0:
    resolution: {integrity: sha512-oOg7knzhicgQ3t4QCjCWgTmfNhvQbDDnJeVu9v81r7NltNCVmhPy1fJRX27pISafdjL+SVc4d3l48Gb6pbRypw==}

  micromark-extension-gfm-footnote@2.1.0:
    resolution: {integrity: sha512-/yPhxI1ntnDNsiHtzLKYnE3vf9JZ6cAisqVDauhp4CEHxlb4uoOTxOCJ+9s51bIB8U1N1FJ1RXOKTIlD5B/gqw==}

  micromark-extension-gfm-strikethrough@2.1.0:
    resolution: {integrity: sha512-ADVjpOOkjz1hhkZLlBiYA9cR2Anf8F4HqZUO6e5eDcPQd0Txw5fxLzzxnEkSkfnD0wziSGiv7sYhk/ktvbf1uw==}

  micromark-extension-gfm-table@2.1.1:
    resolution: {integrity: sha512-t2OU/dXXioARrC6yWfJ4hqB7rct14e8f7m0cbI5hUmDyyIlwv5vEtooptH8INkbLzOatzKuVbQmAYcbWoyz6Dg==}

  micromark-extension-gfm-tagfilter@2.0.0:
    resolution: {integrity: sha512-xHlTOmuCSotIA8TW1mDIM6X2O1SiX5P9IuDtqGonFhEK0qgRI4yeC6vMxEV2dgyr2TiD+2PQ10o+cOhdVAcwfg==}

  micromark-extension-gfm-task-list-item@2.1.0:
    resolution: {integrity: sha512-qIBZhqxqI6fjLDYFTBIa4eivDMnP+OZqsNwmQ3xNLE4Cxwc+zfQEfbs6tzAo2Hjq+bh6q5F+Z8/cksrLFYWQQw==}

  micromark-extension-gfm@3.0.0:
    resolution: {integrity: sha512-vsKArQsicm7t0z2GugkCKtZehqUm31oeGBV/KVSorWSy8ZlNAv7ytjFhvaryUiCUJYqs+NoE6AFhpQvBTM6Q4w==}

  micromark-extension-math@3.1.0:
    resolution: {integrity: sha512-lvEqd+fHjATVs+2v/8kg9i5Q0AP2k85H0WUOwpIVvUML8BapsMvh1XAogmQjOCsLpoKRCVQqEkQBB3NhVBcsOg==}

  micromark-extension-mdx-expression@3.0.0:
    resolution: {integrity: sha512-sI0nwhUDz97xyzqJAbHQhp5TfaxEvZZZ2JDqUo+7NvyIYG6BZ5CPPqj2ogUoPJlmXHBnyZUzISg9+oUmU6tUjQ==}

  micromark-extension-mdx-jsx@3.0.1:
    resolution: {integrity: sha512-vNuFb9czP8QCtAQcEJn0UJQJZA8Dk6DXKBqx+bg/w0WGuSxDxNr7hErW89tHUY31dUW4NqEOWwmEUNhjTFmHkg==}

  micromark-extension-mdx-md@2.0.0:
    resolution: {integrity: sha512-EpAiszsB3blw4Rpba7xTOUptcFeBFi+6PY8VnJ2hhimH+vCQDirWgsMpz7w1XcZE7LVrSAUGb9VJpG9ghlYvYQ==}

  micromark-extension-mdxjs-esm@3.0.0:
    resolution: {integrity: sha512-DJFl4ZqkErRpq/dAPyeWp15tGrcrrJho1hKK5uBS70BCtfrIFg81sqcTVu3Ta+KD1Tk5vAtBNElWxtAa+m8K9A==}

  micromark-extension-mdxjs@3.0.0:
    resolution: {integrity: sha512-A873fJfhnJ2siZyUrJ31l34Uqwy4xIFmvPY1oj+Ean5PHcPBYzEsvqvWGaWcfEIr11O5Dlw3p2y0tZWpKHDejQ==}

  micromark-factory-destination@2.0.1:
    resolution: {integrity: sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==}

  micromark-factory-label@2.0.1:
    resolution: {integrity: sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==}

  micromark-factory-mdx-expression@2.0.2:
    resolution: {integrity: sha512-5E5I2pFzJyg2CtemqAbcyCktpHXuJbABnsb32wX2U8IQKhhVFBqkcZR5LRm1WVoFqa4kTueZK4abep7wdo9nrw==}

  micromark-factory-space@2.0.1:
    resolution: {integrity: sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==}

  micromark-factory-title@2.0.1:
    resolution: {integrity: sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==}

  micromark-factory-whitespace@2.0.1:
    resolution: {integrity: sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==}

  micromark-util-character@2.1.1:
    resolution: {integrity: sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==}

  micromark-util-chunked@2.0.1:
    resolution: {integrity: sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==}

  micromark-util-classify-character@2.0.1:
    resolution: {integrity: sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==}

  micromark-util-combine-extensions@2.0.1:
    resolution: {integrity: sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==}

  micromark-util-decode-numeric-character-reference@2.0.2:
    resolution: {integrity: sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==}

  micromark-util-decode-string@2.0.1:
    resolution: {integrity: sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==}

  micromark-util-encode@2.0.1:
    resolution: {integrity: sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==}

  micromark-util-events-to-acorn@2.0.2:
    resolution: {integrity: sha512-Fk+xmBrOv9QZnEDguL9OI9/NQQp6Hz4FuQ4YmCb/5V7+9eAh1s6AYSvL20kHkD67YIg7EpE54TiSlcsf3vyZgA==}

  micromark-util-html-tag-name@2.0.1:
    resolution: {integrity: sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==}

  micromark-util-normalize-identifier@2.0.1:
    resolution: {integrity: sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==}

  micromark-util-resolve-all@2.0.1:
    resolution: {integrity: sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==}

  micromark-util-sanitize-uri@2.0.1:
    resolution: {integrity: sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==}

  micromark-util-subtokenize@2.0.4:
    resolution: {integrity: sha512-N6hXjrin2GTJDe3MVjf5FuXpm12PGm80BrUAeub9XFXca8JZbP+oIwY4LJSVwFUCL1IPm/WwSVUN7goFHmSGGQ==}

  micromark-util-symbol@2.0.1:
    resolution: {integrity: sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==}

  micromark-util-types@2.0.1:
    resolution: {integrity: sha512-534m2WhVTddrcKVepwmVEVnUAmtrx9bfIjNoQHRqfnvdaHQiFytEhJoTgpWJvDEXCO5gLTQh3wYC1PgOJA4NSQ==}

  micromark@4.0.1:
    resolution: {integrity: sha512-eBPdkcoCNvYcxQOAKAlceo5SNdzZWfF+FcSupREAzdAh9rRmE239CEQAiTwIgblwnoM8zzj35sZ5ZwvSEOF6Kw==}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  minimatch@10.0.1:
    resolution: {integrity: sha512-ethXTt3SGGR+95gudmqJ1eNhRO7eGEGIgYA9vnPatK4/etz2MEVDno5GMCibdMTuBMyElzIlgxMna3K94XDIDQ==}
    engines: {node: 20 || >=22}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@8.0.4:
    resolution: {integrity: sha512-W0Wvr9HyFXZRGIDgCicunpQ299OKXs9RgZfaukz4qAW/pJhcpUfupc9c+OObPOFueNy8VSrZgEmDtk6Kh4WzDA==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@4.2.8:
    resolution: {integrity: sha512-fNzuVyifolSLFL4NzpF+wEF4qrgqaaKX0haXPQEdQ7NKAN+WecoKMHV09YcuL/DHxrUsYQOK3MiuDf7Ip2OXfQ==}
    engines: {node: '>=8'}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  module-details-from-path@1.0.3:
    resolution: {integrity: sha512-ySViT69/76t8VhE1xXHK6Ch4NcDd26gx0MzKXLO+F7NOtnqH68d9zF94nT8ZWSxXh8ELOERsnJO/sWt1xZYw5A==}

  motion-dom@12.0.0:
    resolution: {integrity: sha512-CvYd15OeIR6kHgMdonCc1ihsaUG4MYh/wrkz8gZ3hBX/uamyZCXN9S9qJoYF03GqfTt7thTV/dxnHYX4+55vDg==}

  motion-utils@12.0.0:
    resolution: {integrity: sha512-MNFiBKbbqnmvOjkPyOKgHUp3Q6oiokLkI1bEwm5QA28cxMZrv0CbbBGDNmhF6DIXsi1pCQBSs0dX8xjeER1tmA==}

  motion@12.4.1:
    resolution: {integrity: sha512-TBnf5NyZVZFOHOc87fyC6qTSU+6LUe09LwxA1Sna35YL7qgOv1EZv96mu6o7uQ2Rl1GvTSQLeyfrQAEG+zlh+w==}
    peerDependencies:
      '@emotion/is-prop-valid': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@emotion/is-prop-valid':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  mri@1.2.0:
    resolution: {integrity: sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==}
    engines: {node: '>=4'}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mustache@4.2.0:
    resolution: {integrity: sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==}
    hasBin: true

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.8:
    resolution: {integrity: sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  negotiator@1.0.0:
    resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  next-themes@0.4.4:
    resolution: {integrity: sha512-LDQ2qIOJF0VnuVrrMSMLrWGjRMkq+0mpgl6e0juCLqdJ+oo8Q84JRWT6Wh11VDQKkMMe+dVzDKLWs5n87T+PkQ==}
    peerDependencies:
      react: 19.0.0
      react-dom: 19.0.0

  next@15.1.6:
    resolution: {integrity: sha512-Hch4wzbaX0vKQtalpXvUiw5sYivBy4cm5rzUKrBnUB/y436LGrvOUqYvlSeNVCWFO/770gDlltR9gqZH62ct4Q==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: 19.0.0
      react-dom: 19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  node-domexception@1.0.0:
    resolution: {integrity: sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==}
    engines: {node: '>=10.5.0'}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.7:
    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.8:
    resolution: {integrity: sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.1:
    resolution: {integrity: sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==}
    engines: {node: '>= 0.4'}

  ollama-ai-provider@1.2.0:
    resolution: {integrity: sha512-jTNFruwe3O/ruJeppI/quoOUxG7NA6blG3ZyQj3lei4+NnJo7bi3eIRWqlVpRlu/mbzbFXeJSBuYQWF6pzGKww==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  oniguruma-to-es@3.1.0:
    resolution: {integrity: sha512-BJ3Jy22YlgejHSO7Fvmz1kKazlaPmRSUH+4adTDUS/dKQ4wLxI+gALZ8updbaux7/m7fIlpgOZ5fp/Inq5jUAw==}

  openai@4.83.0:
    resolution: {integrity: sha512-fmTsqud0uTtRKsPC7L8Lu55dkaTwYucqncDHzVvO64DKOpNTuiYwjbR/nVgpapXuYy8xSnhQQPUm+3jQaxICgw==}
    hasBin: true
    peerDependencies:
      ws: ^8.18.0
      zod: ^3.23.8
    peerDependenciesMeta:
      ws:
        optional: true
      zod:
        optional: true

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  os-tmpdir@1.0.2:
    resolution: {integrity: sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==}
    engines: {node: '>=0.10.0'}

  outdent@0.5.0:
    resolution: {integrity: sha512-/jHxFIzoMXdqPzTaCpFzAAWhpkSjZPF4Vsn6jAfNpmbH/ymsmd7Qc6VE9BGn0L6YMj6uwpQLxCECpus4ukKS9Q==}

  own-keys@1.0.1:
    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
    engines: {node: '>= 0.4'}

  p-filter@2.1.0:
    resolution: {integrity: sha512-ZBxxZ5sL2HghephhpGAQdoskxplTwr7ICaehZwLIlfL6acuVgZPm8yBNuRAFBGEqtD/hmUeq9eqLg2ys9Xr/yw==}
    engines: {node: '>=8'}

  p-finally@1.0.0:
    resolution: {integrity: sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==}
    engines: {node: '>=4'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@3.0.0:
    resolution: {integrity: sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==}
    engines: {node: '>=6'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-map@2.1.0:
    resolution: {integrity: sha512-y3b8Kpd8OAN444hxfBbFfj1FY/RjtTd8tzYwhUqNYXx0fXx2iX4maP4Qr6qhIKbQXI02wTLAda4fYUbDagTUFw==}
    engines: {node: '>=6'}

  p-queue@6.6.2:
    resolution: {integrity: sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==}
    engines: {node: '>=8'}

  p-retry@4.6.2:
    resolution: {integrity: sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==}
    engines: {node: '>=8'}

  p-timeout@3.2.0:
    resolution: {integrity: sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==}
    engines: {node: '>=8'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  package-manager-detector@0.2.9:
    resolution: {integrity: sha512-+vYvA/Y31l8Zk8dwxHhL3JfTuHPm6tlxM2A3GeQyl7ovYnSp1+mzAxClxaOr0qO1TtPxbQxetI7v5XqKLJZk7Q==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-entities@2.0.0:
    resolution: {integrity: sha512-kkywGpCcRYhqQIchaWqZ875wzpS/bMKhz5HnN3p7wveJTkTtyAB/AlnS0f8DFSqYW1T82t6yEAkEcB+A1I3MbQ==}

  parse-entities@4.0.2:
    resolution: {integrity: sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw==}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parse5@7.2.1:
    resolution: {integrity: sha512-BuBYQYlv1ckiPdQi/ohiivi9Sagc9JG+Ozs0r7b/0iK3sKmrb0b9FdWdBbOdx6hBCM/F9Ir82ofnBhtZOjCRPQ==}

  partial-json@0.1.7:
    resolution: {integrity: sha512-Njv/59hHaokb/hRUjce3Hdv12wd60MtM9Z5Olmn+nehe0QDAsRtRbJPvJ0Z91TusF0SuZRIvnM+S4l6EIP8leA==}

  path-browserify@1.0.1:
    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}

  path-exists@3.0.0:
    resolution: {integrity: sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==}
    engines: {node: '>=4'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-scurry@2.0.0:
    resolution: {integrity: sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==}
    engines: {node: 20 || >=22}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  pg-int8@1.0.1:
    resolution: {integrity: sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==}
    engines: {node: '>=4.0.0'}

  pg-protocol@1.7.0:
    resolution: {integrity: sha512-hTK/mE36i8fDDhgDFjy6xNOG+LCorxLG3WO17tku+ij6sVHXh1jQUJ8hYAnRhNla4QVD2H8er/FOjc/+EgC6yQ==}

  pg-types@2.2.0:
    resolution: {integrity: sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==}
    engines: {node: '>=4'}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pify@4.0.1:
    resolution: {integrity: sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==}
    engines: {node: '>=6'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@3.0.0:
    resolution: {integrity: sha512-/E57AYkoeQ25qkxMj5PBOVgF8Kiu/h7cYS30Z5+R7WaiCCBfLq58ZI/dSeaEKb9WVJV5n/03QwrN3IeWIFllvw==}
    engines: {node: '>=6'}

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-load-config@6.0.1:
    resolution: {integrity: sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==}
    engines: {node: '>= 18'}
    peerDependencies:
      jiti: '>=1.21.0'
      postcss: '>=8.0.9'
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      jiti:
        optional: true
      postcss:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-selector-parser@7.1.0:
    resolution: {integrity: sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.5.1:
    resolution: {integrity: sha512-6oz2beyjc5VMn/KV1pPw8fliQkhBXrVn1Z3TVyqZxU8kZpzEKhBdmCFqI6ZbmGtamQvQGuU1sgPTk8ZrXDD7jQ==}
    engines: {node: ^10 || ^12 || >=14}

  postgres-array@2.0.0:
    resolution: {integrity: sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==}
    engines: {node: '>=4'}

  postgres-bytea@1.0.0:
    resolution: {integrity: sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==}
    engines: {node: '>=0.10.0'}

  postgres-date@1.0.7:
    resolution: {integrity: sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==}
    engines: {node: '>=0.10.0'}

  postgres-interval@1.2.0:
    resolution: {integrity: sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==}
    engines: {node: '>=0.10.0'}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-plugin-tailwindcss@0.6.11:
    resolution: {integrity: sha512-YxaYSIvZPAqhrrEpRtonnrXdghZg1irNg4qrjboCXrpybLWVs55cW2N3juhspVJiO0JBvYJT8SYsJpc8OQSnsA==}
    engines: {node: '>=14.21.3'}
    peerDependencies:
      '@ianvs/prettier-plugin-sort-imports': '*'
      '@prettier/plugin-pug': '*'
      '@shopify/prettier-plugin-liquid': '*'
      '@trivago/prettier-plugin-sort-imports': '*'
      '@zackad/prettier-plugin-twig': '*'
      prettier: ^3.0
      prettier-plugin-astro: '*'
      prettier-plugin-css-order: '*'
      prettier-plugin-import-sort: '*'
      prettier-plugin-jsdoc: '*'
      prettier-plugin-marko: '*'
      prettier-plugin-multiline-arrays: '*'
      prettier-plugin-organize-attributes: '*'
      prettier-plugin-organize-imports: '*'
      prettier-plugin-sort-imports: '*'
      prettier-plugin-style-order: '*'
      prettier-plugin-svelte: '*'
    peerDependenciesMeta:
      '@ianvs/prettier-plugin-sort-imports':
        optional: true
      '@prettier/plugin-pug':
        optional: true
      '@shopify/prettier-plugin-liquid':
        optional: true
      '@trivago/prettier-plugin-sort-imports':
        optional: true
      '@zackad/prettier-plugin-twig':
        optional: true
      prettier-plugin-astro:
        optional: true
      prettier-plugin-css-order:
        optional: true
      prettier-plugin-import-sort:
        optional: true
      prettier-plugin-jsdoc:
        optional: true
      prettier-plugin-marko:
        optional: true
      prettier-plugin-multiline-arrays:
        optional: true
      prettier-plugin-organize-attributes:
        optional: true
      prettier-plugin-organize-imports:
        optional: true
      prettier-plugin-sort-imports:
        optional: true
      prettier-plugin-style-order:
        optional: true
      prettier-plugin-svelte:
        optional: true

  prettier@2.8.8:
    resolution: {integrity: sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==}
    engines: {node: '>=10.13.0'}
    hasBin: true

  prettier@3.5.3:
    resolution: {integrity: sha512-QQtaxnoDJeAkDvDKWCLiwIXkTgRhwYDEQCghU9Z6q03iyek/rxRh/2lC3HB7P8sWT2xC/y5JDctPLBIGzHKbhw==}
    engines: {node: '>=14'}
    hasBin: true

  prismjs@1.27.0:
    resolution: {integrity: sha512-t13BGPUlFDR7wRB5kQDG4jjl7XeuH6jbJGt11JHPL96qwsEHNX2+68tFXqc1/k+/jALsbSWJKUOT/hcYAZ5LkA==}
    engines: {node: '>=6'}

  prismjs@1.29.0:
    resolution: {integrity: sha512-Kx/1w86q/epKcmte75LNrEoT+lX8pBpavuAbvJWRXar7Hz8jrtF+e3vY751p0R8H9HdArwaCTNDDzHg/ScJK1Q==}
    engines: {node: '>=6'}

  progress@2.0.3:
    resolution: {integrity: sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==}
    engines: {node: '>=0.4.0'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  property-information@5.6.0:
    resolution: {integrity: sha512-YUHSPk+A30YPv+0Qf8i9Mbfe/C0hdPXk1s1jPVToV8pk8BQtpw10ct89Eo7OWkutrwqvT0eicAxlOg3dOAu8JA==}

  property-information@6.5.0:
    resolution: {integrity: sha512-PgTgs/BlvHxOu8QuEN7wi5A0OmXaBcHpmCSTehcs6Uuu9IkDIEo13Hy7n898RHfrQ49vKCoGeWZSaAK01nwVig==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  queue@6.0.2:
    resolution: {integrity: sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==}

  radix-ui@1.1.3:
    resolution: {integrity: sha512-W8L6soM1vQnIXVvVa31AkQhoZBDPwVoNHhT13R3aB9Qq7ARYIUS9DLaCopRBsbTdZm1NEEPx3rnq659CiNOBDw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: 19.0.0
      react-dom: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  react-dom@19.0.0:
    resolution: {integrity: sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ==}
    peerDependencies:
      react: 19.0.0

  react-hook-form@7.54.2:
    resolution: {integrity: sha512-eHpAUgUjWbZocoQYUHposymRb4ZP6d0uwUnooL2uOybA9/3tPUvoAKqEWK1WaSiTxxOfTpffNZP7QwlnM3/gEg==}
    engines: {node: '>=18.0.0'}
    peerDependencies:
      react: 19.0.0

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-markdown@9.0.3:
    resolution: {integrity: sha512-Yk7Z94dbgYTOrdk41Z74GoKA7rThnsbbqBTRYuxoe08qvfQ9tJVhmAKw6BJS/ZORG7kTy/s1QvYzSuaoBA1qfw==}
    peerDependencies:
      '@types/react': '>=18'
      react: 19.0.0

  react-medium-image-zoom@5.2.13:
    resolution: {integrity: sha512-KcBL4OsoUQJgIFh6vQgt/6sRGqDy6bQBcsbhGD2tsy4B5Pw3dWrboocVOyIm76RRALEZ6Qwp3EDvIvfEv0m5sg==}
    peerDependencies:
      react: 19.0.0
      react-dom: 19.0.0

  react-remove-scroll-bar@2.3.8:
    resolution: {integrity: sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.6.3:
    resolution: {integrity: sha512-pnAi91oOk8g8ABQKGF5/M9qxmmOPxaAnopyTHYfqYEwJhyFrbbBtHuSgtKEoH0jpcxx5o3hXqH1mNd9/Oi+8iQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-resizable-panels@2.1.7:
    resolution: {integrity: sha512-JtT6gI+nURzhMYQYsx8DKkx6bSoOGFp7A3CwMrOb8y5jFHFyqwo9m68UhmXRw57fRVJksFn1TSlm3ywEQ9vMgA==}
    peerDependencies:
      react: 19.0.0
      react-dom: 19.0.0

  react-style-singleton@2.2.3:
    resolution: {integrity: sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-syntax-highlighter@15.6.1:
    resolution: {integrity: sha512-OqJ2/vL7lEeV5zTJyG7kmARppUjiB9h9udl4qHQjjgEos66z00Ia0OckwYfRxCSFrW8RJIBnsBwQsHZbVPspqg==}
    peerDependencies:
      react: 19.0.0

  react-textarea-autosize@8.5.7:
    resolution: {integrity: sha512-2MqJ3p0Jh69yt9ktFIaZmORHXw4c4bxSIhCeWiFwmJ9EYKgLmuNII3e9c9b2UO+ijl4StnpZdqpxNIhTdHvqtQ==}
    engines: {node: '>=10'}
    peerDependencies:
      react: 19.0.0

  react@19.0.0:
    resolution: {integrity: sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  read-yaml-file@1.1.0:
    resolution: {integrity: sha512-VIMnQi/Z4HT2Fxuwg5KrY174U1VdUIASQVWXXyqtNRtxSr9IYkn1rsI6Tb6HsrHCmB7gVpNwX6JxPTHcH6IoTA==}
    engines: {node: '>=6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  readdirp@4.1.1:
    resolution: {integrity: sha512-h80JrZu/MHUZCyHu5ciuoI0+WxsCxzxJTILn6Fs8rxSnFPh+UVHYfeIxK1nVGugMqkfC4vJcBOYbkfkwYK0+gw==}
    engines: {node: '>= 14.18.0'}

  recast@0.20.5:
    resolution: {integrity: sha512-E5qICoPoNL4yU0H0NoBDntNB0Q5oMSNh9usFctYniLBluTthi3RsQVBXIJNbApOlvSwW/RGxIuokPcAc59J5fQ==}
    engines: {node: '>= 4'}

  recast@0.23.9:
    resolution: {integrity: sha512-Hx/BGIbwj+Des3+xy5uAtAbdCyqK9y9wbBcDFDYanLS9JnMqf7OeF87HQwUimE87OEc72mr6tkKUKMBBL+hF9Q==}
    engines: {node: '>= 4'}

  recma-build-jsx@1.0.0:
    resolution: {integrity: sha512-8GtdyqaBcDfva+GUKDr3nev3VpKAhup1+RvkMvUxURHpW7QyIvk9F5wz7Vzo06CEMSilw6uArgRqhpiUcWp8ew==}

  recma-jsx@1.0.0:
    resolution: {integrity: sha512-5vwkv65qWwYxg+Atz95acp8DMu1JDSqdGkA2Of1j6rCreyFUE/gp15fC8MnGEuG1W68UKjM6x6+YTWIh7hZM/Q==}

  recma-parse@1.0.0:
    resolution: {integrity: sha512-OYLsIGBB5Y5wjnSnQW6t3Xg7q3fQ7FWbw/vcXtORTnyaSFscOtABg+7Pnz6YZ6c27fG1/aN8CjfwoUEUIdwqWQ==}

  recma-stringify@1.0.0:
    resolution: {integrity: sha512-cjwII1MdIIVloKvC9ErQ+OgAtwHBmcZ0Bg4ciz78FtbT8In39aAYbaA7zvxQ61xVMSPE8WxhLwLbhif4Js2C+g==}

  reflect.getprototypeof@1.0.10:
    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
    engines: {node: '>= 0.4'}

  refractor@3.6.0:
    resolution: {integrity: sha512-MY9W41IOWxxk31o+YvFCNyNzdkc9M20NoZK5vq6jkv4I/uh2zkWcfudj0Q1fovjUQJrNewS9NMzeTtqPf+n5EA==}

  regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}

  regex-recursion@6.0.2:
    resolution: {integrity: sha512-0YCaSCq2VRIebiaUviZNs0cBz1kg5kVS2UKUfNIx8YVs1cN3AV7NTctO5FOKBA+UT2BPJIWZauYHPqJODG50cg==}

  regex-utilities@2.3.0:
    resolution: {integrity: sha512-8VhliFJAWRaUiVvREIiW2NXXTmHs4vMNnSzuJVhscgmGav3g9VDxLrQndI3dZZVVdp0ZO/5v0xmX516/7M9cng==}

  regex@6.0.1:
    resolution: {integrity: sha512-uorlqlzAKjKQZ5P+kTJr3eeJGSVroLKoHmquUj4zHWuR+hEyNqlXsSKlYYF5F4NI6nl7tWCs0apKJ0lmfsXAPA==}

  regexp.prototype.flags@1.5.4:
    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
    engines: {node: '>= 0.4'}

  rehype-katex@7.0.1:
    resolution: {integrity: sha512-OiM2wrZ/wuhKkigASodFoo8wimG3H12LWQaH8qSPVJn9apWKFSH3YOCtbKpBorTVw/eI7cuT21XBbvwEswbIOA==}

  rehype-recma@1.0.0:
    resolution: {integrity: sha512-lqA4rGUf1JmacCNWWZx0Wv1dHqMwxzsDWYMTowuplHF3xH0N/MmrZ/G3BDZnzAkRmxDadujCjaKM2hqYdCBOGw==}

  remark-gfm@4.0.0:
    resolution: {integrity: sha512-U92vJgBPkbw4Zfu/IiW2oTZLSL3Zpv+uI7My2eq8JxKgqraFdU8YUGicEJCEgSbeaG+QDFqIcwwfMTOEelPxuA==}

  remark-math@6.0.0:
    resolution: {integrity: sha512-MMqgnP74Igy+S3WwnhQ7kqGlEerTETXMvJhrUzDikVZ2/uogJCb+WHUg97hK9/jcfc0dkD73s3LN8zU49cTEtA==}

  remark-mdx@3.1.0:
    resolution: {integrity: sha512-Ngl/H3YXyBV9RcRNdlYsZujAmhsxwzxpDzpDEhFBVAGthS4GDgnctpDjgFl/ULx5UEDzqtW1cyBSNKqYYrqLBA==}

  remark-parse@11.0.0:
    resolution: {integrity: sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==}

  remark-rehype@11.1.1:
    resolution: {integrity: sha512-g/osARvjkBXb6Wo0XvAeXQohVta8i84ACbenPpoSsxTOQH/Ae0/RGP4WZgnMH5pMLpsj4FG7OHmcIcXxpza8eQ==}

  remark-stringify@11.0.0:
    resolution: {integrity: sha512-1OSmLd3awB/t8qdoEOMazZkNsfVTeY4fTsgzcQFdXNq8ToTN4ZGwrMnlda4K6smTFKD+GRV6O48i6Z4iKgPPpw==}

  remark@15.0.1:
    resolution: {integrity: sha512-Eht5w30ruCXgFmxVUSlNWQ9iiimq07URKeFS3hNc8cUWy1llX4KDWfyEDZRycMc+znsN9Ux5/tJ/BFdgdOwA3A==}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  require-in-the-middle@7.5.1:
    resolution: {integrity: sha512-fgZEz/t3FDrU9o7EhI+iNNq1pNNpJImOvX72HUd6RoFiw8MaKd8/gR5tLuc8A0G0e55LMbP6ImjnmXY6zrTmjw==}
    engines: {node: '>=8.6.0'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  retry@0.13.1:
    resolution: {integrity: sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@6.0.1:
    resolution: {integrity: sha512-9dkvaxAsk/xNXSJzMgFqqMCuFgt2+KsOFek3TMLfo8NCPfWpBmqwyNn5Y+NX56QUYfCtsyhF3ayiboEoUmJk/A==}
    engines: {node: 20 || >=22}
    hasBin: true

  rollup@3.29.5:
    resolution: {integrity: sha512-GVsDdsbJzzy4S/v3dqWPJ7EfvZJfCHiDqe80IyrF59LYuP+e6U1LJoUqeuqRbwAWoMNoXivMNeNAOf5E22VA1w==}
    engines: {node: '>=14.18.0', npm: '>=8.0.0'}
    hasBin: true

  rollup@4.34.6:
    resolution: {integrity: sha512-wc2cBWqJgkU3Iz5oztRkQbfVkbxoz5EhnCGOrnJvnLnQ7O0WhQUYyv18qQI79O8L7DdHrrlJNeCHd4VGpnaXKQ==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-array-concat@1.1.3:
    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-push-apply@1.0.0:
    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
    engines: {node: '>= 0.4'}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  scheduler@0.25.0:
    resolution: {integrity: sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA==}

  schema-utils@3.3.0:
    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
    engines: {node: '>= 10.13.0'}

  schema-utils@4.3.0:
    resolution: {integrity: sha512-Gf9qqc58SpCA/xdziiHz35F4GNIWYWZrEshUc/G/r5BnLph6xpKuLeoJoQuj5WfBIx/eQLf+hmVPYHaxJu7V2g==}
    engines: {node: '>= 10.13.0'}

  scroll-into-view-if-needed@3.1.0:
    resolution: {integrity: sha512-49oNpRjWRvnU8NyGVmUaYG4jtTkNonFZI86MmGRDqBphEK2EXT9gdEUoQPZhuBM8yWHxCWbobltqYO5M4XrUvQ==}

  section-matter@1.0.0:
    resolution: {integrity: sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==}
    engines: {node: '>=4'}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  secure-json-parse@3.0.2:
    resolution: {integrity: sha512-H6nS2o8bWfpFEV6U38sOSjS7bTbdgbCGU9wEM6W14P5H0QOsz94KCusifV44GpHDTu2nqZbuDNhTzu+mjDSw1w==}

  semver@5.7.2:
    resolution: {integrity: sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==}
    hasBin: true

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.7.1:
    resolution: {integrity: sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==}
    engines: {node: '>=10'}
    hasBin: true

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-proto@1.0.0:
    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
    engines: {node: '>= 0.4'}

  shallow-clone@3.0.1:
    resolution: {integrity: sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==}
    engines: {node: '>=8'}

  sharp@0.33.5:
    resolution: {integrity: sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shiki@2.3.2:
    resolution: {integrity: sha512-UZhz/gsUz7DHFbQBOJP7eXqvKyYvMGramxQiSDc83M/7OkWm6OdVHAReEc3vMLh6L6TRhgL9dvhXz9XDkCDaaw==}

  shimmer@1.2.1:
    resolution: {integrity: sha512-sQTKC1Re/rM6XyFM6fIAGHRPVGvyXfgzIDvzoq608vM+jeyVD0Tu1E6Np0Kc2zAIFWIj963V2800iF/9LPieQw==}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  simple-wcswidth@1.0.1:
    resolution: {integrity: sha512-xMO/8eNREtaROt7tJvWJqHBDTMFN4eiQ5I4JRMuilwfnFcV5W9u7RUkueNkdw0jPqGMX36iCywelS5yilTuOxg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  source-map@0.8.0-beta.0:
    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
    engines: {node: '>= 8'}

  space-separated-tokens@1.1.5:
    resolution: {integrity: sha512-q/JSVd1Lptzhf5bkYm4ob4iWPjx0KiRe3sRFBNrVqbJkFaBm5vbbowy1mymoPNLRa52+oadOhJ+K49wsSeSjTA==}

  space-separated-tokens@2.0.2:
    resolution: {integrity: sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==}

  spawndamnit@3.0.1:
    resolution: {integrity: sha512-MmnduQUuHCoFckZoWnXsTg7JaiLBJrKFj9UI2MbRPGaJeVpsLcVBu6P/IGZovziM/YBsellCmsprgNA+w0CzVg==}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  stable-hash@0.0.4:
    resolution: {integrity: sha512-LjdcbuBeLcdETCrPn9i8AYAZ1eCtu4ECAWtP7UleOiZ9LzVxRzzUZEoZ8zB24nhkQnDWyET0I+3sWokSDS3E7g==}

  stacktrace-parser@0.1.10:
    resolution: {integrity: sha512-KJP1OCML99+8fhOHxwwzyWrlUuVX5GQ0ZpJTd1DFXhdkrvg1szxfHhawXUZ3g9TkXORQd4/WG68jMlQZ2p8wlg==}
    engines: {node: '>=6'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.includes@2.0.1:
    resolution: {integrity: sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==}
    engines: {node: '>= 0.4'}

  string.prototype.matchall@4.0.12:
    resolution: {integrity: sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.10:
    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.9:
    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
    engines: {node: '>= 0.4'}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  stringify-entities@4.0.4:
    resolution: {integrity: sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom-string@1.0.0:
    resolution: {integrity: sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==}
    engines: {node: '>=0.10.0'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  style-to-object@1.0.8:
    resolution: {integrity: sha512-xT47I/Eo0rwJmaXC4oilDGDWLohVhR6o/xAQcPQN8q6QBuZVL8qMYL85kLmST5cPjAorwvqIA4qXTRQoYHaL6g==}

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  swr@2.3.2:
    resolution: {integrity: sha512-RosxFpiabojs75IwQ316DGoDRmOqtiAj0tg8wCcbEu4CiLZBs/a9QNtHV7TUfDXmmlgqij/NqzKq/eLelyv9xA==}
    peerDependencies:
      react: 19.0.0

  tailwind-merge@2.6.0:
    resolution: {integrity: sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==}

  tailwind-merge@3.0.1:
    resolution: {integrity: sha512-AvzE8FmSoXC7nC+oU5GlQJbip2UO7tmOhOfQyOmPhrStOGXHU08j8mZEHZ4BmCqY5dWTCo4ClWkNyRNx1wpT0g==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.17:
    resolution: {integrity: sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  tailwindcss@4.0.4:
    resolution: {integrity: sha512-/ezDLEkOLf1lXkr9F2iI5BHJbexJpty5zkV2B8bGHCqAdbc9vk85Jgdkq+ZOvNkNPa3yAaqJ8DjRt584Bc84kw==}

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  term-size@2.2.1:
    resolution: {integrity: sha512-wK0Ri4fOGjv/XPy8SBHZChl8CM7uMc5VML7SqiQ0zG7+J5Vr+RMQDoHa2CNT6KHUnTGIXH34UDMkPzAUyapBZg==}
    engines: {node: '>=8'}

  terser-webpack-plugin@5.3.11:
    resolution: {integrity: sha512-RVCsMfuD0+cTt3EwX8hSl2Ks56EbFHWmhluwcqoPKtBnfjiT6olaq7PRIRfhyU8nnC2MrnDrBLfrD/RGE+cVXQ==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.38.1:
    resolution: {integrity: sha512-GWANVlPM/ZfYzuPHjq0nxT+EbOEDDN3Jwhwdg1D8TU8oSkktp8w64Uq4auuGLxFSoNTRDncTq2hQHX1Ld9KHkA==}
    engines: {node: '>=10'}
    hasBin: true

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  throttleit@2.1.0:
    resolution: {integrity: sha512-nt6AMGKW1p/70DF/hGBdJB57B8Tspmbp5gfJ8ilhLnt7kkr2ye7hzD6NVG8GGErk2HWF34igrL2CXmNIkzKqKw==}
    engines: {node: '>=18'}

  tiny-invariant@1.3.3:
    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}

  tinyexec@0.3.2:
    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}

  tinyglobby@0.2.10:
    resolution: {integrity: sha512-Zc+8eJlFMvgatPZTl6A9L/yht8QqdmUNtURHaKZLmKBE12hNPSrqNkUp2cs3M/UKmNVVAMFQYSjYIVHDjW5zew==}
    engines: {node: '>=12.0.0'}

  tmp@0.0.33:
    resolution: {integrity: sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==}
    engines: {node: '>=0.6.0'}

  tmp@0.2.3:
    resolution: {integrity: sha512-nZD7m9iCPC5g0pYmcaxogYKggSfLsdxl8of3Q/oIbqCqLLIO9IAF0GWjX1z9NZRHPiXv8Wex4yDCaZsgEw0Y8w==}
    engines: {node: '>=14.14'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tr46@1.0.1:
    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  trim-lines@3.0.1:
    resolution: {integrity: sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==}

  trough@2.2.0:
    resolution: {integrity: sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==}

  ts-api-utils@2.0.1:
    resolution: {integrity: sha512-dnlgjFSVetynI8nzgJ+qF62efpglpWRk8isUEWZGWlJYySCTD6aKvbUDu+zbPeDakk3bg5H4XpitHukgfL1m9w==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  ts-morph@25.0.1:
    resolution: {integrity: sha512-QJEiTdnz1YjrB3JFhd626gX4rKHDLSjSVMvGGG4v7ONc3RBwa0Eei98G9AT9uNFDMtV54JyuXsFeC+OH0n6bXQ==}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tsconfig-paths@4.2.0:
    resolution: {integrity: sha512-NoZ4roiN7LnbKn9QqE1amc9DJfzvZXxF4xDavcOWt1BPkdx+m+0gJuPM+S0vCe7zTJMYUP0R8pO2XMr+Y8oLIg==}
    engines: {node: '>=6'}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tsup@8.3.6:
    resolution: {integrity: sha512-XkVtlDV/58S9Ye0JxUUTcrQk4S+EqlOHKzg6Roa62rdjL1nGWNUstG0xgI4vanHdfIpjP448J8vlN0oK6XOJ5g==}
    engines: {node: '>=18'}
    hasBin: true
    peerDependencies:
      '@microsoft/api-extractor': ^7.36.0
      '@swc/core': ^1
      postcss: ^8.4.12
      typescript: '>=4.5.0'
    peerDependenciesMeta:
      '@microsoft/api-extractor':
        optional: true
      '@swc/core':
        optional: true
      postcss:
        optional: true
      typescript:
        optional: true

  tsx@4.19.2:
    resolution: {integrity: sha512-pOUl6Vo2LUq/bSa8S5q7b91cgNSjctn9ugq/+Mvow99qW6x/UZYwzxy/3NmqoT66eHYfCVvFvACC58UBPFf28g==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  turbo-darwin-64@2.4.4:
    resolution: {integrity: sha512-5kPvRkLAfmWI0MH96D+/THnDMGXlFNmjeqNRj5grLKiry+M9pKj3pRuScddAXPdlxjO5Ptz06UNaOQrrYGTx1g==}
    cpu: [x64]
    os: [darwin]

  turbo-darwin-arm64@2.4.4:
    resolution: {integrity: sha512-/gtHPqbGQXDFhrmy+Q/MFW2HUTUlThJ97WLLSe4bxkDrKHecDYhAjbZ4rN3MM93RV9STQb3Tqy4pZBtsd4DfCw==}
    cpu: [arm64]
    os: [darwin]

  turbo-linux-64@2.4.4:
    resolution: {integrity: sha512-SR0gri4k0bda56hw5u9VgDXLKb1Q+jrw4lM7WAhnNdXvVoep4d6LmnzgMHQQR12Wxl3KyWPbkz9d1whL6NTm2Q==}
    cpu: [x64]
    os: [linux]

  turbo-linux-arm64@2.4.4:
    resolution: {integrity: sha512-COXXwzRd3vslQIfJhXUklgEqlwq35uFUZ7hnN+AUyXx7hUOLIiD5NblL+ETrHnhY4TzWszrbwUMfe2BYWtaPQg==}
    cpu: [arm64]
    os: [linux]

  turbo-windows-64@2.4.4:
    resolution: {integrity: sha512-PV9rYNouGz4Ff3fd6sIfQy5L7HT9a4fcZoEv8PKRavU9O75G7PoDtm8scpHU10QnK0QQNLbE9qNxOAeRvF0fJg==}
    cpu: [x64]
    os: [win32]

  turbo-windows-arm64@2.4.4:
    resolution: {integrity: sha512-403sqp9t5sx6YGEC32IfZTVWkRAixOQomGYB8kEc6ZD+//LirSxzeCHCnM8EmSXw7l57U1G+Fb0kxgTcKPU/Lg==}
    cpu: [arm64]
    os: [win32]

  turbo@2.4.4:
    resolution: {integrity: sha512-N9FDOVaY3yz0YCOhYIgOGYad7+m2ptvinXygw27WPLQvcZDl3+0Sa77KGVlLSiuPDChOUEnTKE9VJwLSi9BPGQ==}
    hasBin: true

  twoslash-protocol@0.2.12:
    resolution: {integrity: sha512-5qZLXVYfZ9ABdjqbvPc4RWMr7PrpPaaDSeaYY55vl/w1j6H6kzsWK/urAEIXlzYlyrFmyz1UbwIt+AA0ck+wbg==}

  twoslash@0.2.12:
    resolution: {integrity: sha512-tEHPASMqi7kqwfJbkk7hc/4EhlrKCSLcur+TcvYki3vhIfaRMXnXjaYFgXpoZRbT6GdprD4tGuVBEmTpUgLBsw==}
    peerDependencies:
      typescript: '*'

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@0.7.1:
    resolution: {integrity: sha512-Ne2YiiGN8bmrmJJEuTWTLJR32nh/JdL1+PSicowtNb0WFpn59GK8/lfD61bVtzguz7b3PBt74nxpv/Pw5po5Rg==}
    engines: {node: '>=8'}

  typed-array-buffer@1.0.3:
    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.3:
    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.4:
    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typescript@5.7.3:
    resolution: {integrity: sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==}
    engines: {node: '>=14.17'}
    hasBin: true

  typescript@5.8.2:
    resolution: {integrity: sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  unbox-primitive@1.1.0:
    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
    engines: {node: '>= 0.4'}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  undici-types@6.20.0:
    resolution: {integrity: sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==}

  unified@11.0.5:
    resolution: {integrity: sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==}

  unist-util-find-after@5.0.0:
    resolution: {integrity: sha512-amQa0Ep2m6hE2g72AugUItjbuM8X8cGQnFoHk0pGfrFeT9GZhzN5SW8nRsiGKK7Aif4CrACPENkA6P/Lw6fHGQ==}

  unist-util-is@6.0.0:
    resolution: {integrity: sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==}

  unist-util-position-from-estree@2.0.0:
    resolution: {integrity: sha512-KaFVRjoqLyF6YXCbVLNad/eS4+OfPQQn2yOd7zF/h5T/CSL2v8NpN6a5TPvtbXthAGw5nG+PuTtq+DdIZr+cRQ==}

  unist-util-position@5.0.0:
    resolution: {integrity: sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==}

  unist-util-remove-position@5.0.0:
    resolution: {integrity: sha512-Hp5Kh3wLxv0PHj9m2yZhhLt58KzPtEYKQQ4yxfYFEO7EvHwzyDYnduhHnY1mDxoqr7VUwVuHXk9RXKIiYS1N8Q==}

  unist-util-stringify-position@4.0.0:
    resolution: {integrity: sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==}

  unist-util-visit-parents@6.0.1:
    resolution: {integrity: sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==}

  unist-util-visit@5.0.0:
    resolution: {integrity: sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==}

  universalify@0.1.2:
    resolution: {integrity: sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==}
    engines: {node: '>= 4.0.0'}

  unplugin@1.0.1:
    resolution: {integrity: sha512-aqrHaVBWW1JVKBHmGo33T5TxeL0qWzfvjWokObHA9bYmN7eNDkwOxmLjhioHl9878qDFMAaT51XNroRyuz7WxA==}

  update-browserslist-db@1.1.2:
    resolution: {integrity: sha512-PPypAm5qvlD7XMZC3BujecnaOxwhrtoFR+Dqkk5Aa/6DssiH0ibKoketaj9w8LP7Bont1rYeoV5plxD7RTEPRg==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  use-callback-ref@1.3.3:
    resolution: {integrity: sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-composed-ref@1.4.0:
    resolution: {integrity: sha512-djviaxuOOh7wkj0paeO1Q/4wMZ8Zrnag5H6yBvzN7AKKe8beOaED9SF5/ByLqsku8NP4zQqsvM2u3ew/tJK8/w==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-isomorphic-layout-effect@1.2.0:
    resolution: {integrity: sha512-q6ayo8DWoPZT0VdG4u3D3uxcgONP3Mevx2i2b0434cwWBoL+aelL1DzkXI6w3PhTZzUeR2kaVlZn70iCiseP6w==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-latest@1.3.0:
    resolution: {integrity: sha512-mhg3xdm9NaM8q+gLT8KryJPnRFOz1/5XPBhmDEVZK1webPzDjrPk7f/mbpeLqTgB9msytYWANxgALOCJKnLvcQ==}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.3:
    resolution: {integrity: sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: 19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sync-external-store@1.4.0:
    resolution: {integrity: sha512-9WXSPC5fMv61vaupRkCKCxsPxBocVnwakBEkMIHHpkTTg6icbJtg6jzgtLDm4bl3cSHAca52rYWih0k4K3PfHw==}
    peerDependencies:
      react: 19.0.0

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  uuid@10.0.0:
    resolution: {integrity: sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==}
    hasBin: true

  uuid@11.0.5:
    resolution: {integrity: sha512-508e6IcKLrhxKdBbcA2b4KQZlLVp2+J5UwQ6F7Drckkc5N9ZJwFa4TgWtsww9UG8fGHbm6gbV19TdM5pQ4GaIA==}
    hasBin: true

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  vfile-location@5.0.3:
    resolution: {integrity: sha512-5yXvWDEgqeiYiBe1lbxYF7UMAIm/IcopxMHrMQDq3nvKcjPKIhZklUKL+AE7J7uApI4kwe2snsK+eI6UTj9EHg==}

  vfile-message@4.0.2:
    resolution: {integrity: sha512-jRDZ1IMLttGj41KcZvlrYAaI3CfqpLpfpf+Mfig13viT6NKvRzWZ+lXz0Y5D60w6uJIBAOGq9mSHf0gktF0duw==}

  vfile@6.0.3:
    resolution: {integrity: sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==}

  watchpack@2.4.2:
    resolution: {integrity: sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==}
    engines: {node: '>=10.13.0'}

  web-namespaces@2.0.1:
    resolution: {integrity: sha512-bKr1DkiNa2krS7qxNtdrtHAmzuYGFQLiQ13TsorsdT6ULTkPLKuu5+GsFpDlg6JFjUTwX2DyhMPG2be8uPrqsQ==}

  web-streams-polyfill@4.0.0-beta.3:
    resolution: {integrity: sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==}
    engines: {node: '>= 14'}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webidl-conversions@4.0.2:
    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}

  webpack-sources@3.2.3:
    resolution: {integrity: sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==}
    engines: {node: '>=10.13.0'}

  webpack-virtual-modules@0.5.0:
    resolution: {integrity: sha512-kyDivFZ7ZM0BVOUteVbDFhlRt7Ah/CSPwJdi8hBpkK7QLumUqdLtVfm/PX/hkcnrvr0i77fO5+TjZ94Pe+C9iw==}

  webpack@5.97.1:
    resolution: {integrity: sha512-EksG6gFY3L1eFMROS/7Wzgrii5mBAFe4rIr3r2BTfo7bcc+DWwFZ4OJ/miOuHJO/A85HwyI4eQ0F6IKXesO7Fg==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  whatwg-url@7.1.0:
    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}

  which-boxed-primitive@1.1.1:
    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
    engines: {node: '>= 0.4'}

  which-builtin-type@1.2.1:
    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.18:
    resolution: {integrity: sha512-qEcY+KJYlWyLH9vNbsr6/5j59AXk5ni5aakf8ldzBvGde6Iz4sxZGkJyWSAueTG7QhOvNRYb1lDdFmL5Td0QKA==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  write-file-atomic@5.0.1:
    resolution: {integrity: sha512-+QU2zd6OTD8XWIJCbffaiQeH9U73qIqafo1x6V1snCWYGJf6cVE0cDR4D8xRzcEnfI21IFrUPzPGtcPf8AC+Rw==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.7.0:
    resolution: {integrity: sha512-+hSoy/QHluxmC9kCIJyL/uyFmLmc+e5CFR5Wa+bpIhIj85LVb9ZH2nVnqrHoSvKogwODv0ClqZkmiSSaIH5LTA==}
    engines: {node: '>= 14'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zod-to-json-schema@3.24.1:
    resolution: {integrity: sha512-3h08nf3Vw3Wl3PK+q3ow/lIil81IT2Oa7YpQyUUDsEWbXveMesdfK1xBd2RhCkynwZndAxixji/7SYJJowr62w==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.24.1:
    resolution: {integrity: sha512-muH7gBL9sI1nciMZV67X5fTKKBLtwpZ5VBp1vsOQzj1MhrBZ4wlVCm3gedKZWLp0Oyel8sIGfeiz54Su+OVT+A==}

  zustand@5.0.3:
    resolution: {integrity: sha512-14fwWQtU3pH4dE0dOpdMiWjddcH+QzKIgk1cl8epwSE7yag43k/AD/m4L6+K7DytAOr9gGBe3/EXj9g7cdostg==}
    engines: {node: '>=12.20.0'}
    peerDependencies:
      '@types/react': '>=18.0.0'
      immer: '>=9.0.6'
      react: 19.0.0
      use-sync-external-store: '>=1.2.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      immer:
        optional: true
      react:
        optional: true
      use-sync-external-store:
        optional: true

  zwitch@2.0.4:
    resolution: {integrity: sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==}

snapshots:

  '@ai-sdk/openai@1.1.9(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      zod: 3.24.1

  '@ai-sdk/provider-utils@2.1.6(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider': 1.0.7
      eventsource-parser: 3.0.0
      nanoid: 3.3.8
      secure-json-parse: 2.7.0
    optionalDependencies:
      zod: 3.24.1

  '@ai-sdk/provider@1.0.7':
    dependencies:
      json-schema: 0.4.0

  '@ai-sdk/react@1.1.10(react@19.0.0)(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      '@ai-sdk/ui-utils': 1.1.10(zod@3.24.1)
      swr: 2.3.2(react@19.0.0)
      throttleit: 2.1.0
    optionalDependencies:
      react: 19.0.0
      zod: 3.24.1

  '@ai-sdk/react@1.1.11(react@19.0.0)(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      '@ai-sdk/ui-utils': 1.1.11(zod@3.24.1)
      swr: 2.3.2(react@19.0.0)
      throttleit: 2.1.0
    optionalDependencies:
      react: 19.0.0
      zod: 3.24.1

  '@ai-sdk/ui-utils@1.1.10(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      zod-to-json-schema: 3.24.1(zod@3.24.1)
    optionalDependencies:
      zod: 3.24.1

  '@ai-sdk/ui-utils@1.1.11(zod@3.24.1)':
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      zod-to-json-schema: 3.24.1(zod@3.24.1)
    optionalDependencies:
      zod: 3.24.1

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.26.5': {}

  '@babel/core@7.26.7':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.5
      '@babel/helper-compilation-targets': 7.26.5
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.7)
      '@babel/helpers': 7.26.7
      '@babel/parser': 7.26.7
      '@babel/template': 7.25.9
      '@babel/traverse': 7.26.7
      '@babel/types': 7.26.7
      convert-source-map: 2.0.0
      debug: 4.4.0
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.26.5':
    dependencies:
      '@babel/parser': 7.26.7
      '@babel/types': 7.26.7
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.1.0

  '@babel/helper-annotate-as-pure@7.25.9':
    dependencies:
      '@babel/types': 7.26.7

  '@babel/helper-compilation-targets@7.26.5':
    dependencies:
      '@babel/compat-data': 7.26.5
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.4
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-create-class-features-plugin@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-member-expression-to-functions': 7.25.9
      '@babel/helper-optimise-call-expression': 7.25.9
      '@babel/helper-replace-supers': 7.26.5(@babel/core@7.26.7)
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
      '@babel/traverse': 7.26.7
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-member-expression-to-functions@7.25.9':
    dependencies:
      '@babel/traverse': 7.26.7
      '@babel/types': 7.26.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-imports@7.25.9':
    dependencies:
      '@babel/traverse': 7.26.7
      '@babel/types': 7.26.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.26.0(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.26.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-optimise-call-expression@7.25.9':
    dependencies:
      '@babel/types': 7.26.7

  '@babel/helper-plugin-utils@7.26.5': {}

  '@babel/helper-replace-supers@7.26.5(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-member-expression-to-functions': 7.25.9
      '@babel/helper-optimise-call-expression': 7.25.9
      '@babel/traverse': 7.26.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-skip-transparent-expression-wrappers@7.25.9':
    dependencies:
      '@babel/traverse': 7.26.7
      '@babel/types': 7.26.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/helper-validator-option@7.25.9': {}

  '@babel/helpers@7.26.7':
    dependencies:
      '@babel/template': 7.25.9
      '@babel/types': 7.26.7

  '@babel/parser@7.26.7':
    dependencies:
      '@babel/types': 7.26.7

  '@babel/plugin-syntax-flow@7.26.0(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-jsx@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-typescript@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-transform-class-properties@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.7)
      '@babel/helper-plugin-utils': 7.26.5
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-flow-strip-types@7.26.5(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5
      '@babel/plugin-syntax-flow': 7.26.0(@babel/core@7.26.7)

  '@babel/plugin-transform-modules-commonjs@7.26.3(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.7)
      '@babel/helper-plugin-utils': 7.26.5
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-nullish-coalescing-operator@7.26.6(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-transform-optional-chaining@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-private-methods@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.7)
      '@babel/helper-plugin-utils': 7.26.5
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-typescript@7.26.7(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.7)
      '@babel/helper-plugin-utils': 7.26.5
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
      '@babel/plugin-syntax-typescript': 7.25.9(@babel/core@7.26.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-flow@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5
      '@babel/helper-validator-option': 7.25.9
      '@babel/plugin-transform-flow-strip-types': 7.26.5(@babel/core@7.26.7)

  '@babel/preset-typescript@7.26.0(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      '@babel/helper-plugin-utils': 7.26.5
      '@babel/helper-validator-option': 7.25.9
      '@babel/plugin-syntax-jsx': 7.25.9(@babel/core@7.26.7)
      '@babel/plugin-transform-modules-commonjs': 7.26.3(@babel/core@7.26.7)
      '@babel/plugin-transform-typescript': 7.26.7(@babel/core@7.26.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/register@7.25.9(@babel/core@7.26.7)':
    dependencies:
      '@babel/core': 7.26.7
      clone-deep: 4.0.1
      find-cache-dir: 2.1.0
      make-dir: 2.1.0
      pirates: 4.0.6
      source-map-support: 0.5.21

  '@babel/runtime@7.26.7':
    dependencies:
      regenerator-runtime: 0.14.1

  '@babel/template@7.25.9':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.26.7
      '@babel/types': 7.26.7

  '@babel/traverse@7.26.7':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.5
      '@babel/parser': 7.26.7
      '@babel/template': 7.25.9
      '@babel/types': 7.26.7
      debug: 4.4.0
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.26.7':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  '@cfworker/json-schema@4.1.1': {}

  '@changesets/apply-release-plan@7.0.10':
    dependencies:
      '@changesets/config': 3.1.1
      '@changesets/get-version-range-type': 0.4.0
      '@changesets/git': 3.0.2
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      detect-indent: 6.1.0
      fs-extra: 7.0.1
      lodash.startcase: 4.4.0
      outdent: 0.5.0
      prettier: 2.8.8
      resolve-from: 5.0.0
      semver: 7.7.1

  '@changesets/assemble-release-plan@6.0.6':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      semver: 7.7.1

  '@changesets/changelog-git@0.2.1':
    dependencies:
      '@changesets/types': 6.1.0

  '@changesets/cli@2.28.1':
    dependencies:
      '@changesets/apply-release-plan': 7.0.10
      '@changesets/assemble-release-plan': 6.0.6
      '@changesets/changelog-git': 0.2.1
      '@changesets/config': 3.1.1
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/get-release-plan': 4.0.8
      '@changesets/git': 3.0.2
      '@changesets/logger': 0.1.1
      '@changesets/pre': 2.0.2
      '@changesets/read': 0.6.3
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@changesets/write': 0.4.0
      '@manypkg/get-packages': 1.1.3
      ansi-colors: 4.1.3
      ci-info: 3.9.0
      enquirer: 2.4.1
      external-editor: 3.1.0
      fs-extra: 7.0.1
      mri: 1.2.0
      p-limit: 2.3.0
      package-manager-detector: 0.2.9
      picocolors: 1.1.1
      resolve-from: 5.0.0
      semver: 7.7.1
      spawndamnit: 3.0.1
      term-size: 2.2.1

  '@changesets/config@3.1.1':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/logger': 0.1.1
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      fs-extra: 7.0.1
      micromatch: 4.0.8

  '@changesets/errors@0.2.0':
    dependencies:
      extendable-error: 0.1.7

  '@changesets/get-dependents-graph@2.1.3':
    dependencies:
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      picocolors: 1.1.1
      semver: 7.7.1

  '@changesets/get-release-plan@4.0.8':
    dependencies:
      '@changesets/assemble-release-plan': 6.0.6
      '@changesets/config': 3.1.1
      '@changesets/pre': 2.0.2
      '@changesets/read': 0.6.3
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3

  '@changesets/get-version-range-type@0.4.0': {}

  '@changesets/git@3.0.2':
    dependencies:
      '@changesets/errors': 0.2.0
      '@manypkg/get-packages': 1.1.3
      is-subdir: 1.2.0
      micromatch: 4.0.8
      spawndamnit: 3.0.1

  '@changesets/logger@0.1.1':
    dependencies:
      picocolors: 1.1.1

  '@changesets/parse@0.4.1':
    dependencies:
      '@changesets/types': 6.1.0
      js-yaml: 3.14.1

  '@changesets/pre@2.0.2':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      fs-extra: 7.0.1

  '@changesets/read@0.6.3':
    dependencies:
      '@changesets/git': 3.0.2
      '@changesets/logger': 0.1.1
      '@changesets/parse': 0.4.1
      '@changesets/types': 6.1.0
      fs-extra: 7.0.1
      p-filter: 2.1.0
      picocolors: 1.1.1

  '@changesets/should-skip-package@0.1.2':
    dependencies:
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3

  '@changesets/types@4.1.0': {}

  '@changesets/types@6.1.0': {}

  '@changesets/write@0.4.0':
    dependencies:
      '@changesets/types': 6.1.0
      fs-extra: 7.0.1
      human-id: 4.1.1
      prettier: 2.8.8

  '@emnapi/runtime@1.3.1':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@esbuild/aix-ppc64@0.23.1':
    optional: true

  '@esbuild/aix-ppc64@0.24.2':
    optional: true

  '@esbuild/android-arm64@0.23.1':
    optional: true

  '@esbuild/android-arm64@0.24.2':
    optional: true

  '@esbuild/android-arm@0.23.1':
    optional: true

  '@esbuild/android-arm@0.24.2':
    optional: true

  '@esbuild/android-x64@0.23.1':
    optional: true

  '@esbuild/android-x64@0.24.2':
    optional: true

  '@esbuild/darwin-arm64@0.23.1':
    optional: true

  '@esbuild/darwin-arm64@0.24.2':
    optional: true

  '@esbuild/darwin-x64@0.23.1':
    optional: true

  '@esbuild/darwin-x64@0.24.2':
    optional: true

  '@esbuild/freebsd-arm64@0.23.1':
    optional: true

  '@esbuild/freebsd-arm64@0.24.2':
    optional: true

  '@esbuild/freebsd-x64@0.23.1':
    optional: true

  '@esbuild/freebsd-x64@0.24.2':
    optional: true

  '@esbuild/linux-arm64@0.23.1':
    optional: true

  '@esbuild/linux-arm64@0.24.2':
    optional: true

  '@esbuild/linux-arm@0.23.1':
    optional: true

  '@esbuild/linux-arm@0.24.2':
    optional: true

  '@esbuild/linux-ia32@0.23.1':
    optional: true

  '@esbuild/linux-ia32@0.24.2':
    optional: true

  '@esbuild/linux-loong64@0.23.1':
    optional: true

  '@esbuild/linux-loong64@0.24.2':
    optional: true

  '@esbuild/linux-mips64el@0.23.1':
    optional: true

  '@esbuild/linux-mips64el@0.24.2':
    optional: true

  '@esbuild/linux-ppc64@0.23.1':
    optional: true

  '@esbuild/linux-ppc64@0.24.2':
    optional: true

  '@esbuild/linux-riscv64@0.23.1':
    optional: true

  '@esbuild/linux-riscv64@0.24.2':
    optional: true

  '@esbuild/linux-s390x@0.23.1':
    optional: true

  '@esbuild/linux-s390x@0.24.2':
    optional: true

  '@esbuild/linux-x64@0.23.1':
    optional: true

  '@esbuild/linux-x64@0.24.2':
    optional: true

  '@esbuild/netbsd-arm64@0.24.2':
    optional: true

  '@esbuild/netbsd-x64@0.23.1':
    optional: true

  '@esbuild/netbsd-x64@0.24.2':
    optional: true

  '@esbuild/openbsd-arm64@0.23.1':
    optional: true

  '@esbuild/openbsd-arm64@0.24.2':
    optional: true

  '@esbuild/openbsd-x64@0.23.1':
    optional: true

  '@esbuild/openbsd-x64@0.24.2':
    optional: true

  '@esbuild/sunos-x64@0.23.1':
    optional: true

  '@esbuild/sunos-x64@0.24.2':
    optional: true

  '@esbuild/win32-arm64@0.23.1':
    optional: true

  '@esbuild/win32-arm64@0.24.2':
    optional: true

  '@esbuild/win32-ia32@0.23.1':
    optional: true

  '@esbuild/win32-ia32@0.24.2':
    optional: true

  '@esbuild/win32-x64@0.23.1':
    optional: true

  '@esbuild/win32-x64@0.24.2':
    optional: true

  '@eslint-community/eslint-utils@4.4.1(eslint@9.20.0(jiti@2.4.2))':
    dependencies:
      eslint: 9.20.0(jiti@2.4.2)
      eslint-visitor-keys: 3.4.3

  '@eslint-community/eslint-utils@4.4.1(eslint@9.22.0(jiti@2.4.2))':
    dependencies:
      eslint: 9.22.0(jiti@2.4.2)
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/config-array@0.19.2':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.0
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/config-helpers@0.1.0': {}

  '@eslint/core@0.10.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.11.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.12.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.0':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.0
      espree: 10.3.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.20.0': {}

  '@eslint/js@9.22.0': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.2.5':
    dependencies:
      '@eslint/core': 0.10.0
      levn: 0.4.1

  '@eslint/plugin-kit@0.2.7':
    dependencies:
      '@eslint/core': 0.12.0
      levn: 0.4.1

  '@ffmpeg/ffmpeg@0.12.15':
    dependencies:
      '@ffmpeg/types': 0.12.4

  '@ffmpeg/types@0.12.4': {}

  '@ffmpeg/util@0.12.2': {}

  '@floating-ui/core@1.6.9':
    dependencies:
      '@floating-ui/utils': 0.2.9

  '@floating-ui/dom@1.6.13':
    dependencies:
      '@floating-ui/core': 1.6.9
      '@floating-ui/utils': 0.2.9

  '@floating-ui/react-dom@2.1.2(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@floating-ui/dom': 1.6.13
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  '@floating-ui/utils@0.2.9': {}

  '@formatjs/intl-localematcher@0.5.10':
    dependencies:
      tslib: 2.8.1

  '@hookform/resolvers@3.10.0(react-hook-form@7.54.2(react@19.0.0))':
    dependencies:
      react-hook-form: 7.54.2(react@19.0.0)

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.1': {}

  '@humanwhocodes/retry@0.4.2': {}

  '@img/sharp-darwin-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.0.4
    optional: true

  '@img/sharp-darwin-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.0.4
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm@1.0.5':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    optional: true

  '@img/sharp-linux-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.0.4
    optional: true

  '@img/sharp-linux-arm@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.0.5
    optional: true

  '@img/sharp-linux-s390x@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.0.4
    optional: true

  '@img/sharp-linux-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
    optional: true

  '@img/sharp-wasm32@0.33.5':
    dependencies:
      '@emnapi/runtime': 1.3.1
    optional: true

  '@img/sharp-win32-ia32@0.33.5':
    optional: true

  '@img/sharp-win32-x64@0.33.5':
    optional: true

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@langchain/core@0.3.39(openai@4.83.0(zod@3.24.1))':
    dependencies:
      '@cfworker/json-schema': 4.1.1
      ansi-styles: 5.2.0
      camelcase: 6.3.0
      decamelize: 1.2.0
      js-tiktoken: 1.0.18
      langsmith: 0.3.7(openai@4.83.0(zod@3.24.1))
      mustache: 4.2.0
      p-queue: 6.6.2
      p-retry: 4.6.2
      uuid: 10.0.0
      zod: 3.24.1
      zod-to-json-schema: 3.24.1(zod@3.24.1)
    transitivePeerDependencies:
      - openai

  '@langchain/langgraph-sdk@0.0.37':
    dependencies:
      '@types/json-schema': 7.0.15
      p-queue: 6.6.2
      p-retry: 4.6.2
      uuid: 9.0.1

  '@manypkg/find-root@1.1.0':
    dependencies:
      '@babel/runtime': 7.26.7
      '@types/node': 12.20.55
      find-up: 4.1.0
      fs-extra: 8.1.0

  '@manypkg/get-packages@1.1.3':
    dependencies:
      '@babel/runtime': 7.26.7
      '@changesets/types': 4.1.0
      '@manypkg/find-root': 1.1.0
      fs-extra: 8.1.0
      globby: 11.1.0
      read-yaml-file: 1.1.0

  '@mdx-js/mdx@3.1.0(acorn@8.14.0)':
    dependencies:
      '@types/estree': 1.0.6
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdx': 2.0.13
      collapse-white-space: 2.1.0
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      estree-util-scope: 1.0.0
      estree-walker: 3.0.3
      hast-util-to-jsx-runtime: 2.3.2
      markdown-extensions: 2.0.0
      recma-build-jsx: 1.0.0
      recma-jsx: 1.0.0(acorn@8.14.0)
      recma-stringify: 1.0.0
      rehype-recma: 1.0.0
      remark-mdx: 3.1.0
      remark-parse: 11.0.0
      remark-rehype: 11.1.1
      source-map: 0.7.4
      unified: 11.0.5
      unist-util-position-from-estree: 2.0.0
      unist-util-stringify-position: 4.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3
    transitivePeerDependencies:
      - acorn
      - supports-color

  '@next/env@15.1.6': {}

  '@next/eslint-plugin-next@15.1.6':
    dependencies:
      fast-glob: 3.3.1

  '@next/swc-darwin-arm64@15.1.6':
    optional: true

  '@next/swc-darwin-x64@15.1.6':
    optional: true

  '@next/swc-linux-arm64-gnu@15.1.6':
    optional: true

  '@next/swc-linux-arm64-musl@15.1.6':
    optional: true

  '@next/swc-linux-x64-gnu@15.1.6':
    optional: true

  '@next/swc-linux-x64-musl@15.1.6':
    optional: true

  '@next/swc-win32-arm64-msvc@15.1.6':
    optional: true

  '@next/swc-win32-x64-msvc@15.1.6':
    optional: true

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.0

  '@nolyfill/is-core-module@1.0.39': {}

  '@opentelemetry/api-logs@0.53.0':
    dependencies:
      '@opentelemetry/api': 1.9.0

  '@opentelemetry/api-logs@0.57.1':
    dependencies:
      '@opentelemetry/api': 1.9.0

  '@opentelemetry/api@1.9.0': {}

  '@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0

  '@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/semantic-conventions': 1.28.0

  '@opentelemetry/instrumentation-amqplib@0.46.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-connect@0.43.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@types/connect': 3.4.36
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-dataloader@0.16.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-express@0.47.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-fastify@0.44.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-fs@0.19.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-generic-pool@0.43.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-graphql@0.47.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-hapi@0.45.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-http@0.57.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.28.0
      forwarded-parse: 2.1.2
      semver: 7.7.1
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-ioredis@0.47.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/redis-common': 0.36.2
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-kafkajs@0.7.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-knex@0.44.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-koa@0.47.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-lru-memoizer@0.44.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mongodb@0.51.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mongoose@0.46.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mysql2@0.45.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@opentelemetry/sql-common': 0.40.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mysql@0.45.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@types/mysql': 2.15.26
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-nestjs-core@0.44.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-pg@0.50.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@opentelemetry/sql-common': 0.40.1(@opentelemetry/api@1.9.0)
      '@types/pg': 8.6.1
      '@types/pg-pool': 2.0.6
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-redis-4@0.46.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/redis-common': 0.36.2
      '@opentelemetry/semantic-conventions': 1.29.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-tedious@0.18.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@types/tedious': 4.0.14
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-undici@0.10.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation@0.53.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/api-logs': 0.53.0
      '@types/shimmer': 1.2.0
      import-in-the-middle: 1.13.0
      require-in-the-middle: 7.5.1
      semver: 7.7.1
      shimmer: 1.2.1
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/api-logs': 0.57.1
      '@types/shimmer': 1.2.0
      import-in-the-middle: 1.13.0
      require-in-the-middle: 7.5.1
      semver: 7.7.1
      shimmer: 1.2.1
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/redis-common@0.36.2': {}

  '@opentelemetry/resources@1.30.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.28.0

  '@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/resources': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.28.0

  '@opentelemetry/semantic-conventions@1.27.0': {}

  '@opentelemetry/semantic-conventions@1.28.0': {}

  '@opentelemetry/semantic-conventions@1.29.0': {}

  '@opentelemetry/sql-common@0.40.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)

  '@orama/orama@2.1.1': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@prisma/instrumentation@5.22.0':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.53.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.30.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@radix-ui/colors@3.0.0': {}

  '@radix-ui/number@1.1.0': {}

  '@radix-ui/primitive@1.1.1': {}

  '@radix-ui/react-accessible-icon@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-accordion@1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collapsible': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-alert-dialog@1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dialog': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-arrow@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-aspect-ratio@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-avatar@1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-checkbox@1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-collapsible@1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-collection@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-compose-refs@1.1.1(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-context-menu@2.2.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-menu': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-context@1.1.1(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-dialog@1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-focus-scope': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      aria-hidden: 1.2.4
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-remove-scroll: 2.6.3(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-direction@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-dismissable-layer@1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-dropdown-menu@2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-menu': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-focus-guards@1.1.1(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-focus-scope@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-form@0.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-label': 2.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-hover-card@1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-icons@1.3.2(react@19.0.0)':
    dependencies:
      react: 19.0.0

  '@radix-ui/react-id@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-label@2.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-menu@2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-focus-scope': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      aria-hidden: 1.2.4
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-remove-scroll: 2.6.3(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-menubar@1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-menu': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-navigation-menu@1.2.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-popover@1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-focus-scope': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      aria-hidden: 1.2.4
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-remove-scroll: 2.6.3(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-popper@1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@floating-ui/react-dom': 2.1.2(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-arrow': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-rect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/rect': 1.1.0
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-portal@1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-presence@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-primitive@2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-progress@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-radio-group@1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-roving-focus@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-scroll-area@1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-select@2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-focus-scope': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      aria-hidden: 1.2.4
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-remove-scroll: 2.6.3(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-separator@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-slider@1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-slot@1.1.2(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-switch@1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-tabs@1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-toast@1.2.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-toggle-group@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toggle': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-toggle@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-toolbar@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-separator': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toggle-group': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-tooltip@1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/react-use-callback-ref@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-controllable-state@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-escape-keydown@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-layout-effect@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-previous@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-rect@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/rect': 1.1.0
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-use-size@1.1.0(@types/react@19.0.8)(react@19.0.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  '@radix-ui/react-visually-hidden@1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@radix-ui/rect@1.1.0': {}

  '@radix-ui/themes@3.2.0(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)':
    dependencies:
      '@radix-ui/colors': 3.0.0
      classnames: 2.5.1
      radix-ui: 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-remove-scroll-bar: 2.3.8(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  '@react-hook/media-query@1.1.1(react@19.0.0)':
    dependencies:
      react: 19.0.0

  '@rollup/plugin-commonjs@28.0.1(rollup@3.29.5)':
    dependencies:
      '@rollup/pluginutils': 5.1.4(rollup@3.29.5)
      commondir: 1.0.1
      estree-walker: 2.0.2
      fdir: 6.4.3(picomatch@4.0.2)
      is-reference: 1.2.1
      magic-string: 0.30.17
      picomatch: 4.0.2
    optionalDependencies:
      rollup: 3.29.5

  '@rollup/pluginutils@5.1.4(rollup@3.29.5)':
    dependencies:
      '@types/estree': 1.0.6
      estree-walker: 2.0.2
      picomatch: 4.0.2
    optionalDependencies:
      rollup: 3.29.5

  '@rollup/rollup-android-arm-eabi@4.34.6':
    optional: true

  '@rollup/rollup-android-arm64@4.34.6':
    optional: true

  '@rollup/rollup-darwin-arm64@4.34.6':
    optional: true

  '@rollup/rollup-darwin-x64@4.34.6':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.34.6':
    optional: true

  '@rollup/rollup-freebsd-x64@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.34.6':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.34.6':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.34.6':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.34.6':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.34.6':
    optional: true

  '@rtsao/scc@1.1.0': {}

  '@rushstack/eslint-patch@1.10.5': {}

  '@sentry-internal/browser-utils@8.54.0':
    dependencies:
      '@sentry/core': 8.54.0

  '@sentry-internal/feedback@8.54.0':
    dependencies:
      '@sentry/core': 8.54.0

  '@sentry-internal/replay-canvas@8.54.0':
    dependencies:
      '@sentry-internal/replay': 8.54.0
      '@sentry/core': 8.54.0

  '@sentry-internal/replay@8.54.0':
    dependencies:
      '@sentry-internal/browser-utils': 8.54.0
      '@sentry/core': 8.54.0

  '@sentry/babel-plugin-component-annotate@2.22.7': {}

  '@sentry/browser@8.54.0':
    dependencies:
      '@sentry-internal/browser-utils': 8.54.0
      '@sentry-internal/feedback': 8.54.0
      '@sentry-internal/replay': 8.54.0
      '@sentry-internal/replay-canvas': 8.54.0
      '@sentry/core': 8.54.0

  '@sentry/bundler-plugin-core@2.22.7':
    dependencies:
      '@babel/core': 7.26.7
      '@sentry/babel-plugin-component-annotate': 2.22.7
      '@sentry/cli': 2.39.1
      dotenv: 16.4.7
      find-up: 5.0.0
      glob: 9.3.5
      magic-string: 0.30.8
      unplugin: 1.0.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@sentry/cli-darwin@2.39.1':
    optional: true

  '@sentry/cli-linux-arm64@2.39.1':
    optional: true

  '@sentry/cli-linux-arm@2.39.1':
    optional: true

  '@sentry/cli-linux-i686@2.39.1':
    optional: true

  '@sentry/cli-linux-x64@2.39.1':
    optional: true

  '@sentry/cli-win32-i686@2.39.1':
    optional: true

  '@sentry/cli-win32-x64@2.39.1':
    optional: true

  '@sentry/cli@2.39.1':
    dependencies:
      https-proxy-agent: 5.0.1
      node-fetch: 2.7.0
      progress: 2.0.3
      proxy-from-env: 1.1.0
      which: 2.0.2
    optionalDependencies:
      '@sentry/cli-darwin': 2.39.1
      '@sentry/cli-linux-arm': 2.39.1
      '@sentry/cli-linux-arm64': 2.39.1
      '@sentry/cli-linux-i686': 2.39.1
      '@sentry/cli-linux-x64': 2.39.1
      '@sentry/cli-win32-i686': 2.39.1
      '@sentry/cli-win32-x64': 2.39.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@sentry/core@8.54.0': {}

  '@sentry/nextjs@8.54.0(@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react@19.0.0)(webpack@5.97.1)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/semantic-conventions': 1.29.0
      '@rollup/plugin-commonjs': 28.0.1(rollup@3.29.5)
      '@sentry-internal/browser-utils': 8.54.0
      '@sentry/core': 8.54.0
      '@sentry/node': 8.54.0
      '@sentry/opentelemetry': 8.54.0(@opentelemetry/api@1.9.0)(@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/semantic-conventions@1.29.0)
      '@sentry/react': 8.54.0(react@19.0.0)
      '@sentry/vercel-edge': 8.54.0
      '@sentry/webpack-plugin': 2.22.7(webpack@5.97.1)
      chalk: 3.0.0
      next: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      resolve: 1.22.8
      rollup: 3.29.5
      stacktrace-parser: 0.1.10
    transitivePeerDependencies:
      - '@opentelemetry/context-async-hooks'
      - '@opentelemetry/core'
      - '@opentelemetry/instrumentation'
      - '@opentelemetry/sdk-trace-base'
      - encoding
      - react
      - supports-color
      - webpack

  '@sentry/node@8.54.0':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/context-async-hooks': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-amqplib': 0.46.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-connect': 0.43.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-dataloader': 0.16.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-express': 0.47.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-fastify': 0.44.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-fs': 0.19.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-generic-pool': 0.43.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-graphql': 0.47.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-hapi': 0.45.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-http': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-ioredis': 0.47.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-kafkajs': 0.7.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-knex': 0.44.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-koa': 0.47.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-lru-memoizer': 0.44.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mongodb': 0.51.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mongoose': 0.46.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mysql': 0.45.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mysql2': 0.45.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-nestjs-core': 0.44.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-pg': 0.50.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-redis-4': 0.46.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-tedious': 0.18.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-undici': 0.10.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/resources': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@prisma/instrumentation': 5.22.0
      '@sentry/core': 8.54.0
      '@sentry/opentelemetry': 8.54.0(@opentelemetry/api@1.9.0)(@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/semantic-conventions@1.29.0)
      import-in-the-middle: 1.13.0
    transitivePeerDependencies:
      - supports-color

  '@sentry/opentelemetry@8.54.0(@opentelemetry/api@1.9.0)(@opentelemetry/context-async-hooks@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/core@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.57.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.30.1(@opentelemetry/api@1.9.0))(@opentelemetry/semantic-conventions@1.29.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/context-async-hooks': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.57.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.30.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.29.0
      '@sentry/core': 8.54.0

  '@sentry/react@8.54.0(react@19.0.0)':
    dependencies:
      '@sentry/browser': 8.54.0
      '@sentry/core': 8.54.0
      hoist-non-react-statics: 3.3.2
      react: 19.0.0

  '@sentry/vercel-edge@8.54.0':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@sentry/core': 8.54.0

  '@sentry/webpack-plugin@2.22.7(webpack@5.97.1)':
    dependencies:
      '@sentry/bundler-plugin-core': 2.22.7
      unplugin: 1.0.1
      uuid: 9.0.1
      webpack: 5.97.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@shikijs/core@2.3.2':
    dependencies:
      '@shikijs/engine-javascript': 2.3.2
      '@shikijs/engine-oniguruma': 2.3.2
      '@shikijs/types': 2.3.2
      '@shikijs/vscode-textmate': 10.0.1
      '@types/hast': 3.0.4
      hast-util-to-html: 9.0.4

  '@shikijs/engine-javascript@2.3.2':
    dependencies:
      '@shikijs/types': 2.3.2
      '@shikijs/vscode-textmate': 10.0.1
      oniguruma-to-es: 3.1.0

  '@shikijs/engine-oniguruma@2.3.2':
    dependencies:
      '@shikijs/types': 2.3.2
      '@shikijs/vscode-textmate': 10.0.1

  '@shikijs/langs@2.3.2':
    dependencies:
      '@shikijs/types': 2.3.2

  '@shikijs/rehype@2.3.2':
    dependencies:
      '@shikijs/types': 2.3.2
      '@types/hast': 3.0.4
      hast-util-to-string: 3.0.1
      shiki: 2.3.2
      unified: 11.0.5
      unist-util-visit: 5.0.0

  '@shikijs/themes@2.3.2':
    dependencies:
      '@shikijs/types': 2.3.2

  '@shikijs/transformers@2.3.2':
    dependencies:
      '@shikijs/core': 2.3.2
      '@shikijs/types': 2.3.2

  '@shikijs/twoslash@2.3.2(typescript@5.7.3)':
    dependencies:
      '@shikijs/core': 2.3.2
      '@shikijs/types': 2.3.2
      twoslash: 0.2.12(typescript@5.7.3)
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@shikijs/types@2.3.2':
    dependencies:
      '@shikijs/vscode-textmate': 10.0.1
      '@types/hast': 3.0.4

  '@shikijs/vscode-textmate@10.0.1': {}

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.15':
    dependencies:
      tslib: 2.8.1

  '@tailwindcss/node@4.0.4':
    dependencies:
      enhanced-resolve: 5.18.1
      jiti: 2.4.2
      tailwindcss: 4.0.4

  '@tailwindcss/oxide-android-arm64@4.0.4':
    optional: true

  '@tailwindcss/oxide-darwin-arm64@4.0.4':
    optional: true

  '@tailwindcss/oxide-darwin-x64@4.0.4':
    optional: true

  '@tailwindcss/oxide-freebsd-x64@4.0.4':
    optional: true

  '@tailwindcss/oxide-linux-arm-gnueabihf@4.0.4':
    optional: true

  '@tailwindcss/oxide-linux-arm64-gnu@4.0.4':
    optional: true

  '@tailwindcss/oxide-linux-arm64-musl@4.0.4':
    optional: true

  '@tailwindcss/oxide-linux-x64-gnu@4.0.4':
    optional: true

  '@tailwindcss/oxide-linux-x64-musl@4.0.4':
    optional: true

  '@tailwindcss/oxide-win32-arm64-msvc@4.0.4':
    optional: true

  '@tailwindcss/oxide-win32-x64-msvc@4.0.4':
    optional: true

  '@tailwindcss/oxide@4.0.4':
    optionalDependencies:
      '@tailwindcss/oxide-android-arm64': 4.0.4
      '@tailwindcss/oxide-darwin-arm64': 4.0.4
      '@tailwindcss/oxide-darwin-x64': 4.0.4
      '@tailwindcss/oxide-freebsd-x64': 4.0.4
      '@tailwindcss/oxide-linux-arm-gnueabihf': 4.0.4
      '@tailwindcss/oxide-linux-arm64-gnu': 4.0.4
      '@tailwindcss/oxide-linux-arm64-musl': 4.0.4
      '@tailwindcss/oxide-linux-x64-gnu': 4.0.4
      '@tailwindcss/oxide-linux-x64-musl': 4.0.4
      '@tailwindcss/oxide-win32-arm64-msvc': 4.0.4
      '@tailwindcss/oxide-win32-x64-msvc': 4.0.4

  '@tailwindcss/postcss@4.0.4':
    dependencies:
      '@alloc/quick-lru': 5.2.0
      '@tailwindcss/node': 4.0.4
      '@tailwindcss/oxide': 4.0.4
      lightningcss: 1.29.1
      postcss: 8.5.1
      tailwindcss: 4.0.4

  '@ts-morph/common@0.26.1':
    dependencies:
      fast-glob: 3.3.3
      minimatch: 9.0.5
      path-browserify: 1.0.1

  '@tsconfig/strictest@2.0.5': {}

  '@types/acorn@4.0.6':
    dependencies:
      '@types/estree': 1.0.6

  '@types/cli-progress@3.11.6':
    dependencies:
      '@types/node': 22.13.1

  '@types/connect@3.4.36':
    dependencies:
      '@types/node': 22.13.1

  '@types/cross-spawn@6.0.6':
    dependencies:
      '@types/node': 22.13.1

  '@types/debug@4.1.12':
    dependencies:
      '@types/ms': 2.1.0

  '@types/diff-match-patch@1.0.36': {}

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 9.6.1
      '@types/estree': 1.0.6

  '@types/eslint@9.6.1':
    dependencies:
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15

  '@types/estree-jsx@1.0.5':
    dependencies:
      '@types/estree': 1.0.6

  '@types/estree@1.0.6': {}

  '@types/hast@2.3.10':
    dependencies:
      '@types/unist': 2.0.11

  '@types/hast@3.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/js-cookie@3.0.6': {}

  '@types/jscodeshift@0.12.0':
    dependencies:
      ast-types: 0.14.2
      recast: 0.20.5

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/jsonwebtoken@9.0.8':
    dependencies:
      '@types/ms': 2.1.0
      '@types/node': 22.13.1

  '@types/katex@0.16.7': {}

  '@types/mdast@4.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/mdx@2.0.13': {}

  '@types/ms@2.1.0': {}

  '@types/mysql@2.15.26':
    dependencies:
      '@types/node': 22.13.1

  '@types/node-fetch@2.6.12':
    dependencies:
      '@types/node': 22.13.1
      form-data: 4.0.1

  '@types/node@12.20.55': {}

  '@types/node@18.19.75':
    dependencies:
      undici-types: 5.26.5

  '@types/node@22.13.1':
    dependencies:
      undici-types: 6.20.0

  '@types/pg-pool@2.0.6':
    dependencies:
      '@types/pg': 8.6.1

  '@types/pg@8.6.1':
    dependencies:
      '@types/node': 22.13.1
      pg-protocol: 1.7.0
      pg-types: 2.2.0

  '@types/postcss-js@4.0.4':
    dependencies:
      postcss: 8.5.1

  '@types/react-dom@19.0.3(@types/react@19.0.8)':
    dependencies:
      '@types/react': 19.0.8

  '@types/react-syntax-highlighter@15.5.13':
    dependencies:
      '@types/react': 19.0.8

  '@types/react@19.0.8':
    dependencies:
      csstype: 3.1.3

  '@types/retry@0.12.0': {}

  '@types/shimmer@1.2.0': {}

  '@types/tedious@4.0.14':
    dependencies:
      '@types/node': 22.13.1

  '@types/unist@2.0.11': {}

  '@types/unist@3.0.3': {}

  '@types/uuid@10.0.0': {}

  '@typescript-eslint/eslint-plugin@8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/type-utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      '@typescript-eslint/utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 8.23.0
      eslint: 9.20.0(jiti@2.4.2)
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 2.0.1(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/eslint-plugin@8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/type-utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/visitor-keys': 8.23.0
      eslint: 9.20.0(jiti@2.4.2)
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 2.0.1(typescript@5.8.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/eslint-plugin@8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/type-utils': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/utils': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/visitor-keys': 8.23.0
      eslint: 9.22.0(jiti@2.4.2)
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 2.0.1(typescript@5.8.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 8.23.0
      debug: 4.4.0
      eslint: 9.20.0(jiti@2.4.2)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      '@typescript-eslint/visitor-keys': 8.23.0
      debug: 4.4.0
      eslint: 9.20.0(jiti@2.4.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      '@typescript-eslint/visitor-keys': 8.23.0
      debug: 4.4.0
      eslint: 9.22.0(jiti@2.4.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.23.0':
    dependencies:
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/visitor-keys': 8.23.0

  '@typescript-eslint/type-utils@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.7.3)
      '@typescript-eslint/utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      debug: 4.4.0
      eslint: 9.20.0(jiti@2.4.2)
      ts-api-utils: 2.0.1(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/type-utils@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      '@typescript-eslint/utils': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      debug: 4.4.0
      eslint: 9.20.0(jiti@2.4.2)
      ts-api-utils: 2.0.1(typescript@5.8.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/type-utils@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      '@typescript-eslint/utils': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      debug: 4.4.0
      eslint: 9.22.0(jiti@2.4.2)
      ts-api-utils: 2.0.1(typescript@5.8.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.23.0': {}

  '@typescript-eslint/typescript-estree@8.23.0(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/visitor-keys': 8.23.0
      debug: 4.4.0
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.1
      ts-api-utils: 2.0.1(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/typescript-estree@8.23.0(typescript@5.8.2)':
    dependencies:
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/visitor-keys': 8.23.0
      debug: 4.4.0
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.1
      ts-api-utils: 2.0.1(typescript@5.8.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.20.0(jiti@2.4.2))
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.7.3)
      eslint: 9.20.0(jiti@2.4.2)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.20.0(jiti@2.4.2))
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      eslint: 9.20.0(jiti@2.4.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.22.0(jiti@2.4.2))
      '@typescript-eslint/scope-manager': 8.23.0
      '@typescript-eslint/types': 8.23.0
      '@typescript-eslint/typescript-estree': 8.23.0(typescript@5.8.2)
      eslint: 9.22.0(jiti@2.4.2)
      typescript: 5.8.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.23.0':
    dependencies:
      '@typescript-eslint/types': 8.23.0
      eslint-visitor-keys: 4.2.0

  '@typescript/vfs@1.6.1(typescript@5.7.3)':
    dependencies:
      debug: 4.4.0
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@ungap/structured-clone@1.3.0': {}

  '@webassemblyjs/ast@1.14.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2

  '@webassemblyjs/floating-point-hex-parser@1.13.2': {}

  '@webassemblyjs/helper-api-error@1.13.2': {}

  '@webassemblyjs/helper-buffer@1.14.1': {}

  '@webassemblyjs/helper-numbers@1.13.2':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.13.2
      '@webassemblyjs/helper-api-error': 1.13.2
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.13.2': {}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/wasm-gen': 1.14.1

  '@webassemblyjs/ieee754@1.13.2':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.13.2':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.13.2': {}

  '@webassemblyjs/wasm-edit@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/helper-wasm-section': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-opt': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      '@webassemblyjs/wast-printer': 1.14.1

  '@webassemblyjs/wasm-gen@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wasm-opt@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1

  '@webassemblyjs/wasm-parser@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-api-error': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wast-printer@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@xtuc/long': 4.2.2

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  acorn-import-attributes@1.9.5(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn-jsx@5.3.2(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn@8.14.0: {}

  agent-base@6.0.2:
    dependencies:
      debug: 4.4.0
    transitivePeerDependencies:
      - supports-color

  agentkeepalive@4.6.0:
    dependencies:
      humanize-ms: 1.2.1

  ai@4.1.25(react@19.0.0)(zod@3.24.1):
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      '@ai-sdk/react': 1.1.10(react@19.0.0)(zod@3.24.1)
      '@ai-sdk/ui-utils': 1.1.10(zod@3.24.1)
      '@opentelemetry/api': 1.9.0
      jsondiffpatch: 0.6.0
    optionalDependencies:
      react: 19.0.0
      zod: 3.24.1

  ai@4.1.34(react@19.0.0)(zod@3.24.1):
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      '@ai-sdk/react': 1.1.11(react@19.0.0)(zod@3.24.1)
      '@ai-sdk/ui-utils': 1.1.11(zod@3.24.1)
      '@opentelemetry/api': 1.9.0
      jsondiffpatch: 0.6.0
    optionalDependencies:
      react: 19.0.0
      zod: 3.24.1

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-keywords@3.5.2(ajv@6.12.6):
    dependencies:
      ajv: 6.12.6

  ajv-keywords@5.1.0(ajv@8.17.1):
    dependencies:
      ajv: 8.17.1
      fast-deep-equal: 3.1.3

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.6
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  ansi-colors@4.1.3: {}

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  aria-hidden@1.2.4:
    dependencies:
      tslib: 2.8.1

  aria-query@5.3.2: {}

  array-buffer-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.3
      is-array-buffer: 3.0.5

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      get-intrinsic: 1.2.7
      is-string: 1.1.1

  array-union@2.1.0: {}

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.0.2

  array.prototype.findlastindex@1.2.5:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.0.2

  array.prototype.flat@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.0.2

  array.prototype.flatmap@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.0.2

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-shim-unscopables: 1.0.2

  arraybuffer.prototype.slice@1.0.4:
    dependencies:
      array-buffer-byte-length: 1.0.2
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      get-intrinsic: 1.2.7
      is-array-buffer: 3.0.5

  ast-types-flow@0.0.8: {}

  ast-types@0.14.2:
    dependencies:
      tslib: 2.8.1

  ast-types@0.16.1:
    dependencies:
      tslib: 2.8.1

  astring@1.9.0: {}

  async-function@1.0.0: {}

  asynckit@0.4.0: {}

  autoprefixer@10.4.20(postcss@8.5.1):
    dependencies:
      browserslist: 4.24.4
      caniuse-lite: 1.0.30001698
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.1.1
      postcss: 8.5.1
      postcss-value-parser: 4.2.0

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  axe-core@4.10.2: {}

  axobject-query@4.1.0: {}

  bail@2.0.2: {}

  balanced-match@1.0.2: {}

  base64-js@1.5.1: {}

  better-path-resolve@1.0.0:
    dependencies:
      is-windows: 1.0.2

  binary-extensions@2.3.0: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.24.4:
    dependencies:
      caniuse-lite: 1.0.30001698
      electron-to-chromium: 1.5.96
      node-releases: 2.0.19
      update-browserslist-db: 1.1.2(browserslist@4.24.4)

  buffer-equal-constant-time@1.0.1: {}

  buffer-from@1.1.2: {}

  bundle-require@5.1.0(esbuild@0.24.2):
    dependencies:
      esbuild: 0.24.2
      load-tsconfig: 0.2.5

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  cac@6.7.14: {}

  call-bind-apply-helpers@1.0.1:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-define-property: 1.0.1
      get-intrinsic: 1.2.7
      set-function-length: 1.2.2

  call-bound@1.0.3:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      get-intrinsic: 1.2.7

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001698: {}

  ccount@2.0.1: {}

  chalk@3.0.0:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.4.1: {}

  character-entities-html4@2.1.0: {}

  character-entities-legacy@1.1.4: {}

  character-entities-legacy@3.0.0: {}

  character-entities@1.2.4: {}

  character-entities@2.0.2: {}

  character-reference-invalid@1.1.4: {}

  character-reference-invalid@2.0.1: {}

  chardet@0.7.0: {}

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chokidar@4.0.3:
    dependencies:
      readdirp: 4.1.1

  chrome-trace-event@1.0.4: {}

  ci-info@3.9.0: {}

  cjs-module-lexer@1.4.3: {}

  class-variance-authority@0.7.1:
    dependencies:
      clsx: 2.1.1

  classnames@2.5.1: {}

  cli-progress@3.12.0:
    dependencies:
      string-width: 4.2.3

  client-only@0.0.1: {}

  clone-deep@4.0.1:
    dependencies:
      is-plain-object: 2.0.4
      kind-of: 6.0.3
      shallow-clone: 3.0.1

  clsx@2.1.1: {}

  code-block-writer@13.0.3: {}

  collapse-white-space@2.1.0: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  comma-separated-tokens@1.0.8: {}

  comma-separated-tokens@2.0.3: {}

  commander@13.1.0: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commander@8.3.0: {}

  commondir@1.0.1: {}

  compute-scroll-into-view@3.1.1: {}

  concat-map@0.0.1: {}

  consola@3.4.0: {}

  console-table-printer@2.12.1:
    dependencies:
      simple-wcswidth: 1.0.1

  convert-source-map@2.0.0: {}

  cosmiconfig@9.0.0(typescript@5.8.2):
    dependencies:
      env-paths: 2.2.1
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      parse-json: 5.2.0
    optionalDependencies:
      typescript: 5.8.2

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  cssesc@3.0.0: {}

  csstype@3.1.3: {}

  damerau-levenshtein@1.0.8: {}

  data-view-buffer@1.0.2:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-offset@1.0.1:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      is-data-view: 1.0.2

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  decamelize@1.2.0: {}

  decode-named-character-reference@1.0.2:
    dependencies:
      character-entities: 2.0.2

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  dequal@2.0.3: {}

  detect-indent@6.1.0: {}

  detect-libc@1.0.3: {}

  detect-libc@2.0.3:
    optional: true

  detect-node-es@1.1.0: {}

  detect-package-manager@3.0.2:
    dependencies:
      execa: 5.1.1

  devlop@1.1.0:
    dependencies:
      dequal: 2.0.3

  didyoumean@1.2.2: {}

  diff-match-patch@1.0.5: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  dlv@1.1.3: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  dotenv@16.4.7: {}

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  ecdsa-sig-formatter@1.0.11:
    dependencies:
      safe-buffer: 5.2.1

  electron-to-chromium@1.5.96: {}

  embla-carousel-autoplay@8.5.2(embla-carousel@8.5.2):
    dependencies:
      embla-carousel: 8.5.2

  embla-carousel-react@8.5.2(react@19.0.0):
    dependencies:
      embla-carousel: 8.5.2
      embla-carousel-reactive-utils: 8.5.2(embla-carousel@8.5.2)
      react: 19.0.0

  embla-carousel-reactive-utils@8.5.2(embla-carousel@8.5.2):
    dependencies:
      embla-carousel: 8.5.2

  embla-carousel@8.5.2: {}

  emoji-regex-xs@1.0.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  enhanced-resolve@5.18.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  enquirer@2.4.1:
    dependencies:
      ansi-colors: 4.1.3
      strip-ansi: 6.0.1

  entities@4.5.0: {}

  env-paths@2.2.1: {}

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-abstract@1.23.9:
    dependencies:
      array-buffer-byte-length: 1.0.2
      arraybuffer.prototype.slice: 1.0.4
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.3
      data-view-buffer: 1.0.2
      data-view-byte-length: 1.0.2
      data-view-byte-offset: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-set-tostringtag: 2.1.0
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.8
      get-intrinsic: 1.2.7
      get-proto: 1.0.1
      get-symbol-description: 1.1.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      internal-slot: 1.1.0
      is-array-buffer: 3.0.5
      is-callable: 1.2.7
      is-data-view: 1.0.2
      is-regex: 1.2.1
      is-shared-array-buffer: 1.0.4
      is-string: 1.1.1
      is-typed-array: 1.1.15
      is-weakref: 1.1.1
      math-intrinsics: 1.1.0
      object-inspect: 1.13.4
      object-keys: 1.1.1
      object.assign: 4.1.7
      own-keys: 1.0.1
      regexp.prototype.flags: 1.5.4
      safe-array-concat: 1.1.3
      safe-push-apply: 1.0.0
      safe-regex-test: 1.1.0
      set-proto: 1.0.0
      string.prototype.trim: 1.2.10
      string.prototype.trimend: 1.0.9
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.3
      typed-array-byte-length: 1.0.3
      typed-array-byte-offset: 1.0.4
      typed-array-length: 1.0.7
      unbox-primitive: 1.1.0
      which-typed-array: 1.1.18

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-iterator-helpers@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-set-tostringtag: 2.1.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.7
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      iterator.prototype: 1.1.5
      safe-array-concat: 1.1.3

  es-module-lexer@1.6.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.2.7
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.0.2:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.1.0
      is-symbol: 1.1.1

  esast-util-from-estree@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      devlop: 1.1.0
      estree-util-visit: 2.0.0
      unist-util-position-from-estree: 2.0.0

  esast-util-from-js@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      acorn: 8.14.0
      esast-util-from-estree: 2.0.0
      vfile-message: 4.0.2

  esbuild-plugin-file-path-extensions@2.1.4: {}

  esbuild@0.23.1:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.23.1
      '@esbuild/android-arm': 0.23.1
      '@esbuild/android-arm64': 0.23.1
      '@esbuild/android-x64': 0.23.1
      '@esbuild/darwin-arm64': 0.23.1
      '@esbuild/darwin-x64': 0.23.1
      '@esbuild/freebsd-arm64': 0.23.1
      '@esbuild/freebsd-x64': 0.23.1
      '@esbuild/linux-arm': 0.23.1
      '@esbuild/linux-arm64': 0.23.1
      '@esbuild/linux-ia32': 0.23.1
      '@esbuild/linux-loong64': 0.23.1
      '@esbuild/linux-mips64el': 0.23.1
      '@esbuild/linux-ppc64': 0.23.1
      '@esbuild/linux-riscv64': 0.23.1
      '@esbuild/linux-s390x': 0.23.1
      '@esbuild/linux-x64': 0.23.1
      '@esbuild/netbsd-x64': 0.23.1
      '@esbuild/openbsd-arm64': 0.23.1
      '@esbuild/openbsd-x64': 0.23.1
      '@esbuild/sunos-x64': 0.23.1
      '@esbuild/win32-arm64': 0.23.1
      '@esbuild/win32-ia32': 0.23.1
      '@esbuild/win32-x64': 0.23.1

  esbuild@0.24.2:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.24.2
      '@esbuild/android-arm': 0.24.2
      '@esbuild/android-arm64': 0.24.2
      '@esbuild/android-x64': 0.24.2
      '@esbuild/darwin-arm64': 0.24.2
      '@esbuild/darwin-x64': 0.24.2
      '@esbuild/freebsd-arm64': 0.24.2
      '@esbuild/freebsd-x64': 0.24.2
      '@esbuild/linux-arm': 0.24.2
      '@esbuild/linux-arm64': 0.24.2
      '@esbuild/linux-ia32': 0.24.2
      '@esbuild/linux-loong64': 0.24.2
      '@esbuild/linux-mips64el': 0.24.2
      '@esbuild/linux-ppc64': 0.24.2
      '@esbuild/linux-riscv64': 0.24.2
      '@esbuild/linux-s390x': 0.24.2
      '@esbuild/linux-x64': 0.24.2
      '@esbuild/netbsd-arm64': 0.24.2
      '@esbuild/netbsd-x64': 0.24.2
      '@esbuild/openbsd-arm64': 0.24.2
      '@esbuild/openbsd-x64': 0.24.2
      '@esbuild/sunos-x64': 0.24.2
      '@esbuild/win32-arm64': 0.24.2
      '@esbuild/win32-ia32': 0.24.2
      '@esbuild/win32-x64': 0.24.2

  escalade@3.2.0: {}

  escape-string-regexp@4.0.0: {}

  escape-string-regexp@5.0.0: {}

  eslint-config-next@15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3):
    dependencies:
      '@next/eslint-plugin-next': 15.1.6
      '@rushstack/eslint-patch': 1.10.5
      '@typescript-eslint/eslint-plugin': 8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-react: 7.37.4(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-react-hooks: 5.1.0(eslint@9.20.0(jiti@2.4.2))
    optionalDependencies:
      typescript: 5.7.3
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-config-next@15.1.6(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2):
    dependencies:
      '@next/eslint-plugin-next': 15.1.6
      '@rushstack/eslint-patch': 1.10.5
      '@typescript-eslint/eslint-plugin': 8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-react: 7.37.4(eslint@9.20.0(jiti@2.4.2))
      eslint-plugin-react-hooks: 5.1.0(eslint@9.20.0(jiti@2.4.2))
    optionalDependencies:
      typescript: 5.8.2
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-config-next@15.1.6(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2):
    dependencies:
      '@next/eslint-plugin-next': 15.1.6
      '@rushstack/eslint-patch': 1.10.5
      '@typescript-eslint/eslint-plugin': 8.23.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      '@typescript-eslint/parser': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      eslint: 9.22.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.22.0(jiti@2.4.2))
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-typescript@3.7.0)(eslint@9.22.0(jiti@2.4.2))
      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.22.0(jiti@2.4.2))
      eslint-plugin-react: 7.37.4(eslint@9.22.0(jiti@2.4.2))
      eslint-plugin-react-hooks: 5.1.0(eslint@9.22.0(jiti@2.4.2))
    optionalDependencies:
      typescript: 5.8.2
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.16.1
      resolve: 1.22.10
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.7.0(eslint-plugin-import@2.31.0)(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.4.0
      enhanced-resolve: 5.18.1
      eslint: 9.20.0(jiti@2.4.2)
      fast-glob: 3.3.3
      get-tsconfig: 4.10.0
      is-bun-module: 1.3.0
      is-glob: 4.0.3
      stable-hash: 0.0.4
    optionalDependencies:
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.20.0(jiti@2.4.2))
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.7.0(eslint-plugin-import@2.31.0)(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.4.0
      enhanced-resolve: 5.18.1
      eslint: 9.22.0(jiti@2.4.2)
      fast-glob: 3.3.3
      get-tsconfig: 4.10.0
      is-bun-module: 1.3.0
      is-glob: 4.0.3
      stable-hash: 0.0.4
    optionalDependencies:
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-typescript@3.7.0)(eslint@9.22.0(jiti@2.4.2))
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.20.0(jiti@2.4.2))
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.20.0(jiti@2.4.2))
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
      eslint: 9.22.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.22.0(jiti@2.4.2))
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2))
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.7.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.20.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.20.0(jiti@2.4.2))
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.20.0(jiti@2.4.2))(typescript@5.8.2)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-typescript@3.7.0)(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.22.0(jiti@2.4.2)
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.22.0(jiti@2.4.2))
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.23.0(eslint@9.22.0(jiti@2.4.2))(typescript@5.8.2)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.10.2(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      aria-query: 5.3.2
      array-includes: 3.1.8
      array.prototype.flatmap: 1.3.3
      ast-types-flow: 0.0.8
      axe-core: 4.10.2
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      eslint: 9.20.0(jiti@2.4.2)
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.1.0
      string.prototype.includes: 2.0.1

  eslint-plugin-jsx-a11y@6.10.2(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      aria-query: 5.3.2
      array-includes: 3.1.8
      array.prototype.flatmap: 1.3.3
      ast-types-flow: 0.0.8
      axe-core: 4.10.2
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      eslint: 9.22.0(jiti@2.4.2)
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.1.0
      string.prototype.includes: 2.0.1

  eslint-plugin-react-hooks@5.1.0(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      eslint: 9.20.0(jiti@2.4.2)

  eslint-plugin-react-hooks@5.1.0(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      eslint: 9.22.0(jiti@2.4.2)

  eslint-plugin-react@7.37.4(eslint@9.20.0(jiti@2.4.2)):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.3
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.1
      eslint: 9.20.0(jiti@2.4.2)
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.8
      object.fromentries: 2.0.8
      object.values: 1.2.1
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.12
      string.prototype.repeat: 1.0.0

  eslint-plugin-react@7.37.4(eslint@9.22.0(jiti@2.4.2)):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.3
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.1
      eslint: 9.22.0(jiti@2.4.2)
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.8
      object.fromentries: 2.0.8
      object.values: 1.2.1
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.12
      string.prototype.repeat: 1.0.0

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  eslint-scope@8.2.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-scope@8.3.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.0: {}

  eslint@9.20.0(jiti@2.4.2):
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.20.0(jiti@2.4.2))
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.19.2
      '@eslint/core': 0.11.0
      '@eslint/eslintrc': 3.3.0
      '@eslint/js': 9.20.0
      '@eslint/plugin-kit': 0.2.5
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.1
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.0
      escape-string-regexp: 4.0.0
      eslint-scope: 8.2.0
      eslint-visitor-keys: 4.2.0
      espree: 10.3.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    optionalDependencies:
      jiti: 2.4.2
    transitivePeerDependencies:
      - supports-color

  eslint@9.22.0(jiti@2.4.2):
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.22.0(jiti@2.4.2))
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.19.2
      '@eslint/config-helpers': 0.1.0
      '@eslint/core': 0.12.0
      '@eslint/eslintrc': 3.3.0
      '@eslint/js': 9.22.0
      '@eslint/plugin-kit': 0.2.7
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.2
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.0
      escape-string-regexp: 4.0.0
      eslint-scope: 8.3.0
      eslint-visitor-keys: 4.2.0
      espree: 10.3.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    optionalDependencies:
      jiti: 2.4.2
    transitivePeerDependencies:
      - supports-color

  espree@10.3.0:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      eslint-visitor-keys: 4.2.0

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  estree-util-attach-comments@3.0.0:
    dependencies:
      '@types/estree': 1.0.6

  estree-util-build-jsx@3.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      estree-walker: 3.0.3

  estree-util-is-identifier-name@3.0.0: {}

  estree-util-scope@1.0.0:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0

  estree-util-to-js@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      astring: 1.9.0
      source-map: 0.7.4

  estree-util-value-to-estree@3.3.2:
    dependencies:
      '@types/estree': 1.0.6

  estree-util-visit@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/unist': 3.0.3

  estree-walker@2.0.2: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.6

  esutils@2.0.3: {}

  event-target-shim@5.0.1: {}

  eventemitter3@4.0.7: {}

  events@3.3.0: {}

  eventsource-parser@3.0.0: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  extend-shallow@2.0.1:
    dependencies:
      is-extendable: 0.1.1

  extend@3.0.2: {}

  extendable-error@0.1.7: {}

  external-editor@3.1.0:
    dependencies:
      chardet: 0.7.0
      iconv-lite: 0.4.24
      tmp: 0.0.33

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.1:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fast-uri@3.0.6: {}

  fastq@1.19.0:
    dependencies:
      reusify: 1.0.4

  fault@1.0.4:
    dependencies:
      format: 0.2.2

  fdir@6.4.3(picomatch@4.0.2):
    optionalDependencies:
      picomatch: 4.0.2

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-cache-dir@2.1.0:
    dependencies:
      commondir: 1.0.1
      make-dir: 2.1.0
      pkg-dir: 3.0.0

  find-up@3.0.0:
    dependencies:
      locate-path: 3.0.0

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.2
      keyv: 4.5.4

  flatted@3.3.2: {}

  flow-parser@0.259.1: {}

  for-each@0.3.4:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data-encoder@1.7.2: {}

  form-data@4.0.1:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  format@0.2.2: {}

  formdata-node@4.4.1:
    dependencies:
      node-domexception: 1.0.0
      web-streams-polyfill: 4.0.0-beta.3

  forwarded-parse@2.1.2: {}

  fraction.js@4.3.7: {}

  framer-motion@12.4.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      motion-dom: 12.0.0
      motion-utils: 12.0.0
      tslib: 2.8.1
    optionalDependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  fs-extra@7.0.1:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 4.0.0
      universalify: 0.1.2

  fs-extra@8.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 4.0.0
      universalify: 0.1.2

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      '@formatjs/intl-localematcher': 0.5.10
      '@orama/orama': 2.1.1
      '@shikijs/rehype': 2.3.2
      '@shikijs/transformers': 2.3.2
      github-slugger: 2.0.0
      hast-util-to-estree: 3.1.1
      hast-util-to-jsx-runtime: 2.3.2
      image-size: 1.2.0
      negotiator: 1.0.0
      react-remove-scroll: 2.6.3(@types/react@19.0.8)(react@19.0.0)
      remark: 15.0.1
      remark-gfm: 4.0.0
      scroll-into-view-if-needed: 3.1.0
      shiki: 2.3.2
      unist-util-visit: 5.0.0
    optionalDependencies:
      next: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    transitivePeerDependencies:
      - '@types/react'
      - supports-color

  fumadocs-mdx@11.5.1(acorn@8.14.0)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)):
    dependencies:
      '@mdx-js/mdx': 3.1.0(acorn@8.14.0)
      chokidar: 4.0.3
      cross-spawn: 7.0.6
      esbuild: 0.24.2
      estree-util-value-to-estree: 3.3.2
      fast-glob: 3.3.3
      fumadocs-core: 15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      gray-matter: 4.0.3
      micromatch: 4.0.8
      next: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      unist-util-visit: 5.0.0
      zod: 3.24.1
    transitivePeerDependencies:
      - acorn
      - supports-color

  fumadocs-twoslash@3.0.0(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-ui@15.0.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(tailwindcss@4.0.4))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(shiki@2.3.2)(typescript@5.7.3):
    dependencies:
      '@radix-ui/react-popover': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@shikijs/twoslash': 2.3.2(typescript@5.7.3)
      fumadocs-ui: 15.0.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(tailwindcss@4.0.4)
      mdast-util-from-markdown: 2.0.2
      mdast-util-gfm: 3.0.0
      mdast-util-to-hast: 13.2.0
      react: 19.0.0
      shiki: 2.3.2
      tailwind-merge: 2.6.0
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'
      - react-dom
      - supports-color
      - typescript

  fumadocs-ui@15.0.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(fumadocs-core@15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)(tailwindcss@4.0.4):
    dependencies:
      '@radix-ui/react-accordion': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-collapsible': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dialog': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-navigation-menu': 1.2.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-popover': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-scroll-area': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-tabs': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      class-variance-authority: 0.7.1
      fumadocs-core: 15.0.4(@types/react@19.0.8)(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      lodash.merge: 4.6.2
      lucide-react: 0.474.0(react@19.0.0)
      next: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      next-themes: 0.4.4(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      postcss-selector-parser: 7.1.0
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      react-medium-image-zoom: 5.2.13(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      tailwind-merge: 3.0.1
    optionalDependencies:
      tailwindcss: 4.0.4
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  function-bind@1.1.2: {}

  function.prototype.name@1.1.8:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      functions-have-names: 1.2.3
      hasown: 2.0.2
      is-callable: 1.2.7

  functions-have-names@1.2.3: {}

  geist@1.3.1(next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)):
    dependencies:
      next: 15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)

  gensync@1.0.0-beta.2: {}

  get-intrinsic@1.2.7:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-nonce@1.0.1: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-stream@6.0.1: {}

  get-symbol-description@1.1.0:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.7

  get-tsconfig@4.10.0:
    dependencies:
      resolve-pkg-maps: 1.0.0

  github-slugger@2.0.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@11.0.1:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 4.0.2
      minimatch: 10.0.1
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 2.0.0

  glob@9.3.5:
    dependencies:
      fs.realpath: 1.0.0
      minimatch: 8.0.4
      minipass: 4.2.8
      path-scurry: 1.11.1

  globals@11.12.0: {}

  globals@14.0.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.2.0

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.3
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  gopd@1.2.0: {}

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  gray-matter@4.0.3:
    dependencies:
      js-yaml: 3.14.1
      kind-of: 6.0.3
      section-matter: 1.0.0
      strip-bom-string: 1.0.0

  has-bigints@1.1.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-proto@1.2.0:
    dependencies:
      dunder-proto: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hast-util-from-dom@5.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hastscript: 9.0.0
      web-namespaces: 2.0.1

  hast-util-from-html-isomorphic@2.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-from-dom: 5.0.1
      hast-util-from-html: 2.0.3
      unist-util-remove-position: 5.0.0

  hast-util-from-html@2.0.3:
    dependencies:
      '@types/hast': 3.0.4
      devlop: 1.1.0
      hast-util-from-parse5: 8.0.2
      parse5: 7.2.1
      vfile: 6.0.3
      vfile-message: 4.0.2

  hast-util-from-parse5@8.0.2:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      devlop: 1.1.0
      hastscript: 9.0.0
      property-information: 6.5.0
      vfile: 6.0.3
      vfile-location: 5.0.3
      web-namespaces: 2.0.1

  hast-util-is-element@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-parse-selector@2.2.5: {}

  hast-util-parse-selector@4.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-to-estree@3.1.1:
    dependencies:
      '@types/estree': 1.0.6
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-attach-comments: 3.0.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      style-to-object: 1.0.8
      unist-util-position: 5.0.0
      zwitch: 2.0.4
    transitivePeerDependencies:
      - supports-color

  hast-util-to-html@9.0.4:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      ccount: 2.0.1
      comma-separated-tokens: 2.0.3
      hast-util-whitespace: 3.0.0
      html-void-elements: 3.0.0
      mdast-util-to-hast: 13.2.0
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      stringify-entities: 4.0.4
      zwitch: 2.0.4

  hast-util-to-jsx-runtime@2.3.2:
    dependencies:
      '@types/estree': 1.0.6
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      style-to-object: 1.0.8
      unist-util-position: 5.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  hast-util-to-string@3.0.1:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-to-text@4.0.2:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      hast-util-is-element: 3.0.0
      unist-util-find-after: 5.0.0

  hast-util-whitespace@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hastscript@6.0.0:
    dependencies:
      '@types/hast': 2.3.10
      comma-separated-tokens: 1.0.8
      hast-util-parse-selector: 2.2.5
      property-information: 5.6.0
      space-separated-tokens: 1.1.5

  hastscript@9.0.0:
    dependencies:
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      hast-util-parse-selector: 4.0.0
      property-information: 6.5.0
      space-separated-tokens: 2.0.2

  highlight.js@10.7.3: {}

  highlightjs-vue@1.0.0: {}

  hoist-non-react-statics@3.3.2:
    dependencies:
      react-is: 16.13.1

  html-url-attributes@3.0.1: {}

  html-void-elements@3.0.0: {}

  https-proxy-agent@5.0.1:
    dependencies:
      agent-base: 6.0.2
      debug: 4.4.0
    transitivePeerDependencies:
      - supports-color

  human-id@4.1.1: {}

  human-signals@2.1.0: {}

  humanize-ms@1.2.1:
    dependencies:
      ms: 2.1.3

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  ignore@5.3.2: {}

  image-size@1.2.0:
    dependencies:
      queue: 6.0.2

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-in-the-middle@1.13.0:
    dependencies:
      acorn: 8.14.0
      acorn-import-attributes: 1.9.5(acorn@8.14.0)
      cjs-module-lexer: 1.4.3
      module-details-from-path: 1.0.3

  imurmurhash@0.1.4: {}

  inherits@2.0.4: {}

  inline-style-parser@0.2.4: {}

  internal-slot@1.1.0:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.1.0

  is-alphabetical@1.0.4: {}

  is-alphabetical@2.0.1: {}

  is-alphanumerical@1.0.4:
    dependencies:
      is-alphabetical: 1.0.4
      is-decimal: 1.0.4

  is-alphanumerical@2.0.1:
    dependencies:
      is-alphabetical: 2.0.1
      is-decimal: 2.0.1

  is-array-buffer@3.0.5:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      get-intrinsic: 1.2.7

  is-arrayish@0.2.1: {}

  is-arrayish@0.3.2:
    optional: true

  is-async-function@2.1.1:
    dependencies:
      async-function: 1.0.0
      call-bound: 1.0.3
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-bigint@1.1.0:
    dependencies:
      has-bigints: 1.1.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.2.2:
    dependencies:
      call-bound: 1.0.3
      has-tostringtag: 1.0.2

  is-bun-module@1.3.0:
    dependencies:
      semver: 7.7.1

  is-callable@1.2.7: {}

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.2:
    dependencies:
      call-bound: 1.0.3
      get-intrinsic: 1.2.7
      is-typed-array: 1.1.15

  is-date-object@1.1.0:
    dependencies:
      call-bound: 1.0.3
      has-tostringtag: 1.0.2

  is-decimal@1.0.4: {}

  is-decimal@2.0.1: {}

  is-extendable@0.1.1: {}

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.1:
    dependencies:
      call-bound: 1.0.3

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.3
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-hexadecimal@1.0.4: {}

  is-hexadecimal@2.0.1: {}

  is-map@2.0.3: {}

  is-number-object@1.1.1:
    dependencies:
      call-bound: 1.0.3
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-plain-obj@4.1.0: {}

  is-plain-object@2.0.4:
    dependencies:
      isobject: 3.0.1

  is-reference@1.2.1:
    dependencies:
      '@types/estree': 1.0.6

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.3
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.4:
    dependencies:
      call-bound: 1.0.3

  is-stream@2.0.1: {}

  is-string@1.1.1:
    dependencies:
      call-bound: 1.0.3
      has-tostringtag: 1.0.2

  is-subdir@1.2.0:
    dependencies:
      better-path-resolve: 1.0.0

  is-symbol@1.1.1:
    dependencies:
      call-bound: 1.0.3
      has-symbols: 1.1.0
      safe-regex-test: 1.1.0

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.18

  is-weakmap@2.0.2: {}

  is-weakref@1.1.1:
    dependencies:
      call-bound: 1.0.3

  is-weakset@2.0.4:
    dependencies:
      call-bound: 1.0.3
      get-intrinsic: 1.2.7

  is-windows@1.0.2: {}

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  isobject@3.0.1: {}

  iterator.prototype@1.1.5:
    dependencies:
      define-data-property: 1.1.4
      es-object-atoms: 1.1.1
      get-intrinsic: 1.2.7
      get-proto: 1.0.1
      has-symbols: 1.1.0
      set-function-name: 2.0.2

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jackspeak@4.0.2:
    dependencies:
      '@isaacs/cliui': 8.0.2

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 22.13.1
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jiti@1.21.7: {}

  jiti@2.4.2: {}

  joycon@3.1.1: {}

  js-cookie@3.0.5: {}

  js-tiktoken@1.0.18:
    dependencies:
      base64-js: 1.5.1

  js-tokens@4.0.0: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jscodeshift@17.1.2:
    dependencies:
      '@babel/core': 7.26.7
      '@babel/parser': 7.26.7
      '@babel/plugin-transform-class-properties': 7.25.9(@babel/core@7.26.7)
      '@babel/plugin-transform-modules-commonjs': 7.26.3(@babel/core@7.26.7)
      '@babel/plugin-transform-nullish-coalescing-operator': 7.26.6(@babel/core@7.26.7)
      '@babel/plugin-transform-optional-chaining': 7.25.9(@babel/core@7.26.7)
      '@babel/plugin-transform-private-methods': 7.25.9(@babel/core@7.26.7)
      '@babel/preset-flow': 7.25.9(@babel/core@7.26.7)
      '@babel/preset-typescript': 7.26.0(@babel/core@7.26.7)
      '@babel/register': 7.25.9(@babel/core@7.26.7)
      flow-parser: 0.259.1
      graceful-fs: 4.2.11
      micromatch: 4.0.8
      neo-async: 2.6.2
      picocolors: 1.1.1
      recast: 0.23.9
      tmp: 0.2.3
      write-file-atomic: 5.0.1
    transitivePeerDependencies:
      - supports-color

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-to-zod@2.6.0: {}

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-schema@0.4.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsondiffpatch@0.6.0:
    dependencies:
      '@types/diff-match-patch': 1.0.36
      chalk: 5.4.1
      diff-match-patch: 1.0.5

  jsonfile@4.0.0:
    optionalDependencies:
      graceful-fs: 4.2.11

  jsonwebtoken@9.0.2:
    dependencies:
      jws: 3.2.2
      lodash.includes: 4.3.0
      lodash.isboolean: 3.0.3
      lodash.isinteger: 4.0.4
      lodash.isnumber: 3.0.3
      lodash.isplainobject: 4.0.6
      lodash.isstring: 4.0.1
      lodash.once: 4.1.1
      ms: 2.1.3
      semver: 7.7.1

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.8
      array.prototype.flat: 1.3.3
      object.assign: 4.1.7
      object.values: 1.2.1

  jwa@1.4.1:
    dependencies:
      buffer-equal-constant-time: 1.0.1
      ecdsa-sig-formatter: 1.0.11
      safe-buffer: 5.2.1

  jws@3.2.2:
    dependencies:
      jwa: 1.4.1
      safe-buffer: 5.2.1

  katex@0.16.21:
    dependencies:
      commander: 8.3.0

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kind-of@6.0.3: {}

  langsmith@0.3.7(openai@4.83.0(zod@3.24.1)):
    dependencies:
      '@types/uuid': 10.0.0
      chalk: 4.1.2
      console-table-printer: 2.12.1
      p-queue: 6.6.2
      p-retry: 4.6.2
      semver: 7.7.1
      uuid: 10.0.0
    optionalDependencies:
      openai: 4.83.0(zod@3.24.1)

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lightningcss-darwin-arm64@1.29.1:
    optional: true

  lightningcss-darwin-x64@1.29.1:
    optional: true

  lightningcss-freebsd-x64@1.29.1:
    optional: true

  lightningcss-linux-arm-gnueabihf@1.29.1:
    optional: true

  lightningcss-linux-arm64-gnu@1.29.1:
    optional: true

  lightningcss-linux-arm64-musl@1.29.1:
    optional: true

  lightningcss-linux-x64-gnu@1.29.1:
    optional: true

  lightningcss-linux-x64-musl@1.29.1:
    optional: true

  lightningcss-win32-arm64-msvc@1.29.1:
    optional: true

  lightningcss-win32-x64-msvc@1.29.1:
    optional: true

  lightningcss@1.29.1:
    dependencies:
      detect-libc: 1.0.3
    optionalDependencies:
      lightningcss-darwin-arm64: 1.29.1
      lightningcss-darwin-x64: 1.29.1
      lightningcss-freebsd-x64: 1.29.1
      lightningcss-linux-arm-gnueabihf: 1.29.1
      lightningcss-linux-arm64-gnu: 1.29.1
      lightningcss-linux-arm64-musl: 1.29.1
      lightningcss-linux-x64-gnu: 1.29.1
      lightningcss-linux-x64-musl: 1.29.1
      lightningcss-win32-arm64-msvc: 1.29.1
      lightningcss-win32-x64-msvc: 1.29.1

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  load-tsconfig@0.2.5: {}

  loader-runner@4.3.0: {}

  locate-path@3.0.0:
    dependencies:
      p-locate: 3.0.0
      path-exists: 3.0.0

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.includes@4.3.0: {}

  lodash.isboolean@3.0.3: {}

  lodash.isinteger@4.0.4: {}

  lodash.isnumber@3.0.3: {}

  lodash.isplainobject@4.0.6: {}

  lodash.isstring@4.0.1: {}

  lodash.merge@4.6.2: {}

  lodash.once@4.1.1: {}

  lodash.sortby@4.7.0: {}

  lodash.startcase@4.4.0: {}

  longest-streak@3.1.0: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lowlight@1.20.0:
    dependencies:
      fault: 1.0.4
      highlight.js: 10.7.3

  lru-cache@10.4.3: {}

  lru-cache@11.0.2: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lucide-react@0.474.0(react@19.0.0):
    dependencies:
      react: 19.0.0

  lucide-react@0.475.0(react@19.0.0):
    dependencies:
      react: 19.0.0

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  magic-string@0.30.8:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  make-dir@2.1.0:
    dependencies:
      pify: 4.0.1
      semver: 5.7.2

  markdown-extensions@2.0.0: {}

  markdown-table@3.0.4: {}

  math-intrinsics@1.1.0: {}

  mdast-util-find-and-replace@3.0.2:
    dependencies:
      '@types/mdast': 4.0.4
      escape-string-regexp: 5.0.0
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  mdast-util-from-markdown@2.0.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      mdast-util-to-string: 4.0.0
      micromark: 4.0.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-decode-string: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      unist-util-stringify-position: 4.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-autolink-literal@2.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-find-and-replace: 3.0.2
      micromark-util-character: 2.1.1

  mdast-util-gfm-footnote@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      micromark-util-normalize-identifier: 2.0.1
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-strikethrough@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-table@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      markdown-table: 3.0.4
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-task-list-item@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm@3.0.0:
    dependencies:
      mdast-util-from-markdown: 2.0.2
      mdast-util-gfm-autolink-literal: 2.0.1
      mdast-util-gfm-footnote: 2.0.0
      mdast-util-gfm-strikethrough: 2.0.0
      mdast-util-gfm-table: 2.0.0
      mdast-util-gfm-task-list-item: 2.0.0
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-math@3.0.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      longest-streak: 3.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      unist-util-remove-position: 5.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-expression@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-jsx@3.2.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      parse-entities: 4.0.2
      stringify-entities: 4.0.4
      unist-util-stringify-position: 4.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx@3.0.0:
    dependencies:
      mdast-util-from-markdown: 2.0.2
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdxjs-esm@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-phrasing@4.1.0:
    dependencies:
      '@types/mdast': 4.0.4
      unist-util-is: 6.0.0

  mdast-util-to-hast@13.2.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@ungap/structured-clone': 1.3.0
      devlop: 1.1.0
      micromark-util-sanitize-uri: 2.0.1
      trim-lines: 3.0.1
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3

  mdast-util-to-markdown@2.1.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      longest-streak: 3.1.0
      mdast-util-phrasing: 4.1.0
      mdast-util-to-string: 4.0.0
      micromark-util-classify-character: 2.0.1
      micromark-util-decode-string: 2.0.1
      unist-util-visit: 5.0.0
      zwitch: 2.0.4

  mdast-util-to-string@4.0.0:
    dependencies:
      '@types/mdast': 4.0.4

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  micromark-core-commonmark@2.0.2:
    dependencies:
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-factory-destination: 2.0.1
      micromark-factory-label: 2.0.1
      micromark-factory-space: 2.0.1
      micromark-factory-title: 2.0.1
      micromark-factory-whitespace: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-classify-character: 2.0.1
      micromark-util-html-tag-name: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-subtokenize: 2.0.4
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm-autolink-literal@2.1.0:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm-footnote@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.2
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm-strikethrough@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.1
      micromark-util-classify-character: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm-table@2.1.1:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm-tagfilter@2.0.0:
    dependencies:
      micromark-util-types: 2.0.1

  micromark-extension-gfm-task-list-item@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-gfm@3.0.0:
    dependencies:
      micromark-extension-gfm-autolink-literal: 2.1.0
      micromark-extension-gfm-footnote: 2.1.0
      micromark-extension-gfm-strikethrough: 2.1.0
      micromark-extension-gfm-table: 2.1.1
      micromark-extension-gfm-tagfilter: 2.0.0
      micromark-extension-gfm-task-list-item: 2.1.0
      micromark-util-combine-extensions: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-math@3.1.0:
    dependencies:
      '@types/katex': 0.16.7
      devlop: 1.1.0
      katex: 0.16.21
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-mdx-expression@3.0.0:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-factory-mdx-expression: 2.0.2
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-extension-mdx-jsx@3.0.1:
    dependencies:
      '@types/acorn': 4.0.6
      '@types/estree': 1.0.6
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      micromark-factory-mdx-expression: 2.0.2
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      vfile-message: 4.0.2

  micromark-extension-mdx-md@2.0.0:
    dependencies:
      micromark-util-types: 2.0.1

  micromark-extension-mdxjs-esm@3.0.0:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.2
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-extension-mdxjs@3.0.0:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      micromark-extension-mdx-expression: 3.0.0
      micromark-extension-mdx-jsx: 3.0.1
      micromark-extension-mdx-md: 2.0.0
      micromark-extension-mdxjs-esm: 3.0.0
      micromark-util-combine-extensions: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-destination@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-label@2.0.1:
    dependencies:
      devlop: 1.1.0
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-mdx-expression@2.0.2:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-factory-space@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-types: 2.0.1

  micromark-factory-title@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-whitespace@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-character@2.1.1:
    dependencies:
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-chunked@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-classify-character@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-combine-extensions@2.0.1:
    dependencies:
      micromark-util-chunked: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-decode-numeric-character-reference@2.0.2:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-decode-string@2.0.1:
    dependencies:
      decode-named-character-reference: 1.0.2
      micromark-util-character: 2.1.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-symbol: 2.0.1

  micromark-util-encode@2.0.1: {}

  micromark-util-events-to-acorn@2.0.2:
    dependencies:
      '@types/acorn': 4.0.6
      '@types/estree': 1.0.6
      '@types/unist': 3.0.3
      devlop: 1.1.0
      estree-util-visit: 2.0.0
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      vfile-message: 4.0.2

  micromark-util-html-tag-name@2.0.1: {}

  micromark-util-normalize-identifier@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-resolve-all@2.0.1:
    dependencies:
      micromark-util-types: 2.0.1

  micromark-util-sanitize-uri@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-encode: 2.0.1
      micromark-util-symbol: 2.0.1

  micromark-util-subtokenize@2.0.4:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-symbol@2.0.1: {}

  micromark-util-types@2.0.1: {}

  micromark@4.0.1:
    dependencies:
      '@types/debug': 4.1.12
      debug: 4.4.0
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.2
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-combine-extensions: 2.0.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-encode: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-subtokenize: 2.0.4
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
    transitivePeerDependencies:
      - supports-color

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mimic-fn@2.1.0: {}

  minimatch@10.0.1:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@8.0.4:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@4.2.8: {}

  minipass@7.1.2: {}

  module-details-from-path@1.0.3: {}

  motion-dom@12.0.0:
    dependencies:
      motion-utils: 12.0.0

  motion-utils@12.0.0: {}

  motion@12.4.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      framer-motion: 12.4.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      tslib: 2.8.1
    optionalDependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  mri@1.2.0: {}

  ms@2.1.3: {}

  mustache@4.2.0: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.8: {}

  natural-compare@1.4.0: {}

  negotiator@1.0.0: {}

  neo-async@2.6.2: {}

  next-themes@0.4.4(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  next@15.1.6(@opentelemetry/api@1.9.0)(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      '@next/env': 15.1.6
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001698
      postcss: 8.4.31
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      styled-jsx: 5.1.6(react@19.0.0)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.1.6
      '@next/swc-darwin-x64': 15.1.6
      '@next/swc-linux-arm64-gnu': 15.1.6
      '@next/swc-linux-arm64-musl': 15.1.6
      '@next/swc-linux-x64-gnu': 15.1.6
      '@next/swc-linux-x64-musl': 15.1.6
      '@next/swc-win32-arm64-msvc': 15.1.6
      '@next/swc-win32-x64-msvc': 15.1.6
      '@opentelemetry/api': 1.9.0
      sharp: 0.33.5
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  node-domexception@1.0.0: {}

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  node-releases@2.0.19: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.13.4: {}

  object-keys@1.1.1: {}

  object.assign@4.1.7:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      es-object-atoms: 1.1.1
      has-symbols: 1.1.0
      object-keys: 1.1.1

  object.entries@1.1.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9

  object.values@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  ollama-ai-provider@1.2.0(zod@3.24.1):
    dependencies:
      '@ai-sdk/provider': 1.0.7
      '@ai-sdk/provider-utils': 2.1.6(zod@3.24.1)
      partial-json: 0.1.7
    optionalDependencies:
      zod: 3.24.1

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  oniguruma-to-es@3.1.0:
    dependencies:
      emoji-regex-xs: 1.0.0
      regex: 6.0.1
      regex-recursion: 6.0.2

  openai@4.83.0(zod@3.24.1):
    dependencies:
      '@types/node': 18.19.75
      '@types/node-fetch': 2.6.12
      abort-controller: 3.0.0
      agentkeepalive: 4.6.0
      form-data-encoder: 1.7.2
      formdata-node: 4.4.1
      node-fetch: 2.7.0
    optionalDependencies:
      zod: 3.24.1
    transitivePeerDependencies:
      - encoding

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  os-tmpdir@1.0.2: {}

  outdent@0.5.0: {}

  own-keys@1.0.1:
    dependencies:
      get-intrinsic: 1.2.7
      object-keys: 1.1.1
      safe-push-apply: 1.0.0

  p-filter@2.1.0:
    dependencies:
      p-map: 2.1.0

  p-finally@1.0.0: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@3.0.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-map@2.1.0: {}

  p-queue@6.6.2:
    dependencies:
      eventemitter3: 4.0.7
      p-timeout: 3.2.0

  p-retry@4.6.2:
    dependencies:
      '@types/retry': 0.12.0
      retry: 0.13.1

  p-timeout@3.2.0:
    dependencies:
      p-finally: 1.0.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.1: {}

  package-manager-detector@0.2.9: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-entities@2.0.0:
    dependencies:
      character-entities: 1.2.4
      character-entities-legacy: 1.1.4
      character-reference-invalid: 1.1.4
      is-alphanumerical: 1.0.4
      is-decimal: 1.0.4
      is-hexadecimal: 1.0.4

  parse-entities@4.0.2:
    dependencies:
      '@types/unist': 2.0.11
      character-entities-legacy: 3.0.0
      character-reference-invalid: 2.0.1
      decode-named-character-reference: 1.0.2
      is-alphanumerical: 2.0.1
      is-decimal: 2.0.1
      is-hexadecimal: 2.0.1

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parse5@7.2.1:
    dependencies:
      entities: 4.5.0

  partial-json@0.1.7: {}

  path-browserify@1.0.1: {}

  path-exists@3.0.0: {}

  path-exists@4.0.0: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-scurry@2.0.0:
    dependencies:
      lru-cache: 11.0.2
      minipass: 7.1.2

  path-type@4.0.0: {}

  pg-int8@1.0.1: {}

  pg-protocol@1.7.0: {}

  pg-types@2.2.0:
    dependencies:
      pg-int8: 1.0.1
      postgres-array: 2.0.0
      postgres-bytea: 1.0.0
      postgres-date: 1.0.7
      postgres-interval: 1.2.0

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pify@2.3.0: {}

  pify@4.0.1: {}

  pirates@4.0.6: {}

  pkg-dir@3.0.0:
    dependencies:
      find-up: 3.0.0

  possible-typed-array-names@1.1.0: {}

  postcss-import@15.1.0(postcss@8.5.1):
    dependencies:
      postcss: 8.5.1
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.10

  postcss-js@4.0.1(postcss@8.5.1):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.5.1

  postcss-load-config@4.0.2(postcss@8.5.1):
    dependencies:
      lilconfig: 3.1.3
      yaml: 2.7.0
    optionalDependencies:
      postcss: 8.5.1

  postcss-load-config@6.0.1(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(yaml@2.7.0):
    dependencies:
      lilconfig: 3.1.3
    optionalDependencies:
      jiti: 2.4.2
      postcss: 8.5.1
      tsx: 4.19.2
      yaml: 2.7.0

  postcss-nested@6.2.0(postcss@8.5.1):
    dependencies:
      postcss: 8.5.1
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-selector-parser@7.1.0:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.5.1:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postgres-array@2.0.0: {}

  postgres-bytea@1.0.0: {}

  postgres-date@1.0.7: {}

  postgres-interval@1.2.0:
    dependencies:
      xtend: 4.0.2

  prelude-ls@1.2.1: {}

  prettier-plugin-tailwindcss@0.6.11(prettier@3.5.3):
    dependencies:
      prettier: 3.5.3

  prettier@2.8.8: {}

  prettier@3.5.3: {}

  prismjs@1.27.0: {}

  prismjs@1.29.0: {}

  progress@2.0.3: {}

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  property-information@5.6.0:
    dependencies:
      xtend: 4.0.2

  property-information@6.5.0: {}

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  queue@6.0.2:
    dependencies:
      inherits: 2.0.4

  radix-ui@1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-accessible-icon': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-accordion': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-alert-dialog': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-aspect-ratio': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-avatar': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-checkbox': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-collapsible': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-collection': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-context-menu': 2.2.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dialog': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-dismissable-layer': 1.1.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-dropdown-menu': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-focus-scope': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-form': 0.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-hover-card': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-label': 2.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-menu': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-menubar': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-navigation-menu': 1.2.5(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-popover': 1.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-popper': 1.2.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-portal': 1.1.4(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-primitive': 2.0.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-progress': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-radio-group': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-roving-focus': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-scroll-area': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-select': 2.1.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-separator': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slider': 1.2.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-slot': 1.1.2(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-switch': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-tabs': 1.1.3(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toast': 1.2.6(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toggle': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toggle-group': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-toolbar': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-tooltip': 1.1.8(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.0.8)(react@19.0.0)
      '@radix-ui/react-visually-hidden': 1.1.2(@types/react-dom@19.0.3(@types/react@19.0.8))(@types/react@19.0.8)(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8
      '@types/react-dom': 19.0.3(@types/react@19.0.8)

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  react-dom@19.0.0(react@19.0.0):
    dependencies:
      react: 19.0.0
      scheduler: 0.25.0

  react-hook-form@7.54.2(react@19.0.0):
    dependencies:
      react: 19.0.0

  react-is@16.13.1: {}

  react-markdown@9.0.3(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      '@types/hast': 3.0.4
      '@types/react': 19.0.8
      devlop: 1.1.0
      hast-util-to-jsx-runtime: 2.3.2
      html-url-attributes: 3.0.1
      mdast-util-to-hast: 13.2.0
      react: 19.0.0
      remark-parse: 11.0.0
      remark-rehype: 11.1.1
      unified: 11.0.5
      unist-util-visit: 5.0.0
      vfile: 6.0.3
    transitivePeerDependencies:
      - supports-color

  react-medium-image-zoom@5.2.13(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  react-remove-scroll-bar@2.3.8(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-style-singleton: 2.2.3(@types/react@19.0.8)(react@19.0.0)
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.0.8

  react-remove-scroll@2.6.3(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-remove-scroll-bar: 2.3.8(@types/react@19.0.8)(react@19.0.0)
      react-style-singleton: 2.2.3(@types/react@19.0.8)(react@19.0.0)
      tslib: 2.8.1
      use-callback-ref: 1.3.3(@types/react@19.0.8)(react@19.0.0)
      use-sidecar: 1.1.3(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8

  react-resizable-panels@2.1.7(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  react-style-singleton@2.2.3(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      get-nonce: 1.0.1
      react: 19.0.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.0.8

  react-syntax-highlighter@15.6.1(react@19.0.0):
    dependencies:
      '@babel/runtime': 7.26.7
      highlight.js: 10.7.3
      highlightjs-vue: 1.0.0
      lowlight: 1.20.0
      prismjs: 1.29.0
      react: 19.0.0
      refractor: 3.6.0

  react-textarea-autosize@8.5.7(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      '@babel/runtime': 7.26.7
      react: 19.0.0
      use-composed-ref: 1.4.0(@types/react@19.0.8)(react@19.0.0)
      use-latest: 1.3.0(@types/react@19.0.8)(react@19.0.0)
    transitivePeerDependencies:
      - '@types/react'

  react@19.0.0: {}

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  read-yaml-file@1.1.0:
    dependencies:
      graceful-fs: 4.2.11
      js-yaml: 3.14.1
      pify: 4.0.1
      strip-bom: 3.0.0

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  readdirp@4.1.1: {}

  recast@0.20.5:
    dependencies:
      ast-types: 0.14.2
      esprima: 4.0.1
      source-map: 0.6.1
      tslib: 2.8.1

  recast@0.23.9:
    dependencies:
      ast-types: 0.16.1
      esprima: 4.0.1
      source-map: 0.6.1
      tiny-invariant: 1.3.3
      tslib: 2.8.1

  recma-build-jsx@1.0.0:
    dependencies:
      '@types/estree': 1.0.6
      estree-util-build-jsx: 3.0.1
      vfile: 6.0.3

  recma-jsx@1.0.0(acorn@8.14.0):
    dependencies:
      acorn-jsx: 5.3.2(acorn@8.14.0)
      estree-util-to-js: 2.0.0
      recma-parse: 1.0.0
      recma-stringify: 1.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - acorn

  recma-parse@1.0.0:
    dependencies:
      '@types/estree': 1.0.6
      esast-util-from-js: 2.0.1
      unified: 11.0.5
      vfile: 6.0.3

  recma-stringify@1.0.0:
    dependencies:
      '@types/estree': 1.0.6
      estree-util-to-js: 2.0.0
      unified: 11.0.5
      vfile: 6.0.3

  reflect.getprototypeof@1.0.10:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.2.7
      get-proto: 1.0.1
      which-builtin-type: 1.2.1

  refractor@3.6.0:
    dependencies:
      hastscript: 6.0.0
      parse-entities: 2.0.0
      prismjs: 1.27.0

  regenerator-runtime@0.14.1: {}

  regex-recursion@6.0.2:
    dependencies:
      regex-utilities: 2.3.0

  regex-utilities@2.3.0: {}

  regex@6.0.1:
    dependencies:
      regex-utilities: 2.3.0

  regexp.prototype.flags@1.5.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-errors: 1.3.0
      get-proto: 1.0.1
      gopd: 1.2.0
      set-function-name: 2.0.2

  rehype-katex@7.0.1:
    dependencies:
      '@types/hast': 3.0.4
      '@types/katex': 0.16.7
      hast-util-from-html-isomorphic: 2.0.0
      hast-util-to-text: 4.0.2
      katex: 0.16.21
      unist-util-visit-parents: 6.0.1
      vfile: 6.0.3

  rehype-recma@1.0.0:
    dependencies:
      '@types/estree': 1.0.6
      '@types/hast': 3.0.4
      hast-util-to-estree: 3.1.1
    transitivePeerDependencies:
      - supports-color

  remark-gfm@4.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-gfm: 3.0.0
      micromark-extension-gfm: 3.0.0
      remark-parse: 11.0.0
      remark-stringify: 11.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-math@6.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-math: 3.0.0
      micromark-extension-math: 3.1.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-mdx@3.1.0:
    dependencies:
      mdast-util-mdx: 3.0.0
      micromark-extension-mdxjs: 3.0.0
    transitivePeerDependencies:
      - supports-color

  remark-parse@11.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-from-markdown: 2.0.2
      micromark-util-types: 2.0.1
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-rehype@11.1.1:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      mdast-util-to-hast: 13.2.0
      unified: 11.0.5
      vfile: 6.0.3

  remark-stringify@11.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-to-markdown: 2.1.2
      unified: 11.0.5

  remark@15.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      remark-parse: 11.0.0
      remark-stringify: 11.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  require-from-string@2.0.2: {}

  require-in-the-middle@7.5.1:
    dependencies:
      debug: 4.4.0
      module-details-from-path: 1.0.3
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  retry@0.13.1: {}

  reusify@1.0.4: {}

  rimraf@6.0.1:
    dependencies:
      glob: 11.0.1
      package-json-from-dist: 1.0.1

  rollup@3.29.5:
    optionalDependencies:
      fsevents: 2.3.3

  rollup@4.34.6:
    dependencies:
      '@types/estree': 1.0.6
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.34.6
      '@rollup/rollup-android-arm64': 4.34.6
      '@rollup/rollup-darwin-arm64': 4.34.6
      '@rollup/rollup-darwin-x64': 4.34.6
      '@rollup/rollup-freebsd-arm64': 4.34.6
      '@rollup/rollup-freebsd-x64': 4.34.6
      '@rollup/rollup-linux-arm-gnueabihf': 4.34.6
      '@rollup/rollup-linux-arm-musleabihf': 4.34.6
      '@rollup/rollup-linux-arm64-gnu': 4.34.6
      '@rollup/rollup-linux-arm64-musl': 4.34.6
      '@rollup/rollup-linux-loongarch64-gnu': 4.34.6
      '@rollup/rollup-linux-powerpc64le-gnu': 4.34.6
      '@rollup/rollup-linux-riscv64-gnu': 4.34.6
      '@rollup/rollup-linux-s390x-gnu': 4.34.6
      '@rollup/rollup-linux-x64-gnu': 4.34.6
      '@rollup/rollup-linux-x64-musl': 4.34.6
      '@rollup/rollup-win32-arm64-msvc': 4.34.6
      '@rollup/rollup-win32-ia32-msvc': 4.34.6
      '@rollup/rollup-win32-x64-msvc': 4.34.6
      fsevents: 2.3.3

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-array-concat@1.1.3:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      get-intrinsic: 1.2.7
      has-symbols: 1.1.0
      isarray: 2.0.5

  safe-buffer@5.2.1: {}

  safe-push-apply@1.0.0:
    dependencies:
      es-errors: 1.3.0
      isarray: 2.0.5

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      is-regex: 1.2.1

  safer-buffer@2.1.2: {}

  scheduler@0.25.0: {}

  schema-utils@3.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  schema-utils@4.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      ajv-keywords: 5.1.0(ajv@8.17.1)

  scroll-into-view-if-needed@3.1.0:
    dependencies:
      compute-scroll-into-view: 3.1.1

  section-matter@1.0.0:
    dependencies:
      extend-shallow: 2.0.1
      kind-of: 6.0.3

  secure-json-parse@2.7.0: {}

  secure-json-parse@3.0.2: {}

  semver@5.7.2: {}

  semver@6.3.1: {}

  semver@7.7.1: {}

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.7
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-proto@1.0.0:
    dependencies:
      dunder-proto: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1

  shallow-clone@3.0.1:
    dependencies:
      kind-of: 6.0.3

  sharp@0.33.5:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.3
      semver: 7.7.1
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.33.5
      '@img/sharp-darwin-x64': 0.33.5
      '@img/sharp-libvips-darwin-arm64': 1.0.4
      '@img/sharp-libvips-darwin-x64': 1.0.4
      '@img/sharp-libvips-linux-arm': 1.0.5
      '@img/sharp-libvips-linux-arm64': 1.0.4
      '@img/sharp-libvips-linux-s390x': 1.0.4
      '@img/sharp-libvips-linux-x64': 1.0.4
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
      '@img/sharp-linux-arm': 0.33.5
      '@img/sharp-linux-arm64': 0.33.5
      '@img/sharp-linux-s390x': 0.33.5
      '@img/sharp-linux-x64': 0.33.5
      '@img/sharp-linuxmusl-arm64': 0.33.5
      '@img/sharp-linuxmusl-x64': 0.33.5
      '@img/sharp-wasm32': 0.33.5
      '@img/sharp-win32-ia32': 0.33.5
      '@img/sharp-win32-x64': 0.33.5
    optional: true

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shiki@2.3.2:
    dependencies:
      '@shikijs/core': 2.3.2
      '@shikijs/engine-javascript': 2.3.2
      '@shikijs/engine-oniguruma': 2.3.2
      '@shikijs/langs': 2.3.2
      '@shikijs/themes': 2.3.2
      '@shikijs/types': 2.3.2
      '@shikijs/vscode-textmate': 10.0.1
      '@types/hast': 3.0.4

  shimmer@1.2.1: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.7
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.7
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2
    optional: true

  simple-wcswidth@1.0.1: {}

  slash@3.0.0: {}

  source-map-js@1.2.1: {}

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  source-map@0.8.0-beta.0:
    dependencies:
      whatwg-url: 7.1.0

  space-separated-tokens@1.1.5: {}

  space-separated-tokens@2.0.2: {}

  spawndamnit@3.0.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  sprintf-js@1.0.3: {}

  stable-hash@0.0.4: {}

  stacktrace-parser@0.1.10:
    dependencies:
      type-fest: 0.7.1

  streamsearch@1.1.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.1:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9

  string.prototype.matchall@4.0.12:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.2.7
      gopd: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      regexp.prototype.flags: 1.5.4
      set-function-name: 2.0.2
      side-channel: 1.1.0

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.9

  string.prototype.trim@1.2.10:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-data-property: 1.1.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      has-property-descriptors: 1.0.2

  string.prototype.trimend@1.0.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.3
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  stringify-entities@4.0.4:
    dependencies:
      character-entities-html4: 2.1.0
      character-entities-legacy: 3.0.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom-string@1.0.0: {}

  strip-bom@3.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-json-comments@3.1.1: {}

  style-to-object@1.0.8:
    dependencies:
      inline-style-parser: 0.2.4

  styled-jsx@5.1.6(react@19.0.0):
    dependencies:
      client-only: 0.0.1
      react: 19.0.0

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  swr@2.3.2(react@19.0.0):
    dependencies:
      dequal: 2.0.3
      react: 19.0.0
      use-sync-external-store: 1.4.0(react@19.0.0)

  tailwind-merge@2.6.0: {}

  tailwind-merge@3.0.1: {}

  tailwindcss-animate@1.0.7(tailwindcss@3.4.17):
    dependencies:
      tailwindcss: 3.4.17

  tailwindcss-animate@1.0.7(tailwindcss@4.0.4):
    dependencies:
      tailwindcss: 4.0.4

  tailwindcss@3.4.17:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.3
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.7
      lilconfig: 3.1.3
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.1
      postcss: 8.5.1
      postcss-import: 15.1.0(postcss@8.5.1)
      postcss-js: 4.0.1(postcss@8.5.1)
      postcss-load-config: 4.0.2(postcss@8.5.1)
      postcss-nested: 6.2.0(postcss@8.5.1)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.10
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  tailwindcss@4.0.4: {}

  tapable@2.2.1: {}

  term-size@2.2.1: {}

  terser-webpack-plugin@5.3.11(webpack@5.97.1):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      jest-worker: 27.5.1
      schema-utils: 4.3.0
      serialize-javascript: 6.0.2
      terser: 5.38.1
      webpack: 5.97.1

  terser@5.38.1:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.14.0
      commander: 2.20.3
      source-map-support: 0.5.21

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  throttleit@2.1.0: {}

  tiny-invariant@1.3.3: {}

  tinyexec@0.3.2: {}

  tinyglobby@0.2.10:
    dependencies:
      fdir: 6.4.3(picomatch@4.0.2)
      picomatch: 4.0.2

  tmp@0.0.33:
    dependencies:
      os-tmpdir: 1.0.2

  tmp@0.2.3: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  tr46@0.0.3: {}

  tr46@1.0.1:
    dependencies:
      punycode: 2.3.1

  tree-kill@1.2.2: {}

  trim-lines@3.0.1: {}

  trough@2.2.0: {}

  ts-api-utils@2.0.1(typescript@5.7.3):
    dependencies:
      typescript: 5.7.3

  ts-api-utils@2.0.1(typescript@5.8.2):
    dependencies:
      typescript: 5.8.2

  ts-interface-checker@0.1.13: {}

  ts-morph@25.0.1:
    dependencies:
      '@ts-morph/common': 0.26.1
      code-block-writer: 13.0.3

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tsconfig-paths@4.2.0:
    dependencies:
      json5: 2.2.3
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.8.1: {}

  tsup@8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.7.3)(yaml@2.7.0):
    dependencies:
      bundle-require: 5.1.0(esbuild@0.24.2)
      cac: 6.7.14
      chokidar: 4.0.3
      consola: 3.4.0
      debug: 4.4.0
      esbuild: 0.24.2
      joycon: 3.1.1
      picocolors: 1.1.1
      postcss-load-config: 6.0.1(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(yaml@2.7.0)
      resolve-from: 5.0.0
      rollup: 4.34.6
      source-map: 0.8.0-beta.0
      sucrase: 3.35.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.10
      tree-kill: 1.2.2
    optionalDependencies:
      postcss: 8.5.1
      typescript: 5.7.3
    transitivePeerDependencies:
      - jiti
      - supports-color
      - tsx
      - yaml

  tsup@8.3.6(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(typescript@5.8.2)(yaml@2.7.0):
    dependencies:
      bundle-require: 5.1.0(esbuild@0.24.2)
      cac: 6.7.14
      chokidar: 4.0.3
      consola: 3.4.0
      debug: 4.4.0
      esbuild: 0.24.2
      joycon: 3.1.1
      picocolors: 1.1.1
      postcss-load-config: 6.0.1(jiti@2.4.2)(postcss@8.5.1)(tsx@4.19.2)(yaml@2.7.0)
      resolve-from: 5.0.0
      rollup: 4.34.6
      source-map: 0.8.0-beta.0
      sucrase: 3.35.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.10
      tree-kill: 1.2.2
    optionalDependencies:
      postcss: 8.5.1
      typescript: 5.8.2
    transitivePeerDependencies:
      - jiti
      - supports-color
      - tsx
      - yaml

  tsx@4.19.2:
    dependencies:
      esbuild: 0.23.1
      get-tsconfig: 4.10.0
    optionalDependencies:
      fsevents: 2.3.3

  turbo-darwin-64@2.4.4:
    optional: true

  turbo-darwin-arm64@2.4.4:
    optional: true

  turbo-linux-64@2.4.4:
    optional: true

  turbo-linux-arm64@2.4.4:
    optional: true

  turbo-windows-64@2.4.4:
    optional: true

  turbo-windows-arm64@2.4.4:
    optional: true

  turbo@2.4.4:
    optionalDependencies:
      turbo-darwin-64: 2.4.4
      turbo-darwin-arm64: 2.4.4
      turbo-linux-64: 2.4.4
      turbo-linux-arm64: 2.4.4
      turbo-windows-64: 2.4.4
      turbo-windows-arm64: 2.4.4

  twoslash-protocol@0.2.12: {}

  twoslash@0.2.12(typescript@5.7.3):
    dependencies:
      '@typescript/vfs': 1.6.1(typescript@5.7.3)
      twoslash-protocol: 0.2.12
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@0.7.1: {}

  typed-array-buffer@1.0.3:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      is-typed-array: 1.1.15

  typed-array-byte-length@1.0.3:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.4
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15

  typed-array-byte-offset@1.0.4:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      for-each: 0.3.4
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15
      reflect.getprototypeof: 1.0.10

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.4
      gopd: 1.2.0
      is-typed-array: 1.1.15
      possible-typed-array-names: 1.1.0
      reflect.getprototypeof: 1.0.10

  typescript@5.7.3: {}

  typescript@5.8.2: {}

  unbox-primitive@1.1.0:
    dependencies:
      call-bound: 1.0.3
      has-bigints: 1.1.0
      has-symbols: 1.1.0
      which-boxed-primitive: 1.1.1

  undici-types@5.26.5: {}

  undici-types@6.20.0: {}

  unified@11.0.5:
    dependencies:
      '@types/unist': 3.0.3
      bail: 2.0.2
      devlop: 1.1.0
      extend: 3.0.2
      is-plain-obj: 4.1.0
      trough: 2.2.0
      vfile: 6.0.3

  unist-util-find-after@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0

  unist-util-is@6.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-position-from-estree@2.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-remove-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-visit: 5.0.0

  unist-util-stringify-position@4.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-visit-parents@6.0.1:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0

  unist-util-visit@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  universalify@0.1.2: {}

  unplugin@1.0.1:
    dependencies:
      acorn: 8.14.0
      chokidar: 3.6.0
      webpack-sources: 3.2.3
      webpack-virtual-modules: 0.5.0

  update-browserslist-db@1.1.2(browserslist@4.24.4):
    dependencies:
      browserslist: 4.24.4
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  use-callback-ref@1.3.3(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.0.8

  use-composed-ref@1.4.0(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  use-isomorphic-layout-effect@1.2.0(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
    optionalDependencies:
      '@types/react': 19.0.8

  use-latest@1.3.0(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      react: 19.0.0
      use-isomorphic-layout-effect: 1.2.0(@types/react@19.0.8)(react@19.0.0)
    optionalDependencies:
      '@types/react': 19.0.8

  use-sidecar@1.1.3(@types/react@19.0.8)(react@19.0.0):
    dependencies:
      detect-node-es: 1.1.0
      react: 19.0.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.0.8

  use-sync-external-store@1.4.0(react@19.0.0):
    dependencies:
      react: 19.0.0

  util-deprecate@1.0.2: {}

  uuid@10.0.0: {}

  uuid@11.0.5: {}

  uuid@9.0.1: {}

  vfile-location@5.0.3:
    dependencies:
      '@types/unist': 3.0.3
      vfile: 6.0.3

  vfile-message@4.0.2:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-stringify-position: 4.0.0

  vfile@6.0.3:
    dependencies:
      '@types/unist': 3.0.3
      vfile-message: 4.0.2

  watchpack@2.4.2:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  web-namespaces@2.0.1: {}

  web-streams-polyfill@4.0.0-beta.3: {}

  webidl-conversions@3.0.1: {}

  webidl-conversions@4.0.2: {}

  webpack-sources@3.2.3: {}

  webpack-virtual-modules@0.5.0: {}

  webpack@5.97.1:
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.6
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/wasm-edit': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      acorn: 8.14.0
      browserslist: 4.24.4
      chrome-trace-event: 1.0.4
      enhanced-resolve: 5.18.1
      es-module-lexer: 1.6.0
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 3.3.0
      tapable: 2.2.1
      terser-webpack-plugin: 5.3.11(webpack@5.97.1)
      watchpack: 2.4.2
      webpack-sources: 3.2.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  whatwg-url@7.1.0:
    dependencies:
      lodash.sortby: 4.7.0
      tr46: 1.0.1
      webidl-conversions: 4.0.2

  which-boxed-primitive@1.1.1:
    dependencies:
      is-bigint: 1.1.0
      is-boolean-object: 1.2.2
      is-number-object: 1.1.1
      is-string: 1.1.1
      is-symbol: 1.1.1

  which-builtin-type@1.2.1:
    dependencies:
      call-bound: 1.0.3
      function.prototype.name: 1.1.8
      has-tostringtag: 1.0.2
      is-async-function: 2.1.1
      is-date-object: 1.1.0
      is-finalizationregistry: 1.1.1
      is-generator-function: 1.1.0
      is-regex: 1.2.1
      is-weakref: 1.1.1
      isarray: 2.0.5
      which-boxed-primitive: 1.1.1
      which-collection: 1.0.2
      which-typed-array: 1.1.18

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.4

  which-typed-array@1.1.18:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.3
      for-each: 0.3.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  write-file-atomic@5.0.1:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 4.1.0

  xtend@4.0.2: {}

  yallist@3.1.1: {}

  yaml@2.7.0: {}

  yocto-queue@0.1.0: {}

  zod-to-json-schema@3.24.1(zod@3.24.1):
    dependencies:
      zod: 3.24.1

  zod@3.24.1: {}

  zustand@5.0.3(@types/react@19.0.8)(react@19.0.0)(use-sync-external-store@1.4.0(react@19.0.0)):
    optionalDependencies:
      '@types/react': 19.0.8
      react: 19.0.0
      use-sync-external-store: 1.4.0(react@19.0.0)

  zwitch@2.0.4: {}



================================================
File: pnpm-workspace.yaml
================================================
packages:
  - "packages/*"
  - "examples/*"
  - "apps/*"



================================================
File: turbo.json
================================================
{
  "$schema": "https://turbo.build/schema.json",
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "inputs": ["**/*.*", "!.next", "!.turbo"],
      "outputs": ["dist", ".next/**", "!.next/cache/**", "generated/**"],
      "env": [
        "OPENAI_*",
        "ASSISTANT_*",
        "JWT_*",
        "ENTELLIGENCE_*",
        "SENTRY_*",
        "NEXT_PUBLIC_*"
      ]
    },
    "lint": {},
    "deploy": {
      "dependsOn": ["build", "lint"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}



================================================
File: .npmrc
================================================
link-workspace-packages=true
prefer-workspace-packages=true



================================================
File: apps/docs/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: apps/docs/instrumentation.ts
================================================
import * as Sentry from "@sentry/nextjs";

export async function register() {
  if (process.env["NEXT_RUNTIME"] === "nodejs") {
    await import("./sentry.server.config");
  }

  if (process.env["NEXT_RUNTIME"] === "edge") {
    await import("./sentry.edge.config");
  }
}

export const onRequestError = Sentry.captureRequestError;



================================================
File: apps/docs/mdx-components.tsx
================================================
import type { MDXComponents } from "mdx/types";
import { Accordion, Accordions } from "fumadocs-ui/components/accordion";
import { Callout } from "fumadocs-ui/components/callout";
import { Tab, Tabs } from "fumadocs-ui/components/tabs";
import { TypeTable } from "fumadocs-ui/components/type-table";
import defaultComponents from "fumadocs-ui/mdx";
import {
  CodeBlock,
  type CodeBlockProps,
  Pre,
} from "fumadocs-ui/components/codeblock";
import { Popup, PopupContent, PopupTrigger } from "fumadocs-twoslash/ui";

import "fumadocs-twoslash/twoslash.css";

export function getMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    Popup,
    PopupContent,
    PopupTrigger,
    pre: (props: CodeBlockProps) => (
      <CodeBlock {...props}>
        <Pre className="max-h-[400px]">{props.children}</Pre>
      </CodeBlock>
    ),
    Tabs,
    Tab,
    Callout,
    TypeTable,
    Accordion,
    Accordions,
    blockquote: (props) => <Callout>{props.children}</Callout>,
    ...components,
  };
}



================================================
File: apps/docs/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: apps/docs/next.config.mjs
================================================
import {withSentryConfig} from "@sentry/nextjs";
import { createMDX } from "fumadocs-mdx/next";

/** @type {import('next').NextConfig} */
const config = {
  transpilePackages: ["@assistant-ui/*"],
  rewrites: async () => ({
    beforeFiles: [
      {
        source: "/umami/:path*",
        destination: "https://assistant-ui-umami.vercel.app/:path*",
      },
    ],
    fallback: [
      {
        source: "/registry/:path*",
        destination: "https://ui.shadcn.com/registry/:path*",
      },
    ],
  }),
};

const withMDX = createMDX();

export default withSentryConfig(withMDX(config), {
// For all available options, see:
// https://github.com/getsentry/sentry-webpack-plugin#options

org: "assistant-ui",
project: "javascript-nextjs",

// Only print logs for uploading source maps in CI
silent: !process.env.CI,

// For all available options, see:
// https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/

// Upload a larger set of source maps for prettier stack traces (increases build time)
widenClientFileUpload: true,

// Automatically annotate React components to show their full name in breadcrumbs and session replay
reactComponentAnnotation: {
enabled: true,
},

// Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.
// This can increase your server load as well as your hosting bill.
// Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-
// side errors will fail.
tunnelRoute: "/monitoring",

// Hides source maps from generated client bundles
hideSourceMaps: true,

// Automatically tree-shake Sentry logger statements to reduce bundle size
disableLogger: true,

// Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)
// See the following for more information:
// https://docs.sentry.io/product/crons/
// https://vercel.com/docs/cron-jobs
automaticVercelMonitors: true,
});


================================================
File: apps/docs/package.json
================================================
{
  "name": "@assistant-ui/docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "pnpm build:docs && next build",
    "build:docs": "tsx ./scripts/generate-docs.mts",
    "dev": "next dev",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "fumadocs-mdx"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@ai-sdk/provider": "^1.0.7",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@assistant-ui/react-langgraph": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/react-syntax-highlighter": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@langchain/core": "^0.3.39",
    "@langchain/langgraph-sdk": "^0.0.37",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@radix-ui/themes": "^3.2.0",
    "@sentry/nextjs": "^8",
    "@shikijs/transformers": "^2.3.2",
    "ai": "^4.1.25",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "fast-glob": "^3.3.3",
    "fumadocs-core": "15.0.4",
    "fumadocs-mdx": "11.5.1",
    "fumadocs-twoslash": "^3.0.0",
    "fumadocs-ui": "15.0.4",
    "geist": "^1.3.1",
    "gray-matter": "^4.0.3",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.475.0",
    "motion": "^12.4.1",
    "nanoid": "3.3.8",
    "next": "15.1.6",
    "openai": "^4.83.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-resizable-panels": "^2.1.7",
    "react-syntax-highlighter": "^15.6.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.0",
    "remark-mdx": "^3.1.0",
    "remark-stringify": "^11.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.0.0",
    "@types/jsonwebtoken": "^9.0.8",
    "@types/mdx": "^2.0.13",
    "@types/node": "^22.13.1",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@types/react-syntax-highlighter": "^15.5.13",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.1",
    "tailwindcss": "^4.0.4",
    "ts-morph": "^25.0.1",
    "tsx": "^4.19.2",
    "typescript": "^5.7.3"
  }
}



================================================
File: apps/docs/postcss.config.js
================================================
module.exports = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};



================================================
File: apps/docs/sentry.client.config.ts
================================================
// This file configures the initialization of Sentry on the client.
// The config you add here will be used whenever a users loads a page in their browser.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: process.env["SENTRY_DSN"]!,

  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,
});



================================================
File: apps/docs/sentry.edge.config.ts
================================================
// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).
// The config you add here will be used whenever one of the edge features is loaded.
// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: process.env["SENTRY_DSN"]!,

  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,
});



================================================
File: apps/docs/sentry.server.config.ts
================================================
// This file configures the initialization of Sentry on the server.
// The config you add here will be used whenever the server handles a request.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: process.env["SENTRY_DSN"]!,

  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,
});



================================================
File: apps/docs/source.config.ts
================================================
import {
  defineConfig,
  defineDocs,
  defineCollections,
  frontmatterSchema,
} from "fumadocs-mdx/config";
import { rehypeCodeDefaultOptions } from "fumadocs-core/mdx-plugins";
import { transformerTwoslash } from "fumadocs-twoslash";
import { transformerMetaHighlight } from "@shikijs/transformers";
import { z } from "zod";

export const { docs, meta } = defineDocs({
  dir: "content/docs",
  docs: {
    schema: frontmatterSchema,
  },
});

export const blog = defineCollections({
  dir: "content/blog",
  schema: frontmatterSchema.extend({
    author: z.string(),
    date: z.string().date().or(z.date()).optional(),
  }),
  type: "doc",
});

export default defineConfig({
  mdxOptions: {
    rehypeCodeOptions: {
      themes: {
        light: "catppuccin-latte",
        dark: "catppuccin-mocha",
      },
      transformers: [
        ...(rehypeCodeDefaultOptions.transformers ?? []),

        transformerMetaHighlight(),
        transformerTwoslash({
          twoslashOptions: {
            compilerOptions: {
              jsx: 1, // JSX preserve
              paths: {
                "@/*": ["./*"],
              },
            },
          },
        }),
      ],
    },
  },
});



================================================
File: apps/docs/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "incremental": true,
    "exactOptionalPropertyTypes": false,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "content/docs/api-reference/runtimes/ThreadListItemRuntime.mdx", "content/docs/api-reference/runtimes/ContentPartRuntime.mdx"],
  "exclude": ["node_modules"]
}



================================================
File: apps/docs/app/global-error.tsx
================================================
"use client";

import * as Sentry from "@sentry/nextjs";
import NextError from "next/error";
import { useEffect } from "react";

export default function GlobalError({
  error,
}: {
  error: Error & { digest?: string };
}) {
  useEffect(() => {
    Sentry.captureException(error);
  }, [error]);

  return (
    <html>
      <body>
        {/* `NextError` is the default Next.js error page component. Its type
        definition requires a `statusCode` prop. However, since the App Router
        does not expose status codes for errors, we simply pass 0 to render a
        generic error message. */}
        <NextError statusCode={0} />
      </body>
    </html>
  );
}



================================================
File: apps/docs/app/global.css
================================================
@import "tailwindcss";
@import "fumadocs-ui/css/neutral.css";
@import "fumadocs-ui/css/preset.css";

@layer base {
  @import "@assistant-ui/react-ui/styles/index.css";
  @import "@assistant-ui/react-ui/styles/modal.css";
}

/* relative to the CSS file, make sure it's correct for your app */
@source '../node_modules/fumadocs-ui/dist/**/*.js';
@source '../../registry/components/**/*.js';

@custom-variant dark (&:where(.dark, .dark *));

@plugin "tailwindcss-animate";

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer base {
  :root {
    --primary: var(--docs-color);
    --docs-color: 220deg 91% 54%;
    --reference-color: 250 80% 54%;
  }

  .dark {
    --docs-color: 217deg 92% 76%;
    --reference-color: 250 100% 80%;
  }
}

/* Horizontal marquee keyframes */
@keyframes marquee {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@utility animate-marquee {
  animation: marquee var(--duration) linear infinite;
}

@keyframes shine {
  0% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 100% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
}

/* Create a utility class for the animation */
@utility animate-shine {
  animation: shine var(--duration) infinite linear;
}

@property --angle {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

@keyframes rotate {
  to {
    --angle: 360deg;
  }
}

.rainbow-border {
  animation: rotate 10s linear infinite;
  background: linear-gradient(
    var(--angle),
    #02fcef70 0,
    #ffb52b70 50%,
    #a02bfe70 100%
  );

  &:after {
    animation: rotate 10s linear infinite;
    background: linear-gradient(
      var(--angle),
      #02fcef70 0,
      #ffb52b70 50%,
      #a02bfe70 100%
    );
    filter: blur(10px);
    transition: all 0.4s ease-out;
  }

  &:hover:after {
    transform: scale(1.1, 1.1);
  }
}



================================================
File: apps/docs/app/layout.tsx
================================================
import "./global.css";
import type { ReactNode } from "react";
import { GeistSans } from "geist/font/sans";
import { GeistMono } from "geist/font/mono";
import Script from "next/script";
import { Provider } from "./provider";

export const metadata = {
  title: {
    template: "%s | assistant-ui",
    default: "assistant-ui",
  },
  description: "The Typescript/React library for AI Chat",
};

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={`${GeistSans.variable} ${GeistMono.variable}`}
      suppressHydrationWarning
    >
      {/* <head>
        <script
          crossOrigin="anonymous"
          src="//unpkg.com/react-scan/dist/auto.global.js"
        />
      </head> */}
      <body className={"flex min-h-screen flex-col"}>
        <Provider>{children}</Provider>
        <script
          defer
          src="/umami/script.js"
          data-website-id="6f07c001-46a2-411f-9241-4f7f5afb60ee"
          data-domains="www.assistant-ui.com"
        ></script>

        <Script
          id="vector-script"
          dangerouslySetInnerHTML={{
            __html: `
        !function(e,r){try{if(e.vector)return void console.log("Vector snippet included more than once.");var t={};t.q=t.q||[];for(var o=["load","identify","on"],n=function(e){return function(){var r=Array.prototype.slice.call(arguments);t.q.push([e,r])}},c=0;c<o.length;c++){var a=o[c];t[a]=n(a)}if(e.vector=t,!t.loaded){var i=r.createElement("script");i.type="text/javascript",i.async=!0,i.src="https://cdn.vector.co/pixel.js";var l=r.getElementsByTagName("script")[0];l.parentNode.insertBefore(i,l),t.loaded=!0}}catch(e){console.error("Error loading Vector:",e)}}(window,document);
        vector.load("d9af9bfb-c10c-4eed-9366-57cdc0a97ee9");
    `,
          }}
        />
      </body>
    </html>
  );
}



================================================
File: apps/docs/app/provider.tsx
================================================
"use client";

import { RootProvider } from "fumadocs-ui/provider";
import type { ReactNode } from "react";

export function Provider({ children }: { children: ReactNode }) {
  return <RootProvider>{children}</RootProvider>;
}



================================================
File: apps/docs/app/source.tsx
================================================
import { createMDXSource } from "fumadocs-mdx";
import type { InferPageType } from "fumadocs-core/source";
import { loader } from "fumadocs-core/source";
import { meta, docs, blog as blogPosts } from "@/.source";

const utils = loader({
  baseUrl: "/docs",
  source: createMDXSource(docs, meta),
});

export const { getPages, getPage, pageTree } = utils;

export const blog = loader({
  baseUrl: "/blog",
  source: createMDXSource(blogPosts, []),
});

export type BlogPage = InferPageType<typeof blog>;



================================================
File: apps/docs/app/(home)/MyRuntimeProvider.tsx
================================================
"use client";
import {
  CompositeAttachmentAdapter,
  SimpleImageAttachmentAdapter,
  SimpleTextAttachmentAdapter,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

export const MyRuntimeProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const runtime = useChatRuntime({
    api: "/api/chat",
    body: {
      apiKey: process.env["NEXT_PUBLIC_BACKEND_API_KEY"],
    },
    adapters: {
      attachments: new CompositeAttachmentAdapter([
        new SimpleImageAttachmentAdapter(),
        new SimpleTextAttachmentAdapter(),
      ]),
      feedback: {
        submit: ({ message, type }) => {
          console.log({ message, type });
        },
      },
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};



================================================
File: apps/docs/app/(home)/layout.tsx
================================================
import { FC, ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "../docs/layout.config";
import Image from "next/image";
import icon from "../../public/favicon/icon.svg";
import Link from "next/link";

import xIcon from "./logos/x.svg";
import githubIcon from "./logos/github.svg";
import discordIcon from "./logos/discord.svg";

export default function Layout({
  children,
}: {
  children: ReactNode;
}): React.ReactElement {
  return (
    <HomeLayout {...baseOptions}>
      {children}
      <Footer />
    </HomeLayout>
  );
}

function Footer(): React.ReactElement {
  return (
    <footer className="relative border-t px-8 pb-32 pt-20">
      <div className="mx-auto flex w-full max-w-screen-xl flex-col justify-between sm:flex-row">
        <div className="mr-4 flex flex-col gap-4">
          <Link
            className="mr-4 flex items-center gap-3 text-sm font-normal text-black"
            href="/"
          >
            <Image
              src={icon}
              alt="logo"
              className="inline size-7 dark:hue-rotate-180 dark:invert"
            />
            <span className="text-2xl font-medium text-black dark:text-white">
              assistant-ui
            </span>
          </Link>
          <div className="flex gap-4">
            <Link href="https://x.com/assistantui" target="_blank">
              <Image
                src={xIcon}
                alt="X icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
            <Link href="https://github.com/assistant-ui" target="_blank">
              <Image
                src={githubIcon}
                alt="GitHub icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
            <Link href="https://discord.gg/S9dwgCNEFs" target="_blank">
              <Image
                src={discordIcon}
                alt="Discord icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
          </div>
          <div className="flex-grow" />
          <p className="text-foreground/30 text-sm">
            &copy; {new Date().getFullYear()} AgentbaseAI Inc.
          </p>
        </div>
        <div className="mt-10 grid grid-cols-2 items-start gap-10 sm:mt-0">
          <div className="flex w-[160px] flex-col justify-center gap-4">
            <p className="text-sm">Product</p>
            <FooterLink href="/docs/getting-started">Documentation</FooterLink>
            <FooterLink href="/showcase">Showcase</FooterLink>
            <FooterLink href="/examples">Examples</FooterLink>
            <FooterLink href="/pricing">Pricing</FooterLink>
          </div>
          <div className="flex flex-col justify-center gap-4">
            <p className="text-sm">Company</p>
            <FooterLink href="https://cal.com/simon-farshid/assistant-ui">
              Contact Sales
            </FooterLink>
            <FooterLink href="/blog">Blog</FooterLink>
            <FooterLink href="https://docs.google.com/document/d/1EhtzGCVOFGtDWaRP7uZ4gBpDVzUfuCF23U6ztRunNRo/view">
              Terms of Service
            </FooterLink>
            <FooterLink href="https://docs.google.com/document/d/1rTuYeC2xJHWB5u42dSyWwp3vBx7Cms5b6sK971wraVY/view">
              Privacy Policy
            </FooterLink>
          </div>

          {/* <div className="mt-4 flex flex-col justify-center space-y-4">
            <a
              className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
              href="#"
            >
              Privacy Policy
            </a>
            <a
              className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
              href="#"
            >
              Terms of Service
            </a>
          </div> */}
        </div>
      </div>
    </footer>
  );
}

const FooterLink: FC<{ href: string; children: ReactNode }> = ({
  href,
  children,
}) => {
  return (
    <a
      className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
      href={href}
    >
      {children}
    </a>
  );
};



================================================
File: apps/docs/app/(home)/page.tsx
================================================
"use client";

import { Shadcn } from "@/components/shadcn/Shadcn";
import { Button, buttonVariants } from "@/components/ui/button";
import Link from "next/link";
import { TESTIMONIALS } from "@/components/testimonials/testimonials";
import { DiscordLogoIcon } from "@radix-ui/react-icons";
import { TestimonialContainer } from "../../components/testimonials/TestimonialContainer";
import { cn } from "@/lib/utils";
import { CheckIcon, CopyIcon } from "lucide-react";
import athenaintel from "./logos/cust/athenaintel.png";
import browseruse from "./logos/cust/browseruse.svg";
import entelligence from "./logos/cust/entelligence.svg";
import langchain from "./logos/cust/langchain.svg";
import stack from "./logos/cust/stack.svg";
import Image from "next/image";
import { ArrowRight } from "lucide-react";
import { MyRuntimeProvider } from "./MyRuntimeProvider";
import { Marquee } from "@/components/magicui/marquee";
import { useMediaQuery } from "@/lib/useMediaQuery";
import { StarPill } from "./home/StarPill";
import ycombinator from "./logos/ycombinator.svg";
import { useState } from "react";

export default function HomePage() {
  return (
    <main className="container relative z-[2] max-w-[1100px] px-2 py-16 lg:py-16">
      <StarPill />
      <Hero />

      <div className="mx-auto mt-6 flex h-[650px] w-full max-w-screen-xl flex-col overflow-hidden rounded-lg border shadow">
        <MyRuntimeProvider>
          <Shadcn />
        </MyRuntimeProvider>
      </div>

      <Button variant="outline" className="mx-auto mt-6 flex" asChild>
        <Link href="/examples">
          View our other examples <ArrowRight />
        </Link>
      </Button>

      <div className="mt-20 flex flex-col items-center gap-4">
        <h1 className="text-center text-2xl font-medium">
          Trusted by fast-growing companies
        </h1>
        <Logos />
      </div>

      <div className="my-20 flex flex-col gap-6">
        <div className="flex flex-col items-center gap-3 self-center sm:w-full sm:self-start lg:w-[unset] lg:self-center">
          <h1 className="self-start text-2xl font-medium sm:self-center">
            Be part of the community
          </h1>
          <p>
            1000+ developers are building with assistant-ui, you&apos;re in good
            company!
          </p>

          <div className="my-2 flex w-full flex-col gap-4 sm:grid sm:grid-cols-2">
            <a
              className={buttonVariants({ variant: "outline" })}
              href="https://discord.gg/S9dwgCNEFs"
            >
              <DiscordLogoIcon className="mr-2 size-4 text-indigo-600" /> Join
              our Discord
            </a>
            <a
              className={buttonVariants({ variant: "outline" })}
              href="https://github.com/assistant-ui/assistant-ui"
            >
              <span className="mr-2">🌟</span> Star us on Github
            </a>
          </div>
        </div>

        <div className="relative mx-auto max-h-[500px] w-full max-w-screen-xl overflow-hidden">
          <TestimonialContainer
            testimonials={TESTIMONIALS}
            className="sm:columns-2 lg:columns-3 xl:columns-4"
          />
          <div className="from-background via-background pointer-events-none absolute -bottom-8 left-0 z-10 h-[120px] w-full bg-gradient-to-t" />
        </div>

        <div className="flex justify-center">
          <div className="relative flex h-max w-full flex-col items-center justify-between gap-5 rounded-3xl border p-6 sm:w-max sm:flex-row sm:p-10 lg:h-32 lg:w-full lg:px-16">
            <p className="text-center text-2xl font-bold">
              Build conversational AI interfaces
            </p>
            <Button asChild className="w-full sm:w-[unset]">
              <Link href="/docs/getting-started">Get Started</Link>
            </Button>
          </div>
        </div>
      </div>
    </main>
  );
}

function Hero() {
  return (
    <div className="relative z-[2] flex flex-col overflow-hidden px-6 py-12 text-center md:pt-16">
      <h1 className="mb-8 text-4xl font-medium md:hidden">
        UX of ChatGPT in your own app
      </h1>
      <h1 className="mb-8 text-5xl font-medium max-md:hidden">
        UX of ChatGPT in your own app
      </h1>
      <p className="text-muted-foreground mb-8 md:text-xl">
        assistant-ui is the Typescript/React library for{" "}
        <span className="text-foreground">AI Chat</span>.<br />
        Built on <span className="text-foreground">shadcn/ui</span> and{" "}
        <span className="text-foreground">Tailwind</span>.
      </p>

      <div className="mx-auto mt-8 flex items-stretch justify-center gap-4">
        <CopyCommandButton />

        <a
          href="https://cal.com/simon-farshid/assistant-ui"
          className={cn(
            buttonVariants({
              size: "lg",
              variant: "outline",
              className: "bg-background h-12",
            }),
          )}
        >
          Contact Sales
        </a>
      </div>

      <div className="text-muted-foreground mt-8">
        <p>
          Backed by{" "}
          <Image
            src={ycombinator}
            alt="Y Combinator"
            className="mb-1 inline"
            width={140}
          />
        </p>
      </div>
      {/* <Image
        // src={Img}
        alt="preview"
        className="animate-in fade-in slide-in-from-bottom-12 mb-[-250px] mt-12 min-w-[800px] select-none duration-1000 md:mb-[-340px] md:min-w-[1100px]"
        priority
      /> */}
    </div>
  );
}

const Logos = () => {
  const isMobile = useMediaQuery("(max-width: 1080px)");

  const content = (
    <div className="flex w-full items-center justify-around rounded pt-6">
      <Image
        src={langchain}
        alt="Langchain"
        className="inline-block h-[28px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={athenaintel}
        alt="Athena Intelligence"
        className="inline-block h-11 w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={browseruse}
        alt="Browseruse"
        className="inline-block h-[26px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={entelligence}
        alt="Entelligence"
        className="mt-1 inline-block h-[22px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={stack}
        alt="Stack"
        className="mt-0.5 inline-block h-[22px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
    </div>
  );

  if (isMobile) {
    return (
      <div className="w-full overflow-clip">
        <Marquee repeat={4}>
          <div className="flex w-[1000px]">{content}</div>
        </Marquee>
      </div>
    );
  }

  return content;
};

function CopyCommandButton() {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = () => {
    navigator.clipboard.writeText("npx assistant-ui init");
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <button
      onClick={copyToClipboard}
      className={buttonVariants({
        size: "lg",
        variant: "outline",
        className:
          "bg-background group relative flex h-12 items-center gap-2 rounded-lg border px-4 py-3 font-mono text-sm font-bold transition-all",
      })}
    >
      <span>$ npx assistant-ui init</span>
      <div className="text-muted-foreground ml-2 flex h-5 w-5 items-center justify-center">
        {copied ? (
          <CheckIcon className="h-3 w-3 text-green-500" />
        ) : (
          <CopyIcon className="h-3 w-3 opacity-70 transition-opacity group-hover:opacity-100" />
        )}
      </div>
    </button>
  );
}



================================================
File: apps/docs/app/(home)/blog/page.tsx
================================================
import Link from "next/link";
import { blog, BlogPage } from "@/app/source";

export default function Page(): React.ReactElement {
  const posts = [...blog.getPages()].sort(
    (a: BlogPage, b: BlogPage) =>
      new Date(b.data.date ?? b.file.name).getTime() -
      new Date(a.data.date ?? a.file.name).getTime(),
  );

  return (
    <main className="mx-auto w-full max-w-screen-sm p-4 py-12">
      <h1 className="mb-4 px-4 pb-2 text-4xl font-bold">assistant-ui Blog</h1>
      <div className="flex flex-col">
        {posts.map((post: BlogPage) => (
          <Link
            key={post.url}
            href={post.url}
            className="bg-card hover:bg-accent hover:text-accent-foreground flex flex-col rounded-lg p-4 transition-colors"
          >
            <p className="font-medium">{post.data.title}</p>
            <p className="text-muted-foreground mt-auto pt-2 text-xs">
              {new Date(post.data.date ?? post.file.name).toDateString()}
            </p>
          </Link>
        ))}
      </div>
    </main>
  );
}



================================================
File: apps/docs/app/(home)/blog/[slug]/page.tsx
================================================
import { use } from "react";
import { notFound } from "next/navigation";
import Link from "next/link";
import { blog, BlogPage } from "@/app/source";
import { buttonVariants } from "@/components/ui/button";
import Image from "next/image";
import profilePic from "../../../../components/testimonials/profiles/Mc0m3zkD_400x400.jpg";
import { getMDXComponents } from "@/mdx-components";

interface Param {
  slug: string;
}

export default function Page(props: {
  params: Promise<Param>;
}): React.ReactElement {
  const params = use(props.params);
  const page = blog.getPage([params.slug]) as BlogPage;
  const mdxComponents = getMDXComponents({});

  if (!page) notFound();

  return (
    <main className="px-4">
      <div className="mx-auto flex w-full max-w-screen-xl items-center justify-between py-4">
        <Link
          href="/blog"
          className={buttonVariants({ size: "sm", variant: "ghost" })}
        >
          Back
        </Link>
        {!!page.data.date && (
          <p className="text-xs text-gray-500">
            {(page.data.date as Date).toLocaleString("en-US", {
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
            })}
          </p>
        )}
      </div>
      <div
        className="mx-auto w-full max-w-screen-xl rounded-xl border py-12 md:px-8"
        style={{
          backgroundColor: "black",
          backgroundImage: [
            "linear-gradient(140deg, hsla(274,94%,54%,0.3), transparent 50%)",
            "linear-gradient(to left top, hsla(260,90%,50%,0.8), transparent 50%)",
            "radial-gradient(circle at 100% 100%, hsla(240,100%,82%,1), hsla(240,40%,40%,1) 17%, hsla(240,40%,40%,0.5) 20%, transparent)",
          ].join(", "),
          backgroundBlendMode: "difference, difference, normal",
        }}
      >
        <div className="mx-auto flex w-full max-w-screen-sm flex-col items-center justify-center px-4">
          <h1 className="text-center text-4xl font-bold text-white">
            {page.data.title}
          </h1>
          <p className="mt-4 text-balance text-center text-lg text-white/80">
            {page.data.description}
          </p>
        </div>
      </div>
      <article className="prose lg:prose-lg mx-auto w-full max-w-screen-sm py-8">
        <page.data.body components={mdxComponents} />
      </article>
      <div className="mx-auto mb-20 flex w-full max-w-screen-sm items-start gap-3">
        <Image
          src={profilePic}
          alt="Simon Farshid"
          width={32}
          height={32}
          className="size-8 rounded-full"
        />
        <div className="mt-1.5 flex flex-col">
          <span className="text-sm font-medium">Simon Farshid</span>
        </div>
      </div>
    </main>
  );
}

export function generateStaticParams(): Param[] {
  return blog.getPages().map((page) => ({
    slug: page.slugs[0]!,
  }));
}



================================================
File: apps/docs/app/(home)/examples/page.tsx
================================================
import Image from "next/image";

import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";

type ShowcaseItem = {
  title: string;
  description?: string;
  image: string;
  link: string;
};

const EXAMPLE_ITEMS: ShowcaseItem[] = [
  {
    title: "Modal",
    image: "/screenshot/examples/modal.png",
    description: "Floating button that opens an AI assistant chat box.",
    link: "/examples/modal",
  },
  {
    title: "Form Filling Co-Pilot",
    image: "/screenshot/examples/form-demo.png",
    description: "AssistantSidebar copilot which fills forms for the user.",
    link: "/examples/form-demo",
  },
  {
    title: "ChatGPT Clone",
    image: "/screenshot/examples/chatgpt.png",
    description: "Customized colors and styles for a ChatGPT look and feel.",
    link: "/examples/chatgpt",
  },
  {
    title: "Claude Clone",
    image: "/screenshot/examples/claude.png",
    description: "Customized colors and styles for a Claude look and feel.",
    link: "/examples/claude",
  },
  {
    title: "Perplexity Clone",
    image: "/screenshot/examples/chatgpt.png",
    description: "Customized colors and styles for a Perplexity look and feel.",
    link: "/examples/perplexity",
  },
  {
    title: "AI SDK",
    image: "/screenshot/examples/ai-sdk.png",
    description: "Chat persistence with AI SDK.",
    link: "/examples/ai-sdk",
  },
  {
    title: "Mem0 - ChatGPT with memory",
    image: "/screenshot/examples/mem0.png",
    description:
      "A personalized AI chat app powered by Mem0 that remembers your preferences, facts, and memories.",
    link: "/examples/mem0",
  },
  {
    title: "LangGraph Stockbroker",
    image: "/screenshot/stockbroker.png",
    description: "A stockbroker showing human in the loop with LangGraph",
    link: "/examples/stockbroker",
  },
  {
    title: "Artifacts",
    image: "/screenshot/examples/artifacts.png",
    description:
      "Open Source Claude Artifacts. You can ask the bot to generate websites.",
    link: "/examples/artifacts",
  },
  {
    title: "Open Canvas",
    image: "/screenshot/open-canvas.png",
    description: "OSS implementation of ChatGPT's Canvas.",
    link: "https://github.com/langchain-ai/open-canvas",
  },
  {
    title: "FastAPI + LangGraph",
    image: "/screenshot/examples/fastapi-langgraph.png",
    description:
      "Integration of a FastAPI + LangGraph server with assistant-ui.",
    link: "https://github.com/Yonom/assistant-ui-langgraph-fastapi",
  },
];

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Examples</h1>
        </header>
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {EXAMPLE_ITEMS.map((item) => (
            <ShowcaseCard key={item.title} {...item} />
          ))}
        </div>

        <div className="my-20 flex flex-col items-center gap-6">
          <h2 className="text-4xl font-bold">Looking for more examples?</h2>
          <Button asChild>
            <a href="/showcase">Check out the community showcase!</a>
          </Button>
        </div>
      </div>
    </div>
  );
}

function ShowcaseCard({ title, image, description, link }: ShowcaseItem) {
  return (
    <Link href={link}>
      <Card className="bg-card group relative flex max-h-[400px] flex-col overflow-hidden rounded-lg">
        <div className="overflow-hidden">
          <Image
            src={image}
            alt={title}
            width={600}
            height={400}
            className="object-cover transition-transform duration-300 group-hover:scale-105"
          />
        </div>
        <div className="flex flex-col gap-1 p-4 pt-2">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">{title}</h3>
          </div>
          <div className="flex-1">
            <p className="text-muted-foreground">{description}</p>
          </div>
        </div>
      </Card>
    </Link>
  );
}



================================================
File: apps/docs/app/(home)/examples/ai-sdk/page.tsx
================================================
import { Shadcn } from "@/components/shadcn/Shadcn";
import { MyRuntimeProvider } from "../../MyRuntimeProvider";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">AI SDK + Chat Persistence</h1>
        </header>

        <div className="h-[700px]">
          <MyRuntimeProvider>
            <Shadcn />
          </MyRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/artifacts/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Artifacts Clone</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Artifacts example"
            className="h-full w-full border-none"
            src="https://assistant-ui-artifacts.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/chatgpt/page.tsx
================================================
import { MyRuntimeProvider } from "../../MyRuntimeProvider";
import { ChatGPT } from "@/components/chatgpt/ChatGPT";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">ChatGPT Clone</h1>
        </header>

        <div className="h-[700px]">
          <MyRuntimeProvider>
            <ChatGPT />
          </MyRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/claude/page.tsx
================================================
import { MyRuntimeProvider } from "../../MyRuntimeProvider";
import { Claude } from "@/components/claude/Claude";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Claude Clone</h1>
        </header>

        <div className="h-[700px]">
          <MyRuntimeProvider>
            <Claude />
          </MyRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/form-demo/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Form Filling Co-Pilot</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Stockbroker example"
            className="h-full w-full border-none"
            src="https://assistant-ui-form-demo.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/mem0/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-8 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">
            Mem0 - ChatGPT with memory
          </h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Mem0 - ChatGPT with memory demo"
            className="h-full w-full border border-gray-200"
            src="https://demo.mem0.ai/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/modal/page.tsx
================================================
import { ModalChat } from "@/components/modal/ModalChat";
import { MyRuntimeProvider } from "../../MyRuntimeProvider";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Modal</h1>
        </header>

        <div className="">
          <MyRuntimeProvider>
            <ModalChat />
          </MyRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/perplexity/page.tsx
================================================
import { MyRuntimeProvider } from "../../MyRuntimeProvider";
import { Perplexity } from "@/components/perplexity/Perplexity";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Perplexity Clone</h1>
        </header>

        <div className="h-[700px]">
          <MyRuntimeProvider>
            <Perplexity />
          </MyRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/examples/stockbroker/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Stockbroker</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Stockbroker example"
            className="h-full w-full border-none"
            src="https://assistant-ui-stockbroker.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/home/StarPill.tsx
================================================
"use client";
import { StarIcon } from "lucide-react";
import { useEffect, useState } from "react";

export function StarPill() {
  const [stars, setStars] = useState<number | null>(3000);

  useEffect(() => {
    fetch("https://api.github.com/repos/assistant-ui/assistant-ui")
      .then((res) => res.json())
      .then((data) => setStars(data.stargazers_count))
      .catch(console.error);
  }, []);

  return (
    <div className="flex justify-center">
      <a
        className="rainbow-border relative items-center justify-center rounded-full p-[1px] text-sm after:absolute after:inset-0 after:-z-10 after:block after:rounded-full"
        href="https://github.com/assistant-ui/assistant-ui"
      >
        <span className="bg-background inline-flex items-center gap-2 overflow-clip whitespace-nowrap rounded-full px-5 py-1.5">
          <span className="text-md hidden dark:inline">🌟</span>
          <span className="text-md dark:hidden">
            <StarIcon className="size-4 fill-amber-300 text-amber-600" />
          </span>
          <div className="font-medium text-amber-600 dark:text-amber-400">
            {stars}
          </div>
          <div className="ml-2 font-semibold">Star us on GitHub</div>
        </span>
      </a>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/llms.txt/route.ts
================================================
import * as fs from "node:fs/promises";
import fg from "fast-glob";
import matter from "gray-matter";
import { remark } from "remark";
import remarkGfm from "remark-gfm";
import remarkStringify from "remark-stringify";
import remarkMdx from "remark-mdx";

export const revalidate = false;

export async function GET() {
  const files = await fg([
    "./content/docs/**/*.mdx",
    "!*.model.mdx",
    "!./content/docs/openapi/**/*",
  ]);

  const scan = files.map(async (file) => {
    const fileContent = await fs.readFile(file);
    const { content, data } = matter(fileContent.toString());

    if (data["_mdx"]?.mirror) {
      return;
    }

    const processed = await processContent(content);
    return `file: ${file}
# ${data["title"]}

${data["description"] ?? ""}
        
${processed}`;
  });

  const scanned = await Promise.all(scan);

  return new Response(scanned.join("\n\n"));
}

async function processContent(content: string): Promise<string> {
  const file = await remark()
    .use(remarkMdx)
    .use(remarkGfm)
    // .use(remarkDocGen, { generators: [typescriptGenerator(), fileGenerator()] })
    // .use(remarkInstall, { persist: { id: "package-manager" } })
    .use(remarkStringify)
    .process(content);

  return String(file);
}




================================================
File: apps/docs/app/(home)/pricing/open-source-card.tsx
================================================
import { CheckIcon, GithubIcon } from "lucide-react";

export default function OpenSourceCard() {
  return (
    <div className="mx-auto mb-12 w-full max-w-[1000px]">
      <div className="flex flex-col rounded-lg border-2 p-6">
        <div className="flex-grow">
          <div className="mb-4 flex gap-3">
            <GithubIcon className="h-6 w-6" />
            <h3 className="text-xl font-semibold">
              Forever Free & Open Source (MIT License)
            </h3>
          </div>
          <p className="text-md mb-4">
            UI components for your AI chat application
          </p>
          <ul className="space-y-2 text-sm">
            {[
              "Customizable UI components",
              "Bring your own backend",
              "Community support",
            ].map((feature) => (
              <li key={feature} className="flex items-start">
                <CheckIcon className="mr-2 mt-0.5 h-5 w-5 flex-shrink-0 text-green-500" />
                <span>{feature}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/pricing/page.tsx
================================================
import PricingSection from "./pricing-section";
import OpenSourceCard from "./open-source-card";

export default function PricingPage() {
  return (
    <div className="min-h-screen py-12">
      <main className="container mx-auto px-4">
        <h1 className="mb-12 text-center text-4xl font-bold">Pricing</h1>

        <div className="mx-auto mb-6 w-full max-w-[1000px]">
          <h2 className="mb-2 text-2xl font-bold">assistant-cloud</h2>
          <p className="text-lg">
            Fully managed backend for AI chat applications
          </p>
        </div>

        <PricingSection />

        <div className="mx-auto mb-6 w-full max-w-[1000px]">
          <h2 className="mb-2 mt-4 text-2xl font-bold">assistant-ui</h2>
          <p className="text-lg">Typescript/React library for AI chat</p>
        </div>
        <OpenSourceCard />

        <p className="text-muted-foreground mx-auto mb-4 mt-4 w-full max-w-[1000px] text-xs">
          <strong>*MAU:</strong> Monthly Active Users who send at least one
          message via assistant-ui. Are you a B2C app?{" "}
          <a href="mailto:b2c-pricing@assistant.dev" className="underline">
            Contact us
          </a>{" "}
          for a custom pricing plan.
        </p>
      </main>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/pricing/pricing-section.tsx
================================================
import { CheckIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ShineBorder } from "@/components/magicui/shine-border";
import Link from "next/link";

const pricingOptions = [
  {
    title: "Free",
    price: "Up to 200 MAU",
    features: ["200 MAU", "Chat History", "Thread Management"],
    button: "Sign up",
    buttonLink: "https://cloud.assistant-ui.com/",
  },
  {
    title: "Pro",
    price: "$50/mo",
    features: [
      "500 MAU + $0.10 per additional",
      "Chat History",
      "Thread Management",
      "Early Access To New Features",
    ],
    button: "Sign up",
    buttonLink: "https://cloud.assistant-ui.com/",
  },
  {
    title: "Enterprise",
    price: "Custom Pricing",
    features: [
      "Integration with your own backend",
      "Replicate data to your own database",
      "Dedicated Support",
      "99.99% Uptime SLA",
      "On-premises Deployment",
      "Security & Privacy Compliance",
    ],
    button: "Contact us",
    buttonLink: "https://cal.com/simon-farshid/assistant-ui",
  },
];

export default function PricingSection() {
  return (
    <div className="mx-auto w-full max-w-[1000px]">
      <div className="mb-6 grid grid-cols-1 gap-6 md:grid-cols-3">
        {pricingOptions.map((option) => {
          const isPro = option.title === "Pro";
          const content = (
            <>
              <div className="flex-grow">
                <h3 className="mb-2 text-2xl font-semibold">{option.title}</h3>
                <p className="text-md mb-4">{option.price}</p>
                <ul className="mb-6 space-y-2 text-sm">
                  {option.features.map((feature) => (
                    <li key={feature} className="flex items-start">
                      <CheckIcon className="mr-2 mt-0.5 h-5 w-5 flex-shrink-0 text-green-500" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
              <Button
                className="mt-auto w-full"
                variant={isPro ? "default" : "outline"}
                asChild
              >
                <Link href={option.buttonLink}>{option.button}</Link>
              </Button>
            </>
          );

          if (isPro) {
            return (
              <ShineBorder
                key={option.title}
                className={"relative flex flex-col border-0 p-6"}
                borderRadius={8}
                color={["#A07CFE", "#FE8FB5", "#FFBE7B"]}
              >
                {content}
              </ShineBorder>
            );
          }

          return (
            <div
              key={option.title}
              className="relative flex flex-col rounded-lg border-2 p-6"
            >
              {content}
            </div>
          );
        })}
      </div>
    </div>
  );
}



================================================
File: apps/docs/app/(home)/shadcn-ui/page.tsx
================================================
"use client";

import { Shadcn } from "@/components/shadcn/Shadcn";
import { Button } from "@/components/ui/button";
import { useChat } from "ai/react";
import Link from "next/link";
import { MyRuntimeProvider } from "../MyRuntimeProvider";

export default function HomePage() {
  return (
    <main className="container mx-auto flex flex-col gap-6 self-stretch py-4">
      <div className="mt-12 flex flex-col gap-4 self-center">
        <h1 className="text-center text-4xl font-extrabold">
          shadcn/ui for AI chat
        </h1>
      </div>

      <div className="mb-8 flex justify-center gap-2">
        <Button asChild>
          <Link href="/docs/getting-started">Get Started</Link>
        </Button>
      </div>
      <div className="mx-auto flex w-full max-w-screen-xl flex-col">
        <div className="mt-4 h-[650px] overflow-hidden rounded-lg border shadow">
          <MyRuntimeProvider>
            <Shadcn />
          </MyRuntimeProvider>
        </div>
      </div>
    </main>
  );
}

export type AssistantProps = {
  chat: ReturnType<typeof useChat>;
};



================================================
File: apps/docs/app/(home)/showcase/page.tsx
================================================
import Image from "next/image";

import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

type ShowcaseItem = {
  title: string;
  image: string;
  tag: string;
  secondaryTag?: string;
  link: string;
  announcementLink?: string;
  repositoryLink?: string;
  description?: string;
};

const SHOWCASE_ITEMS: ShowcaseItem[] = [
  {
    title: "Chat LangChain",
    image: "/screenshot/chat-langchain.png",
    tag: "Developer Tools",
    link: "https://chat.langchain.com/",
    repositoryLink: "https://github.com/langchain-ai/chat-langchain",
    description: "Chat with LangChain's documentation",
    secondaryTag: "OSS",
  },
  {
    title: "Closing.wtf",
    image: "/screenshot/closing-wtf.png",
    tag: "AI Assistant",
    link: "https://closing.wtf/",
    announcementLink:
      "https://closing.wtf/blog/mortgage-analysis-chat-with-assistantui",
    description:
      "Helps homebuyers get the best deal and avoid getting screwed on their mortgage",
  },
  {
    title: "Entelligence",
    image: "/screenshot/entelligence.png",
    tag: "Developer Tools",
    link: "https://entelligence.ai/",
    description: "AI-powered software engineering assistant",
  },
  {
    title: "Helicone",
    image: "/screenshot/helicone.png",
    tag: "Developer Tools",
    link: "https://www.helicone.ai/",
    repositoryLink: "https://github.com/helicone/helicone",
    description: "Open-source LLM observability for developers",
    secondaryTag: "OSS",
  },
  {
    title: "Komodo",
    image: "/screenshot/komodo.png",
    tag: "Developer Tools",
    link: "https://www.komodo.io/",
    description: "Build, train, and deploy AI models",
  },
  {
    title: "Open Canvas",
    image: "/screenshot/open-canvas.png",
    tag: "AI Assistant",
    link: "https://opencanvas.langchain.com/",
    repositoryLink: "https://github.com/langchain-ai/open-canvas",
    description: "Open Source implementation of OpenAI Canvas",
    secondaryTag: "OSS",
  },
  {
    title: "Portal",
    image: "/screenshot/portal.png",
    tag: "Browser",
    link: "https://www.portal.so/",
    description: "AI executive assistant in the form of a browser",
  },
  {
    title: "Relta",
    image: "/screenshot/relta.png",
    tag: "Developer Tools",
    link: "https://www.relta.dev/",
    description: "Accurate, secure AI assistants for relational data",
  },
  {
    title: "LangGraph Stockbroker",
    image: "/screenshot/stockbroker.png",
    tag: "Developer Tools",
    link: "https://assistant-ui-stockbroker.vercel.app/",
    announcementLink: "https://blog.langchain.dev/assistant-ui/",
    repositoryLink: "https://github.com/assistant-ui/assistant-ui-stockbroker",
    description: "Research financial data about public companies",
    secondaryTag: "OSS",
  },
];

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <div className="text-muted-foreground text-sm uppercase tracking-wider">
            COMMUNITY SHOWCASE
          </div>
          <h1 className="mt-4 text-5xl font-bold">
            Built with
            <br />
            assistant-ui
          </h1>
        </header>
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {SHOWCASE_ITEMS.map((item) => (
            <ShowcaseCard key={item.title} {...item} />
          ))}
        </div>

        <div className="my-20 flex flex-col items-center gap-6">
          <h2 className="text-4xl font-bold">Building something cool?</h2>
          <Button asChild>
            <a href="mailto:showcase@assistant-ui.com">Let us know about it!</a>
          </Button>
        </div>
      </div>
    </div>
  );
}

function ShowcaseCard({
  title,
  image,
  tag,
  secondaryTag,
  link,
  announcementLink,
  repositoryLink,
  description,
}: ShowcaseItem) {
  return (
    <Card className="bg-card group relative flex max-h-[350px] flex-col overflow-hidden rounded-lg">
      <div className="overflow-hidden">
        <Image
          src={image}
          alt={title}
          width={600}
          height={400}
          className="object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </div>
      <div className="flex flex-col gap-1 p-4 pt-2">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">{title}</h3>
          <div className="flex gap-2">
            <span className="rounded bg-purple-300/50 px-2 py-1 text-xs dark:bg-purple-900/50">
              {tag}
            </span>
            {secondaryTag && (
              <span className="rounded bg-green-100 px-2 py-1 text-xs dark:bg-green-800">
                {secondaryTag}
              </span>
            )}
          </div>
        </div>
        <div className="flex-1">
          <p className="text-muted-foreground">{description}</p>
        </div>
        <div className="mt-1 flex gap-2">
          {!!announcementLink && (
            <Button variant="outline" className="flex-1" asChild>
              <a href={announcementLink}>Announcement</a>
            </Button>
          )}
          {!!repositoryLink && (
            <Button variant="outline" className="flex-1" asChild>
              <a href={repositoryLink}>Repository</a>
            </Button>
          )}
          <Button variant="outline" className="flex-1" asChild>
            <a href={link}>Homepage</a>
          </Button>
        </div>
      </div>
    </Card>
  );
}



================================================
File: apps/docs/app/api/chat/route.ts
================================================
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

const openai = createOpenAI({
  baseURL: process.env["OPENAI_BASE_URL"] as string,
});

export const runtime = "edge";
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages, apiKey } = await req.json();

  if (apiKey !== process.env["NEXT_PUBLIC_BACKEND_API_KEY"])
    throw new Error("Invalid API key");

  const result = streamText({
    model: openai("gpt-4o-mini"),
    messages,
  });

  return result.toDataStreamResponse();
}



================================================
File: apps/docs/app/api/entelligence/route.ts
================================================
export const maxDuration = 30;

export const POST = async (req: Request) => {
  const { messages } = (await req.json()) as {
    messages: { role: "user" | "assistant"; content: string }[];
  };

  // remove the most recent user question
  const { content: question, role } = messages.pop()!;
  if (role !== "user" || !question) throw new Error("No question provided");

  const history = messages.reduce(
    (pairs, msg, i, arr) => {
      const next = arr[i + 1];
      if (msg.role === "user" && next?.role === "assistant") {
        pairs.push([msg.content, next.content]);
      }
      return pairs;
    },
    [] as [string, string][],
  );

  return fetch(process.env["ENTELLIGENCE_API_URL"]!, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env["ENTELLIGENCE_API_KEY"]}`,
    },
    body: JSON.stringify({
      history,
      question,
      vectorDBUrl: "assistant-ui&assistant-ui",
      advancedAgent: false,
      githubUsername: "assistant-ui",
      limitSources: 3,
      enableArtifacts: false,
    }),
  });
};



================================================
File: apps/docs/app/api/entelligence-history/route.ts
================================================
export const POST = async (req: Request) => {
  await fetch(process.env["ENTELLIGENCE_HISTORY_API_URL"]!, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: await req.text(),
  });

  return new Response("OK");
};



================================================
File: apps/docs/app/api/search/route.ts
================================================
import { getPages } from "@/app/source";
import { createSearchAPI } from "fumadocs-core/search/server";

export const { GET } = createSearchAPI("advanced", {
  indexes: getPages().map((page) => ({
    title: page.data.title,
    description: page.data.description,
    structuredData: page.data.structuredData,
    id: page.url,
    url: page.url,
  })),
});



================================================
File: apps/docs/app/docs/layout.config.tsx
================================================
import { pageTree } from "@/app/source";
import {
  BookIcon,
  CloudIcon,
  ProjectorIcon,
  SparklesIcon,
  WalletIcon,
} from "lucide-react";
import icon from "@/public/favicon/icon.svg";
import Image from "next/image";
import { DocsLayoutProps } from "fumadocs-ui/layouts/docs";
import { HomeLayoutProps } from "fumadocs-ui/layouts/home";

const DiscordIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 127.14 96.36"
      className="size-4"
    >
      <path
        fill="currentColor"
        d="M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z"
      />
    </svg>
  );
};

// shared configuration
export const baseOptions: HomeLayoutProps = {
  githubUrl: "https://github.com/assistant-ui/assistant-ui",
  nav: {
    title: (
      <>
        <Image
          src={icon}
          alt="logo"
          className="inline size-4 dark:hue-rotate-180 dark:invert"
        />
        <span className="font-medium">assistant-ui</span>
      </>
    ),
    transparentMode: "none",
  },
  links: [
    {
      text: "Docs",
      url: "/docs/getting-started",
      icon: <BookIcon />,
      active: "nested-url",
    },
    {
      text: "Showcase",
      url: "/showcase",
      icon: <ProjectorIcon />,
    },
    {
      text: "Examples",
      url: "/examples",
      icon: <SparklesIcon />,
    },
    {
      text: "Dashboard",
      url: "https://cloud.assistant-ui.com/",
      icon: <CloudIcon />,
    },
    {
      text: "Pricing",
      url: "/pricing",
      icon: <WalletIcon />,
    },
    {
      type: "icon",
      text: "Discord",
      url: "https://discord.gg/S9dwgCNEFs",
      icon: <DiscordIcon />,
      external: true,
    },
  ],
};

export const sharedDocsOptions: Partial<DocsLayoutProps> = {
  ...baseOptions,
  sidebar: {
    defaultOpenLevel: 0,
  },
};

// docs layout configuration
export const docsOptions: DocsLayoutProps = {
  ...sharedDocsOptions,
  tree: pageTree,
};



================================================
File: apps/docs/app/docs/layout.tsx
================================================
import { DocsLayout } from "fumadocs-ui/layouts/docs";
import type { ReactNode } from "react";
import { docsOptions } from "./layout.config";
import { DocsChat } from "@/components/docs-chat/DocsChat";

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout {...docsOptions}>
      {children}
      <DocsChat />
    </DocsLayout>
  );
}



================================================
File: apps/docs/app/docs/[[...slug]]/page.tsx
================================================
import { getPages, getPage } from "@/app/source";
import type { Metadata } from "next";
import { DocsPage, DocsBody } from "fumadocs-ui/page";
import { notFound } from "next/navigation";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { EditIcon } from "lucide-react";
import { getMDXComponents } from "@/mdx-components";

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = getPage(params.slug ?? []);
  const mdxComponents = getMDXComponents({});

  if (page == null) {
    notFound();
  }

  const path = `apps/docs/content/docs/${page.file.path}`;

  const footer = (
    <a
      href={`https://github.com/assistant-ui/assistant-ui/blob/main/${path}`}
      target="_blank"
      rel="noreferrer noopener"
      className={cn(
        buttonVariants({
          variant: "secondary",
          size: "sm",
          className: "gap-1.5 text-xs",
        }),
      )}
    >
      <EditIcon className="size-3" />
      Edit on Github
    </a>
  );

  return (
    <DocsPage
      toc={page.data.toc}
      full={page.data.full ?? false}
      tableOfContent={{ footer }}
    >
      <DocsBody>
        <h1>{page.data.title}</h1>
        <page.data.body components={mdxComponents} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return getPages()
    .filter((page) => page.slugs[0] === "docs")
    .map((page) => ({
      slug: page.slugs.slice(1),
    }));
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = getPage(params.slug ?? []);

  if (page == null) notFound();

  return {
    title: page.data.title,
    description: page.data.description ?? null,
  } satisfies Metadata;
}



================================================
File: apps/docs/app/static.json/route.ts
================================================
import { NextResponse } from "next/server";
import { type DocumentRecord } from "fumadocs-core/search/algolia";
import { getPages } from "@/app/source";

export const revalidate = false;

export function GET() {
  const results: DocumentRecord[] = [];

  for (const page of getPages()) {
    results.push({
      _id: page.url,
      structured: page.data.structuredData,
      url: page.url,
      title: page.data.title,
      description: page.data.description,
    });
  }

  return NextResponse.json(results);
}





================================================
File: apps/docs/components/github-stars.tsx
================================================
"use client";

import { useEffect, useState } from "react";

export function GitHubStars() {
  const [stars, setStars] = useState<number | null>(null);

  useEffect(() => {
    fetch("https://api.github.com/repos/assistant-ui/assistant-ui")
      .then((res) => res.json())
      .then((data) => setStars(data.stargazers_count))
      .catch(console.error);
  }, []);

  if (stars === null) return null;

  return (
    <div className="flex items-center gap-1">
      <span className="text-xl">🌟</span>
      <span className="text-base">{stars}</span>
    </div>
  );
}



================================================
File: apps/docs/components/artifacts/Artifacts.tsx
================================================
export const Artifacts = () => {
  return (
    <iframe
      title="Artifacts Example"
      className="h-full w-full border-none"
      src="https://assistant-ui-artifacts.vercel.app/"
    />
  );
};



================================================
File: apps/docs/components/assistant-ui/assistant-modal.tsx
================================================
"use client";

import { BotIcon, ChevronDownIcon } from "lucide-react";

import { type FC, forwardRef } from "react";
import { AssistantModalPrimitive } from "@assistant-ui/react";

import { Thread } from "@/components/assistant-ui/thread";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const AssistantModal: FC = () => {
  return (
    <AssistantModalPrimitive.Root>
      <AssistantModalPrimitive.Anchor className="fixed bottom-4 right-4 size-11">
        <AssistantModalPrimitive.Trigger asChild>
          <AssistantModalButton />
        </AssistantModalPrimitive.Trigger>
      </AssistantModalPrimitive.Anchor>
      <AssistantModalPrimitive.Content
        sideOffset={16}
        className="bg-popover text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out data-[state=open]:zoom-in data-[state=open]:slide-in-from-bottom-1/2 data-[state=open]:slide-in-from-right-1/2 data-[state=closed]:slide-out-to-bottom-1/2 data-[state=closed]:slide-out-to-right-1/2 z-50 h-[500px] w-[400px] overflow-clip rounded-xl border p-0 shadow-md outline-none [&>.aui-thread-root]:bg-inherit"
      >
        <Thread />
      </AssistantModalPrimitive.Content>
    </AssistantModalPrimitive.Root>
  );
};

type AssistantModalButtonProps = { "data-state"?: "open" | "closed" };

const AssistantModalButton = forwardRef<
  HTMLButtonElement,
  AssistantModalButtonProps
>(({ "data-state": state, ...rest }, ref) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";

  return (
    <TooltipIconButton
      variant="default"
      tooltip={tooltip}
      side="left"
      {...rest}
      className="size-full rounded-full shadow transition-transform hover:scale-110 active:scale-90"
      ref={ref}
    >
      <BotIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:rotate-0 data-[state=open]:rotate-90 data-[state=closed]:scale-100 data-[state=open]:scale-0"
      />

      <ChevronDownIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:-rotate-90 data-[state=open]:rotate-0 data-[state=closed]:scale-0 data-[state=open]:scale-100"
      />
      <span className="sr-only">{tooltip}</span>
    </TooltipIconButton>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";



================================================
File: apps/docs/components/assistant-ui/attachment.tsx
================================================
"use client";

import { PropsWithChildren, useEffect, useState, type FC } from "react";
import { CircleXIcon, FileIcon, PaperclipIcon } from "lucide-react";
import {
  AttachmentPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  useAttachment,
} from "@assistant-ui/react";
import { useShallow } from "zustand/shallow";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { TooltipProvider } from "@radix-ui/react-tooltip";

const useFileSrc = (file: File | undefined) => {
  const [src, setSrc] = useState<string | undefined>(undefined);

  useEffect(() => {
    if (!file) {
      setSrc(undefined);
      return;
    }

    const objectUrl = URL.createObjectURL(file);
    setSrc(objectUrl);

    return () => {
      URL.revokeObjectURL(objectUrl);
    };
  }, [file]);

  return src;
};

const useAttachmentSrc = () => {
  const { file, src } = useAttachment(
    useShallow((a): { file?: File; src?: string } => {
      if (a.type !== "image") return {};
      if (a.file) return { file: a.file };
      const src = a.content?.filter((c) => c.type === "image")[0]?.image;
      if (!src) return {};
      return { src };
    }),
  );

  return useFileSrc(file) ?? src;
};

type AttachmentPreviewProps = {
  src: string;
};

const AttachmentPreview: FC<AttachmentPreviewProps> = ({ src }) => {
  const [isLoaded, setIsLoaded] = useState(false);

  return (
    // eslint-disable-next-line @next/next/no-img-element
    <img
      src={src}
      style={{
        width: "auto",
        height: "auto",
        maxWidth: "75dvh",
        maxHeight: "75dvh",
        display: isLoaded ? "block" : "none",
        overflow: "clip",
      }}
      onLoad={() => setIsLoaded(true)}
      alt="Preview"
    />
  );
};

const AttachmentPreviewDialog: FC<PropsWithChildren> = ({ children }) => {
  const src = useAttachmentSrc();

  if (!src) return children;

  return (
    <Dialog>
      <DialogTrigger
        className="hover:bg-accent/50 cursor-pointer transition-colors"
        asChild
      >
        {children}
      </DialogTrigger>
      <DialogContent>
        <DialogTitle className="aui-sr-only">
          Image Attachment Preview
        </DialogTitle>
        <AttachmentPreview src={src} />
      </DialogContent>
    </Dialog>
  );
};

const AttachmentThumb: FC = () => {
  const isImage = useAttachment((a) => a.type === "image");
  const src = useAttachmentSrc();
  return (
    <Avatar className="bg-muted flex size-10 items-center justify-center rounded border text-sm">
      <AvatarFallback delayMs={isImage ? 200 : 0}>
        <FileIcon />
      </AvatarFallback>
      <AvatarImage src={src} />
    </Avatar>
  );
};

const AttachmentUI: FC = () => {
  const canRemove = useAttachment((a) => a.source !== "message");
  const typeLabel = useAttachment((a) => {
    const type = a.type;
    switch (type) {
      case "image":
        return "Image";
      case "document":
        return "Document";
      case "file":
        return "File";
      default:
        const _exhaustiveCheck: never = type;
        throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
    }
  });
  return (
    <TooltipProvider>
      <Tooltip>
        <AttachmentPrimitive.Root className="relative mt-3">
          <AttachmentPreviewDialog>
            <TooltipTrigger asChild>
              <div className="flex h-12 w-40 items-center justify-center gap-2 rounded-lg border p-1">
                <AttachmentThumb />
                <div className="flex-grow basis-0">
                  <p className="text-muted-foreground line-clamp-1 text-ellipsis break-all text-xs font-bold">
                    <AttachmentPrimitive.Name />
                  </p>
                  <p className="text-muted-foreground text-xs">{typeLabel}</p>
                </div>
              </div>
            </TooltipTrigger>
          </AttachmentPreviewDialog>
          {canRemove && <AttachmentRemove />}
        </AttachmentPrimitive.Root>
        <TooltipContent side="top">
          <AttachmentPrimitive.Name />
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

const AttachmentRemove: FC = () => {
  return (
    <AttachmentPrimitive.Remove asChild>
      <TooltipIconButton
        tooltip="Remove file"
        className="text-muted-foreground [&>svg]:bg-background absolute -right-3 -top-3 size-6 [&>svg]:size-4 [&>svg]:rounded-full"
        side="top"
      >
        <CircleXIcon />
      </TooltipIconButton>
    </AttachmentPrimitive.Remove>
  );
};

export const UserMessageAttachments: FC = () => {
  return (
    <div className="col-span-full col-start-1 row-start-1 flex w-full flex-row justify-end gap-3">
      <MessagePrimitive.Attachments components={{ Attachment: AttachmentUI }} />
    </div>
  );
};

export const ComposerAttachments: FC = () => {
  return (
    <div className="flex w-full flex-row gap-3 px-10">
      <ComposerPrimitive.Attachments
        components={{ Attachment: AttachmentUI }}
      />
    </div>
  );
};

export const ComposerAddAttachment: FC = () => {
  return (
    <ComposerPrimitive.AddAttachment asChild>
      <TooltipIconButton
        className="my-2.5 size-8 p-2 transition-opacity ease-in"
        tooltip="Add Attachment"
        variant="ghost"
      >
        <PaperclipIcon />
      </TooltipIconButton>
    </ComposerPrimitive.AddAttachment>
  );
};



================================================
File: apps/docs/components/assistant-ui/markdown-text.tsx
================================================
"use client";

import "@assistant-ui/react-markdown/styles/dot.css";

import {
  CodeHeaderProps,
  MarkdownTextPrimitive,
  unstable_memoizeMarkdownComponents as memoizeMarkdownComponents,
  useIsMarkdownCodeBlock,
} from "@assistant-ui/react-markdown";
import remarkGfm from "remark-gfm";
import { FC, memo, useState } from "react";
import { CheckIcon, CopyIcon } from "lucide-react";

import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { cn } from "@/lib/utils";
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";
import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";

const SyntaxHighlighter = makePrismAsyncSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    backgroundColor: "black",
  },
});

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      className="aui-md"
      remarkPlugins={[remarkGfm]}
      components={defaultComponents}
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);

const CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {
  const { isCopied, copyToClipboard } = useCopyToClipboard();
  const onCopy = () => {
    if (!code || isCopied) return;
    copyToClipboard(code);
  };

  return (
    <div className="flex items-center justify-between gap-4 rounded-t-lg bg-zinc-900 px-4 py-2 text-sm font-semibold text-white">
      <span className="lowercase [&>span]:text-xs">{language}</span>
      <TooltipIconButton tooltip="Copy" onClick={onCopy}>
        {!isCopied && <CopyIcon />}
        {isCopied && <CheckIcon />}
      </TooltipIconButton>
    </div>
  );
};

const useCopyToClipboard = ({
  copiedDuration = 3000,
}: {
  copiedDuration?: number;
} = {}) => {
  const [isCopied, setIsCopied] = useState<boolean>(false);

  const copyToClipboard = (value: string) => {
    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  };

  return { isCopied, copyToClipboard };
};

const defaultComponents = memoizeMarkdownComponents({
  h1: ({ className, ...props }) => (
    <h1
      className={cn(
        "mb-8 scroll-m-20 text-4xl font-extrabold tracking-tight last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h2: ({ className, ...props }) => (
    <h2
      className={cn(
        "mb-4 mt-8 scroll-m-20 text-3xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h3: ({ className, ...props }) => (
    <h3
      className={cn(
        "mb-4 mt-6 scroll-m-20 text-2xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h4: ({ className, ...props }) => (
    <h4
      className={cn(
        "mb-4 mt-6 scroll-m-20 text-xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h5: ({ className, ...props }) => (
    <h5
      className={cn(
        "my-4 text-lg font-semibold first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h6: ({ className, ...props }) => (
    <h6
      className={cn("my-4 font-semibold first:mt-0 last:mb-0", className)}
      {...props}
    />
  ),
  p: ({ className, ...props }) => (
    <p
      className={cn("mb-5 mt-5 leading-7 first:mt-0 last:mb-0", className)}
      {...props}
    />
  ),
  a: ({ className, ...props }) => (
    <a
      className={cn(
        "text-primary font-medium underline underline-offset-4",
        className,
      )}
      {...props}
    />
  ),
  blockquote: ({ className, ...props }) => (
    <blockquote
      className={cn("border-l-2 pl-6 italic", className)}
      {...props}
    />
  ),
  ul: ({ className, ...props }) => (
    <ul
      className={cn("my-5 ml-6 list-disc [&>li]:mt-2", className)}
      {...props}
    />
  ),
  ol: ({ className, ...props }) => (
    <ol
      className={cn("my-5 ml-6 list-decimal [&>li]:mt-2", className)}
      {...props}
    />
  ),
  hr: ({ className, ...props }) => (
    <hr className={cn("my-5 border-b", className)} {...props} />
  ),
  table: ({ className, ...props }) => (
    <table
      className={cn(
        "my-5 w-full border-separate border-spacing-0 overflow-y-auto",
        className,
      )}
      {...props}
    />
  ),
  th: ({ className, ...props }) => (
    <th
      className={cn(
        "bg-muted px-4 py-2 text-left font-bold first:rounded-tl-lg last:rounded-tr-lg [&[align=center]]:text-center [&[align=right]]:text-right",
        className,
      )}
      {...props}
    />
  ),
  td: ({ className, ...props }) => (
    <td
      className={cn(
        "border-b border-l px-4 py-2 text-left last:border-r [&[align=center]]:text-center [&[align=right]]:text-right",
        className,
      )}
      {...props}
    />
  ),
  tr: ({ className, ...props }) => (
    <tr
      className={cn(
        "m-0 border-b p-0 first:border-t [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg",
        className,
      )}
      {...props}
    />
  ),
  sup: ({ className, ...props }) => (
    <sup
      className={cn("[&>a]:text-xs [&>a]:no-underline", className)}
      {...props}
    />
  ),
  pre: ({ className, ...props }) => (
    <pre
      className={cn(
        "overflow-x-auto rounded-b-lg bg-black p-4 text-white",
        className,
      )}
      {...props}
    />
  ),
  code: function Code({ className, ...props }) {
    const isCodeBlock = useIsMarkdownCodeBlock();
    return (
      <code
        className={cn(
          !isCodeBlock && "bg-muted rounded border font-semibold",
          className,
        )}
        {...props}
      />
    );
  },
  CodeHeader,
  SyntaxHighlighter,
});



================================================
File: apps/docs/components/assistant-ui/syntax-highlighter.tsx
================================================
import { PrismAsyncLight } from "react-syntax-highlighter";
import { makePrismAsyncLightSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";

import tsx from "react-syntax-highlighter/dist/esm/languages/prism/tsx";
import python from "react-syntax-highlighter/dist/esm/languages/prism/python";

import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";

// register languages you want to support
PrismAsyncLight.registerLanguage("js", tsx);
PrismAsyncLight.registerLanguage("jsx", tsx);
PrismAsyncLight.registerLanguage("ts", tsx);
PrismAsyncLight.registerLanguage("tsx", tsx);
PrismAsyncLight.registerLanguage("python", python);

export const SyntaxHighlighter = makePrismAsyncLightSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    width: "100%",
    background: "black",
    padding: "1.5rem 1rem",
  },
});



================================================
File: apps/docs/components/assistant-ui/thread-list.tsx
================================================
import type { FC } from "react";
import {
  ThreadListItemPrimitive,
  ThreadListPrimitive,
} from "@assistant-ui/react";
import { ArchiveIcon, PlusIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const ThreadList: FC = () => {
  return (
    <ThreadListPrimitive.Root className="flex flex-col items-stretch gap-1.5">
      <ThreadListNew />
      <ThreadListItems />
    </ThreadListPrimitive.Root>
  );
};

const ThreadListNew: FC = () => {
  return (
    <ThreadListPrimitive.New asChild>
      <Button
        className="data-[active]:bg-muted hover:bg-muted flex items-center justify-start gap-1 rounded-lg px-2.5 py-2 text-start"
        variant="ghost"
      >
        <PlusIcon />
        New Thread
      </Button>
    </ThreadListPrimitive.New>
  );
};

const ThreadListItems: FC = () => {
  return <ThreadListPrimitive.Items components={{ ThreadListItem }} />;
};

const ThreadListItem: FC = () => {
  return (
    <ThreadListItemPrimitive.Root className="data-[active]:bg-muted hover:bg-muted focus-visible:bg-muted focus-visible:ring-ring flex items-center gap-2 rounded-lg transition-all focus-visible:outline-none focus-visible:ring-2">
      <ThreadListItemPrimitive.Trigger className="flex-grow px-3 py-2 text-start">
        <ThreadListItemTitle />
      </ThreadListItemPrimitive.Trigger>
      <ThreadListItemArchive />
    </ThreadListItemPrimitive.Root>
  );
};

const ThreadListItemTitle: FC = () => {
  return (
    <p className="text-sm">
      <ThreadListItemPrimitive.Title fallback="New Chat" />
    </p>
  );
};

const ThreadListItemArchive: FC = () => {
  return (
    <ThreadListItemPrimitive.Archive asChild>
      <TooltipIconButton
        className="hover:text-primary text-foreground ml-auto mr-3 size-4 p-0"
        variant="ghost"
        tooltip="Archive thread"
      >
        <ArchiveIcon />
      </TooltipIconButton>
    </ThreadListItemPrimitive.Archive>
  );
};



================================================
File: apps/docs/components/assistant-ui/thread.tsx
================================================
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import {
  ComposerAddAttachment,
  ComposerAttachments,
  UserMessageAttachments,
} from "./attachment";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="bg-background box-border h-full"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        <ThreadPrimitive.If empty={false}>
          <div className="min-h-8 flex-grow" />
        </ThreadPrimitive.If>

        <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="mt-4 font-medium">How can I help you today?</p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="mt-3 flex w-full items-stretch justify-center gap-4">
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="What is the weather in Tokyo?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          What is the weather in Tokyo?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="What is assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          What is assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerAttachments />
      <ComposerAddAttachment />
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4 [&:where(>*)]:col-start-2">
      <UserActionBar />

      <UserMessageAttachments />

      <div className="bg-muted text-foreground col-start-2 row-start-2 max-w-[calc(var(--thread-max-width)*0.8)] break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Content />
      </div>

      <BranchPicker className="col-span-full col-start-1 row-start-3 -mr-1 justify-end" />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="col-start-1 row-start-2 mr-3 mt-2.5 flex flex-col items-end"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="bg-muted my-4 flex w-full max-w-[var(--thread-max-width)] flex-col gap-2 rounded-xl">
      <ComposerPrimitive.Input className="text-foreground flex h-8 w-full resize-none bg-transparent p-4 pb-0 outline-none" />

      <div className="mx-3 mb-3 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost">Cancel</Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button>Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <MessagePrimitive.Content components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="col-start-2 row-start-2 -ml-2 mr-2" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground data-[floating]:bg-aui-background col-start-3 row-start-2 -ml-1 flex gap-1 data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm"
    >
      {/* <MessagePrimitive.If speaking={false}>
        <ActionBarPrimitive.Speak asChild>
          <TooltipIconButton tooltip="Read aloud">
            <AudioLinesIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.Speak>
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <ActionBarPrimitive.StopSpeaking asChild>
          <TooltipIconButton tooltip="Stop">
            <StopCircleIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.StopSpeaking>
      </MessagePrimitive.If> */}
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground inline-flex items-center text-xs",
        className,
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
File: apps/docs/components/assistant-ui/tooltip-icon-button.tsx
================================================
"use client";

import { ComponentPropsWithRef, forwardRef } from "react";

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export type TooltipIconButtonProps = ComponentPropsWithRef<typeof Button> & {
  tooltip: string;
  side?: "top" | "bottom" | "left" | "right";
};

export const TooltipIconButton = forwardRef<
  HTMLButtonElement,
  TooltipIconButtonProps
>(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            {...rest}
            className={cn("size-6 p-1", className)}
            ref={ref}
          >
            {children}
            <span className="sr-only">{tooltip}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent side={side}>{tooltip}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
});

TooltipIconButton.displayName = "TooltipIconButton";



================================================
File: apps/docs/components/chatgpt/ChatGPT.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import * as Avatar from "@radix-ui/react-avatar";
import {
  ArrowUpIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  Pencil1Icon,
  ReloadIcon,
} from "@radix-ui/react-icons";
import type { ComponentPropsWithoutRef, FC } from "react";
import { Button } from "../ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "../ui/tooltip";

export const ChatGPT: FC = () => {
  return (
    <TooltipProvider>
      <ThreadPrimitive.Root className="text-foreground dark flex h-full flex-col items-stretch bg-[#212121] px-4">
        <ThreadPrimitive.Viewport className="flex flex-grow flex-col gap-8 overflow-y-scroll pt-16">
          <ThreadPrimitive.Empty>
            <div className="flex flex-grow flex-col items-center justify-center">
              <Avatar.Root className="flex h-12 w-12 items-center justify-center rounded-[24px] border border-white/15 shadow">
                <Avatar.AvatarFallback>C</Avatar.AvatarFallback>
              </Avatar.Root>
              <p className="mt-4 text-xl text-white">
                How can I help you today?
              </p>
            </div>
          </ThreadPrimitive.Empty>

          <ThreadPrimitive.Messages
            components={{
              UserMessage,
              EditComposer,
              AssistantMessage,
            }}
          />
        </ThreadPrimitive.Viewport>

        <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md items-end rounded-3xl bg-white/5 pl-2">
          <ComposerPrimitive.Input
            placeholder="Message ChatGPT"
            className="h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm text-white outline-none placeholder:text-white/50"
          />
          <ThreadPrimitive.If running={false}>
            <ComposerPrimitive.Send className="m-2 flex size-8 items-center justify-center rounded-full bg-white transition-opacity disabled:opacity-10">
              <ArrowUpIcon className="size-5 text-black [&_path]:stroke-black [&_path]:stroke-[1]" />
            </ComposerPrimitive.Send>
          </ThreadPrimitive.If>
          <ThreadPrimitive.If running>
            <ComposerPrimitive.Cancel className="m-2 flex size-8 items-center justify-center rounded-full bg-white">
              <div className="size-2.5 bg-black" />
            </ComposerPrimitive.Cancel>
          </ThreadPrimitive.If>
        </ComposerPrimitive.Root>
        <p className="p-2 text-center text-xs text-[#cdcdcd]">
          ChatGPT can make mistakes. Check important info.
        </p>
      </ThreadPrimitive.Root>
    </TooltipProvider>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mx-auto flex w-full max-w-screen-md flex-col items-end gap-1">
      <div className="flex items-start gap-4">
        <ActionBarPrimitive.Root
          hideWhenRunning
          autohide="not-last"
          autohideFloat="single-branch"
          className="mt-2"
        >
          <ActionBarPrimitive.Edit asChild>
            <ActionButton tooltip="Edit">
              <Pencil1Icon />
            </ActionButton>
          </ActionBarPrimitive.Edit>
        </ActionBarPrimitive.Root>

        <div className="rounded-3xl bg-white/5 px-5 py-2 text-[#eee]">
          <MessagePrimitive.Content />
        </div>
      </div>

      <BranchPicker className="mr-3 mt-2" />
    </MessagePrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md flex-col justify-end gap-1 rounded-3xl bg-white/15">
      <ComposerPrimitive.Input className="flex h-8 w-full resize-none bg-transparent p-5 pb-0 text-white outline-none" />

      <div className="m-3 mt-2 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel className="rounded-full bg-zinc-900 px-3 py-2 text-sm font-semibold text-white hover:bg-zinc-800">
          Cancel
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send className="rounded-full bg-white px-3 py-2 text-sm font-semibold text-black hover:bg-white/90">
          Send
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mx-auto flex w-full max-w-screen-md gap-3">
      <Avatar.Root className="flex size-8 flex-shrink-0 items-center justify-center rounded-[24px] border border-white/15 shadow">
        <Avatar.AvatarFallback className="text-xs text-white">
          C
        </Avatar.AvatarFallback>
      </Avatar.Root>

      <div className="pt-1">
        <div className="text-[#eee]">
          <MessagePrimitive.Content />
        </div>

        <div className="flex pt-2">
          <BranchPicker />

          <ActionBarPrimitive.Root
            hideWhenRunning
            autohide="not-last"
            autohideFloat="single-branch"
            className="flex items-center gap-1 rounded-lg data-[floating]:absolute data-[floating]:border-2 data-[floating]:p-1"
          >
            <ActionBarPrimitive.Reload asChild>
              <ActionButton tooltip="Reload">
                <ReloadIcon />
              </ActionButton>
            </ActionBarPrimitive.Reload>
            <ActionBarPrimitive.Copy asChild>
              <ActionButton tooltip="Copy">
                <MessagePrimitive.If copied>
                  <CheckIcon />
                </MessagePrimitive.If>
                <MessagePrimitive.If copied={false}>
                  <CopyIcon />
                </MessagePrimitive.If>
              </ActionButton>
            </ActionBarPrimitive.Copy>
          </ActionBarPrimitive.Root>
        </div>
      </div>
    </MessagePrimitive.Root>
  );
};

const BranchPicker: FC<{ className?: string }> = ({ className }) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "inline-flex items-center text-sm font-semibold text-[#b4b4b4]",
        className,
      )}
    >
      <BranchPickerPrimitive.Previous asChild>
        <ActionButton tooltip="Previous">
          <ChevronLeftIcon />
        </ActionButton>
      </BranchPickerPrimitive.Previous>
      <BranchPickerPrimitive.Number />/<BranchPickerPrimitive.Count />
      <BranchPickerPrimitive.Next asChild>
        <ActionButton tooltip="Next">
          <ChevronRightIcon />
        </ActionButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

type ActionButtonProps = ComponentPropsWithoutRef<typeof Button> & {
  tooltip: string;
};

const ActionButton: FC<ActionButtonProps> = ({
  tooltip,
  className,
  children,
  ...rest
}) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className={cn("size-auto p-1 text-[#b4b4b4]", className)}
          {...rest}
        >
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">{tooltip}</TooltipContent>
    </Tooltip>
  );
};



================================================
File: apps/docs/components/claude/Claude.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import {
  ActionBarPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
  useMessage,
} from "@assistant-ui/react";
import * as Avatar from "@radix-ui/react-avatar";
import { ArrowUpIcon, ClipboardIcon, ReloadIcon } from "@radix-ui/react-icons";
import type { FC } from "react";
import { MarkdownText } from "../shadcn/Shadcn";

export const Claude: FC = () => {
  return (
    <ThreadPrimitive.Root className="flex h-full flex-col items-stretch bg-[#2b2a27] px-4 pt-16 font-serif">
      <ThreadPrimitive.Viewport className="flex flex-grow flex-col overflow-y-scroll">
        <ThreadPrimitive.Messages components={{ Message: ChatMessage }} />
        <ThreadPrimitive.If empty={false}>
          <p className="mx-auto w-full max-w-screen-md p-2 text-right text-xs text-[#b8b5a9]">
            Claude can make mistakes. Please double-check responses.
          </p>
        </ThreadPrimitive.If>
      </ThreadPrimitive.Viewport>

      <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md flex-col rounded-t-xl border border-[#6c6a6040] bg-[#393937] p-0.5">
        <div className="flex">
          <ComposerPrimitive.Input
            placeholder="Reply to Claude..."
            className="h-12 flex-grow resize-none bg-transparent p-3.5 text-sm text-white outline-none placeholder:text-white/50"
          />
          <ComposerPrimitive.Send
            type="submit"
            className="m-2 flex h-8 w-8 items-center justify-center rounded-lg bg-[#ae5630] text-2xl font-bold disabled:opacity-0"
          >
            <ArrowUpIcon
              width={16}
              height={16}
              className="text-[#ddd] [&_path]:stroke-white [&_path]:stroke-[0.5]"
            />
          </ComposerPrimitive.Send>
        </div>
        <p className="-mt-1 mb-3 px-3.5 text-sm text-white/70">
          Claude 3 Sonnet
        </p>
      </ComposerPrimitive.Root>
    </ThreadPrimitive.Root>
  );
};

const ChatMessage: FC = () => {
  const role = useMessage((m) => m.role);

  return (
    <MessagePrimitive.Root className="relative mx-auto mb-4 flex w-full max-w-screen-md flex-col gap-3">
      <div
        className={cn(
          "relative flex gap-2 rounded-2xl bg-gradient-to-b from-[#21201c] from-50% to-[#1a1915] px-3 py-2.5",
          role === "user" && "self-start",
          role === "assistant" &&
            "bg-[linear-gradient(to_bottom,_hsla(60_1.8%_22%_/_0.75)_0%,_hsla(60_1.8%_22%_/_0)_90%)] pb-4 font-serif",
        )}
      >
        {role === "assistant" && (
          <div className="absolute inset-0 rounded-2xl border-[0.5px] border-[hsla(50_5.8%_40%/0.15)] bg-[radial-gradient(ellipse_at_left_top,_hsla(60_1.8%_22%/0.5)_0%,_hsla(60_1.8%_22%/0.3)_60%)] shadow-[0_4px_24px_rgba(0,0,0,0.015)]" />
        )}
        <div className="relative flex gap-2">
          <MessagePrimitive.If user>
            <Avatar.Root className="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-[24px] bg-white">
              <Avatar.AvatarFallback className="text-xs">
                U
              </Avatar.AvatarFallback>
            </Avatar.Root>
          </MessagePrimitive.If>

          <p className="text-[#eee]">
            <MessagePrimitive.Content components={{ Text: MarkdownText }} />
          </p>
        </div>
      </div>

      <MessagePrimitive.If assistant>
        <ActionBarPrimitive.Root
          autohide="not-last"
          className="absolute -bottom-3 mr-3 flex items-center gap-3 self-end rounded-lg border border-[#6c6a6040] bg-[#393937] px-2 py-1"
        >
          <ActionBarPrimitive.Reload className="flex items-center gap-1 font-mono text-xs text-[#b4b4b4] hover:text-white">
            <ReloadIcon width={12} height={12} />
            Retry
          </ActionBarPrimitive.Reload>

          <ActionBarPrimitive.Copy className="flex items-center gap-1 font-mono text-xs text-[#b4b4b4] hover:text-white">
            <ClipboardIcon width={12} height={12} />
            Copy
          </ActionBarPrimitive.Copy>
        </ActionBarPrimitive.Root>
      </MessagePrimitive.If>
    </MessagePrimitive.Root>
  );
};



================================================
File: apps/docs/components/docs/DataAttributesTable.tsx
================================================
import { Box, Code, Table, Text } from "@radix-ui/themes";
import React from "react";

type KeyboardDef = {
  attribute: string;
  values: string;
};

export function DataAttributesTable({ data }: { data: KeyboardDef[] }) {
  return (
    <Box my="5" asChild>
      <Table.Root variant="surface">
        <Table.Header>
          <Table.Row>
            <Table.ColumnHeaderCell style={{ width: "37%" }}>
              Data attribute
            </Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>Values</Table.ColumnHeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {data.map(({ attribute, values }, i) => {
            const key = `${attribute}-${i}`;
            return (
              <Table.Row key={key}>
                <Table.RowHeaderCell>
                  <Code size="2">{attribute}</Code>
                </Table.RowHeaderCell>

                <Table.Cell>
                  {Array.isArray(values) ? (
                    <Code size="2" color="gray">
                      {values.map(
                        (value, index) =>
                          `"${value}" ${values.length !== index + 1 ? " | " : ""}`,
                      )}
                    </Code>
                  ) : (
                    <Text as="p" size="2">
                      {values}
                    </Text>
                  )}
                </Table.Cell>
              </Table.Row>
            );
          })}
        </Table.Body>
      </Table.Root>
    </Box>
  );
}



================================================
File: apps/docs/components/docs/KeyboardTable.tsx
================================================
import { Box, Flex, Kbd, Table } from "@radix-ui/themes";
import type React from "react";

type KeyboardDef = {
  keys: string[];
  description: React.ReactNode;
};

export function KeyboardTable({ data }: { data: KeyboardDef[] }) {
  return (
    <Box my="5" asChild>
      <Table.Root variant="surface">
        <Table.Header>
          <Table.Row>
            <Table.ColumnHeaderCell style={{ width: "37%" }}>
              Key
            </Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>Description</Table.ColumnHeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {data.map(({ keys, description }, i) => {
            const key = `${description}-${i}`;
            return (
              <Table.Row key={key}>
                <Table.Cell>
                  <Flex gap="2">
                    {keys.map((k) => (
                      <Kbd key={k}>{k}</Kbd>
                    ))}
                  </Flex>
                </Table.Cell>

                <Table.Cell>{description}</Table.Cell>
              </Table.Row>
            );
          })}
        </Table.Body>
      </Table.Root>
    </Box>
  );
}



================================================
File: apps/docs/components/docs/ParametersTable.tsx
================================================
import { cn } from "@/lib/utils";
import Link from "next/link";
import type { FC, ReactNode } from "react";

type ParameterDef = {
  name: string;
  type?: string;
  description: string | ReactNode;
  required?: boolean;
  default?: string;
  children?: Array<ParametersTableProps>;
};

type ParameterProps = {
  parameter: ParameterDef;
  isLast: boolean;
};

const COMMON_PARAMS: Record<string, ParameterDef> = {
  asChild: {
    name: "asChild",
    type: "boolean",
    default: "false",
    description: (
      <>
        Change the default rendered element for the one passed as a child,
        merging their props and behavior.
        <br />
        <br />
        Read the{" "}
        <Link
          className="font-semibold underline"
          href="/docs/api-reference/primitives/composition"
        >
          Composition
        </Link>{" "}
        guide for more details.
      </>
    ),
  },
};

const Parameter: FC<ParameterProps> = ({
  parameter: partialParameter,
  isLast,
}) => {
  const parameter = {
    ...COMMON_PARAMS[partialParameter.name],
    ...partialParameter,
  };

  return (
    <div
      className={cn("flex flex-col gap-1 px-3.5 py-3.5", !isLast && "border-b")}
    >
      <div className="relative flex gap-2">
        <h3 className="font-mono text-sm font-semibold">
          {parameter.name}
          {!parameter.required && !parameter.default && "?"}
          {!!parameter.type && ":"}
        </h3>
        <div className="text-foreground/70 w-full font-mono text-sm">
          {parameter.type}
          {parameter.default && ` = ${parameter.default}`}
        </div>
      </div>
      <div>
        <p className="text-foreground/70 text-sm">{parameter.description}</p>
      </div>
      {parameter.children?.map((property) => (
        <ParametersBox key={property.type} {...property} />
      ))}
    </div>
  );
};

const ParametersList = ({
  parameters,
}: {
  parameters: Array<ParameterDef>;
}) => {
  return parameters.map((parameter, idx) => (
    <Parameter
      key={parameter.name}
      parameter={parameter}
      isLast={idx === parameters.length - 1}
    />
  ));
};
const ParametersBox: FC<ParametersTableProps> = ({ type, parameters }) => {
  return (
    <div
      className={cn(
        "relative m-2 mb-1 flex flex-col rounded-lg border",
        type && "mt-4 pt-3",
      )}
    >
      {!!type && (
        <h3 className="bg-background text-foreground/70 absolute right-3 top-0 z-50 -translate-y-1/2 rounded-md border px-4 py-2 font-mono text-xs font-semibold">
          {type}
        </h3>
      )}
      <ParametersList parameters={parameters} />
    </div>
  );
};

export type ParametersTableProps = {
  type?: string | undefined;
  parameters: Array<ParameterDef>;
};

export const ParametersTable: FC<ParametersTableProps> = ({
  type,
  parameters,
}) => {
  return (
    <div className={cn("not-prose -mx-2 mt-4", type && "mt-6")}>
      <ParametersBox type={type} parameters={parameters} />
    </div>
  );
};



================================================
File: apps/docs/components/docs/index.ts
================================================
export { KeyboardTable } from "./KeyboardTable";
export { DataAttributesTable } from "./DataAttributesTable";
export { ParametersTable } from "./ParametersTable";



================================================
File: apps/docs/components/docs/parameters/context.tsx
================================================
import { ParametersTableProps } from "../ParametersTable";

export const AssistantRuntimeState: ParametersTableProps = {
  type: "AssistantRuntime",
  parameters: [
    {
      name: "switchToNewThread",
      type: "() => void",
      description: "Switch to a new thread.",
      required: true,
    },
  ],
};

export const AssistantToolUIsState: ParametersTableProps = {
  type: "AssistantToolUIsState",
  parameters: [
    {
      name: "getToolUI",
      type: "(toolName: string) => ToolCallContentPartProps",
      description: "Gets the current tool UI for a given tool name.",
      required: true,
      children: [
        {
          type: "ToolCallContentPartProps<TArgs, TResult>",
          parameters: [
            {
              name: "part",
              type: "ToolCallContentPart<TArgs, TResult>",
              description: "The tool call content part.",
            },
            {
              name: "status",
              type: "ContentPartStatus",
              description: "The tool call status.",
            },
            {
              name: "addResult",
              type: "(result: TResult) => void",
              description: "Adds a result to the tool call.",
            },
          ],
        },
      ],
    },
    {
      name: "setToolUI",
      type: "(toolName: string, render: ToolCallContentPartComponent) => Unsubscribe",
      description: "Sets the tool UI.",
      required: true,
    },
  ],
};

export const ThreadState: ParametersTableProps = {
  type: "ThreadState",
  parameters: [
    {
      name: "isRunning",
      type: "boolean",
      required: true,
      description: "Whether the thread is running.",
    },
    {
      name: "isDisabled",
      type: "boolean",
      required: true,
      description: "Whether the thread is disabled.",
    },
  ],
};

export const ThreadMessagesState: ParametersTableProps = {
  type: "ThreadMessagesState",
  parameters: [
    {
      name: "messages",
      type: "readonly ThreadMessage[]",
      required: true,
      description: "The messages in the thread.",
    },
  ],
};

export const ThreadRuntimeState: ParametersTableProps = {
  type: "ThreadRuntime",
  parameters: [
    {
      name: "getBranches",
      type: "(messageId: string) => readonly string[]",
      required: true,
      description: "A function to get the branches for a message.",
    },
    {
      name: "switchToBranch",
      type: "(branchId: string) => void",
      required: true,
      description: "A function to switch to a branch.",
    },
    {
      name: "append",
      type: "(message: AppendMessage) => void",
      required: true,
      description: "A function to append a message to the thread.",
    },
    {
      name: "startRun",
      type: "(parentId: string | null) => void",
      required: true,
      description: "A function to start a run.",
    },
    {
      name: "cancelRun",
      type: "() => void",
      required: true,
      description: "A function to cancel a run.",
    },
    {
      name: "addToolResult",
      type: "(options: AddToolResultOptions) => void",
      required: true,
      description: "A function to add a tool result.",
    },
  ],
};

export const BaseComposerState: ParametersTableProps = {
  type: "BaseComposerState",
  parameters: [
    {
      name: "text",
      type: "string",
      required: true,
      description: "The current text of the composer.",
    },
    {
      name: "setText",
      type: "(text: string) => void",
      required: true,
      description: "A function to set the text of the composer.",
    },
    {
      name: "attachments",
      type: "readonly Attachment[]",
      required: true,
      description: "The current attachments of the composer.",
    },
    {
      name: "addAttachment",
      type: "(attachment: Attachment) => void",
      required: true,
      description: "A function to add an attachment to the composer.",
    },
    {
      name: "removeAttachment",
      type: "(attachmentId: string) => void",
      required: true,
      description: "A function to remove an attachment from the composer.",
    },
    {
      name: "reset",
      type: "() => void",
      required: true,
      description: "A function to reset the composer.",
    },
  ],
};

export const ComposerState: ParametersTableProps = {
  type: "ComposerState",
  parameters: [
    ...BaseComposerState.parameters,
    {
      name: "canCancel",
      type: "true",
      required: true,
      description: "Whether the composer can be canceled.",
    },
    {
      name: "isEditing",
      type: "true",
      required: true,
      description: "Whether the composer is in edit mode.",
    },
    {
      name: "send",
      type: "() => void",
      required: true,
      description: "A function to send the message.",
    },
    {
      name: "cancel",
      type: "() => void",
      required: true,
      description: "A function to cancel the run.",
    },
    {
      name: "focus",
      type: "() => void",
      required: true,
      description: "A function to focus the composer.",
    },
    {
      name: "onFocus",
      type: "(listener: () => void) => Unsubscribe",
      required: true,
      description: "A function to subscribe to focus events.",
    },
  ],
};

export const EditComposerState: ParametersTableProps = {
  type: "EditComposerState",
  parameters: [
    ...BaseComposerState.parameters,
    {
      name: "canCancel",
      type: "boolean",
      required: true,
      description: "Whether the composer can be canceled.",
    },
    {
      name: "isEditing",
      type: "boolean",
      required: true,
      description: "Whether the composer is in edit mode.",
    },
    {
      name: "edit",
      type: "() => void",
      required: true,
      description: "A function to enter edit mode.",
    },
    {
      name: "send",
      type: "() => void",
      required: true,
      description: "A function to send the message.",
    },
    {
      name: "cancel",
      type: "() => void",
      required: true,
      description: "A function to exit the edit mode.",
    },
  ],
};

export const ThreadViewportState: ParametersTableProps = {
  type: "ThreadViewportState",
  parameters: [
    {
      name: "isAtBottom",
      type: "boolean",
      required: true,
      description: "Whether the thread is at the bottom.",
    },
    {
      name: "scrollToBottom",
      type: "() => void",
      required: true,
      description: "A function to scroll to the bottom.",
    },
    {
      name: "onScrollToBottom",
      type: "(callback: () => void) => Unsubscribe",
      required: true,
      description: "A function to subscribe to scroll to bottom events.",
    },
  ],
};

export const ContentPartState: ParametersTableProps = {
  type: "ContentPartState",
  parameters: [
    {
      name: "part",
      type: "Readonly<ContentPartState>",
      required: true,
      description: "The current content part.",
    },
    {
      name: "status",
      type: "MessageStatus",
      required: true,
      description: "The current content part status.",
      children: [
        {
          type: "MessageStatus",
          parameters: [
            {
              name: "type",
              type: "'running' | 'requires-action' | 'complete' | 'incomplete'",
              required: true,
              description: "The status.",
            },
            {
              name: "finish-reason",
              type: "'stop' | 'cancelled' | 'length' | 'content-filter' | 'tool-calls' | 'other' | 'unknown'",
              required: false,
              description: "The finish reason if the status is 'incomplete'.",
            },
            {
              name: "error",
              type: "unknown",
              required: false,
              description: "The error object if the status is 'error'.",
            },
          ],
        },
      ],
    },
  ],
};

export const MessageState: ParametersTableProps = {
  type: "MessageState",
  parameters: [
    {
      name: "message",
      type: "Readonly<ThreadMessage>",
      required: true,
      description: "The current message.",
    },
    {
      name: "parentId",
      type: "string | null",
      required: true,
      description: "The parent message id.",
    },
    {
      name: "branches",
      type: "readonly string[]",
      required: true,
      description: "The branches for the message.",
    },
    {
      name: "isLast",
      type: "boolean",
      required: true,
      description: "Whether the message is the last in the thread.",
    },
  ],
};

export const MessageUtilsState: ParametersTableProps = {
  type: "MessageUtilsState",
  parameters: [
    {
      name: "isCopied",
      type: "boolean",
      required: true,
      description: "Whether the message is copied.",
    },
    {
      name: "setIsCopied",
      type: "(value: boolean) => void",
      required: true,
      description: "A function to set the is copied.",
    },
    {
      name: "isHovering",
      type: "boolean",
      required: true,
      description: "Whether the message is being hovered.",
    },
    {
      name: "setIsHovering",
      type: "(value: boolean) => void",
      required: true,
      description: "A function to set the is hovering.",
    },
    {
      name: "isSpeaking",
      type: "boolean",
      required: true,
      description: "Whether the message is currently being spoken.",
    },
    {
      name: "stopSpeaking",
      type: "() => void",
      required: true,
      description: "A function to stop the message from being spoken.",
    },
    {
      name: "addUtterance",
      type: "(utterance: SpeechSynthesisAdapter.Utterance) => void",
      required: true,
      description: "A function to add a speech utterance.",
    },
  ],
};

export const ComposerAttachmentState: ParametersTableProps = {
  type: "ComposerAttachmentState",
  parameters: [
    {
      name: "attachment",
      type: "ComposerAttachment",
      required: true,
      description: "The current composer attachment.",
    },
  ],
};

export const MessageAttachmentState: ParametersTableProps = {
  type: "MessageAttachmentState",
  parameters: [
    {
      name: "attachment",
      type: "MessageAttachment",
      required: true,
      description: "The current message attachment.",
    },
  ],
};



================================================
File: apps/docs/components/docs/parameters/runtime.tsx
================================================
import { ParametersTable } from "@/components/docs";

export const AssistantRuntimeProviderProps = () => {
  return (
    <ParametersTable
      type="AssistantRuntimeProviderProps"
      parameters={[
        {
          name: "runtime",
          type: "AssistantRuntime",
          required: true,
          description: "The runtime to provide to the rest of your app.",
          children: [
            {
              type: "AssistantRuntime",
              parameters: [
                {
                  name: "capabilities",
                  type: "RuntimeCapabilities",
                  required: true,
                  description: "The capabilities of the runtime.",
                  children: [
                    {
                      type: "RuntimeCapability",
                      parameters: [
                        {
                          name: "edit",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports editing messages.",
                        },
                        {
                          name: "reload",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports reloading messages.",
                        },
                        {
                          name: "cancel",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports cancelling runs.",
                        },
                        {
                          name: "unstable_copy",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports copying messages.",
                        },
                        {
                          name: "speak",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports speaking messages.",
                        },
                        {
                          name: "attachments",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports attachments.",
                        },
                      ],
                    },
                  ],
                },
                {
                  name: "messages",
                  type: "readonly ThreadMessage[]",
                  required: true,
                  description: "The messages in the thread.",
                },
                {
                  name: "isDisabled",
                  type: "boolean",
                  required: true,
                  description: "Whether the thread is disabled.",
                },
                {
                  name: "getBranches",
                  type: "(messageId: string) => readonly string[]",
                  required: true,
                  description: "A function to get the branches for a message.",
                },
                {
                  name: "switchToBranch",
                  type: "(branchId: string) => void",
                  required: true,
                  description: "A function to switch to a branch.",
                },
                {
                  name: "append",
                  type: "(message: AppendMessage) => void",
                  required: true,
                  description: "A function to append a message to the thread.",
                },
                {
                  name: "startRun",
                  type: "(parentId: string | null) => void",
                  required: true,
                  description: "A function to start a run.",
                },
                {
                  name: "cancelRun",
                  type: "() => void",
                  required: true,
                  description: "A function to cancel a run.",
                },
                {
                  name: "addToolResult",
                  type: "(toolCallId: string, result: any) => void",
                  required: true,
                  description: "A function to add a tool result.",
                },
                {
                  name: "subscribe",
                  type: "(callback: () => void) => Unsubscribe",
                  required: true,
                  description: "A function to subscribe to updates.",
                },
                {
                  name: "registerModelContextProvider",
                  type: "(provider: ModelContextProvider) => Unsubscribe",
                  required: true,
                  description:
                    "A function to register a model context provider.",
                },
              ],
            },
          ],
        },
      ]}
    />
  );
};



================================================
File: apps/docs/components/docs-chat/DocsChat.tsx
================================================
"use client";

import { FC } from "react";
import {
  AssistantModalPrimitive,
  ChatModelAdapter,
  useLocalRuntime,
} from "@assistant-ui/react";
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import remarkGfm from "remark-gfm";
import {
  Thread,
  type ThreadConfig,
  Composer,
  ThreadWelcome,
  AssistantModal,
  makeMarkdownText,
} from "@assistant-ui/react-ui";
import entelligenceLogo from "@/app/(home)/logos/cust/entelligence.svg";
import Image from "next/image";

function asAsyncIterable<T>(source: ReadableStream<T>): AsyncIterable<T> {
  return {
    [Symbol.asyncIterator]: () => {
      const reader = source.getReader();
      return {
        async next(): Promise<IteratorResult<T, undefined>> {
          const { done, value } = await reader.read();
          return done
            ? { done: true, value: undefined }
            : { done: false, value };
        },
      };
    },
  };
}

const MyCustomAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal }) {
    const messagesToSend = messages.map((m) => ({
      role: m.role,
      content: m.content
        .filter((c) => c.type === "text")
        .map((c) => c.text)
        .join(" "),
    }));

    const response = await fetch("/api/entelligence", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        messages: messagesToSend,
      }),
      signal: abortSignal,
    });

    let text = "";
    for await (const chunk of asAsyncIterable(
      response.body!.pipeThrough(new TextDecoderStream()),
    )) {
      text += chunk;
      yield { content: [{ type: "text", text }] };
    }

    void fetch("/api/entelligence-history", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        question: messagesToSend.at(-1)?.content,
        answer: text,
        previousQuestion: messagesToSend.at(-3)?.content,
      }),
    });
  },
};

const SyntaxHighlighter = makePrismAsyncSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    backgroundColor: "black",
  },
});
const MarkdownText = makeMarkdownText({
  remarkPlugins: [remarkGfm],
  components: {
    SyntaxHighlighter,
  },
});

export const DocsChat = () => {
  const runtime = useLocalRuntime(MyCustomAdapter);

  return (
    <MyAssistantModal
      runtime={runtime}
      welcome={{
        message: "Ask any question about assistant-ui",
      }}
      assistantMessage={{ components: { Text: MarkdownText } }}
    />
  );
};

const MyAssistantModal: FC<ThreadConfig> = (config) => {
  return (
    <AssistantModal.Root config={config}>
      <MyAssistantModalTrigger />
      <AssistantModal.Content className="h-[800px] w-[600px]">
        <MyThread />
      </AssistantModal.Content>
    </AssistantModal.Root>
  );
};

const MyAssistantModalTrigger: FC = () => {
  return (
    <AssistantModal.Anchor className="hidden md:block">
      <AssistantModalPrimitive.Trigger asChild>
        <AssistantModal.Button />
      </AssistantModalPrimitive.Trigger>
    </AssistantModal.Anchor>
  );
};

const MyThread: FC = () => {
  return (
    <Thread.Root className="flex flex-col">
      <Thread.Viewport>
        <ThreadWelcome />

        <Thread.Messages />

        <Thread.ViewportFooter className="pb-3">
          <Thread.ScrollToBottom />
          <Composer />
        </Thread.ViewportFooter>
      </Thread.Viewport>

      <a
        href="https://entelligence.ai/assistant-ui&assistant-ui?ref=assistant-ui"
        className="flex w-full items-center justify-center gap-1 border-t py-2 text-xs opacity-40"
      >
        In partnership with{" "}
        <Image
          src={entelligenceLogo}
          className="pt-0.5 invert dark:invert-0"
          alt="Entelligence Logo"
          width={70}
        />
      </a>
    </Thread.Root>
  );
};



================================================
File: apps/docs/components/genui/GenUI.tsx
================================================
export const GenUI = () => {
  return (
    <iframe
      title="Gen UI Example"
      className="h-full w-full border-none"
      src="https://assistant-ui-rsc-example.vercel.app/"
    />
  );
};



================================================
File: apps/docs/components/magicui/marquee.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentPropsWithoutRef } from "react";

interface MarqueeProps extends ComponentPropsWithoutRef<"div"> {
  /**
   * Optional CSS class name to apply custom styles
   */
  className?: string;
  /**
   * Whether to reverse the animation direction
   * @default false
   */
  reverse?: boolean;
  /**
   * Whether to pause the animation on hover
   * @default false
   */
  pauseOnHover?: boolean;
  /**
   * Content to be displayed in the marquee
   */
  children: React.ReactNode;
  /**
   * Whether to animate vertically instead of horizontally
   * @default false
   */
  vertical?: boolean;
  /**
   * Number of times to repeat the content
   * @default 4
   */
  repeat?: number;
}

export function Marquee({
  className,
  reverse = false,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}



================================================
File: apps/docs/components/magicui/shine-border.tsx
================================================
"use client";

import { cn } from "@/lib/utils";

type TColorProp = string | string[];

interface ShineBorderProps {
  borderRadius?: number;
  borderWidth?: number;
  duration?: number;
  color?: TColorProp;
  className?: string;
  children?: React.ReactNode;
}

/**
 * @name Shine Border
 * @description It is an animated background border effect component with easy to use and configurable props.
 * @param borderRadius defines the radius of the border.
 * @param borderWidth defines the width of the border.
 * @param duration defines the animation duration to be applied on the shining border
 * @param color a string or string array to define border color.
 * @param className defines the class name to be applied to the component
 * @param children contains react node elements.
 */
export function ShineBorder({
  borderRadius = 8,
  borderWidth = 1,
  duration = 14,
  color = "#000000",
  className,
  children,
}: ShineBorderProps) {
  return (
    <div
      style={
        {
          "--border-radius": `${borderRadius}px`,
        } as React.CSSProperties
      }
      className={cn(
        "bg-background relative min-h-[60px] rounded-[var(--border-radius)] border p-3",
        className,
      )}
    >
      <div
        style={
          {
            "--border-width": `${borderWidth}px`,
            "--border-radius": `${borderRadius}px`,
            "--duration": `${duration}s`,
            "--mask-linear-gradient": `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,
            "--background-radial-gradient": `radial-gradient(transparent,transparent, ${color instanceof Array ? color.join(",") : color},transparent,transparent)`,
          } as React.CSSProperties
        }
        className={`before:animate-shine pointer-events-none before:absolute before:inset-0 before:size-full before:rounded-[var(--border-radius)] before:p-[var(--border-width)] before:will-change-[background-position] before:content-[""] before:![-webkit-mask-composite:xor] before:[background-image:var(--background-radial-gradient)] before:[background-size:300%_300%] before:![mask-composite:exclude] before:[mask:var(--mask-linear-gradient)]`}
      ></div>
      {children}
    </div>
  );
}



================================================
File: apps/docs/components/magicui/terminal.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import { motion, MotionProps } from "motion/react";
import { useEffect, useRef, useState } from "react";

interface AnimatedSpanProps extends MotionProps {
  children: React.ReactNode;
  delay?: number;
  className?: string;
}

export const AnimatedSpan = ({
  children,
  delay = 0,
  className,
  ...props
}: AnimatedSpanProps) => (
  <motion.div
    initial={{ opacity: 0, y: -5 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3, delay: delay / 1000 }}
    className={cn("grid text-sm font-normal tracking-tight", className)}
    {...props}
  >
    {children}
  </motion.div>
);

interface TypingAnimationProps extends MotionProps {
  children: string;
  className?: string;
  duration?: number;
  delay?: number;
  as?: React.ElementType;
}

export const TypingAnimation = ({
  children,
  className,
  duration = 60,
  delay = 0,
  as: Component = "span",
  ...props
}: TypingAnimationProps) => {
  if (typeof children !== "string") {
    throw new Error("TypingAnimation: children must be a string. Received:");
  }

  const MotionComponent = motion.create(Component, {
    forwardMotionProps: true,
  });

  const [displayedText, setDisplayedText] = useState<string>("");
  const [started, setStarted] = useState(false);
  const elementRef = useRef<HTMLElement | null>(null);

  useEffect(() => {
    const startTimeout = setTimeout(() => {
      setStarted(true);
    }, delay);
    return () => clearTimeout(startTimeout);
  }, [delay]);

  useEffect(() => {
    if (!started) return;

    let i = 0;
    const typingEffect = setInterval(() => {
      if (i < children.length) {
        setDisplayedText(children.substring(0, i + 1));
        i++;
      } else {
        clearInterval(typingEffect);
      }
    }, duration);

    return () => {
      clearInterval(typingEffect);
    };
  }, [children, duration, started]);

  return (
    <MotionComponent
      ref={elementRef}
      className={cn("text-sm font-normal tracking-tight", className)}
      {...props}
    >
      {displayedText}
    </MotionComponent>
  );
};

interface TerminalProps {
  children: React.ReactNode;
  className?: string;
}

export const Terminal = ({ children, className }: TerminalProps) => {
  return (
    <div
      className={cn(
        "border-border bg-background z-0 h-full max-h-[400px] w-full max-w-lg rounded-xl border",
        className,
      )}
    >
      <div className="border-border flex flex-col gap-y-2 border-b p-4">
        <div className="flex flex-row gap-x-2">
          <div className="h-2 w-2 rounded-full bg-red-500"></div>
          <div className="h-2 w-2 rounded-full bg-yellow-500"></div>
          <div className="h-2 w-2 rounded-full bg-green-500"></div>
        </div>
      </div>
      <pre className="p-4">
        <code className="grid gap-y-1 overflow-auto">{children}</code>
      </pre>
    </div>
  );
};



================================================
File: apps/docs/components/modal/ModalChat.tsx
================================================
import { AssistantModal } from "../assistant-ui/assistant-modal";

export const ModalChat = () => {
  return (
    <div className="flex h-full w-full items-center justify-center p-4">
      <AssistantModal />
      <p className="bold text-lg">
        The Assistant Modal is available in the bottom right corner of the
        screen.
      </p>
    </div>
  );
};



================================================
File: apps/docs/components/perplexity/Perplexity.tsx
================================================
import { Thread } from "./thread";

export const Perplexity = () => {
  return (
    <div className="flex h-full w-full flex-col">
      <Thread />
    </div>
  );
};



================================================
File: apps/docs/components/perplexity/thread.tsx
================================================
"use client";

import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  ArrowRightIcon,
  ArrowUpIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PaperclipIcon,
  RefreshCwIcon,
  SparkleIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import {
  ComposerAttachments,
  UserMessageAttachments,
} from "@/components/assistant-ui/attachment";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="box-border h-full bg-[#191a1a]"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Empty>
        <ThreadWelcome />
      </ThreadPrimitive.Empty>
      <ThreadPrimitive.If empty={false}>
        <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8">
          <ThreadPrimitive.Messages
            components={{
              UserMessage: UserMessage,
              AssistantMessage: AssistantMessage,
            }}
          />

          <div className="min-h-8 flex-grow" />

          <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
            <ThreadScrollToBottom />
            <Composer />
          </div>
        </ThreadPrimitive.Viewport>
      </ThreadPrimitive.If>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <div className="flex h-full w-full items-center justify-center">
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col gap-12">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="font-regular font-display text-4xl md:text-5xl">
            What do you want to know?
          </p>
        </div>
        <ComposerPrimitive.Root className="focus-within:ring-border w-full rounded-lg border bg-[#202222] px-2 shadow-sm outline-none transition-all duration-200 focus-within:ring-1 focus:outline-none">
          <ComposerPrimitive.Input
            rows={1}
            autoFocus
            placeholder="Ask anything..."
            className="placeholder:text-muted-foreground max-h-40 w-full flex-grow resize-none border-none bg-transparent px-2 py-4 text-lg outline-none focus:ring-0 disabled:cursor-not-allowed"
          />
          <div className="mx-1.5 flex gap-2">
            <div className="flex-grow" />
            <ComposerPrimitive.AddAttachment asChild>
              <TooltipIconButton
                className="rounded-max text-muted-foreground my-2.5 size-8 p-2 transition-opacity ease-in"
                tooltip="Add Attachment"
                variant="ghost"
              >
                <PaperclipIcon className="!size-4.5" />
              </TooltipIconButton>
            </ComposerPrimitive.AddAttachment>
            <ComposerPrimitive.Send asChild>
              <TooltipIconButton
                className="my-2.5 size-8 rounded-full p-2 transition-opacity"
                tooltip="Send"
                variant="default"
              >
                <ArrowRightIcon />
              </TooltipIconButton>
            </ComposerPrimitive.Send>
          </div>
        </ComposerPrimitive.Root>
      </div>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <div className="bg-foreground/5 w-full rounded-full p-2">
      <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-full border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
        <ComposerAttachments />
        <ComposerPrimitive.Input
          rows={1}
          autoFocus
          placeholder="Ask follow-up"
          className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-4 py-4 text-lg outline-none focus:ring-0 disabled:cursor-not-allowed"
        />
        <div className="flex gap-3">
          <ComposerPrimitive.AddAttachment asChild>
            <TooltipIconButton
              className="text-muted-foreground my-2.5 size-10 p-1 transition-opacity ease-in"
              tooltip="Add Attachment"
              variant="ghost"
            >
              <PaperclipIcon className="!size-6" />
            </TooltipIconButton>
          </ComposerPrimitive.AddAttachment>
          <ComposerAction />
        </div>
      </ComposerPrimitive.Root>
    </div>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-10 rounded-full p-2 transition-opacity ease-in"
          >
            <ArrowUpIcon className="!size-5" />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-10 rounded-full p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative w-full max-w-[var(--thread-max-width)] gap-y-2 py-4">
      <UserMessageAttachments />

      <div className="text-foreground break-words rounded-3xl py-2.5 text-3xl">
        <MessagePrimitive.Content />
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <h1 className="mb-4 inline-flex items-center gap-2 text-2xl">
          <SparkleIcon /> Answer
        </h1>

        <MessagePrimitive.Content components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="col-start-2 row-start-2 -ml-2 mr-2" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground col-start-3 row-start-2 -ml-1 flex gap-1"
    >
      {/* <MessagePrimitive.If speaking={false}>
        <ActionBarPrimitive.Speak asChild>
          <TooltipIconButton tooltip="Read aloud">
            <AudioLinesIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.Speak>
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <ActionBarPrimitive.StopSpeaking asChild>
          <TooltipIconButton tooltip="Stop">
            <StopCircleIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.StopSpeaking>
      </MessagePrimitive.If> */}
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground inline-flex items-center text-xs",
        className,
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
File: apps/docs/components/shadcn/ModelPicker.tsx
================================================
"use client";
import {} from "@radix-ui/react-select";
import Image from "next/image";
import type { FC } from "react";
import anthropic from "../../assets/providers/anthropic.svg";
import fireworks from "../../assets/providers/fireworks.svg";
import google from "../../assets/providers/google.svg";
import deepseek from "../../assets/providers/deepseek.svg";
import meta from "../../assets/providers/meta.svg";
import mistral from "../../assets/providers/mistral.svg";
import openai from "../../assets/providers/openai.svg";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";

const models = [
  {
    name: "GPT 4o-mini",
    value: "gpt-4o-mini",
    icon: openai,
  },
  {
    name: "Deepseek R1",
    value: "deepseek-r1",
    icon: deepseek,
  },
  {
    name: "Claude 3.5 Sonnet",
    value: "claude-3.5-sonnet",
    icon: anthropic,
  },
  {
    name: "Gemini 2.0 Flash",
    value: "gemini-2.0-flash",
    icon: google,
  },
  {
    name: "Llama 3 8b",
    value: "llama-3-8b",
    icon: meta,
  },
  {
    name: "Firefunction V2",
    value: "firefunction-v2",
    icon: fireworks,
  },
  {
    name: "Mistral 7b",
    value: "mistral-7b",
    icon: mistral,
  },
];
export const ModelPicker: FC = () => {
  return (
    <Select defaultValue={models[0]?.value ?? ""}>
      <SelectTrigger className="max-w-[300px]">
        <SelectValue />
      </SelectTrigger>
      <SelectContent className="">
        {models.map((model) => (
          <SelectItem key={model.value} value={model.value}>
            <span className="flex items-center gap-2">
              <Image
                src={model.icon}
                alt={model.name}
                className="inline size-4"
              />
              <span>{model.name}</span>
            </span>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};



================================================
File: apps/docs/components/shadcn/Shadcn.tsx
================================================
"use client";

import { MenuIcon, ShareIcon } from "lucide-react";
import { makeMarkdownText } from "@assistant-ui/react-ui";
import remarkGfm from "remark-gfm";
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";
import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";
import type { TooltipContentProps } from "@radix-ui/react-tooltip";
import Image from "next/image";
import { ComponentPropsWithRef, type FC } from "react";

import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import icon from "@/public/favicon/icon.svg";
import { Sheet, SheetContent, SheetTrigger } from "../ui/sheet";
import {
  TooltipProvider,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "../ui/tooltip";
import { ModelPicker } from "./ModelPicker";
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export const MarkdownText = makeMarkdownText({
  remarkPlugins: [remarkGfm],
  components: {
    SyntaxHighlighter: makePrismAsyncSyntaxHighlighter({
      style: coldarkDark,
      customStyle: {
        margin: 0,
        backgroundColor: "black",
      },
    }),
  },
});

type ButtonWithTooltipProps = ComponentPropsWithRef<typeof Button> & {
  tooltip: string;
  side?: TooltipContentProps["side"];
};

const ButtonWithTooltip: FC<ButtonWithTooltipProps> = ({
  children,
  tooltip,
  side = "top",
  ...rest
}) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button {...rest}>
            {children}
            <span className="sr-only">{tooltip}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent side={side}>{tooltip}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

const TopLeft: FC = () => {
  return (
    <div className="flex h-full w-full items-center gap-2 px-3 text-sm font-semibold">
      <Image
        src={icon}
        alt="logo"
        className="inline size-4 dark:hue-rotate-180 dark:invert"
      />
      <span>assistant-ui</span>
    </div>
  );
};

const MainLeft: FC = () => {
  return <ThreadList />;
};

const LeftBarSheet: FC = () => {
  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="outline" size="icon" className="shrink-0 md:hidden">
          <MenuIcon className="size-4" />
          <span className="sr-only">Toggle navigation menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="flex flex-col">
        <div className="mt-6 flex flex-col gap-1">
          <TopLeft />
          <MainLeft />
        </div>
      </SheetContent>
    </Sheet>
  );
};

const Header: FC = () => {
  return (
    <header className="flex gap-2">
      <LeftBarSheet />
      <ModelPicker />
      <ButtonWithTooltip
        variant="outline"
        size="icon"
        tooltip="Share"
        side="bottom"
        className="ml-auto shrink-0"
      >
        <ShareIcon className="size-4" />
      </ButtonWithTooltip>
    </header>
  );
};

export const Shadcn = () => {
  const sideStyle = "bg-muted/40 px-3 py-2";
  const topStyle = "border-b";
  const leftStyle = "border-r hidden md:block";

  return (
    <div className="grid h-full w-full grid-flow-col grid-rows-[auto_1fr] md:grid-cols-[250px_1fr]">
      <div className={cn(sideStyle, leftStyle, topStyle)}>
        <TopLeft />
      </div>
      <div className={cn(sideStyle, leftStyle)}>
        <MainLeft />
      </div>
      <div className={cn(sideStyle, topStyle)}>
        <Header />
      </div>
      <div className="bg-background overflow-hidden">
        <Thread />
      </div>
    </div>
  );
};



================================================
File: apps/docs/components/testimonials/TestimonialContainer.tsx
================================================
"use client";

import { Testimonial } from "@/components/testimonials/testimonials";
import { cn } from "@/lib/utils";
import Image from "next/image";
import { FC } from "react";

export const TestimonialContainer: FC<{
  testimonials: Testimonial[];
  className?: string;
}> = ({ testimonials, className }) => {
  return (
    <div className={cn("relative columns-1 gap-4 overflow-hidden", className)}>
      {testimonials.map((testimonial, idx) => (
        <TestimonialView key={idx} {...testimonial} />
      ))}
    </div>
  );
};
const TestimonialView: FC<Testimonial> = (testimonial) => {
  return (
    <div className="mb-4 break-inside-avoid-column">
      <a target="_blank" href={testimonial.url}>
        <div className="bg-card hover:bg-border flex flex-col gap-3 rounded-lg border p-6 shadow transition-colors">
          <div className="relative flex items-center gap-2">
            <Image
              alt={"@" + testimonial.username + "'s twitter image"}
              loading="lazy"
              width="64"
              height="64"
              className="h-10 w-10 rounded-full border"
              src={testimonial.avatar}
            />
            <p className="text-sm font-medium">{testimonial.username}</p>
            <div className="bg-background absolute -left-1 -top-1 flex h-5 w-5 items-center justify-center rounded-full">
              <XLogo />
            </div>
          </div>
          <p className="text-muted-foreground whitespace-pre-line">
            {testimonial.message}
          </p>
        </div>
      </a>
    </div>
  );
};
const XLogo: FC = () => {
  return (
    <svg
      className="h-[12px] w-[12px]"
      fill="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path>
    </svg>
  );
};



================================================
File: apps/docs/components/testimonials/testimonials.ts
================================================
import profileRawWorks from "./profiles/iVBtd9hs_400x400.jpg";
import profileManuuonly from "./profiles/g2f-gI5N_400x400.jpg";
import profileParrthiv from "./profiles/_-WcCpRw_400x400.jpg";
import profileEliasdevs from "./profiles/vnGL1NHF_400x400.jpg";
import profileKyritzb from "./profiles/0nZ-ergb_400x400.jpg";
import profileRahulchhabra07 from "./profiles/F3t4GW4t_400x400.jpg";
import profileAgihousesf from "./profiles/8rrHE4fe_400x400.jpg";
import profileGardeninggnome from "./profiles/uuRXSsia_400x400.jpg";
import profileAditya_advani from "./profiles/_5AVrIjJ_400x400.jpg";
import profileMahmudisalim from "./profiles/Y7hXHG3i_400x400.jpg";
import profileSimonfarshid from "./profiles/Mc0m3zkD_400x400.jpg";
import { StaticImageData } from "next/image";

export type Testimonial = {
  platform: "X";
  avatar: StaticImageData;
  username: string;
  message: string;
  url: string;
};

export const TESTIMONIALS: Testimonial[] = [
  {
    platform: "X",
    avatar: profileRawWorks,
    username: "@raw_works",
    message: "i needed this 7 months ago!",
    url: "https://x.com/raw_works/status/1797111840188809472",
  },
  {
    platform: "X",
    avatar: profileManuuonly,
    username: "@manuuonly",
    message:
      "was just thinking of researching a tool that could help me do this.. awesome, great product!",
    url: "https://x.com/manuuonly/status/1797511225523454243",
  },
  {
    platform: "X",
    avatar: profileParrthiv,
    username: "@paRRthiv",
    message: "Amazing 🤩\n\nAnd generative UI is a super amazing 😍",
    url: "https://x.com/paRRthiv/status/1797629569366929538",
  },
  {
    platform: "X",
    avatar: profileEliasdevs,
    username: "@eliasdevs",
    message:
      "I can't highlight how simple @simonfarshid makes it to add generative chat to react apps all while still using @vercel AI SDK. I was able to get it into production in 2 hours and users can now chat with ai about their resumes!",
    url: "https://x.com/eliasdevs/status/1800691268194013219",
  },
  {
    platform: "X",
    avatar: profileKyritzb,
    username: "@kyritzb",
    message: "THANK YOU :)\n\nDUDE WAS SO QUICK NOW I CAN KEEP BUILDING",
    url: "https://x.com/kyritzb/status/1802884178276753585",
  },
  {
    platform: "X",
    avatar: profileRahulchhabra07,
    username: "@rahulchhabra07",
    message: "So cool ❤️",
    url: "https://x.com/rahulchhabra07/status/1797088346805870984",
  },
  {
    platform: "X",
    avatar: profileAgihousesf,
    username: "@AGIHouseSF",
    message:
      "Great tool for your next hackathon: 5 different UIs for chat, all ready to go!",
    url: "https://x.com/AGIHouseSF/status/1797111970363322796",
  },
  {
    platform: "X",
    avatar: profileGardeninggnome,
    username: "@gardening_gnome",
    message: "Quite awesome. Want to learn more about the generative UI",
    url: "https://x.com/gardening_gnome/status/1797112443786924348",
  },
  {
    platform: "X",
    avatar: profileAditya_advani,
    username: "@aditya_advani",
    message: "Chat UX for your next React Chat App. Perfect project!",
    url: "https://x.com/aditya_advani/status/1797111877828583754",
  },
  {
    platform: "X",
    avatar: profileMahmudisalim,
    username: "@Masmoudi_Salim",
    message: "Clean feeling",
    url: "https://x.com/Masmoudi_Salim/status/1797111633212530695",
  },
  {
    platform: "X",
    avatar: profileSimonfarshid,
    username: "@simonfarshid",
    message:
      "Go check out http://assistant-ui.com if you need a chatbot UI with magic baked in ✨",
    url: "https://x.com/simonfarshid/status/1801482963886182555",
  },
];

export const BLOG_TESTIMONIALS: Testimonial[] = [
  {
    platform: "X",
    avatar: profileRawWorks,
    username: "@raw_works",
    message: "i needed this 7 months ago!",
    url: "https://x.com/raw_works/status/1797111840188809472",
  },
  {
    platform: "X",
    avatar: profileEliasdevs,
    username: "@eliasdevs",
    message: "I was able to get it into production in 2 hours",
    url: "https://x.com/eliasdevs/status/1800691268194013219",
  },
  {
    platform: "X",
    avatar: profileManuuonly,
    username: "@manuuonly",
    message:
      "was just thinking of researching a tool that could help me do this. awesome, great product!",
    url: "https://x.com/manuuonly/status/1797511225523454243",
  },
];




================================================
File: apps/docs/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className,
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className,
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: apps/docs/components/ui/badge.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };



================================================
File: apps/docs/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };



================================================
File: apps/docs/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-card text-card-foreground rounded-xl border shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
File: apps/docs/components/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed left-[50%] top-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground rounded-xs focus:outline-hidden absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg font-semibold leading-none", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};



================================================
File: apps/docs/components/ui/resizable.tsx
================================================
"use client";

import * as React from "react";
import { GripVerticalIcon } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className,
      )}
      {...props}
    />
  );
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />;
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring focus-visible:outline-hidden relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border rounded-xs z-10 flex h-4 w-3 items-center justify-center border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  );
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
File: apps/docs/components/ui/select.tsx
================================================
"use client";

import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "border-input ring-offset-background placeholder:text-muted-foreground focus:ring-ring flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("bg-muted -mx-1 my-1 h-px", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================
File: apps/docs/components/ui/sheet.tsx
================================================
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-foreground text-lg font-semibold", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};



================================================
File: apps/docs/components/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit text-balance rounded-md px-3 py-1.5 text-xs",
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
File: apps/docs/content/auto-generated/typeDocs.ts
================================================
import {
  AssistantRuntimeProvider,
  ContentPartState,
} from "@assistant-ui/react";
import { ComponentPropsWithRef } from "react";

export type AssistantRuntimeProvider = ComponentPropsWithRef<
  typeof AssistantRuntimeProvider
>;

export type {
  AssistantRuntime,
  AssistantToolUIsState,
  ThreadListRuntime,
  ThreadListState,
  ThreadListItemRuntime,
  ThreadListItemState,
  ThreadRuntime,
  ThreadState,
  MessageRuntime,
  MessageState,
  ContentPartRuntime,
  ComposerRuntime,
  ComposerState,
  AttachmentRuntime,
  AttachmentState,
} from "@assistant-ui/react";

export type TextContentPartState = ContentPartState & { readonly type: "text" };
export type AudioContentPartState = ContentPartState & {
  readonly type: "audio";
};
export type ImageContentPartState = ContentPartState & {
  readonly type: "image";
};
export type SourceContentPartState = ContentPartState & {
  readonly type: "source";
};
export type ToolCallContentPartState = ContentPartState & {
  readonly type: "tool-call";
};



================================================
File: apps/docs/content/blog/2024-07-29-hello/index.mdx
================================================
---
title: Hello, assistant-ui
description: assistant-ui is an open-source AI chat component for React.
author: Simon Farshid
date: 2024-07-29T12:00:00
---

import Image from "next/image";
import { TestimonialContainer } from "@/components/testimonials/TestimonialContainer";
import { BLOG_TESTIMONIALS } from "@/components/testimonials/testimonials";
import npmDownloads from "./npm-downloads.png";
import assistantUi from "./assistant-ui-screenshot.png";

After spending the last two years building Gen-AI prototypes and products, I realized that all software will soon have a natural language interface. OpenAI's ChatGPT sets the quality bar high and I wanted to have a similar UX in my own apps. No solution on the market came anywhere close, so I built assistant-ui.

assistant-ui is an open-source, embeddable, customizable AI chat component for React web apps. You can use it to build GPT wrappers, in-app copilots, or agentic systems. It supports rich content (markdown, code highlighting, charts, tables), generative UI, message editing, ..., across all the major model providers.

<Image
  src={assistantUi}
  alt="screenshot of assistant-ui"
  width={398}
  height={498}
  className="mx-auto rounded-xl border drop-shadow"
/>

Earlier last month, I released the project to the world. The feedback from early adopters has been overwhelmingly positive:

<div className="not-prose mx-auto max-w-md">
  <TestimonialContainer testimonials={BLOG_TESTIMONIALS} />
</div>

It didn't take long for developers to start building with assistant-ui. Here are some of my favorite products from the community:

- [Helicone](https://helicone.ai/) - open-source LLM observability platform
- [screenpipe](https://screenpi.pe/) - AI to remember everything you see, say or hear
- [myresume.guru](http://myresume.guru) - AI resume optimizer to land your dream job
- [Entelligence](https://entelligence.ai/) - AI mentor for software engineers

With 250+ stars on [GitHub](https://github.com/assistant-ui/assistant-ui) and over 1k [npm](https://www.npmjs.com/package/@assistant-ui/react) weekly downloads, we got a vibrant growing community of developers who care about the user experience.

<Image
  src={npmDownloads}
  alt="graph showing 1355 weekly npm downloads"
  width={381}
  height={94}
  className="mx-auto dark:hue-rotate-180 dark:invert"
/>

I want to thank the following contributors who got the project to where it is today:

- [@m13v](https://github.com/m13v) for contributing two examples and several how-to videos
- [@okisdev](https://github.com/okisdev) for multiple bugfixes
- [@Rajaniraiyn](https://github.com/Rajaniraiyn) for improving streaming support for REST APIs
- @ccbkai for integrating Chrome's `window.ai` with assistant-ui
- [@stingfeng](https://github.com/stingfeng/dify-extensions) for building a [Dify](https://dify.ai) integration
- [@Ephibbs](https://github.com/Ephibbs/flowtoken) for building a Perplexity-style text streaming library ([Demo](https://assistant-ui-flowtoken-demo.vercel.app/))
- … and so many others

assistant-ui builds on top of [Radix UI](https://www.radix-ui.com/), [Tailwind](https://tailwindcss.com/), [shadcn/ui](https://ui.shadcn.com/), [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction) and other amazing open-source projects.

Over the coming month, I'll be rolling out multimodal support, so you can use your voice and upload images. There's so much more in the pipeline that I can't wait to unveil!

Today, several companies like [Helicone (YC W23)](https://x.com/justinstorre/status/1816849882612904156) are using assistant-ui to power a core part of their product. If your company wants to do the same, please [get in touch](https://cal.com/simon-farshid/assistant-ui).

If you're building conversational AI, join us on [Discord](https://discord.gg/S9dwgCNEFs). If you're technical and want to shape how we interact with AIs of the future, [send me an email](mailto:simon@assistant-ui.com).



================================================
File: apps/docs/content/blog/2024-09-11/index.mdx
================================================
---
title: Build conversational AI agents with LangGraph and assistant-ui
description: Announcing our collaboration with LangChain
author: Harrison Chase
date: 2024-09-11T12:00:00
---

import { Redirect } from "./redirect";

<Redirect />



================================================
File: apps/docs/content/blog/2024-09-11/redirect.tsx
================================================
import { redirect } from "next/navigation";

export const Redirect = () => {
  redirect("https://medium.com/relta/github-assistant-49ae388ad758");
};



================================================
File: apps/docs/content/blog/2024-12-15/index.mdx
================================================
---
title: Announcing github-assistant
description: github-assistant answers questions about your GitHub repositories.
author: Amir Zohrenejad
date: 2024-12-15T12:00:00
---

import { Redirect } from "./redirect";

<Redirect />



================================================
File: apps/docs/content/blog/2024-12-15/redirect.tsx
================================================
import { redirect } from "next/navigation";

export const Redirect = () => {
  redirect("https://blog.langchain.dev/assistant-ui/");
};



================================================
File: apps/docs/content/blog/2025-01-31-changelog/index.mdx
================================================
---
title: January 2025 Changelog
description: shadcn/ui, Thread Management, Improvements to AI SDK and LangGraph support
author: Simon Farshid
date: 2025-01-31T12:00:00
---

import { Callout } from "fumadocs-ui/components/callout";

<Callout emoji="🎉">
  This is the first edition of our changelog. We post these updates on a monthly
  basis. If you want more frequent updates about our new features, join our
  Discord where we have a `#changelog` channel that is updated on a daily basis.
</Callout>

## Summary

In January, we shipped 36 new versions of our package `@assistant-ui/react`. We also crossed 10k weekly downloads on npm for the first time. 🎉

## shadcn/ui CLI support

You can now install all components using the shadcn CLI, e.g.

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread"
```

We began a migration towards distributing our components as unstyled primitives and using the shadcn CLI to drop styles in your project.

## Styled components moved to @assistant-ui/react-ui

All styled components (Thread, ThreadList, AssistantModal, makeMarkdownText, etc.) have been moved to a new package, `@assistant-ui/react-ui`.

To ease the migration, we added a migration codemod:

```sh
npx assistant-ui upgrade
```

This will update your codebase to use the new package. This new package remains supported, however, based on the learnings from existing users, we recommend all new projects to use our shadcn/ui CLI instead.

## Customizing the max-width of the Thread

You can now customize the max-width of the thread via `--aui-thread-max-width` CSS variable.

## Thread Management

One of our main focus areas in this month was on the new Thread Management API. The new ThreadList API is available under `runtime.threads`. It allows you to create, switch to, rename, archive, and delete threads.

We shipped a `<ThreadList />` component which gives the user the UI to manage their threads.

We also shipped a few hooks `useThreadListItem()`, `useThreadListItemRuntime()`, `useRemoteThreadListRuntime()` and `useCloudThreadListRuntime()`.

## Assistant Cloud

We rolled out the new Assistant Cloud service to early users. This is a managed service for persistence, chat history, and thread management.
Our runtimes are being upgraded to support Assistant Cloud natively by letting you pass a `cloud` object to the runtime hook.

Keep an eye out for the public announcement of Assistant Cloud in a few days.

## Improvements to our LangGraph Integration

- We now have full support for LangGraph's `interrupt()`/`Command` API. You can check out the new example repository [here](https://github.com/assistant-ui/assistant-ui-langgraph-interrupt).
- We now also support starting LangGraph runs without a user message (based on button input or other events).
- Cancellation of runs is now supported via an `abortSignal` being passed to the LangGraph runtime adapter.

## Improvements to our AI SDK Integration

We now give you access to annotations and data packets in the assistant message:

```tsx
type AssistantMessage = {
  metadata: {
    unstable_annotations: [...],
    unstable_data: [...],
  }
}
```

## AI SDK recommended for new projects

For new projects, we recommend using the AI SDK integration. Previously, we recommended our custom SDK called `useEdgeRuntime`.  
With our improved AI SDK integration, we believe it is time to recommend AI SDK for new projects, giving you access to the AI SDK ecosystem.

The edge runtime remains maintained and supported for existing projects.

## Misc

- **Refactors & API Enhancements**:

  - Renamed `ModelConfig` to `ModelContext`.
  - Moved `switchToThread / switchToNewThread` under `runtime.threads`.
  - Deprecated `UIContentPart`.
  - `ToolCallContentPart.args` is now a `JSONObject`.
  - `MessagePrimitive.tools.Override` introduced.
  - Added `AppendMessage.sourceId` to provide better tracking.
  - Reverse order of threads in `useRemoteThreadListRuntime` for better visibility.
  - Added `threads.getById` and `threads.main` APIs.
  - Introduced `AssistantCloudThreadHistoryAdapter` to handle cloud-based thread history.
  - Auto-injection of history adapter in the local runtime.
  - Tool call `id` + `args` are now optional in `ThreadMessageLike`.
  - Added `ThreadListPrimitive.Root`.
  - `ComposerRuntime.clearAttachments` API added.
  - Improved input support for IME keyboards (e.g., Chinese, Japanese, Korean).
  - Moved repository to a new GitHub organization (`assistant-ui/assistant-ui`).

- **External Store & Data Handling**:

  - Enhanced `ExternalStoreAdapter` to support metadata and attachments.
  - Renamed `getExternalStoreMessage` to `getExternalStoreMessages`.
  - Tool call `args` streaming support in our Python SDK.

- **User Interface & Styling**:

  - Styled UI assistant message footer.
  - Improved attachment filename handling to prevent overflow.
  - Renamed CSS class to `aui-thread-welcome-suggestions`.

- **Performance Optimizations**:

  - Memoized `MessageRepository.getMessages()` for better efficiency.
  - Marked `ChatAdapter` types as readonly.

- **Bug Fixes**:

  - Fixed event subscription issues in thread lists.
  - Fixed import errors in React server environments.
  - Prevented excessive classes being included via TailwindCSS.
  - Fixed AI SDK annotation packet errors.



================================================
File: apps/docs/content/docs/getting-started.mdx
================================================
---
title: Getting Started
---

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Tab, Tabs } from "fumadocs-ui/components/tabs";
import { Callout } from "fumadocs-ui/components/callout";

## Start with a new project

![animated gif showing the steps to create a new project](../../../../.github/assets/assistant-ui-starter.gif)

<Steps>
  <Step>

### Initialize assistant-ui in your project

Step 1: Run `assistant-ui init` to install assistant-ui in a new or existing React.js project:

```sh
npx assistant-ui@latest create # new project
npx assistant-ui@latest init # existing project
```

  </Step>
  <Step>

### Add API key

Add a new `.env` file to your project with your OpenAI API key:

```
OPENAI_API_KEY="sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# chat history -- sign up for free on https://cloud.assistant-ui.com
# NEXT_PUBLIC_ASSISTANT_BASE_URL="https://..."
```

  </Step>
  <Step>

### Start the app

```sh
npm run dev
```

  </Step>
</Steps>

## Manual installation

<Callout>
  We recommend `npx assistant-ui init` to setup existing projects.
</Callout>

<Steps>
  <Step>

### Add assistant-ui

```sh npm2yarn
npx assistant-ui add thread thread-list
```

  </Step>
  <Step>

### Setup Backend Endpoint

Install provider SDK:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>

```sh title="Terminal" tab="OpenAI"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Anthropic"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/anthropic
```

```sh title="Terminal" tab="Azure"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/azure
```

```sh title="Terminal" tab="AWS"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/amazon-bedrock
```

```sh title="Terminal" tab="Gemini"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/google
```

```sh title="Terminal" tab="GCP"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/google-vertex
```

```sh title="Terminal" tab="Groq"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Fireworks"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Cohere"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/cohere
```

```sh title="Terminal" tab="Ollama"
npm install ai @assistant-ui/react-ai-sdk ollama-ai-provider
```

```sh title="Terminal" tab="Chrome AI"
npm install ai @assistant-ui/react-ai-sdk chrome-ai
```

</Tabs>

Add an API endpoint:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>
```ts title="/app/api/chat/route.ts" tab="OpenAI"
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: openai("gpt-4o-mini"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Anthropic"
import { anthropic } from "@ai-sdk/anthropic";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: anthropic("claude-3-5-sonnet-20240620"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Azure"
import { azure } from "@ai-sdk/azure";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: azure("your-deployment-name"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="AWS"
import { bedrock } from "@ai-sdk/amazon-bedrock";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: bedrock("anthropic.claude-3-5-sonnet-20240620-v1:0"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Gemini"
import { google } from "@ai-sdk/google";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: google("gemini-2.0-flash"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="GCP"
import { vertex } from "@ai-sdk/google-vertex";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: vertex("gemini-1.5-pro"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Groq"
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

const groq = createOpenAI({
  apiKey: process.env.GROQ_API_KEY ?? "",
  baseURL: "https://api.groq.com/openai/v1",
});

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: groq("llama3-70b-8192"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Fireworks"
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

const fireworks = createOpenAI({
  apiKey: process.env.FIREWORKS_API_KEY ?? "",
  baseURL: "https://api.fireworks.ai/inference/v1",
});

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: fireworks("accounts/fireworks/models/firefunction-v2"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Cohere"
import { cohere } from "@ai-sdk/cohere";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: cohere("command-r-plus"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Ollama"
import { ollama } from "ollama-ai-provider";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: ollama("llama3"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Chrome AI"
import { chromeai } from "chrome-ai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: chromeai(),
    messages,
  });
  return result.toDataStreamResponse();
}
```

</Tabs>

Define environment variables:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>

```sh title="/.env.local" tab="OpenAI"
OPENAI_API_KEY="sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Anthropic"
ANTHROPIC_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Azure"
AZURE_RESOURCE_NAME="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AZURE_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="AWS"
AWS_ACCESS_KEY_ID="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AWS_SECRET_ACCESS_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AWS_REGION="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Gemini"
GOOGLE_GENERATIVE_AI_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="GCP"
GOOGLE_VERTEX_PROJECT="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_VERTEX_LOCATION="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_APPLICATION_CREDENTIALS="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Groq"
GROQ_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Fireworks"
FIREWORKS_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Cohere"
COHERE_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh tab="Ollama"
<none>
```

```sh tab="Chrome AI"
<none>
```

</Tabs>

If you aren't using Next.js, you can also deploy this endpoint to Cloudflare Workers, or any other serverless platform.

  </Step>

  <Step>

### Use it in your app

<Tabs items={["Thread", "AssistantModal"]}>

```tsx title="/app/page.tsx" tab="Thread"
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { ThreadList } from "@/components/assistant-ui/thread-list";
import { Thread } from "@/components/assistant-ui/thread";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <div className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
        <ThreadList />
        <Thread />
      </div>
    </AssistantRuntimeProvider>
  );
};
```

```tsx title="/app/page.tsx" tab="AssistantModal"
// run `npx shadcn@latest add "https://r.assistant-ui.com/assistant-modal"`

import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantModal } from "@/components/assistant-ui/assistant-modal";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <AssistantModal />
    </AssistantRuntimeProvider>
  );
};
```

</Tabs>

</Step>
</Steps>



================================================
File: apps/docs/content/docs/index.mdx
================================================
---
title: "Documentation"
---

import { redirect } from "next/navigation";

<>{redirect("/docs/getting-started")}</>



================================================
File: apps/docs/content/docs/meta.json
================================================
{
  "title": "mdx",
  "root": true,
  "pages": [
    "getting-started",
    "---Guides---",
    "...guides",
    "---Copilots---",
    "...copilots",
    "---UI---",
    "...ui",
    "---Backends---",
    "...runtimes",
    "---Cloud---",
    "...cloud",
    "---Reference---",
    "api-reference",
    "concepts",
    "migrations",
    "legacy",
    "components",
    "reference"
  ]
}



================================================
File: apps/docs/content/docs/api-reference/context.tsx
================================================
"use client";

import type React from "react";
import { ChevronRight, Layers } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Fragment } from "react";

interface ComponentProps {
  name: string;
  isContextProvider?: boolean;
  providedContexts?: { name: string; color: string; link?: string }[];
  isLink?: boolean;
  docsLink?: string;
  tooltip?: string;
  children?: React.ReactNode;
  props?: string;
}

export const Component: React.FC<ComponentProps> = ({
  name,
  isContextProvider,
  providedContexts,
  isLink,
  docsLink,
  tooltip,
  children,
  props,
}) => (
  <div className="mb-4">
    <div className="flex items-center">
      <ChevronRight className="mr-2 h-5 w-5" />
      {isLink ? (
        <a
          href={`#${name.toLowerCase().replace(/\s/g, "-")}`}
          className="font-semibold hover:underline"
        >
          {name}
        </a>
      ) : (
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <a href={docsLink}>
                <code>
                  &lt;
                  {name
                    ? name
                        .split(".")
                        .map((part, index) =>
                          index === name.split(".").length - 1 ? (
                            <strong key={index}>{part}</strong>
                          ) : (
                            <span key={index}>{part}.</span>
                          ),
                        )
                    : name}
                  {`${props ? ` ${props}` : ""} />`}
                </code>
              </a>
            </TooltipTrigger>
            <TooltipContent>{tooltip}</TooltipContent>
          </Tooltip>
        </TooltipProvider>
      )}
      {isContextProvider && (
        <div className="ml-3 flex items-center">
          <Layers className="mr-2 h-5 w-5 text-purple-500 dark:text-purple-400" />
          <span className="text-sm font-semibold text-purple-500 dark:text-purple-400">
            Context Provider
          </span>
        </div>
      )}
    </div>
    {providedContexts && (
      <div className="ml-7 mt-1">
        Provides:{" "}
        {providedContexts.map((context, index) => (
          <Fragment key={context.name}>
            <a
              href={
                context.link ||
                `#${context.name.toLowerCase().replace(/\s/g, "-")}`
              }
              style={{
                color: context.color,
                textDecorationColor: context.color,
              }}
            >
              {context.name}
            </a>
            {index < providedContexts.length - 1 ? ", " : ""}
          </Fragment>
        ))}
      </div>
    )}
    {children && <div className="ml-7 mt-4">{children}</div>}
  </div>
);

interface RuntimeHooksProps {
  hooks: { name: string; docsLink: string }[];
}

export const RuntimeHooks: React.FC<RuntimeHooksProps> = ({ hooks }) => (
  <div className="mb-6 mt-8">
    <ul className="list-inside list-disc space-y-3">
      {hooks.map((hook, index) => (
        <li key={index} className="text-base">
          <a
            href={hook.docsLink}
            target="_blank"
            rel="noopener noreferrer"
            className="hover:underline"
          >
            {hook.name}
          </a>
        </li>
      ))}
    </ul>
  </div>
);

interface ContextLevelProps {
  color: string;
  children: React.ReactNode;
}

export const ContextLevel: React.FC<ContextLevelProps> = ({
  color,
  children,
}) => (
  <div className={`mb-12 border-l-4 pl-6`} style={{ borderColor: color }}>
    {children}
  </div>
);



================================================
File: apps/docs/content/docs/api-reference/meta.json
================================================
{
  "title": "API Reference",
  "pages": ["overview", "context-providers", "primitives", "runtimes", "..."]
}



================================================
File: apps/docs/content/docs/api-reference/overview.mdx
================================================
---
title: Overview
---

import { Callout } from "fumadocs-ui/components/callout";

import { Component, ContextLevel, RuntimeHooks } from "./context";

export const contextColors = {
  "Assistant Context": "#4a86e8",
  "Thread Context": "#45a049",
  "Composer Context": "#ff9933",
  "Message Context": "#bb2244",
  "ContentPart Context": "#268bd2",
  "Attachment Context": "#FFB6C1",
  "ThreadListItem Context": "#c678dd",
};

<Callout title="Work in progress" type="warn">
  This page is under construction. Most links will not work yet.
</Callout>

## Cloud

- [`AssistantCloud`](#assistant-cloud)

## Runtime API

### AI SDK

- [`useChatRuntime`](#use-chat-runtime)
- [`useVercelUseChatRuntime`](#use-vercel-use-chat-runtime) (legacy)
- [`useVercelUseAssistantRuntime`](#use-vercel-use-assistant-runtime)
- [`useVercelRSCRuntime`](#use-vercel-rsc-runtime)

### LangGraph

- [`useLangGraphRuntime`](#use-lang-graph-runtime)

### Local Runtime

- [`useLocalRuntime`](#use-local-runtime)

### External Store Runtime

- [`useExternalStoreRuntime`](#use-external-store-runtime)
- [`createMessageConverter`](#create-message-converter)

### Thread List Runtime

- [`useRemoteThreadListRuntime`](#use-remote-thread-list-runtime)
- [`useCloudThreadListRuntime`](#use-cloud-thread-list-runtime)

### Edge (Legacy)

- [`useEdgeRuntime`](#use-edge-runtime)
- [`useDangerousInBrowserRuntime`](#use-dangerous-in-browser-runtime)

## Runtime Adapters

### Attachment

- [`AttachmentAdapter`](#attachment-adapter)
- [`SimpleImageAttachmentAdapter`](#simple-image-attachment-adapter)
- [`SimpleTextAttachmentAdapter`](#simple-text-attachment-adapter)
- [`CompositeAttachmentAdapter`](#composite-attachment-adapter)

### Feedback

- [`FeedbackAdapter`](#feedback-adapter)

### Speech

- [`SpeechSynthesisAdapter`](#speech-synthesis-adapter)
- [`WebSpeechSynthesisAdapter`](#web-speech-synthesis-adapter)

## Highest Level Context Providers

<Component
  name="AssistantRuntimeProvider"
  isContextProvider={true}
  providedContexts={[
    { name: "Assistant Context", color: contextColors["Assistant Context"] },
    { name: "Thread Context", color: contextColors["Thread Context"] },
    {
      name: "Thread Composer Context",
      color: contextColors["Composer Context"],
      link: "#composer-context",
    },
  ]}
  docsLink="./context-providers/AssistantRuntimeProvider"
  tooltip="Provides the highest level context for the assistant-ui"
  props="runtime={runtime}"
>
  <Component name="Thread" isLink={true} />
  <Component name="ThreadList" isLink={true} />
</Component>

<Component
  name="TextContentPartProvider"
  isContextProvider={true}
  providedContexts={[
    {
      name: "Text ContentPart Context",
      color: contextColors["ContentPart Context"],
      link: "#contentpart-context",
    },
  ]}
  docsLink="./context-providers/TextContentPartProvider"
  tooltip="Provides context for text content parts"
  props="text={text}"
>
  <Component name="ContentPart" isLink={true} />
</Component>

<ContextLevel color={contextColors["Assistant Context"]}>

## Assistant Context

The context available to components inside `<AssistantRuntimeProvider />`. You usually wrap your entire application in this context.

### AssistantRuntime

Programmatically access the assistant's state and actions.

- [`useAssistantRuntime`](#use-assistant-runtime)

### Instructions

Add system prompt instructions

- [`useAssistantInstructions`](#use-assistant-instructions)

### Tool UI

Register tool UIs

- [`makeAssistantTool`](#make-assistant-tool)
- [`makeAssistantToolUI`](#make-assistant-tool-ui)
- [`useAssistantTool`](#use-assistant-tool)
- [`useAssistantToolUI`](#use-assistant-tool-ui)

Programmatically access the list of registered tool UIs (Experimental)

- [`useToolUIs`](#use-tool-uis)
- [`useToolUIsStore`](#use-tool-uis-store)

### ThreadListPrimitive

Shows a list of threads and allows the user to switch between them.

<Component
  name="ThreadListPrimitive.Root"
  docsLink="#thread-list-primitive-root"
  tooltip="Root component for the thread list"
>
  <Component
    name="ThreadListPrimitive.New"
    docsLink="#thread-list-primitive-new"
    tooltip="Component for creating a new thread"
  />
  <Component
    name="ThreadListPrimitive.Items"
    isContextProvider={true}
    providedContexts={[
      {
        name: "ThreadListItem Context",
        color: contextColors["ThreadListItem Context"],
      },
    ]}
    docsLink="#thread-list-primitive-items"
    tooltip="Container for thread list items, provides context for individual items"
    props="components={...}"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Thread Context"]}>

## Thread Context

The context for a single thread. Currently always corresponds to the runtime's main thread.

### ThreadRuntime

Programmatically access the thread's state and actions.

- [`useThread`](#use-thread)
- [`useThreadComposer`](#use-thread-composer)
- [`useThreadRuntime`](#use-thread-runtime)

### ModelContext

- [`useThreadModelContext`](#use-thread-model-context)

### ThreadViewportStore

- [`useThreadViewport`](#use-thread-viewport)
- [`useThreadViewportStore`](#use-thread-viewport-store)

### ThreadPrimitive

A conversation thread.

<Component
  name="ThreadPrimitive.Root"
  docsLink="#thread-primitive-root"
  tooltip="Root component for a thread"
>
  <Component
    name="ThreadPrimitive.Viewport"
    docsLink="#thread-primitive-viewport"
    tooltip="Viewport for the thread content"
  >
    <Component
      name="ThreadPrimitive.Messages"
      isContextProvider={true}
      providedContexts={[
        { name: "Message Context", color: contextColors["Message Context"] },
        {
          name: "Edit Composer Context",
          color: contextColors["Composer Context"],
          link: "#composer-context",
        },
      ]}
      docsLink="#thread-primitive-messages"
      tooltip="Container for thread messages, provides context for messages and edit composer"
    >
      <Component name="Message" isLink={true} />
    </Component>
    <Component
      name="ThreadPrimitive.ScrollToBottom"
      docsLink="#thread-primitive-scroll-to-bottom"
      tooltip="Scrolls to the bottom of the thread"
    />
    <Component
      name="ThreadPrimitive.Empty"
      docsLink="#thread-primitive-empty"
      tooltip="Displayed when the thread is empty"
    />
    <Component
      name="ThreadPrimitive.If"
      docsLink="#thread-primitive-if"
      tooltip="Conditional rendering within the thread"
    />
    <Component
      name="ThreadPrimitive.Suggestion"
      docsLink="#thread-primitive-suggestion"
      tooltip="Displays suggestions in the thread"
    />
    <Component name="Composer" isLink={true} />
  </Component>
</Component>

### AssistantModalPrimitive

A floating modal that usually appears in the lower right corner of the screen. Common for support use cases.

<Component
  name="AssistantModalPrimitive.Root"
  docsLink="#assistant-modal-primitive-root"
  tooltip="Root component for the assistant modal"
>
  <Component
    name="AssistantModalPrimitive.Trigger"
    docsLink="#assistant-modal-primitive-trigger"
    tooltip="Trigger to open the assistant modal"
  />
  <Component
    name="AssistantModalPrimitive.Anchor"
    docsLink="#assistant-modal-primitive-anchor"
    tooltip="Anchor point for the assistant modal"
  />
  <Component
    name="AssistantModalPrimitive.Content"
    docsLink="#assistant-modal-primitive-content"
    tooltip="Content of the assistant modal"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Composer Context"]}>

## Composer Context

Manages the state and actions for the message composer

### ComposerRuntime

- [`useComposer`](#use-composer)
- [`useComposerRuntime`](#use-composer-runtime)

### ComposerPrimitive

<Component
  name="ComposerPrimitive.Root"
  docsLink="#composer-primitive-root"
  tooltip="Root component for the composer"
>
  <Component
    name="ComposerPrimitive.Input"
    docsLink="#composer-primitive-input"
    tooltip="Input field for composing messages"
  />
  <Component
    name="ComposerPrimitive.Send"
    docsLink="#composer-primitive-send"
    tooltip="Button to send the composed message"
  />
  <Component
    name="ComposerPrimitive.Cancel"
    docsLink="#composer-primitive-cancel"
    tooltip="Button to cancel composing"
  />
  <Component
    name="ComposerPrimitive.Attachments"
    isContextProvider={true}
    providedContexts={[
      {
        name: "Attachment Context",
        color: contextColors["Attachment Context"],
      },
    ]}
    docsLink="#composer-primitive-attachments"
    tooltip="Manages attachments in the composer"
  />
  <Component
    name="ComposerPrimitive.AddAttachment"
    docsLink="#composer-primitive-add-attachment"
    tooltip="Button to add an attachment"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Message Context"]}>

## Message Context

Manages the state and actions for individual messages

### MessageRuntime

- [`useMessage`](#use-message)
- [`useEditComposer`](#use-edit-composer)
- [`useMessageRuntime`](#use-message-runtime)

### MessageUtilsStore

- [`useMessageUtils`](#use-message-utils)
- [`useMessageUtilsStore`](#use-message-utils-store)

### MessagePrimitive

<Component
  name="MessagePrimitive.Root"
  docsLink="#message-primitive-root"
  tooltip="Root component for a message"
>
  <Component
    name="MessagePrimitive.Content"
    isContextProvider={true}
    providedContexts={[
      {
        name: "ContentPart Context",
        color: contextColors["ContentPart Context"],
      },
    ]}
    docsLink="#message-primitive-content"
    tooltip="Displays the content of the message"
  />
  <Component
    name="MessagePrimitive.Attachments"
    isContextProvider={true}
    providedContexts={[
      {
        name: "Attachment Context",
        color: contextColors["Attachment Context"],
      },
    ]}
    docsLink="#message-primitive-attachments"
    tooltip="Displays attachments in the message"
  />
  <Component
    name="MessagePrimitive.If"
    docsLink="#message-primitive-if"
    tooltip="Conditional rendering within the message"
  />
</Component>

### ActionBarPrimitive

<Component
  name="ActionBarPrimitive.Root"
  docsLink="#action-bar-primitive-root"
  tooltip="Root component for the action bar"
>
  <Component
    name="ActionBarPrimitive.Copy"
    docsLink="#action-bar-primitive-copy"
    tooltip="Copies the message content"
  />
  <Component
    name="ActionBarPrimitive.Edit"
    docsLink="#action-bar-primitive-edit"
    tooltip="Edits the message"
  />
  <Component
    name="ActionBarPrimitive.Reload"
    docsLink="#action-bar-primitive-reload"
    tooltip="Reloads the message"
  />
  <Component
    name="ActionBarPrimitive.Speak"
    docsLink="#action-bar-primitive-speak"
    tooltip="Speaks the message content"
  />
  <Component
    name="ActionBarPrimitive.StopSpeaking"
    docsLink="#action-bar-primitive-stop-speaking"
    tooltip="Stops speaking the message"
  />
  <Component
    name="ActionBarPrimitive.FeedbackPositive"
    docsLink="#action-bar-primitive-feedback-positive"
    tooltip="Provides positive feedback"
  />
  <Component
    name="ActionBarPrimitive.FeedbackNegative"
    docsLink="#action-bar-primitive-feedback-negative"
    tooltip="Provides negative feedback"
  />
</Component>

### BranchPickerPrimitive

<Component
  name="BranchPickerPrimitive.Root"
  docsLink="#branch-picker-primitive-root"
  tooltip="Root component for the branch picker"
>
  <Component
    name="BranchPickerPrimitive.Previous"
    docsLink="#branch-picker-primitive-previous"
    tooltip="Navigates to the previous branch"
  />
  <Component
    name="BranchPickerPrimitive.Number"
    docsLink="#branch-picker-primitive-number"
    tooltip="Displays the current branch number"
  />
  <Component
    name="BranchPickerPrimitive.Next"
    docsLink="#branch-picker-primitive-next"
    tooltip="Navigates to the next branch"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["ContentPart Context"]}>

## ContentPart Context

Manages the state and actions for content parts within messages

### ContentPartRuntime

- [`useContentPart`](#use-content-part)
- [`useContentPartText`](#use-content-part-text)
- [`useContentPartReasoning`](#use-content-part-reasoning)
- [`useContentPartRuntime`](#use-content-part-runtime)

### ContentPartPrimitive

<Component
  name="ContentPartPrimitive.Text"
  docsLink="#content-part-text"
  tooltip="Represents a text part of the message content"
/>

### MarkdownText

<Component
  name="MarkdownText"
  docsLink="#markdown-text"
  tooltip="Renders markdown text in the message"
/>

</ContextLevel>

<ContextLevel color={contextColors["Attachment Context"]}>

## Attachment Context

Manages the state and actions for attachments in messages and composer

### AttachmentRuntime

- [`useAttachment`](#use-attachment)
- [`useAttachmentRuntime`](#use-attachment-runtime)

### AttachmentPrimitive

<Component
  name="AttachmentPrimitive.Root"
  docsLink="#attachment-primitive-root"
  tooltip="Root component for an attachment"
>
  <Component
    name="AttachmentPrimitive.Name"
    docsLink="#attachment-primitive-name"
    tooltip="Displays the name of the attachment"
  />
  <Component
    name="AttachmentPrimitive.Delete"
    docsLink="#attachment-primitive-delete"
    tooltip="Deletes the attachment"
  />
  <Component
    name="AttachmentPrimitive.Thumb"
    docsLink="#attachment-primitive-thumb"
    tooltip="Displays a thumbnail of the attachment"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["ThreadListItem Context"]}>

## ThreadListItem Context

Manages the state and actions for individual thread list items

### ThreadListItemRuntime

- [`useThreadListItem`](#use-thread-list-item)
- [`useThreadListItemRuntime`](#use-thread-list-item-runtime)

### ThreadListItem

<Component
  name="ThreadListItemPrimitive.Root"
  docsLink="#thread-list-item-primitive-root"
  tooltip="Root component for a thread list item"
>
  <Component
    name="ThreadListItemPrimitive.Trigger"
    docsLink="#thread-list-item-primitive-trigger"
    tooltip="Trigger for thread list item actions"
  >
    <Component
      name="ThreadListItemPrimitive.Name"
      docsLink="#thread-list-item-primitive-name"
      tooltip="Displays the name of the thread"
    />
  </Component>
  <Component
    name="ThreadListItemPrimitive.Archive"
    docsLink="#thread-list-item-primitive-archive"
    tooltip="Archives the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Unarchive"
    docsLink="#thread-list-item-primitive-unarchive"
    tooltip="Unarchives the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Delete"
    docsLink="#thread-list-item-primitive-delete"
    tooltip="Deletes the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Rename"
    docsLink="#thread-list-item-primitive-rename"
    tooltip="Renames the thread"
  />
</Component>

</ContextLevel>

## Utilities

- [`useThreadViewportAutoscroll`](#use-thread-viewport-autoscroll)
- [`useInlineRender`](#use-inline-render)



================================================
File: apps/docs/content/docs/api-reference/context-providers/AssistantRuntimeProvider.mdx
================================================
---
title: <AssistantRuntimeProvider />
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntimeProvider } from "@/generated/typeDocs";

The `AssistantRuntimeProvider` provides data and APIs used by assistant-ui components.

Almost all components in assistant-ui require an `AssistantRuntimeProvider` around them to function properly.

You must either wrap your app in an `AssistantRuntimeProvider` or pass a `runtime` to the `<Thread />` component instead.

```tsx {1, 8, 10}
import { AssistantRuntimeProvider } from "@assistant-ui/react";

const MyApp = () => {
  const runtime = useChatRuntime({ api: "/api/chat" });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {/* your app */}
    </AssistantRuntimeProvider>
  );
};
```

#### Properties

<ParametersTable {...AssistantRuntimeProvider} />



================================================
File: apps/docs/content/docs/api-reference/context-providers/TextContentPartProvider.mdx
================================================
---
title: <TextContentPartProvider />
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntimeProvider } from "@/generated/typeDocs";

The `TextContentPartProvider` provides data and APIs for `TextContentPart` components.

This is useful if you want to reuse the same `Text` component outside of a message text, e.g. with the `@assistant-ui/react-markdown` package.

```tsx {1, 8, 10}
import { AssistantRuntimeProvider } from "@assistant-ui/react";

const MyApp = () => {
  return (
    <TextContentPartProvider text={"Hello!"}>
      <MyMarkdownText />
    </AssistantRuntimeProvider>
  );
};
```

#### Properties

<ParametersTable {...AssistantRuntimeProvider} />



================================================
File: apps/docs/content/docs/api-reference/integrations/meta.json
================================================
{
  "pages": ["vercel-ai-sdk", "react-hook-form"]
}



================================================
File: apps/docs/content/docs/api-reference/integrations/react-hook-form.mdx
================================================
---
title: "@assistant-ui/react-hook-form"
---

A React Hook Form integration for @assistant-ui.

import { ParametersTable } from "@/components/docs";

## API Reference

### `useAssistantForm`

Drop-in replacement hook for `useForm` that adds support for `@assistant-ui/react`.

```diff
- import { useForm } from "react-hook-form";
+ import { useAssistantForm } from "@assistant-ui/react-hook-form";

- useForm({
+ useAssistantForm({
    ...
  });
```

#### Properties

<ParametersTable
  type="UseAssistantFormProps"
  parameters={[
    {
      name: "assistant",
      type: "object",
      optional: true,
      description: "Configuration for useAssistantForm",
      children: [
        {
          parameters: [
            {
              name: "tools",
              type: "object",
              description: "Tools configuration for useAssistantForm",
              children: [
                {
                  parameters: [
                    {
                      name: "set_form_field",
                      type: "object",
                      description: "Configuration for the set_form_field tool",
                      children: [
                        {
                          parameters: [
                            {
                              name: "render",
                              type: "ToolCallContentPartComponent<{ name: string; value: string; }, {}>",
                              description:
                                "The component to render when set_form_field is called.",
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: "submit_form",
                      type: "object",
                      description: "Configuration for the submit_form tool",
                      children: [
                        {
                          parameters: [
                            {
                              name: "render",
                              type: "ToolCallContentPartComponent<{}, {}>",
                              description:
                                "The component to render when submit_form is called.",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ]}
/>

### `formTools`

The set of tools to use with `useAssistantForm`, useful for runtimes that do not support client-side tool definitions (i.e. Vercel AI SDK).

```tsx {1, 5-7}
import { formTools } from "@assistant-ui/react-hook-form";

const result = streamText({
  ...
  tools: {
    ...formTools,
  }
});
```



================================================
File: apps/docs/content/docs/api-reference/integrations/vercel-ai-sdk.mdx
================================================
---
title: "@assistant-ui/react-ai-sdk"
---

Vercel AI SDK integration for assistant-ui.

import { ParametersTable } from "@/components/docs";

## API Reference

### `useVercelUseChatRuntime`

Convert Vercel AI SDK chat helpers into a `AssistantRuntime`.

```tsx
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const chat = useChat();
  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "chat",
      type: "ReturnType<typeof useChat>",
      description: "The UseChatHelpers from ai/react.",
    },
  ]}
/>

### `useVercelUseAssistantRuntime`

Convert Vercel AI SDK assistant helpers into a `AssistantRuntime`.

```tsx
import { useVercelUseAssistantRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const assistant = useAssistant();
  const runtime = useVercelUseAssistantRuntime(assistant);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "assistant",
      type: "ReturnType<typeof useAssistant>",
      description: "The UseAssistantHelpers from ai/react.",
    },
  ]}
/>

### `useVercelRSCRuntime`

Convert Vercel RSC runtime into a `AssistantRuntime`.

```tsx
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    const message = await continueConversation(input);

    setMessages((currentConversation) => [...currentConversation, message]);
  };

  const runtime = useVercelRSCRuntime({ messages, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "adapter",
      type: "VercelRSCAdapter<TMessage>",
      description: "The Vercel RSC adapter to use.",
      children: [
        {
          type: "VercelRSCAdapter<TMessage>",
          parameters: [
            {
              name: "messages",
              type: "readonly ThreadMessage[]",
              description: "The messages in the thread.",
            },
            {
              name: "onNew",
              type: "(message: AppendMessage) => Promise<void>",
              description: "A function to append a message to the thread.",
            },
            {
              name: "onEdit",
              type: "(message: AppendMessage) => Promise<void>",
              description: "A function to edit a message.",
            },
            {
              name: "onReload",
              type: "(parentId: string | null) => Promise<void>",
              description: "A function to reload a message.",
            },
            {
              name: "convertMessage",
              type: "(message: TMessage) => VercelRSCMessage",
              description:
                "A function to convert messages to the VercelRSCMessage format. Only required if your message objects are not already compatible with Vercel RSC.",
            },
          ],
        },
      ],
    },
  ]}
/>



================================================
File: apps/docs/content/docs/api-reference/primitives/ActionBar.mdx
================================================
---
title: ActionBarPrimitive
---

Buttons to interact with the message.

import { ParametersTable, DataAttributesTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";

## Anatomy

```tsx
import { ActionBarPrimitive } from "@assistant-ui/react";

const UserMessageBar = () => (
  <ActionBarPrimitive.Root>
    <ActionBarPrimitive.Edit />
    <ActionBarPrimitive.Copy />
  </ActionBarPrimitive.Root>
);

const AssistantMessageBar = () => (
  <ActionBarPrimitive.Root>
    <ActionBarPrimitive.Reload />
    <ActionBarPrimitive.Copy />
  </ActionBarPrimitive.Root>
);
```

## API Reference

### Container

Containts all parts of the action bar.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "hideWhenRunning",
      type: "boolean",
      default: "false",
      description: (
        <span>
          Do not render the ActionBar when the thread is in running state.
        </span>
      ),
    },
    {
      name: "autohide",
      type: '"always" | "not-last" | "never"',
      default: '"never"',
      description: (
        <span>
          Do not render the ActionBar unless the mouse is hovering over the
          message.
          <br />
          <br />
          <Code>"always"</Code>: always autohide.
          <br />
          <Code>"not-last"</Code>; only autohide if the message is not the last
          one in the thread.
        </span>
      ),
    },
    {
      name: "autohideFloat",
      type: '"always" | "single-branch" | "never"',
      default: '"never"',
      description: (
        <span>
          Float the ActionBar during autohide.
          <br />
          <br />
          <Code>"always"</Code>: always float during autohide.
          <br />
          <Code>"single-branch"</Code>: only float if the message is the only
          one in the thread.
          <br />
          <br />
          Note: this only sets `data-floating` on the ActionBar. You need to set
          the appropriate styles on the ActionBar to make it float.
        </span>
      ),
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-floating]",
      values: "Present when floating",
    },
  ]}
/>

### Edit

Enables edit mode on user message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveEditProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Reload

Regenerates the assistant message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveReloadProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>{" "}

### Copy

Copies the message to the clipboard.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveCopyProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "copiedDuration",
      type: "number",
      description:
        "The duration in milliseconds to change the message status to 'copied'.",
      default: "3000",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-copied]",
      values: "Present when the message was recently copied.",
    },
  ]}
/>

#### Copied state

Show a different icon for a few seconds after the message is copied.

```tsx
<ActionBarPrimitive.Copy>
  <MessagePrimitive.If copied={false}>
    <CopyIcon />
  </MessagePrimitive.If>
  <MessagePrimitive.If copied>
    <CopySuccessIcon />
  </MessagePrimitive.If>
</ActionBarPrimitive.Copy>
```

or using the `data-copied` attribute:

```tsx
<ActionBarPrimitive.Copy className="group">
  <CopyIcon className="group-data-[copied]:hidden" />
  <CheckIcon className="hidden group-data-[copied]:block" />
</ActionBarPrimitive.Copy>
```

### Speak

Plays the message text as speech.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveSpeakProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### StopSpeaking

Stops the message text from being played as speech.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveStopSpeakingProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Feedback Positive

Shows a positive feedback submission button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveFeedbackPositiveProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-submitted]",
      values: "Present when positive feedback was submitted.",
    },
  ]}
/>

### Feedback Negative

Shows a negative feedback submission button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveFeedbackNegativeProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-submitted]",
      values: "Present when negative feedback was submitted.",
    },
  ]}
/>



================================================
File: apps/docs/content/docs/api-reference/primitives/AssistantModal.mdx
================================================
---
title: AssistantModalPrimitive
---

A modal chat UI usually displayed in the bottom right corner of the screen.

import { Code } from "@radix-ui/themes";
import { ParametersTable, DataAttributesTable } from "@/components/docs";

## Anatomy

```tsx
import { AssistantModalPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <AssistantModalPrimitive.Root>
    <AssistantModalPrimitive.Trigger>
      <FloatingAssistantButton />
    </AssistantModalPrimitive.Trigger>
    <AssistantModalPrimitive.Content>
      <Thread />
    </AssistantModalPrimitive.Content>
  </AssistantModalPrimitive.Root>
);
```

## API Reference

### Root

Contains all parts of the assistant modal.

<ParametersTable
  type="AssistantModalPrimitiveRootProps"
  parameters={[
    {
      name: "defaultOpen",
      type: "boolean",
      default: "false",
      description:
        "The open state of the assistant modal when it is initially rendered. Use when you do not need to control its open state.",
    },
    {
      name: "open",
      type: "boolean",
      description:
        "Not recommended. The controlled open state of the assistant modal. Must be used in conjunction with onOpenChange.",
    },
    {
      name: "onOpenChange",
      type: "(open: boolean) => void",
      description:
        "Event handler called when the open state of the assistant modal changes.",
    },
    {
      name: "modal",
      type: "boolean",
      default: "false",
      description:
        "The modality of the assistant modal. When set to true, interaction with outside elements will be disabled and only modal content will be visible to screen readers.",
    },
  ]}
/>

### Trigger

A button that toggles the open state of the assistant modal. `AssistantModalPrimitive.Content` will position itself against this button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="AssistantModalPrimitiveTriggerProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-state]",
      values: <Code>"open" | "closed"</Code>,
    },
  ]}
/>

### Anchor

The anchor element that the assistant modal is attached to. Defaults to the `Trigger` element.

This primitive renders a `<div>` element unless `asChild` is set.

### Content

The component that pops out when the assistant modal is open.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AssistantModalPrimitiveContentProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "side",
      type: "'top' | 'right' | 'bottom' | 'left'",
      default: "'top'",
      description: "The side of the assistant modal to position against.",
    },
    {
      name: "align",
      type: "'start' | 'center' | 'end'",
      default: "'end'",
      description: "The alignment of the assistant modal to position against.",
    },
    {
      name: "dissmissOnInteractOutside",
      type: "boolean",
      default: "false",
      description:
        "Dismiss the assistant modal when the user interacts outside of it.",
    },
  ]}
/>

Refer to Radix UI's Documentation for [Popover.Content](https://www.radix-ui.com/primitives/docs/components/popover#content) for more details.



================================================
File: apps/docs/content/docs/api-reference/primitives/Attachment.mdx
================================================
---
title: AttachmentPrimitive
---

Buttons to interact with attachments.

import { ParametersTable, DataAttributesTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";
import { Callout } from "fumadocs-ui/components/callout";

<Callout>
  **Dual Use!** Attachments can appear in both messages and composers.
</Callout>

## Anatomy

```tsx
import { AttachmentPrimitive } from "@assistant-ui/react";

const MyMessageAttachment = () => (
  <AttachmentPrimitive.Root>
    <AttachmentPrimitive.Thumbnail />
    <AttachmentPrimitive.Name />
  </AttachmentPrimitive.Root>
);

const MyComposerAttachment = () => (
  <AttachmentPrimitive.Root>
    <AttachmentPrimitive.Thumbnail />
    <AttachmentPrimitive.Name />
    <AttachmentPrimitive.Remove />
  </AttachmentPrimitive.Root>
);
```

## API Reference

### Container

Containts all parts of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Thumbnail

The thumbnail of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveThumbnailProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Name

The name of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveNameProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Remove

Removes the attachment.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveRemoveProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>



================================================
File: apps/docs/content/docs/api-reference/primitives/BranchPicker.mdx
================================================
---
title: BranchPickerPrimitive
---

View and switch between branches.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { BranchPickerPrimitive } from "@assistant-ui/react";

const BranchPicker = () => (
  <BranchPickerPrimitive.Root>
    <BranchPickerPrimitive.Previous />
    <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
    <BranchPickerPrimitive.Next />
  </BranchPickerPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the branch picker.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "hideWhenSingleBranch",
      type: "boolean",
      default: "false",
      description:
        "Do not render the BranchPicker when there is only one branch at the current message.",
    },
  ]}
/>

### Number

The current branch number.

This primitive renders the raw number as a string.

### Count

The total number of branches.

This primitive renders the raw number as a string.

### Previous

Navigates to the previous branch.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitivePreviousProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Next

Navigates to the next branch.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitiveNextProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>



================================================
File: apps/docs/content/docs/api-reference/primitives/Composer.mdx
================================================
---
title: ComposerPrimitive
---

The user interface to add new messages or edit existing ones.

import { Callout } from "fumadocs-ui/components/callout";

import { ParametersTable, KeyboardTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";

<Callout>
  **Dual Use!** A Composer placed directly inside a `Thread` will compose new
  messages. A Composer placed inside a `Message` will edit that message.
</Callout>

## Anatomy

```tsx
import { ComposerPrimitive } from "@assistant-ui/react";

// creating a new message
const Composer = () => (
  <ComposerPrimitive.Root>
    <ComposerPrimitive.Attachments />
    <ComposerPrimitive.AddAttachment />
    <ComposerPrimitive.Input />
    <ComposerPrimitive.Send />
  </ComposerPrimitive.Root>
);

// editing an existing message
const EditComposer = () => (
  <ComposerPrimitive.Root>
    <ComposerPrimitive.Input />
    <ComposerPrimitive.Send />
    <ComposerPrimitive.Cancel />
  </ComposerPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the composer.

This primitive renders a `<form>` element unless `asChild` is set.

<ParametersTable
  type="ComposerRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Input

The text input field for the user to type a new message.

This primitive renders a `<textarea>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveInputProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

#### Keyboard Shortcuts

<KeyboardTable
  data={[
    {
      keys: ["Enter"],
      description: "Sends the message.",
    },
    {
      keys: ["Escape"],
      description: "Sends a cancel action.",
    },
  ]}
/>

### Send

The button to send the message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveSendProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "multiple",
      type: "boolean | undefined",
      description: "Allow selecting multiple attachments at the same time.",
      default: "true",
    },
  ]}
/>

### Cancel

Sends a cancel action.

In edit composers, this action exits the edit mode.  
In thread composers, this action stops the current run.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveCancelProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Attachments

Renders attachments. This primitive renders a separate component for each attachment.

<ParametersTable
  type="ComposerPrimitiveAttachmentsProps"
  parameters={[
    {
      name: "components",
      type: "ComposerAttachmentsComponents",
      description: "The component to render for each attachment.",
      children: [
        {
          type: "ComposerPrimitiveAttachmentsProps['components']",
          parameters: [
            {
              name: "Image",
              type: "ComponentType",
              description: "The component to render for each image attachment.",
            },
            {
              name: "Document",
              type: "ComponentType",
              description:
                "The component to render for each document attachment.",
            },
            {
              name: "File",
              type: "ComponentType",
              description: "The component to render for each file attachment.",
            },
            {
              name: "Fallback",
              type: "ComponentType",
              description: "The component to render for each attachment type.",
            },
          ],
        },
      ],
    },
  ]}
/>

### AddAttachment

Renders a button to add an attachment.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveAddAttachmentProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="UseComposerIfProps"
  parameters={[
    {
      name: "editing",
      required: false,
      type: "boolean | undefined",
      description: "Render children if the message is being edited.",
    },
  ]}
/>

```tsx
<Composer.If editing>{/* rendered if message is being edited */}</Composer.If>
```



================================================
File: apps/docs/content/docs/api-reference/primitives/ContentPart.mdx
================================================
---
title: ContentPartPrimitive
description: A part of a message's content. Content parts may be text, image, tool call or UI elements.
---

import { ParametersTable } from "@/components/docs";
import {
  ContentPartRuntime,
  TextContentPartState,
  AudioContentPartState,
  ToolCallContentPartState,
} from "@/generated/typeDocs";

Each message can have any number of content parts.  
Content parts are usually one of text, reasoning, audio or tool-call.

## Content Part Types

### Text

Standard text content, used for both user and assistant messages.

### Reasoning

Exposes the assistant's reasoning process, showing how it arrived at its responses. This is typically used only in assistant messages.

### Audio

Audio content that can be played back.

### Tool Call

Interactive elements that represent tool operations.

## Anatomy

```tsx
import { ContentPartPrimitive } from "@assistant-ui/react";

const TextContentPart = () => {
  return <ContentPartPrimitive.Text />;
};
```

## Primitives

### Plain Text

```tsx
import { ContentPartPrimitive } from "@assistant/react";

<ContentPartPrimitive.Text />;
```

### Markdown Text

Renders the message's text as Markdown.

```tsx
import { MarkdownTextPrimitive } from "@assistant-ui/react-markdown";

<MarkdownTextPrimitive />;
```

### Audio

Coming soon.

### InProgress

Renders children only if the content part is in progress.

```tsx
import { ContentPartPrimitive } from "@assistant/react";

<ContentPartPrimitive.InProgress>
  <LoadingIndicator />
</ContentPartPrimitive.InProgress>;
```

### Tool UI

You can map tool calls to UI components. We provide a few utility functions to make this easier, such as `makeAssistantToolUI`.

```tsx
const MyWeatherToolUI = makeAssistantToolUI({
  toolName: "get_weather",
  render: function MyWeatherToolUI({ args, result }) {
    return (
      <div className="mb-4 flex flex-col items-center">
        <pre className="whitespace-pre-wrap break-all text-center">
          get_weather({JSON.stringify(args)})
        </pre>
        {"result" in result && (
          <pre className="whitespace-pre-wrap break-all text-center">
            {JSON.stringify(result.result)}
          </pre>
        )}
      </div>
    );
  },
});
```

## Context Provider

Content part context is provided by `MessagePrimitive.Content` or `TextContentPartProvider`

### MessagePrimitive.Content

```tsx
import { MessagePrimitive } from "@assistant/react";

<MessagePrimitive.Content
  components={{
    Text: MyText,
    Reasoning: MyReasoning,
    Audio: MyAudio,
    tools: {
      by_name: {
        get_weather: MyWeatherToolUI,
      },
      Fallback: MyFallbackToolUI,
    },
  }}
/>;
```

### TextContentPartProvider

This is a helper context provider to allow you to reuse the content part components outside a message content part.

```tsx
import { TextContentPartProvider } from "@assistant-ui/react";

<TextContentPartProvider text="Hello world" isRunning={false}>
  <ContentPart.Text />
</TextContentPartProvider>;
```

## Runtime API

### `useContentPartRuntime`

```tsx
import { useContentPartRuntime } from "@assistant-ui/react";

const contentPartRuntime = useContentPartRuntime();
```

<ParametersTable {...ContentPartRuntime} />

### `useContentPart`

```tsx
import { useContentPart } from "@assistant-ui/react";

const contentPart = useContentPart();
```

<ParametersTable {...TextContentPartState} />
<ParametersTable {...AudioContentPartState} />
<ParametersTable {...ToolCallContentPartState} />

### `useContentPartText`

```tsx
import { useContentPartText } from "@assistant-ui/react";

const contentPartText = useContentPartText();
```

<ParametersTable {...TextContentPartState} />



================================================
File: apps/docs/content/docs/api-reference/primitives/Message.mdx
================================================
---
title: MessagePrimitive
---

A single message in a conversation. Messages may consist of multiple parts.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { MessagePrimitive } from "@assistant-ui/react";

const UserMessage = () => (
  <MessagePrimitive.Root>
    User: <MessagePrimitive.Content />
    <BranchPicker />
    <ActionBar />
  </MessagePrimitive.Root>
);

const AssistantMessage = () => (
  <MessagePrimitive.Root>
    Assistant: <MessagePrimitive.Content />
    <BranchPicker />
    <ActionBar />
  </MessagePrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the message.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="MessagePrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Content

The content of the message. This renders a separate component for each content part of the message.

<ParametersTable
  type="MessagePrimitiveContentProps"
  parameters={[
    {
      name: "components",
      required: false,
      type: "ContentPartComponents",
      description: "The components to render for each content part.",
      children: [
        {
          type: "ContentPartComponents",
          parameters: [
            {
              name: "Text",
              type: "TextContentPartComponent",
              description:
                "The component to render for each text content part.",
            },
            {
              name: "Image",
              type: "ImageContentPartComponent",
              description:
                "The component to render for each image content part.",
            },
            {
              name: "Source",
              type: "SourceContentPartComponent",
              description:
                "The component to render for each source content part.",
            },
            {
              name: "File",
              type: "FileContentPartComponent",
              description:
                "The component to render for each file content part.",
            },
            {
              name: "Unstable_Audio",
              type: "Unstable_AudioContentPartComponent",
              description:
                "The component to render for each audio content part.",
            },
            {
              name: "tools",
              type: "object",
              description:
                "The component to render for each tool call content part.",
              children: [
                {
                  parameters: [
                    {
                      name: "by_name",
                      type: "Record<string, ToolCallContentPartComponent>",
                      description:
                        "The components to render for each tool call content part.",
                    },
                    {
                      name: "Fallback",
                      type: "ToolCallContentPartComponent",
                      description:
                        "The fallback component to render for tool call content parts.",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="UseMessageIfProps"
  parameters={[
    {
      name: "user",
      type: "boolean | undefined",
      description: "Render children if the message is from the user.",
    },
    {
      name: "assistant",
      type: "boolean | undefined",
      description: "Render children if the message is from the assistant.",
    },
    {
      name: "hasBranches",
      type: "boolean | undefined",
      description: "Render children if the message has branches.",
    },
    {
      name: "copied",
      type: "boolean | undefined",
      description: "Render children if the message is copied.",
    },
    {
      name: "lastOrHover",
      type: "boolean | undefined",
      description:
        "Render children if the message is the last or hovered over.",
    },
  ]}
/>

```tsx
<Message.If user>
  {/* rendered if message is from the user */}
</Message.If>
<Message.If assistant>
  {/* rendered if message is from the assistant */}
</Message.If>
```



================================================
File: apps/docs/content/docs/api-reference/primitives/Thread.mdx
================================================
---
title: ThreadPrimitive
---

A conversation between a user and an assistant.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <ThreadPrimitive.Root>
    <ThreadPrimitive.Viewport>
      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>
      <ThreadPrimitive.Messages components={...} />
    </ThreadPrimitive.Viewport>
    <Composer />
  </ThreadPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the thread.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveViewportProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "autoScroll",
      type: "boolean",
      default: "true",
      description:
        "Whether to automatically scroll to the bottom of the viewport when new messages are added while the viewport is was previously scrolled to the bottom.",
    },
  ]}
/>

### Messages

Renders all messages. This primitive renders a separate component for each message.

<ParametersTable
  type="ThreadPrimitiveMessagesProps"
  parameters={[
    {
      name: "components",
      type: "MessageComponents",
      description: "The component to render for each message.",
      children: [
        {
          type: "MessageComponents",
          parameters: [
            {
              name: "Message",
              type: "ComponentType",
              description: "The component to render for each message.",
            },
            {
              name: "UserMessage",
              type: "ComponentType",
              description: "The component to render for user messages.",
            },
            {
              name: "EditComposer",
              type: "ComponentType",
              description:
                "The component to render for user messages that are being edited.",
            },
            {
              name: "AssistantMessage",
              type: "ComponentType",
              description: "The component to render for assistant messages.",
            },
          ],
        },
      ],
    },
  ]}
/>

### Empty

Renders children only when there are no messages.

### ScrollToBottom

A button to scroll the viewport to the bottom. Disabled when the viewport is already at bottom.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveScrollToBottomProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### `ThreadPrimitive.Suggestion`

Shows a suggestion to the user. When the user clicks on the suggestion, the composer's value is set to the suggestion's prompt.

This primitive renders a `<button>` element unless `asChild` is set.

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Suggestion = () => {
  return (
    <ThreadPrimitive.Suggestion
      prompt="I need help with product search"
      method="replace"
      autoSend
    />
  );
};
```

<ParametersTable
  type="ThreadPrimitiveSuggestionProps"
  parameters={[
    {
      name: "prompt",
      type: "string",
      description: "The suggestion's prompt.",
    },
    {
      name: "method",
      type: "'replace'",
      description:
        "How does the suggestion interact with the composer's existing value.",
    },
    {
      name: "autoSend",
      type: "boolean",
      description:
        "Whether to automatically send the suggestion when the user clicks on it.",
      default: "false",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="ThreadPrimitiveIfProps"
  parameters={[
    {
      name: "empty",
      type: "boolean | undefined",
      description: "Render children if the thread is empty.",
    },
    {
      name: "running",
      type: "boolean | undefined",
      description: "Render children if the thread is running.",
    },
  ]}
/>

```tsx
<Thread.If empty>
  {/* equivalent to <Thread.Empty> */}
</Thread.If>
<Thread.If empty={false}>
  {/* rendered if thread is not empty */}
</Thread.If>
```



================================================
File: apps/docs/content/docs/api-reference/primitives/composition.mdx
================================================
---
title: Composition
---

import { Code } from "@radix-ui/themes";

`assistant-ui` primitives are composable. This means that all props are forwarded, classes are merged, and event handlers are chained.

Most primitives come with a default HTML element (usually `div` or `button`). If you already have a custom component, you can use the `asChild` prop to replace it:

```tsx
// use the primitive's <button> element
<Composer.Send>Send</Composer.Send>;

// use your own <Button> component
<Composer.Send asChild>
  <Button>Send</Button>
</Composer.Send>;
```

Learn more on [Radix's composition guide](https://www.radix-ui.com/primitives/docs/guides/composition).



================================================
File: apps/docs/content/docs/api-reference/primitives/meta.json
================================================
{
  "title": "Radix UI Primitives",
  "pages": [
    "AssistantModal",
    "Thread",
    "Composer",
    "Message",
    "BranchPicker",
    "ActionBar",
    "ContentPart",
    "...",
    "composition"
  ]
}



================================================
File: apps/docs/content/docs/api-reference/runtimes/AssistantRuntime.mdx
================================================
---
title: AssistantRuntime
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntime, AssistantToolUIsState } from "@/generated/typeDocs";

The `AssistantRuntime` is the root runtime of the application.

### `useAssistantRuntime`

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";

const runtime = useAssistantRuntime();
```

<ParametersTable {...AssistantRuntime} />

### Tool UI Registry

The tool UI registry is part of the assistant runtime. It allows you to display custom UI for tool calls, enabling generative UI.

#### `useToolUIs`

```tsx
import { useToolUIs } from "@assistant-ui/react";

const toolUIs = useToolUIs();
const webSearchToolUI = useToolUIs((m) => m.getToolUI("web_search"));
```

<ParametersTable {...AssistantToolUIsState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/AttachmentRuntime.mdx
================================================
---
title: AttachmentRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  ComposerAttachmentState,
  MessageAttachmentState,
} from "@/components/docs/parameters/context";

### `useAttachment`

Access the current attachment state:

```tsx
import { useAttachment } from "@assistant-ui/react";

const { attachment } = useAttachment();
const att = useAttachment((m) => m.attachment);
```

### `useComposerAttachment` (Composer)

When working with a composer’s attachment:

```tsx
import { useComposerAttachment } from "@assistant-ui/react";

const { attachment } = useComposerAttachment();
const composerAttachment = useComposerAttachment((m) => m.attachment);
```

<ParametersTable {...ComposerAttachmentState} />

### `useMessageAttachment` (Message)

For managing a message’s attachment:

```tsx
import { useMessageAttachment } from "@assistant-ui/react";

const { attachment } = useMessageAttachment();
const messageAttachment = useMessageAttachment((m) => m.attachment);
```

<ParametersTable {...MessageAttachmentState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/ComposerRuntime.mdx
================================================
---
title: ComposerRuntime
---

import { ParametersTable } from "@/components/docs";
import { ComposerState } from "@/components/docs/parameters/context";

### `useThreadComposer`

Access the thread’s new message composer:

```tsx
import { useThreadComposer } from "@assistant-ui/react";

const composer = useThreadComposer();
const text = useThreadComposer((m) => m.text);
```

<ParametersTable {...ComposerState} />

### `useComposer`

Grabs the nearest composer state (whether it’s the edit composer or the thread’s new message composer):

```tsx
import { useComposer } from "@assistant-ui/react";

const composer = useComposer();
const text = useComposer((m) => m.text);
```



================================================
File: apps/docs/content/docs/api-reference/runtimes/ContentPartRuntime.mdx
================================================
---
title: ContentPartRuntime
---

import { ParametersTable } from "@/components/docs";
import { ContentPartState } from "@/components/docs/parameters/context";

### `useContentPart`

Access the content part state:

```tsx
import { useContentPart } from "@assistant-ui/react";

const part = useContentPart();
const partState = useContentPart.getState();

const status = useContentPart((m) => m.status);
const statusAgain = useContentPart.getState().status;
```

<ParametersTable {...ContentPartState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/MessageRuntime.mdx
================================================
---
title: MessageRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  MessageState,
  MessageUtilsState,
  EditComposerState,
} from "@/components/docs/parameters/context";

### `useMessage`

Retrieve the message object:

```tsx
import { useMessage } from "@assistant-ui/react";

const { message } = useMessage();
const msg = useMessage((m) => m.message);
```

<ParametersTable {...MessageState} />

### `useMessageUtils`

Provides utility functions for a message (e.g., copy status):

```tsx
import { useMessageUtils } from "@assistant-ui/react";

const messageUtils = useMessageUtils();
const isCopied = useMessageUtils((m) => m.isCopied);
```

<ParametersTable {...MessageUtilsState} />

### `useEditComposer`

Access the edit composer state (used when editing a message):

```tsx
import { useEditComposer } from "@assistant-ui/react";

const editComposer = useEditComposer();
const text = useEditComposer((m) => m.text);
```

<ParametersTable {...EditComposerState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/ThreadListItemRuntime.mdx
================================================
---
title: ThreadListItemRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  ThreadListItemRuntime,
  ThreadListItemState,
} from "@/generated/typeDocs";

### `useThreadListItemRuntime`

```tsx
import { useThreadListItemRuntime } from "@assistant-ui/react";

const threadListItemRuntime = useThreadListItemRuntime();
```

<ParametersTable {...ThreadListItemRuntime} />

### `useThreadListItem`

Access the state for a specific thread list item:

```tsx
import { useThreadListItem } from "@assistant-ui/react";

const threadListItem = useThreadListItem();
const title = useThreadListItem((m) => m.title);
```

<ParametersTable {...ThreadListItemState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/ThreadListRuntime.mdx
================================================
---
title: ThreadListRuntime
---

import { ParametersTable } from "@/components/docs";
import { ThreadListRuntime, ThreadListState } from "@/generated/typeDocs";

### Access via `useAssistantRuntime`

You can access the thread list runtime via the assistant runtime:

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";

const threadListRuntime = useAssistantRuntime().threadList;
```

<ParametersTable {...ThreadListRuntime} />

### `useThreadList`

This hook provides access to the thread list state:

```tsx
import { useThreadList } from "@assistant-ui/react";

const threadList = useThreadList();
const threads = useThreadList((m) => m.threads);
```

<ParametersTable {...ThreadListState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/ThreadRuntime.mdx
================================================
---
title: ThreadRuntime
---

import { ParametersTable } from "@/components/docs";
import { ThreadRuntime, ThreadState } from "@/generated/typeDocs";
import {
  ThreadMessagesState,
  ThreadViewportState,
} from "@/components/docs/parameters/context";

### `useThreadRuntime`

Get the thread runtime object:

```tsx
import { useThreadRuntime } from "@assistant-ui/react";

const thread = useThreadRuntime();
```

<ParametersTable {...ThreadRuntime} />

### `useThread`

Access the thread state directly:

```tsx
import { useThread } from "@assistant-ui/react";

const thread = useThread();
const isRunning = useThread((m) => m.isRunning);
```

<ParametersTable {...ThreadState} />

### `useThreadMessages`

Work with the messages within a thread:

```tsx
import { useThreadMessages } from "@assistant-ui/react";

const messages = useThreadMessages();
const firstMessage = useThreadMessages((m) => m[0]);
```

<ParametersTable {...ThreadMessagesState} />

### `useThreadViewport`

Manage thread viewport state (e.g., scrolling):

```tsx
import { useThreadViewport } from "@assistant-ui/react";

const threadViewport = useThreadViewport();
const isAtBottom = useThreadViewport((m) => m.isAtBottom);
```

<ParametersTable {...ThreadViewportState} />



================================================
File: apps/docs/content/docs/api-reference/runtimes/meta.json
================================================
{
  "title": "Runtime Hooks",
  "pages": [
    "AssistantRuntime",
    "ThreadRuntime",
    "ComposerRuntime",
    "MessageRuntime",
    "ContentPartRuntime",
    "AttachmentRuntime",
    "ThreadListRuntime",
    "ThreadListItemRuntime"
  ]
}



================================================
File: apps/docs/content/docs/cloud/authorization.mdx
================================================
---
title: User Authorization
---

The assistant-ui API can be directly accessed by your frontend. This elliminates the need for a backend server from your side, except for authorization of your users.

This document explains how you can setup your server to authorize users to access the assistant-ui API.

## Workspaces

Authorization is granted to a workspace. Depending on the structure of your app, you might want to use user_ids as the workspace_id, or you might want to use a more complex structure.
For example, if your app supports multiple "projects", you might want to use the project_id + user_id as the workspace id (thread history scoped to user+project pairs).

## Workspace Auth Tokens

assistant-ui issues workspace auth tokens. These tokens give access to the assistant-ui API for a specific workspace.
Tokens are short lived (5 minutes), so the client needs to periodically request a new token (handled by assistant-ui).

There are two supported approaches to obtain a workspace auth token:

- Direct integration with your auth provider
- From a backend server / serverless function

### Choosing the right approach

Direct integration with your auth provider:

- simpler to setup and maintain
- assigns a workspace_id to every user (by using the user_id as the workspace_id)
- requires a supported auth provider (Clerk, Auth0, Supabase, Firebase, Stytch, Kinde, ...)

Backend server:

- more complex to setup
- more flexible workspace structure (multi-user workspaces, workspaces per project, etc.)
- supports self hosted auth solutions, e.g. Auth.js
- requires a backend server / serverless function

You can always switch between the two approaches without any downtime or necessary database migrations.
Choose direct integration with your auth provider if you can. Otherwise, use a backend server.

### Auth Provider Integration

In the dashboard, go to the "Auth Integrations" tab and add a new integration.
Follow the steps to add your auth provider.

Then, pass in a function to `authToken` that returns an ID token from your auth provider.
The following is an example for Clerk:

```ts
import { AssistantCloud } from "@assistant-ui/cloud";

const assistantCloud = new AssistantCloud({
  authToken: () => clerkClient.sessions.getToken(auth(), "assistant-ui"),
});
```

### Backend Integration

In the dashboard, go to the "API Keys" tab and add a new API key.

Then, in a backend route, call `assistantCloud.auth.getToken({ workspaceId })`.

The following is an example to get auth tokens for Clerk based on the org_id and user_id:

```ts title="/app/api/assistant-ui-token/route.ts"
import { AssistantCloud } from "@assistant-ui/cloud";

const assistantCloud = new AssistantCloud({
  apiKey: <your api key>,
});

export const POST = async (req: Request) => {
  const { org_id, user_id } = auth();

  if (!user_id) throw new Error("User not authenticated");

  const workspaceId = org_id ? `${org_id}:${user_id}` : user_id;
  const authToken = assistantCloud.auth.tokens.create({ workspaceId });

  return new Response(token);
};
```

```ts title="client.ts"
import { AssistantCloud } from "@assistant-ui/cloud";

const assistantCloud = new AssistantCloud({
  authToken: () =>
    fetch("/api/assistant-ui-token", { method: "POST" }).then((r) => r.json()),
});
```

### Clerk

First, go to the Clerk dashboard and under "Configure" tab, "JWT Templates" section, create a new template. Choose a blank template and name it "assistant-ui".

As the "Claims" field, enter the following:

```json
{
  "aud": "assistant-ui"
}
```

<Callout emoji="⚠️">
  <b>Note:</b> The aud claim ensures that the JWT is only valid for the
  assistant-ui API.
</Callout>

You can leave everything else as default. Take note of the "Issuer" and "JWKS Endpoint" fields.

Then, In the assistant-cloud dashboard, navigate to the "Auth Rules" tab and create a new rule. Choose "Clerk" and enter the Issuer and JWKS Endpoint from the previous step. As the "Audience" field, enter "assistant-ui".



================================================
File: apps/docs/content/docs/cloud/meta.json
================================================
{
  "pages": ["overview", "authorization", "persistence"]
}



================================================
File: apps/docs/content/docs/cloud/overview.mdx
================================================
---
title: Overview
---

Assistant Cloud is a hosted service built for assistant-ui frontends.

## Features

### Thread management

Using our `<ThreadList />` component, show the users a list of conversations. Allow the users to seamlessly switch between conversations and even let long running tasks run in the background.

Assistant Cloud automatically persists a list of threads and corresponding metadata. It also automatically generates a title for conversations based on the initial messages.

Supported backends:

- AI SDK
- LangGraph
- Custom

### Chat history

For every conversation, Assistant Cloud can store the history of messages, allowing the user to resume the conversation at any point in time.
This supports human in the loop workflows, where the execution of an agent is interrupted until user feedback is collected.

Supported backends:

- AI SDK
- LangGraph
- Custom (currently only Local Runtime)

### Authorization

Assistant Cloud integrates with your auth provider (Clerk, Auth0, Supabase, Firebase, ...) to identify your users and authorize them to access just the conversations they are allowed to see.

Supported auth providers:

- Clerk
- Auth0
- Supabase
- Firebase
- Your own

## Getting Started

To get started, follow the walkthrough for your preferred backend:

- [AI SDK](/docs/cloud/persistence/ai-sdk)
- [LangGraph](/docs/cloud/persistence/langgraph)

You can also check out our example repositories to see how to integrate Assistant Cloud with your frontend:

- [With AI SDK](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-cloud)
- [With LangGraph](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-langgraph)



================================================
File: apps/docs/content/docs/cloud/persistence/ai-sdk.mdx
================================================
---
title: Chat History for AI SDK
---

## Overview

With the help of assistant-cloud, you can add thread management and thread history capabilities to assistant-ui.  
This guide will walk you through the process of integrating assistant-cloud with the AI SDK by Vercel.

### Prerequisites

You need an assistant-cloud account to follow this guide.  
You can sign up here: https://cloud.assistant-ui.com/

### Setting up an assistant-cloud project

To get started, follow the steps below:

- Create a new project on the assistant-cloud dashboard.
- Navigate to the "Settings" tab and copy the Frontend API URL.
- Add this URL to your .env file

```bash
NEXT_PUBLIC_ASSISTANT_BASE_URL=https://<your-frontend-api-url>
```

### Displaying a ThreadList component

Now, you can add a ThreadList component to your application. This component will display a list of threads and allow users to switch between them.

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread-list"
```

```tsx
<div className="grid grid-cols-[250px_1fr]">
  <ThreadList />
  <Thread />
</div>
```



================================================
File: apps/docs/content/docs/cloud/persistence/langgraph.mdx
================================================
---
title: Chat History for LangGraph Cloud
---

## Overview

With the help of assistant-cloud, you can add thread management and thread history capabilities to assistant-ui.  
This guide will walk you through the process of integrating assistant-cloud with LangGraph Cloud.

### Prerequisites

You need an assistant-cloud account to follow this guide.  
You can sign up here: https://cloud.assistant-ui.com/

### Setting up an assistant-cloud project

To get started, follow the steps below:

- Create a new project on the assistant-cloud dashboard.
- Navigate to the "Settings" tab and copy the Frontend API URL.
- Add this URL to your .env file

```bash
NEXT_PUBLIC_ASSISTANT_BASE_URL=https://<your-frontend-api-url>
```

### Connecting the runtime provider

Now that we have everything set up, let's write the code for the runtime provider.

The code below is a simple LangGraph runtime provider that uses the assistant-cloud API to create and manage threads.

```tsx twoslash {1-2,5-6,19,27,29-36,38-45}
// @errors: 2307

"use client";

import {
  AssistantCloud,
  AssistantRuntimeProvider,
  useCloudThreadListRuntime,
  useThreadListItemRuntime,
} from "@assistant-ui/react";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";
import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";
import { LangChainMessage } from "@assistant-ui/react-langgraph";
import { useAuth } from "@clerk/nextjs";
import { useMemo } from "react";

// ---cut---
const useMyLangGraphRuntime = () => {
  const threadListItemRuntime = useThreadListItemRuntime();
  const runtime = useLangGraphRuntime({
    stream: async function* (messages) {
      const { externalId } = await threadListItemRuntime.initialize();
      if (!externalId) throw new Error("Thread not found");

      return sendMessage({ threadId: externalId, messages });
    },
    onSwitchToThread: async (externalId) => {
      const state = await getThreadState(externalId);
      return {
        messages:
          (state.values as { messages?: LangChainMessage[] }).messages ?? [],
      };
    },
  });

  return runtime;
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getToken } = useAuth();

  const cloud = useMemo(
    () =>
      new AssistantCloud({
        baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
        authToken: async () => getToken({ template: "assistant-ui" }),
      }),
    [getToken],
  );

  const runtime = useCloudThreadListRuntime({
    cloud,
    runtimeHook: useMyLangGraphRuntime,
    create: async () => {
      const { thread_id } = await createThread();
      return { externalId: thread_id };
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

<Callout emoji="💡">
  Observe that the `useMyLangGraphRuntime` hook is extracted into a separate
  function. This hook will be mounted multiple times, once per active thread.
</Callout>

### Displaying a ThreadList component

Now, you can add a ThreadList component to your application. This component will display a list of threads and allow users to switch between them.

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread-list"
```

```tsx
<div className="grid grid-cols-[250px_1fr]">
  <ThreadList />
  <Thread />
</div>
```



================================================
File: apps/docs/content/docs/cloud/persistence/meta.json
================================================
{
  "title": "Chat History",
  "pages": ["ai-sdk", "langgraph"]
}



================================================
File: apps/docs/content/docs/concepts/architecture.mdx
================================================
---
title: Architecture
---

import Image from "next/image";
import architecture from "@/assets/docs/architecture.png";

### Architecture

`assistant-ui` consists of two parts, **_Runtime_** and **_UI Components_**.

<Image
  src={architecture}
  alt="Architecture diagram, UI components connected to the runtime layer and the runtime layer connected to LLM and tools"
  height={300}
  className="mx-auto my-2 dark:hue-rotate-180 dark:invert"
/>

The Runtime and UI Components each require independent setup and both must be set up.



================================================
File: apps/docs/content/docs/concepts/meta.json
================================================
{
  "title": "Concepts",
  "pages": ["architecture", "runtime-layer"]
}



================================================
File: apps/docs/content/docs/concepts/runtime-layer.mdx
================================================
---
title: Runtime Layer
---

assistant-ui components are full stack components. This means that they include both the UI presentation, but also logic to communicate with an external system. This logic is handled by the runtime layer and APIs.

You interact with the runtime layer in two ways:

- defining a runtime for your app
- using the runtime APIs to interact with the runtime

## Defining a runtime

assistant-ui ships with two low-level runtimes:

- `useLocalRuntime`
- `useExternalStoreRuntime`

Both of these runtimes let you implement your own runtime. The conceptual difference between the two is that `useLocalRuntime` takes ownership of the data layer, while `useExternalStoreRuntime` does not.

If you have a stateful API to integrate, use `useExternalStoreRuntime`, if you have a stateless API to integrate, use `useLocalRuntime`.

### Higher level runtimes

For many services and APIs, assistant-ui provides deeper integrations. These are built with the two low-level runtimes mentioned above.

- `useChatRuntime`: Connect to Vercel AI SDK backends
- `useVercelUseChatRuntime`: Integrate with Vercel AI SDK's `useChat` hook
- `useVercelUseAssistantRuntime`: Integrate with Vercel AI SDK's `useAssistant` hook (OpenAI Assistants API)
- `useVercelRSCRuntime`: Integrate with Vercel AI SDK React Server Components
- `useLangGraphRuntime`: Connect to LangGraph Cloud
- ...

### Runtime Providers

The following components accept a `runtime` prop:

- `AssistantRuntimeProvider`
- `Thread`

These components put the Runtime in the React Context, so that all child components can access the runtime.

### Runtime Adapters

Most runtimes accept additional adapters to configure extra integrations:

- ChatModelAdapter: Configures the backend API
- AttachmentAdapter: Configures the file/media attachment API
- SpeechSynthesisAdapter: Configures the speech API
- FeedbackAdapter: Configures the feedback API
- SuggestionAdapter: Configures dynamic suggestion generation based on conversation context

## Using the runtime APIs

The same API used by the assistant-ui components is also available to you. This allows you to build your own UI components and integrate them with the runtime layer.

### Runtime Hierarchy

The runtime API is nested as such:

import { File, Folder, Files } from "fumadocs-ui/components/files";

<Files>
  <Folder name="AssistantRuntime" defaultOpen>
    <Folder name="ThreadListRuntime" defaultOpen>
      <Folder name="ThreadRuntime" defaultOpen>
        <Folder name="MessageRuntime" defaultOpen>
          <Folder
            name="ContentPartRuntime (Text / Reasoning / Image / Audio / Tool-Call / UI)"
            defaultOpen
          ></Folder>
          <Folder name="MessageAttachmentRuntime" defaultOpen></Folder>
          <Folder name="EditComposerRuntime" defaultOpen>
            <Folder name="EditComposerAttachmentRuntime" defaultOpen></Folder>
          </Folder>
        </Folder>
        <Folder name="ThreadComposerRuntime" defaultOpen>
          <Folder name="ThreadComposerAttachmentRuntime" defaultOpen></Folder>
        </Folder>
      </Folder>
    </Folder>
  </Folder>
</Files>

The AssistantRuntime (which encompasses everything), is sometimes simply called `Runtime`.

### Runtime Context Provider Components

The following components provide the runtime APIs:

```tsx
// provides AssistantRuntime, ThreadListRuntime, ThreadRuntime, ComposerRuntime (ThreadComposer)
<AssistantRuntimeProvider runtime={runtime} />

// renders every message, provides MessageRuntime, ComposerRuntime (EditComposer)
<ThreadPrimitive.Messages components={{ Message, ... }} />

// renders every content part, provides ContentPartRuntime
<MessagePrimitive.Content components={{ Text, Reasoning, Image, Audio, UI, tools }} />

// renders every attachment, provides AttachmentRuntime (Thread or EditComposer)
<ComposerPrimitive.Attachments components={{ Attachment, ... }} />

// renders every attachment, provides AtatchmentRuntime (Message)
<MessagePrimitive.Attachments components={{ Attachment, ... }} />

// provides a custom TextContentPartRuntime
<TextContentPartProvider text="Hello!" />
```

### Accessing runtime APIs

You can access the runtime APIs with react hooks:

```tsx
const runtime = useAssistantRuntime();
const threadRuntime = useThreadRuntime();
const messageRuntime = useMessageRuntime();
const contentPartRuntime = useContentPartRuntime();

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const ThreadListRuntime = useAssistantRuntime().threads;

// composer runtime is multi-use
const composerRuntime = useComposerRuntime(); // refers to edit composer if available, otherwise thread composer

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const threadComposer = useThreadRuntime().composer;

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const editComposerRuntime = useMessageRuntime().composer;

// attachment runtime is multi-use
const attachmentRuntime = useAttachmentRuntime(); // refers to the closest attachment runtime
const threadComposerAttachmentRuntime = useThreadComposerAttachmentRuntime();
const editComposerAttachmentRuntime = useEditComposerAttachmentRuntime();
const messageAttachmentRuntime = useMessageAttachmentRuntime();
```

### Accessing runtime state

Most runtimes also expose a state through two methods `getState` and `subscribe`. The following helper hooks subscribe to the state, so that your component is updated when the state changes:

```tsx
useThreadList(); // get thread manager state
useThread(); // get thread state
useMessage(); // get message state
useContentPart(); // get content part state
useComposer(); // get composer state
useThreadComposer(); // get thread composer state
useEditComposer(); // get edit composer state
useAttachment(); // get attachment state
useThreadComposerAttachment(); // get thread composer attachment state
useEditComposerAttachment(); // get edit composer attachment state
useMessageAttachment(); // get message attachment state
```

You might not want to subscribe to evey update. In that case, pass a callback selector to the hook:

```tsx
// only subscribe to role changes
const role = useMessage((state) => message.role);
```



================================================
File: apps/docs/content/docs/concepts/why.mdx
================================================
---
title: Why assistant-ui?
---

assistant-ui is a collection of powerful, modular primitives to build AI chat interfaces.

The modular approach means that you can incrementally adopt assistant-ui (e.g. use the backend connectors and bring your own components, or use the frontend compoents and bring your own backend).
You can also partially opt out of assistant-ui whenever you hit any limitation in the library.




================================================
File: apps/docs/content/docs/copilots/make-assistant-readable.mdx
================================================
---
title: makeAssistantVisible
---

`makeAssistantVisible` is a higher-order component (HOC) that makes React components "visible" by the assistant, allowing it to understand and interact with the component's HTML structure.

## Usage

```tsx
import { makeAssistantVisible } from "@assistant-ui/react";

const Button = ({ onClick, children }) => (
  <button onClick={onClick}>{children}</button>
);

// Basic usage - makes component HTML readable
const ReadableButton = makeAssistantVisible(Button);

// With clickable configuration
const ClickableButton = makeAssistantVisible(Button, {
  clickable: true, // Enables the click tool
});
```

## API Reference

### Parameters

- `Component`: The base React component to enhance
- `config`: Optional configuration object
  - `clickable`: When true, enables the assistant to programmatically click the component

### Behavior

The HOC will:

1. Make the component's HTML structure available to the assistant via the system context
2. Optionally provide a `click` tool if `clickable` is true
3. Handle nested readable components (only the outermost component's HTML is provided)
4. Forward refs and maintain component props

## Example

```tsx
// Create a readable form input
const Input = ({ label, ...props }) => (
  <div>
    <label>{label}</label>
    <input {...props} />
  </div>
);

const ReadableInput = makeAssistantVisible(Input);

// Use in your component
function Form() {
  return (
    <ReadableInput label="Email" type="email" placeholder="Enter your email" />
  );
}
```

## Technical Details

When a component is made readable:

- It's wrapped in a `ReadableContext.Provider` to handle nesting
- The component's `outerHTML` is provided as system context
- If `clickable` is true, a unique `data-click-id` is added and a `click` tool is provided
- The click tool uses `querySelector` and simulates a click event
- All props and refs are properly forwarded to maintain component functionality



================================================
File: apps/docs/content/docs/copilots/make-assistant-tool.mdx
================================================
---
title: makeAssistantTool
---

`makeAssistantTool` creates a React component that provides a tool to the assistant. This is useful for defining reusable tools that can be composed into your application.

## Usage

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define the tool using the tool() helper
const submitForm = tool({
  parameters: z.object({
    email: z.string().email(),
    name: z.string(),
  }),
  execute: async ({ email, name }) => {
    // Implementation
    return { success: true };
  },
});

// Create a tool component
const SubmitFormTool = makeAssistantTool(submitForm);

// Use in your component
function Form() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <SubmitFormTool />
    </div>
  );
}
```

## API Reference

### Parameters

- `tool`: A tool definition created using the `tool()` helper function
  - `parameters`: Zod schema defining the tool's parameters
  - `execute`: Function that implements the tool's behavior

### Returns

Returns a React component that:

- Provides the tool to the assistant when mounted
- Automatically removes the tool when unmounted
- Renders nothing in the DOM (returns null)

## Example with Multiple Tools

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define tools
const validateEmail = tool({
  parameters: z.object({
    email: z.string(),
  }),
  execute: ({ email }) => {
    const isValid = email.includes("@");
    return { isValid, reason: isValid ? "Valid email" : "Missing @" };
  },
});

const sendEmail = tool({
  parameters: z.object({
    to: z.string().email(),
    subject: z.string(),
    body: z.string(),
  }),
  execute: async (params) => {
    // Implementation
    return { sent: true };
  },
});

// Create tool components
const EmailValidator = makeAssistantTool(validateEmail);
const EmailSender = makeAssistantTool(sendEmail);

// Use together
function EmailForm() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <EmailValidator />
      <EmailSender />
    </div>
  );
}
```

## Best Practices

1. **Parameter Validation**

   - Always use Zod schemas to define parameters
   - Be specific about parameter types and constraints
   - Add helpful error messages to schema validations

2. **Error Handling**

   - Return meaningful error messages
   - Consider returning partial results when possible
   - Handle async errors appropriately

3. **Composition**
   - Break complex tools into smaller, focused ones
   - Consider tool dependencies and interactions
   - Use multiple tools together for complex functionality



================================================
File: apps/docs/content/docs/copilots/meta.json
================================================
{
  "title": "Copilots",
  "pages": [
    "motivation",
    "make-assistant-visible",
    "make-assistant-tool",
    "use-assistant-instructions",
    "model-context"
  ]
}



================================================
File: apps/docs/content/docs/copilots/model-context.mdx
================================================
---
title: Model Context
---

Model Context is the foundation of intelligence in assistant-ui components. It provides configuration and capabilities to the assistant through a context provider system.

## Core Concepts

### System Instructions

System instructions define the base behavior and knowledge available to the assistant. These can be provided in several ways:

```tsx
import {
  useAssistantInstructions,
  makeAssistantVisible,
} from "@assistant-ui/react";

// Via useAssistantInstructions
useAssistantInstructions("You are a helpful assistant...");

// Via makeAssistantVisible
const ReadableComponent = makeAssistantVisible(MyComponent);
// Automatically provides component HTML as system context
```

### Tools

Tools are functions that the assistant can use to interact with your application. They can be provided through various mechanisms:

```tsx
import {
  makeAssistantVisible,
  makeAssistantTool,
  tool,
  useAssistantRuntime,
} from "@assistant-ui/react";
import { z } from "zod";

// Via makeAssistantVisible's clickable option
const ClickableButton = makeAssistantVisible(Button, {
  clickable: true, // Provides a click tool
});

// Via makeAssistantTool
const submitForm = tool({
  parameters: z.object({
    email: z.string().email(),
    name: z.string(),
  }),
  execute: async ({ email, name }) => {
    // Implementation
    return { success: true };
  },
});

const SubmitFormTool = makeAssistantTool(submitForm);

// Use in your component
function Form() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <SubmitFormTool />
    </div>
  );
}
```

## Context Provider System

The context provider system allows components to contribute to the model context. Here's a typical usage pattern:

```tsx
import { useAssistantRuntime, tool } from "@assistant-ui/react";
import { useEffect } from "react";
import { z } from "zod";

function MyComponent() {
  const assistantRuntime = useAssistantRuntime();

  // Define tool using the tool() helper
  const myTool = tool({
    parameters: z.object({
      query: z.string(),
    }),
    execute: async ({ query }) => {
      const result = await searchDatabase(query);
      return { result };
    },
  });

  useEffect(() => {
    // Register context provider
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => ({
        system: "You are a helpful search assistant...",
        tools: { myTool },
      }),
    });
  }, [assistantRuntime]); // Re-register if runtime changes

  return <div>{/* component content */}</div>;
}
```

### Provider Composition

Multiple providers can be registered, and their contexts will be composed:

- System instructions are concatenated
- Tool sets are merged
- Nested readable components only contribute their context at the outermost level

## Best Practices

1. **System Instructions**

   - Keep them focused and specific to the component's purpose
   - Use useAssistantInstructions for explicit instructions
   - Let makeAssistantVisible handle component structure

2. **Tools**

   - Use the tool() helper to define tool schemas and behavior
   - Prefer makeAssistantTool for reusable tools
   - Handle errors gracefully
   - Consider async operations and loading states
   - Use the built-in click tool when possible

3. **Context Management**
   - Register providers in useEffect for proper cleanup
   - Clean up providers when components unmount
   - Avoid deeply nested readable components
   - Consider performance implications of large HTML structures



================================================
File: apps/docs/content/docs/copilots/motivation.mdx
================================================
---
title: Intelligent Components
---

React revolutionized web development with components that combine logic, structure, and style. Now, with assistant-ui, we're adding a fourth dimension: intelligence. Let's learn how to build smart components through a practical banking app example.

## The Evolution of Components

Traditional React components combine three elements:

```tsx
// Traditional React Component
function TransactionHistory({ transactions }) {
  // 1. Logic (JavaScript/TypeScript)
  const handleRefund = (transactionId) => {
    // Process refund...
  };

  // 2. Structure (JSX/TSX)
  return (
    // 3. Style (CSS via className)
    <div className="transaction-list">
      {transactions.map((transaction) => (
        <div key={transaction.id} className="transaction-item">
          <span>${transaction.amount}</span>
          <span>{transaction.merchant}</span>
          <button onClick={() => handleRefund(transaction.id)}>
            Request Refund
          </button>
        </div>
      ))}
    </div>
  );
}
```

## Adding Intelligence

With assistant-ui, we can enhance this component with intelligence using four powerful APIs:

### 1. Making Components Readable (makeAssistantVisible)

First, let's make our buttons "readable" and interactive:

```tsx
import { makeAssistantVisible } from "@assistant-ui/react";

// Make the refund button intelligent
const SmartButton = makeAssistantVisible(
  ({ onClick, children }) => <button onClick={onClick}>{children}</button>,
  {
    clickable: true, // Allow the assistant to click the button
  },
);

function TransactionHistory({ transactions }) {
  return (
    <div className="transaction-list">
      {transactions.map((transaction) => (
        <div key={transaction.id} className="transaction-item">
          <span>${transaction.amount}</span>
          <span>{transaction.merchant}</span>
          <SmartButton onClick={() => handleRefund(transaction.id)}>
            Request Refund
          </SmartButton>
        </div>
      ))}
    </div>
  );
}
```

Now the assistant can:

- Understand the transaction history structure
- Interact with refund buttons
- Help users manage their transactions

### 2. Adding System Instructions (useAssistantInstructions)

Next, let's give the assistant specific instructions about its role:

```tsx
import { useAssistantInstructions } from "@assistant-ui/react";

function SmartTransactionHistory() {
  useAssistantInstructions(`
    You are a helpful banking assistant that:
    1. Helps users understand their transactions
    2. Explains refund policies
    3. Identifies suspicious transactions
    4. Guides users through the refund process
  `);

  return <TransactionHistory transactions={transactions} />;
}
```

### 3. Creating Tools (makeAssistantTool)

Let's add transaction-specific tools for the assistant:

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define a tool to analyze transactions
const analyzeTransaction = tool({
  parameters: z.object({
    transactionId: z.string(),
    merchantName: z.string(),
  }),
  execute: async ({ transactionId, merchantName }) => {
    // Analyze transaction patterns, merchant reputation, etc.
    return {
      isSuspicious: false,
      merchantRating: 4.5,
      similarTransactions: 3,
      refundEligible: true,
    };
  },
});

// Create a tool component
const TransactionAnalyzer = makeAssistantTool(analyzeTransaction);

function SmartTransactionHistory() {
  // Previous instructions...
  return (
    <>
      <TransactionHistory transactions={transactions} />
      <TransactionAnalyzer />
    </>
  );
}
```

### 4. Adding Custom Context (Model Context)

Finally, let's add dynamic context based on the user's transaction patterns:

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";
import { useEffect } from "react";

function SmartTransactionHistory({ userProfile }) {
  const assistantRuntime = useAssistantRuntime();

  useEffect(() => {
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => ({
        system: `
          User spending patterns:
          - Average transaction: ${userProfile.avgTransaction}
          - Common merchants: ${userProfile.frequentMerchants.join(", ")}
          - Refund history: ${userProfile.refundCount} requests
        `,
      }),
    });
  }, [assistantRuntime, userProfile]);

  // Previous components...
}
```

## The Result: An Intelligent Banking Experience

This enhanced component now provides:

- Natural language interaction with transaction history
- Contextual help for understanding transactions
- Automated transaction analysis
- Smart refund assistance

The assistant can now:

1. Read and understand transaction details
2. Follow banking-specific guidelines
3. Use tools to analyze transactions
4. Access user patterns for personalized help

This creates a more intuitive and safer banking experience while maintaining the familiar React component model.

## Next Steps

Learn more about each API:

- [makeAssistantVisible](make-assistant-readable) for component understanding
- [makeAssistantTool](make-assistant-tool) for transaction analysis
- [useAssistantInstructions](use-assistant-instructions) for behavior guidance
- [Model Context](model-context) for dynamic context management



================================================
File: apps/docs/content/docs/copilots/use-assistant-instructions.mdx
================================================
---
title: useAssistantInstructions
---

`useAssistantInstructions` is a React hook that allows you to set system instructions for your assistant-ui components.

## Usage

```tsx
import { useAssistantInstructions } from "@assistant-ui/react";

function MyComponent() {
  // Simple string usage
  useAssistantInstructions("You are a helpful form assistant...");

  // With configuration object
  useAssistantInstructions({
    instruction: "You are a helpful form assistant...",
    disabled: false, // Optional: disable the instructions
  });

  return <div>My Component</div>;
}
```

## API Reference

### Parameters

The hook accepts either:

- A string containing the system instructions
- A configuration object with:
  - `instruction`: The system instructions
  - `disabled`: Optional boolean to disable the instructions

### Behavior

The hook will:

1. Register the provided instructions as system instructions in the model context
2. Automatically clean up when the component unmounts
3. Update when the instructions change
4. Do nothing if disabled is set to true

## Example

```tsx
function SmartForm() {
  useAssistantInstructions({
    instruction: `
      You are a form assistant that:
      - Validates user input
      - Provides helpful suggestions
      - Explains any errors
      - Guides users through complex fields
    `,
  });

  return <form>{/* Your form fields here */}</form>;
}
```



================================================
File: apps/docs/content/docs/guides/Attachments.mdx
================================================
---
title: Attachments
---

Allow the user to attach files to their messages.

## Enabling attachments

In order to enable attachments, you need to pass a `AttachmentAdapter` to your runtime hook, e.g. `useChatRuntime`/`useLangGraphRuntime`/`useExternalStoreRuntime`/...

In this example, we use a `CompositeAttachmentAdapter` that allows the user to attach images and text.
The CompositeAttachmentAdapter allows you to combine multiple attachment adapters into one.

```tsx title="/app/MyRuntimeProvider.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import {
  CompositeAttachmentAdapter,
  SimpleImageAttachmentAdapter,
  SimpleTextAttachmentAdapter,
} from "@assistant-ui/react";

const runtime = useChatRuntime({
  api: "/api/chat",
  adapters: {
    attachments: new CompositeAttachmentAdapter([
      new SimpleImageAttachmentAdapter(),
      new SimpleTextAttachmentAdapter(),
    ]),
  },
});
```

# Tutorial: Mastering Attachment Handling with CompositeAttachmentAdapter

In this tutorial, we'll explore how to handle attachments in your assistant-ui application using the CompositeAttachmentAdapter. This powerful feature allows users to attach various types of files to their messages, enhancing the functionality of your AI chat interface.

## Introduction

Attachments are a crucial part of many chat applications, allowing users to share images, documents, and other files. The assistant-ui library provides a flexible system for handling attachments through its AttachmentAdapter interface.

## Prerequisites

Before we begin, make sure you have:

1.  A basic assistant-ui project set up
2.  Familiarity with React and TypeScript
3.  Node.js and npm/yarn installed

## Step 1: Understanding AttachmentAdapter

The AttachmentAdapter is an interface that defines how attachments are handled in your application. It includes methods for adding, sending, and removing attachments.

## Step 2: Introducing CompositeAttachmentAdapter

The CompositeAttachmentAdapter is a powerful tool that allows you to combine multiple attachment adapters into one. This is particularly useful when you want to support different types of attachments, such as images and text files.

## Step 3: Setting up the CompositeAttachmentAdapter

Let's create a CompositeAttachmentAdapter that supports both image and text attachments:

```ts
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import {
  CompositeAttachmentAdapter,
  SimpleImageAttachmentAdapter,
  SimpleTextAttachmentAdapter,
} from "@assistant-ui/react";

const MyRuntimeProvider = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
    adapters: {
      attachments: new CompositeAttachmentAdapter([
        new SimpleImageAttachmentAdapter(),
        new SimpleTextAttachmentAdapter(),
      ]),
    },
  });

  // ... rest of your component
};
```

In this example, we're creating a CompositeAttachmentAdapter that combines a SimpleImageAttachmentAdapter and a SimpleTextAttachmentAdapter. This allows our application to handle both image and text file attachments.

## Step 4: Implementing Attachment UI

Now that we have our adapter set up, let's implement the UI components for attachments:

```tsx
import {
  ComposerAttachments,
  ComposerAddAttachment,
  UserMessageAttachments,
} from "@/components/assistant-ui/attachment";

const Composer = () => {
  return (
    <ComposerPrimitive.Root className="...">
      <ComposerAttachments />
      <ComposerAddAttachment />
      {/* ... other composer elements */}
    </ComposerPrimitive.Root>
  );
};

const UserMessage = () => {
  return (
    <MessagePrimitive.Root className="...">
      <UserMessageAttachments />
      {/* ... other message elements */}
    </MessagePrimitive.Root>
  );
};
```

These components will handle the display of attachments in the composer and in user messages.

## Step 5: Customizing Attachment Behavior

You can customize the behavior of your attachments by modifying the AttachmentAdapter. For example, you might want to add support for a new file type or change how attachments are processed before sending.

Here's an example of a custom attachment adapter:

```ts
import { AttachmentAdapter } from "@assistant-ui/react";

class CustomAttachmentAdapter implements AttachmentAdapter {
  accept = "image/*, .pdf";

  async add({ file }) {
    // Custom logic for adding an attachment
    // ...
  }

  async send(attachment) {
    // Custom logic for sending an attachment
    // ...
  }

  async remove() {
    // Custom logic for removing an attachment
    // ...
  }
}

// Use it in your CompositeAttachmentAdapter
const compositeAdapter = new CompositeAttachmentAdapter([
  new CustomAttachmentAdapter(),
  new SimpleTextAttachmentAdapter(),
]);
```

## Step 6: Handling Attachments in Your Backend

Remember to update your backend API to handle the attachments sent by the frontend. The exact implementation will depend on your backend technology, but you'll need to:

1.  Receive the attachment data
2.  Process and store the attachments as needed
3.  Associate the attachments with the correct messages or conversations

## Conclusion

By mastering the CompositeAttachmentAdapter, you've unlocked powerful attachment handling capabilities in your assistant-ui application. You can now support multiple types of attachments, customize their behavior, and create a rich, interactive chat experience for your users.

Remember to test your attachment handling thoroughly, considering different file types, sizes, and potential error scenarios. Happy coding!



================================================
File: apps/docs/content/docs/guides/Branching.mdx
================================================
---
title: Message Branching
---

Switch between different conversation branches.

A new branch is created when:

- a user message is edited
- an assistant message is reloaded

Branches are automatically tracked by assistant-ui by observing changes to the `messages` array.

## Enabling branch support

You can show a branch picker by using `BranchPickerPrimitive`.

```tsx {1, 8, 15-30}
import { BranchPickerPrimitive } from "@assistant-ui/react";


const Message = () => {
  return (
    <MessagePrimitive.Root>
      ...
      <BranchPicker /> {/* <-- show the branch picker */}
      ...
    </EditComposerPrimitive.Root>
  );
};


const BranchPicker = () => {
  return (
    <BranchPickerPrimitive.Root hideWhenSingleBranch>
      <BranchPickerPrimitive.Previous />
      <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      <BranchPickerPrimitive.Next />
    </BranchPickerPrimitive.Root>
  );
};
```

## API

You can access the current branch state or navigate via the API as well.  
These APIs rely on the message state and may only be called inside a message component.

```tsx
const hasBranches = useMessageIf({ hasBranches: true }); // whether branchCount is >= 2

// navigation
const goToNextBranch = useGoToNextBranch(); // null if there is no next branch
const goToPreviousBranch = useGoToPreviousBranch(); // null if there is no previous branch
```



================================================
File: apps/docs/content/docs/guides/Editing.mdx
================================================
---
title: Message Editing
---

Give the user the ability to edit their message.

## Enabling edit support

You can show an editor interface by using `ComposerPrimitive`.

```tsx {1,11,25,31-43}
import { ComposerPrimitive } from "@assistant-ui/react";
...

const Thread = () => {
  return (
    <ThreadPrimitive.Root>
      <ThreadPrimitive.Viewport>
        ...
        <ThreadPrimitive.Messages components={{
          ...,
          EditComposer, // <-- Show our new component during edit mode
        }} />
      </ThreadPrimitive.Viewport>
      ...
    </ThreadPrimitive.Root>
  );
};

const UserMessage = () => {
  return (
    <MessagePrimitive.Root>
      ...
      <ActionBarPrimitive.Root>
        ...
        <ActionBarPrimitive.Edit /> {/* <-- add a button to enable edit mode */}
      </ActionBarPrimitive.Root>
    </MessagePrimitive.Root>
  );
};

// define a new component
const EditComposer = () => {
  return (
    // you can return a MessagePrimitive including a ComposerPrimitive, or only a ComposerPrimitive
    <MessagePrimitive.Root>
      ...
      <ComposerPrimitive.Root>
        <ComposerPrimitive.Input />
        <ComposerPrimitive.Cancel />
        <ComposerPrimitive.Send />
      </ComposerPrimitive.Root>
    </MessagePrimitive.Root>
  );
};
```



================================================
File: apps/docs/content/docs/guides/Speech.mdx
================================================
---
title: Speech
---

## Text-to-Speech

assistant-ui supports text-to-speech via the `SpeechSynthesisAdapter` interface.

### SpeechSynthesisAdapter

Currently, the following speech synthesis adapters are supported:

- `WebSpeechSynthesisAdapter`: Uses the browser's `Web Speech API` API

Support for other speech synthesis adapters is planned for the future.

Passing a `SpeechSynthesisAdapter` to the `EdgeRuntime` will enable text-to-speech support.

### UI

By default, a `Read aloud` button will be shown in the assistant message action bar.

This is implemented using `AssistantActionBar.SpeechControl` which is a wrapper around `AssistantActionBar.Speak` and `AssistantActionBar.StopSpeaking`.
The underlying primitives are `ActionBarPrimitive.Speak` and `ActionBarPrimitive.StopSpeaking`.

### Example

The following example uses the `WebSpeechSynthesisAdapter`.

```tsx
import { WebSpeechSynthesisAdapter } from "@assistant-ui/react";

const runtime = useChatRuntime({
  api: "/api/chat",
  adapters: {
    speech: new WebSpeechSynthesisAdapter(),
  },
});
```



================================================
File: apps/docs/content/docs/guides/ToolUI.mdx
================================================
---
title: Tool UIs
---

You can show a custom UI when a tool is called to let the user know what is happening.

### Tool UI Components

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

type WebSearchArgs = {
  query: string;
};

type WebSearchResult = {
  title: string;
  description: string;
  url: string;
};

export const WebSearchToolUI = makeAssistantToolUI<
  WebSearchArgs,
  WebSearchResult
>({
  toolName: "web_search",
  render: ({ args, status }) => {
    return <p>web_search({args.query})</p>;
  },
});
```

You can put this component anywhere in your app inside the `<AssistantRuntimeProvider />` component.

```tsx {1, 8}
import { WebSearchToolUI } from '@/tools/WebSearchToolUI';

const MyApp = () => {
  ...
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      ...
      <WebSearchToolUI />
      ...
    </AssistantRuntimeProvider>
  );
};
```

### Tool UI Hooks

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

type WebSearchArgs = {
  query: string;
};

type WebSearchResult = {
  title: string;
  description: string;
  url: string;
};

export const useWebSearchToolUI = makeAssistantToolUI<
  WebSearchArgs,
  WebSearchResult
>({
  toolName: "web_search",
  render: ({ args, status }) => {
    return <p>web_search({args.query})</p>;
  },
});
```

You can use this hook anywhere in your app inside the `<AssistantRuntimeProvider />` component.

```tsx {1, 4}
import { useWebSearchToolUI } from '@/tools/useWebSearchToolUI';

const MyComponent = () => {
  useWebSearchToolUI();

  ...
};

const MyApp = () => {
  ...
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      ...
      <MyComponent />
      ...
    </AssistantRuntimeProvider>
  );
};
```

### Inline Tool UI Hooks

If you need access to component props, you can use the `useAssistantToolUI` hook. If you are passing a component inline, you should use the `useInlineRender` hook to prevent the component from being re-mounted on every render.

```tsx {5-11}
import { useAssistantToolUI, useInlineRender } from "@assistant-ui/react";

const MyComponent = ({ product_id }) => {
  useAssistantToolUI({
    toolName: "current_product_info",
    render: useInlineRender(({ args, status }) => {
      // you can access component props here
      return <p>product_info({ product_id })</p>;
    }),
  });

  ...
};

const MyApp = () => {
  ...
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      ...
      <MyComponent product_id="123" />
      ...
    </AssistantRuntimeProvider>
  );
};
```

### Tool Execution Context

When implementing a tool's execute function, you have access to a context object that includes:

- `toolCallId`: A unique identifier for the current tool execution
- `abortSignal`: An AbortSignal for handling cancellation

```tsx
const searchTool = {
  description: "Search the web",
  parameters: z.object({
    query: z.string(),
  }),
  execute: async (args, { toolCallId, abortSignal }) => {
    // You can use toolCallId to track or log specific tool executions
    console.log(`Executing search with ID: ${toolCallId}`);

    // Use abortSignal to handle cancellation
    const response = await fetch(
      `/api/search?q=${encodeURIComponent(args.query)}`,
      {
        signal: abortSignal,
      },
    );

    return response.json();
  },
};
```

### Schema Validation Error Handling

Tools can now handle schema validation errors through the `experimental_onSchemaValidationError` property. This allows you to provide custom behavior when the tool's parameters fail validation:

```tsx
const searchTool = {
  description: "Search the web",
  parameters: z.object({
    query: z.string().min(3),
  }),
  execute: async (args, context) => {
    const response = await fetch(`/api/search?q=${args.query}`, {
      signal: context.abortSignal,
    });
    return response.json();
  },
  experimental_onSchemaValidationError: async (invalidArgs, context) => {
    // Handle validation errors gracefully
    console.warn(`Invalid search query: ${JSON.stringify(invalidArgs)}`);
    return {
      error: "Search query must be at least 3 characters long",
      suggestions: ["Try a longer search term"],
    };
  },
};
```

### Field-Level Validation Status

You can use the `useToolArgsFieldStatus` hook to check the validation status of individual tool argument fields. This is useful for providing real-time feedback about the validity of specific input fields in your tool UI:

```tsx
import { useToolArgsFieldStatus } from "@assistant-ui/react";

const SearchToolUI = makeAssistantToolUI<{ query: string }, SearchResult>({
  toolName: "search",
  render: ({ args }) => {
    const status = useToolArgsFieldStatus("query");
    const isInProgress = status.type === "running";

    return (
      <div>
        <QueryInput query={args.query} isInProgress={isInProgress} />
      </div>
    );
  },
});
```

### Function Calling for User Input

The following example shows a `date_picker` tool that the AI can call to collect a date from the user.

```tsx {12}
import { makeAssistantToolUI } from "@assistant-ui/react";
import { DatePicker } from "@/components/datepicker";

const DatePickerToolUI = makeAssistantToolUI<{}, { date: string }>({
  toolName: "date_picker",
  render: ({ result, status, addResult }) => {
    if (result) {
      return <p>You picked {result.date}</p>;
    }

    const handleSubmit = (date: Date) => {
      addResult({ date: date.toISOString() });
    };

    return <DatePicker onSubmit={handleSubmit} />;
  },
});
```

# Implementing Tool UIs: A Step-by-Step Guide to Creating Interactive AI Tools

In this tutorial, we'll walk through the process of implementing Tool UIs in assistant-ui. Tool UIs allow you to create custom interfaces for AI tools, enhancing the user experience and providing visual feedback when a tool is called.

## Table of Contents

1. Introduction to Tool UIs
2. Creating a Basic Tool UI Component
3. Using Tool UI Hooks
4. Implementing Inline Tool UI Hooks
5. Function Calling for User Input

## 1. Introduction to Tool UIs

Tool UIs in assistant-ui provide a way to display custom interfaces when an AI tool is called. This can help users understand what's happening behind the scenes and provide interactive elements when needed.

## 2. Creating a Basic Tool UI Component

Let's start by creating a simple Tool UI component for a web search tool.

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

type WebSearchArgs = {
  query: string;
};

type WebSearchResult = {
  title: string;
  description: string;
  url: string;
};

export const WebSearchToolUI = makeAssistantToolUI<
  WebSearchArgs,
  WebSearchResult
>({
  toolName: "web_search",
  render: ({ args, status }) => {
    return <p>web_search({args.query})</p>;
  },
});
```

To use this component, place it inside the `<AssistantRuntimeProvider />`:

```tsx
import { WebSearchToolUI } from "@/tools/WebSearchToolUI";

const MyApp = () => {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {/* Other components */}
      <WebSearchToolUI />
      {/* More components */}
    </AssistantRuntimeProvider>
  );
};
```

## 3. Using Tool UI Hooks

For more flexibility, you can create a Tool UI hook:

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

type WebSearchArgs = {
  query: string;
};

type WebSearchResult = {
  title: string;
  description: string;
  url: string;
};

export const useWebSearchToolUI = makeAssistantToolUI<
  WebSearchArgs,
  WebSearchResult
>({
  toolName: "web_search",
  render: ({ args, status }) => {
    return <p>web_search({args.query})</p>;
  },
});
```

Use the hook in a component within the `<AssistantRuntimeProvider />`:

```tsx
import { useWebSearchToolUI } from "@/tools/useWebSearchToolUI";

const MyComponent = () => {
  useWebSearchToolUI();
  // Component logic
};

const MyApp = () => {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <MyComponent />
    </AssistantRuntimeProvider>
  );
};
```

## 4. Implementing Inline Tool UI Hooks

For cases where you need access to component props, use the `useAssistantToolUI` hook with `useInlineRender`:

```tsx
import { useAssistantToolUI, useInlineRender } from "@assistant-ui/react";

const MyComponent = ({ product_id }) => {
  useAssistantToolUI({
    toolName: "current_product_info",
    render: useInlineRender(({ args, status }) => {
      return <p>product_info({product_id})</p>;
    }),
  });

  // Component logic
};

const MyApp = () => {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <MyComponent product_id="123" />
    </AssistantRuntimeProvider>
  );
};
```

## 5. Function Calling for User Input

Finally, let's create a Tool UI that allows user input, such as a date picker:

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";
import { DatePicker } from "@/components/datepicker";

const DatePickerToolUI = makeAssistantToolUI<{}, { date: string }>({
  toolName: "date_picker",
  render: ({ result, status, addResult }) => {
    if (result) {
      return <p>You picked {result.date}</p>;
    }

    const handleSubmit = (date: Date) => {
      addResult({ date: date.toISOString() });
    };

    return <DatePicker onSubmit={handleSubmit} />;
  },
});
```

This Tool UI displays a date picker when called and allows the user to select a date. Once a date is chosen, it's added to the result and displayed.

By following these steps, you can create interactive and informative Tool UIs that enhance the AI chat experience in your application. These UIs provide visual feedback and allow for user interaction when AI tools are called, making your assistant more user-friendly and engaging."



================================================
File: apps/docs/content/docs/guides/meta.json
================================================
{
  "title": "Guides",
  "pages": ["Attachments", "Branching", "Editing", "Speech", "ToolUI"]
}



================================================
File: apps/docs/content/docs/legacy/styled/AssistantModal.mdx
================================================
---
title: AssistantModal
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Tabs, Tab } from "fumadocs-ui/components/tabs";

## Overview

A chat bubble shown in the bottom right corner of the screen. Useful for support or Q&A use cases.

## Getting Started

<Steps>
  <Step>

### Install `@assistant-ui/react-ui`

```sh npm2yarn
npm install @assistant-ui/react-ui
```

  </Step>
  <Step>

### Import CSS styles

Add the following to your `tailwind.config.ts`:

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["assistant-modal"],
    })
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["assistant-modal"],
      shadcn: true
    })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
import "@assistant-ui/react-ui/styles/modal.css";
```

</Tabs>

  </Step>
  <Step>

### Use it in your app

```tsx title="/app/page.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantModal } from "@assistant-ui/react-ui";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <div>
      <AssistantModal runtime={runtime} />
    </div>
  );
};
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/legacy/styled/Decomposition.mdx
================================================
---
title: Decomposition
---

## Overview

The Styled Components can be decomposed into smaller components. At each level, you can swap out a specific component with your own custom component.

## Thread

Renders an entire conversation thread.

```tsx
import {
  Thread,
  ThreadWelcome,
  Composer,
  type ThreadConfig,
} from "@assistant-ui/react-ui";

const MyThread: FC<ThreadConfig> = (config) => {
  return (
    <Thread.Root config={config}>
      <Thread.Viewport>
        <ThreadWelcome />
        <Thread.Messages />
        <Thread.FollowupSuggestions />
        <Thread.ViewportFooter>
          <Thread.ScrollToBottom />
          <Composer />
        </Thread.ViewportFooter>
      </Thread.Viewport>
    </Thread.Root>
  );
};
```

**Usage:**

```ts
<MyThread />
```

### Thread.Root

Contains all parts of the thread. Accepts a `config` prop which is used by many other styled components.

### Thread.Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

### Thread.Messages

Renders all messages. This renders a separate component for each message (passed to the `components` prop).

### Thread.ViewportFooter

Renders the footer of the thread viewport. This is the sticky footer that does not scroll with the messages.

### Thread.ScrollToBottom

A button to scroll the viewport to the bottom. Hidden when the viewport is already at bottom.

## ThreadWelcome

Renders the welcome message when no messages are present.

```tsx
import { ThreadWelcome } from "@assistant-ui/react-ui";

const MyThreadWelcome: FC = () => {
  return (
    <ThreadWelcome.Root>
      <ThreadWelcome.Center>
        <ThreadWelcome.Avatar />
        <ThreadWelcome.Message />
      </ThreadWelcome.Center>
      <ThreadWelcome.Suggestions />
    </ThreadWelcome.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and use `MyThreadWelcome` instead of `ThreadWelcome`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <MyThreadWelcome />
  ...
};
```

### ThreadWelcome.Root

Contains all parts of the welcome message.

### ThreadWelcome.Center

The centered content of the welcome message.

### ThreadWelcome.Avatar

The avatar of the assistant.

### ThreadWelcome.Message

The welcome message.

### ThreadWelcome.Suggestions

Conversation starter suggestions.

```tsx
import { ThreadWelcome } from "@assistant-ui/react-ui";

const MyThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="aui-thread-welcome-suggestions">
      <ThreadWelcome.Suggestion prompt="Write me a poem about the weather" />
      <ThreadWelcome.Suggestion prompt="What is assistant-ui?" />
    </div>
  );
};
```

### ThreadWelcome.Suggestion

A conversation starter suggestion.

## Composer

Renders the composer.

```tsx
import { Composer } from "@assistant-ui/react-ui";

const MyComposer: FC = () => {
  return (
    <Composer.Root>
      <Composer.Attachments />
      <Composer.AddAttachment />
      <Composer.Input autoFocus />
      <Composer.Action />
    </Composer.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and use `MyComposer` instead of `Composer`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <MyComposer />
  ...
};
```

### Composer.Root

Contains all parts of the composer.

### Composer.Input

The text input field for the user to type a new message.

### Composer.Action

The button to send or cancel the message.

```tsx
import { Composer, ThreadPrimitive } from "@assistant-ui/react-ui";

const MyComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <Composer.Send />
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <Composer.Cancel />
      </ThreadPrimitive.If>
    </>
  );
};
```

### Composer.Send

The button to send the message.

### Composer.Cancel

Sends a cancel action.

### Composer.Attachments

Renders attachments.

### Composer.AddAttachment

Renders an add attachment button.

## AttachmentUI

<Callout type="info" emoji="💡">
  `AttachmentUI` is still experimental.
</Callout>

Renders an attachment.

```tsx
import { AttachmentUI } from "@assistant-ui/react-ui";

const MyAttachmentUI: FC = () => {
  return (
    <AttachmentUI.Root>
      attachment
      <AttachmentUI.Remove />
    </AttachmentUI.Root>
  );
};
```

### AttachmentUI.Root

Contains all parts of the composer attachment.

### AttachmentUI.Remove

Renders a remove attachment button.

## AssistantMessage

Renders an assistant message.

```tsx
import { AssistantMessage } from "@assistant-ui/react-ui";

const MyAssistantMessage: FC = () => {
  return (
    <AssistantMessage.Root>
      <AssistantMessage.Avatar />
      <AssistantMessage.Content />
      <BranchPicker />
      <AssistantActionBar />
    </AssistantMessage.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyAssistantMessage` to Thread.MEssages

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ AssistantMessage: MyAssistantMessage }} />
  ...
};
```

### AssistantMessage.Root

Contains all parts of the assistant message.

### AssistantMessage.Avatar

The avatar of the assistant.

### AssistantMessage.Content

The content of the assistant message.

## AssistantActionBar

Renders the action bar for the assistant message.

```tsx
import { AssistantActionBar } from "@assistant-ui/react-ui";

const MyAssistantActionBar: FC = () => {
  return (
    <AssistantActionBar.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
    >
      <AssistantActionBar.SpeechControl />
      <AssistantActionBar.Copy />
      <AssistantActionBar.Reload />
      <AssistantActionBar.FeedbackPositive />
      <AssistantActionBar.FeedbackNegative />
    </AssistantActionBar.Root>
  );
};
```

**Usage:**

Decompose `AssistantMessage` into `MyAssistantMessage` and use `MyAssistantActionBar` instead of `AssistantActionBar`.

```ts
const MyAssistantMessage: FC = () => {
  ...
  <MyAssistantActionBar />
  ...
};
```

### AssistantActionBar.Root

Contains all parts of the assistant action bar.

### AssistantActionBar.Reload

Shows a reload button.

### AssistantActionBar.Copy

Shows a copy button.

### AssistantActionBar.SpeechControl

Shows a speech control button (either Speak or StopSpeaking).

### AssistantActionBar.Speak

Shows a speak button.

### AssistantActionBar.StopSpeaking

Shows a stop speaking button.

### AssistantActionBar.FeedbackPositive

Shows a positive feedback button.

### AssistantActionBar.FeedbackNegative

Shows a negative feedback button.

## BranchPicker

Renders the branch picker.

```tsx
import { BranchPicker } from "@assistant-ui/react-ui";

const MyBranchPicker: FC = () => {
  return (
    <BranchPicker.Root hideWhenSingleBranch>
      <BranchPicker.Previous />
      <BranchPicker.State />
      <BranchPicker.Next />
    </BranchPicker.Root>
  );
};
```

**Usage:**

Decompose `AssistantMessage` and `UserMessage` and use `MyBranchPicker` instead of `BranchPicker`.

```ts
const MyAssistantMessage: FC = () => {
  ...
  <MyBranchPicker />
  ...
};
```

```ts
const MyUserMessage: FC = () => {
  ...
  <MyBranchPicker />
  ...
};
```

### BranchPicker.Root

Contains all parts of the branch picker.

### BranchPicker.Previous

Shows a previous button.

### BranchPicker.Next

Shows a next button.

### BranchPicker.State

Shows the current branch number and total number of branches.

```tsx
import { BranchPicker } from "@assistant-ui/react-ui";

const MyBranchPickerState: FC = () => {
  return (
    <span className="aui-branch-picker-state">
      <BranchPicker.Number /> / <BranchPicker.Count />
    </span>
  );
};
```

### BranchPicker.Number

The current branch number.

### BranchPicker.Count

The total number of branches.

## UserMessage

Renders a user message.

```tsx
import { UserMessage } from "@assistant-ui/react-ui";

const MyUserMessage: FC = () => {
  return (
    <UserMessage.Root>
      <UserMessage.Attachments />
      <UserMessage.Content />
      <UserActionBar />
      <BranchPicker />
    </UserMessage.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyUserMessage` to Thread.Messages

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ UserMessage: MyUserMessage }} />
  ...
};
```

### UserMessage.Root

Contains all parts of the user message.

### UserMessage.Content

The content of the user message.

### UserMessage.Attachments

Renders attachments.

## UserActionBar

Renders the action bar for the user message.

```tsx
import { UserActionBar } from "@assistant-ui/react-ui";

const MyUserActionBar: FC = () => {
  return (
    <UserActionBar.Root hideWhenRunning autohide="not-last">
      <UserActionBar.Edit />
    </UserActionBar.Root>
  );
};
```

**Usage:**

Decompose `UserMessage` into `MyUserMessage` and use `MyUserActionBar` instead of `UserActionBar`.

```ts
const MyUserMessage: FC = () => {
  ...
  <MyUserActionBar />
  ...
};
```

### UserActionBar.Root

Contains all parts of the user action bar.

### UserActionBar.Edit

Shows an edit button.

## UserAttachment

Renders an attachment.

```tsx
import { UserAttachment } from "@assistant-ui/react-ui";

const MyUserAttachment: FC = () => {
  return <UserAttachment.Root>attachment</UserAttachment.Root>;
};
```

### UserAttachment.Root

Contains all parts of the user attachment.

## EditComposer

Renders a user message being edited.

```tsx
import { EditComposer } from "@assistant-ui/react-ui";

const MyEditComposer: FC = () => {
  return (
    <EditComposer.Root>
      <EditComposer.Input />
      <EditComposer.Footer>
        <EditComposer.Cancel />
        <EditComposer.Send />
      </EditComposer.Footer>
    </EditComposer.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyEditComposer` to `Thread.Messages`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ EditComposer: MyEditComposer }} />
  ...
};
```

### EditComposer.Root

Contains all parts of the edit composer.

### EditComposer.Input

The text input field for the user to type a new message.

### EditComposer.Footer

The footer of the edit composer.

### EditComposer.Cancel

Sends a cancel action.

### EditComposer.Send

Sends the message.

## AssistantModal

Renders the assistant modal.

```tsx
import {
  AssistantModal,
  Thread,
  type ThreadConfig,
} from "@assistant-ui/react-ui";

const MyAssistantModal: FC<ThreadConfig> = (config) => {
  return (
    <AssistantModal.Root config={config}>
      <AssistantModal.Trigger />
      <AssistantModal.Content>
        <Thread />
      </AssistantModal.Content>
    </AssistantModal.Root>
  );
};
```

**Usage:**

```ts
<MyAssistantModal />
```

## ThreadList

Renders a thread list.

```tsx
import { ThreadList, ThreadListItem } from "@assistant-ui/react-ui";

const MyThreadList = () => {
  return (
    <ThreadList.Root>
      <ThreadList.New />
      <ThreadList.Items />
    </ThreadList.Root>
  );
};
```

### ThreadListItem

Renders a thread list item.

```tsx
import { ThreadListItem, ThreadListItemPrimitive } from "@assistant-ui/react-ui";

const MyThreadListItem = () => {
  return (
    <ThreadListItem.Root>
      <ThreadListItemTrigger>
        <ThreadListItemTitle />
      </ThreadListItemTrigger>
      <ThreadListItem.Archive />
    </ThreadListItem.Root>
  );
};
```



================================================
File: apps/docs/content/docs/legacy/styled/Markdown.mdx
================================================
---
title: Markdown
---

Allow the assistant to display rich text using markdown.

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";
import { Tabs } from "fumadocs-ui/components/tabs";

## Enabling markdown support

<Steps>

<Step>
### Install `@assistant-ui/react-markdown`

```sh npm2yarn
npm install @assistant-ui/react-markdown
```

</Step>
<Step>

### Setup styles

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts {3} title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")({ shadcn: true })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
import "@assistant-ui/react-ui/styles/markdown.css";
```

</Tabs>

</Step>

<Step>

### Define a `MarkdownText` component

```tsx {1} twoslash title="@/components/markdown-text.tsx"
import { makeMarkdownText } from "@assistant-ui/react-ui";

export const MarkdownText = makeMarkdownText();
```

</Step>

<Step>

### Use it with `Thread`

Pass the `MarkdownText` component to your `Thread` component.

```tsx {1, 7}
import { MarkdownText } from "@/components/markdown-text";

const Home = () => {
  return (
    <Thread assistantMessage={{ components: { Text: MarkdownText } }}>
  );
};
```

</Step>

</Steps>



================================================
File: apps/docs/content/docs/legacy/styled/Scrollbar.mdx
================================================
---
title: Custom Scrollbar
---

If you want to show a custom scrollbar UI of the Thread.Viewport in place of the system default, you can integrate `@radix-ui/react-scroll-area`.
An example implementation of this is [shadcn-ui's Scroll Area](https://ui.shadcn.com/docs/components/scroll-area).

## Add shadcn Scroll Area

```sh
npx shadcn@latest add scroll-area
```

### @radix-ui/react-scroll-area v1.2.0 release candidate required

The v1.2.0-rc.x release candidate can be installed via

```sh
pnpm add @radix-ui/react-scroll-area@next
```

## Additional Styles

The radix-ui Viewport component adds an intermediate `<div data-radix-scroll-area-content>` element.
Add the following CSS to your `globals.css`:

```css title="@/app/globals.css"
.aui-thread-viewport > [data-radix-scroll-area-content] {
  @apply flex flex-col items-center self-stretch bg-inherit;
}
```

## Integration

- Decompose `Thread` into `MyThread` (see [Decomposition](/docs/legacy/styled/Decomposition))
- Wrap `Thread.Root` with `<ScrollAreaPrimitive.Root asChild>`
- Wrap `Thread.Viewport` with `<ScrollAreaPrimitive.Viewport asChild>`
- Add shadcn's `<ScrollBar />` to `Thread.Root`

The resulting MyThread component should look like this:

```tsx
import {
  Thread,
  ThreadWelcome,
  Composer,
  type ThreadConfig,
} from "@assistant-ui/react-ui";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"; // [!code highlight]
import { ScrollBar } from "@/components/ui/scroll-area"; // [!code highlight]

const MyThread: FC<ThreadConfig> = (config) => {
  return (
    <ScrollAreaPrimitive.Root asChild> /* [!code highlight] */
      <Thread.Root config={config}>
        <ScrollAreaPrimitive.Viewport asChild> /* [!code highlight] */
          <Thread.Viewport>
            <ThreadWelcome />
            <Thread.Messages />
            <Thread.ViewportFooter>
              <Thread.ScrollToBottom />
              <Composer />
            </Thread.ViewportFooter>
          </Thread.Viewport>
        </ScrollAreaPrimitive.Viewport> /* [!code highlight] */
        <ScrollBar /> /* [!code highlight] */
      </Thread.Root>
    </ScrollAreaPrimitive.Root> /* [!code highlight] */
  );
};
```



================================================
File: apps/docs/content/docs/legacy/styled/Thread.mdx
================================================
---
title: Thread
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Tabs, Tab } from "fumadocs-ui/components/tabs";

## Overview

The raw message list and message composer UI. Useful for full screen chat use cases.

## Getting Started

<Steps>
  <Step>

### Install `@assistant-ui/react-ui`

```sh npm2yarn
npm install @assistant-ui/react-ui
```

  </Step>
  <Step>

### Import CSS styles

Add the following to your `tailwind.config.ts`:

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["thread"],
    })
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["thread"],
      shadcn: true
    })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
```

</Tabs>

  </Step>
  <Step>

### Use it in your app

```tsx title="/app/page.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { Thread } from "@assistant-ui/react-ui";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <div className="h-full">
      <Thread runtime={runtime} />
    </div>
  );
};
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/legacy/styled/ThreadWidth.mdx
================================================
---
title: Thread Width
---

You can modify the max width of the thread via the CSS variable `--aui-thread-max-width`.

## Wider Thread

```css title="@/app/globals.css"
:root {
  --aui-thread-max-width: 600px;
}
```

## Take up the whole screen

```css title="@/app/globals.css"
:root {
  --aui-thread-max-width: infinity;
}
```



================================================
File: apps/docs/content/docs/legacy/styled/meta.json
================================================
{
  "title": "Styled Components",
  "pages": [
    "Thread",
    "ThreadWidth",
    "AssistantModal",
    "Markdown",
    "Decomposition",
    "Scrollbar",
    "..."
  ]
}



================================================
File: apps/docs/content/docs/migrations/deprecation-policy.mdx
================================================
---
title: Deprecation Policy
---

assistant-ui is committed to providing a stable API, so you can spend your time building amazing things on top of it.

Rarely, we need to deprecate a feature we've already shipped, because it is causing performance, usability, or security issues.
In such cases, we will communicate the intent to unship as soon as possible by marking the feature as `@deprecated` and publishing a notice in the documentation.

Deprecations and breaking changes primarily affect new features released. The longer an API has been in the library, the less likely it is to be deprecated.
For features that have long existed in the library, we will provide a longer deprecation notice period (as described below).

Below is a list of features considered stable and those considered experimental.

## Experimental Features

These features may be removed at any time without notice.

- Anything marked as `unstable_`, `experimental_`, or `internal`
- The `RuntimeCore` API (considered internal)

## Beta Features

A deprecation of these features will undergo a short (&lt;1) month deprecation notice period.

- TailwindCSS Plugins (e.g. `@assistant-ui/react-ui/tailwindcss`)
- Context API
- Runtime API
- Message types
- Styled UI components
- Primitive Hooks (e.g. useBranchPickerNext)
- Attachment APIs
- shadcn/ui styles

## Stable Features

A deprecation of these features will undergo a long (&gt;3 month) deprecation notice period.

The following features are considered stable:

- Primitives (except for `AttachmentPrimitive`)



================================================
File: apps/docs/content/docs/migrations/meta.json
================================================
{
  "title": "Migrations",
  "pages": ["deprecation-policy", "v0-7", "v0-8"]
}



================================================
File: apps/docs/content/docs/migrations/v0-7.mdx
================================================
---
title: Migration to v0.7
---

import { Callout } from "fumadocs-ui/components/callout";

This guide serves as a reference for users facing breaking changes during upgrade to v0.7. You do not need to read this guide to upgrade to v0.7.

All breaking changes in v0.7 are renames or removals of existing APIs. Therefore, all breaking changes should cause a Typescript error, so you can simply check for errors after upgrading.

### Component Property Types moved to `Component.Props`

Component property types are now neatly organized under the component itself.

```diff
-import { ThreadPrimitiveMessagesProps } from "@assistant-ui/react";
+import { ThreadPrimitive } from "@assistant-ui/react";

-type Props = ThreadPrimitiveMessagesProps;
+type Props = ThreadPrimitive.Messages.Props;
```

## Context API simplifications

### `useThreadContext`, `useMessageContext`, ... replaced with direct imports of stores

`useAssistantContext`, `useThreadContext`, `useMessageContext` and `useContentPartContext` have been removed in favor of direct exports from `@assistant-ui/react`;

```diff
-const { useThread } = useThreadContext();

+import { useThread } from "@assistant-ui/react";
```

# Assistant Context API simplifications

### `useAssistantActions` replaced with `useAssistantRuntime`

`useAssistantActions` has been removed in favor of `useAssistantRuntime`.

```diff
-const switchToNewThread = useAssistantActions(a => a.switchToNewThread);
+const runtime = useAssistantRuntime();
+runtime.switchToNewThread();
```

### `switchToThread(null)` replaced with `switchToNewThread()`

```diff
-useThreadRuntime().switchToThread(null);
+useThreadRuntime().switchToNewThread();
```

### useSwtichToNewThread() moved to useAssistantRuntime().switchToNewThread()

```diff
-useSwitchToNewThread();
+const runtime = useAssistantRuntime()
+runtime.switchToNewThread(); 
```

### `runtime.subscribe` removed, `subscribeToMainThread` removed

Previously, you needed to subscribe to the runtime to receive updates whenever the main thread changed and resubscribe to the main thread whenever you switched to a new thread. The `runtime.thread` value now always refers to the current main thread, there is no need to subscribe to the runtime anymore.

## ThreadRuntime API simplifications

### `useAppendMessage` moved to `useThreadRuntime().append()`

```diff
-const append = useAppendMessage();
+const threadRuntime = useThreadRuntime();
-append("hello world");
+threadRuntime.append("hello world");
```

### `useThreadActions` replaced with `useThreadRuntime`

`useThreadActions` has been removed in favor of `useThreadRuntime`.

```diff
-const reload = useThreadActions(a => a.reload);
+const threadRuntime = useThreadRuntime();
+threadRuntime.reload();
```

### State values moved to `threadRuntime.getState()`

In order to make it clear that accessing the state only provides a snapshot of the current state and will not cause a re-render on changes, the state values of `useThreadRuntime` have been moved to `threadRuntime.getState()`.

```diff
-const isRunning = useThreadRuntime().isRunning; // anti-pattern, your code will not update on change
+const isRunning = useThread(t => t.isRunning);
```

### `useThreadStore` replaced with `useThreadRuntime().getState()`

`useThreadStore` has been removed in favor of `useThreadRuntime().getState()`.

### `threadRuntime.getBranches()` replaced with `useThreadRuntime().getMessageByIndex(idx).getState().branchNumber/Count`

The branch IDs are an internal implementation detail. The new Message Runtime API provides `branchNumber` and `branchCount` state fields that can be used instead.

### New Message Runtime API replaces several methods from `useThreadRuntime`

A few methods from `useThreadRuntime` have been moved to `useMessageRuntime()`.

- `threadRuntime.switchToBranch()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).switchToBranch()`.
- `threadRuntime.addToolResult()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).getContentPartByToolCallId(toolCallId).addToolResult()`.
- `threadRuntime.speak()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).speak()`.
- `threadRuntime.submitFeedback()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).submitFeedback()`.
- `threadRuntime.getEditComposer()` has been removed in favor of `useThreadRuntime().getMessageById(id).getMessageByIndex(idx).composer`.
- `threadRuntime.beginEdit()` has been removed in favor of `useThreadRuntime().getMessageById(id).getMessageByIndex(idx).composer.beginEdit()`.

## Composer Runtime API simplifications

### Methods inside `useComposer` moved to `useComposerRuntime`

`useComposer()` used to provide several methods such as `setText`, `addAttachment`, `send`, `edit`, `cancel`, ...
These methods have been moved to `useComposerRuntime()`.

### `useComposerStore` replaced with `useComposerRuntime().getState()`

`useComposerStore` has been removed in favor of `useComposerRuntime().getState()`.

### `value` `setValue` replaced with `text` `setText`

```diff
-useComposer(c => c.value);
+useComposer(c => c.text);
```

### `focus`, `onFocus` methods removed

These methods have been removed.

## Message Context API simplifications

### Flattened context values `useMessage().message` -> `useMessage()`

`MessageState` is now itself a message, so you no longer need to access the nested `useMessage().message` field.

```diff
-useMessage(m => m.message.content);
+useMessage(m => m.content);
```

### `useMessageStore` replaced with `useMessageRuntime().getState()`

`useMessageStore` has been removed in favor of `useMessageRuntime().getState()`.

## Content Part Context API simplifications

### Flattened context values `useContentPart().part` -> `useContentPart()`

`ContentPartState` is now itself a content part, so you no longer need to access the nested `useContentPart().part` field.

```diff
-useContentPart(c => c.part.type);
+useContentPart(c => c.type);
```

This also applies to tool UI render functions:

```diff
 makeAssistantToolUI({
   ...
-  render: ({ part: { args } }) => <>{args}</>,
+  render: ({ args }) => <>{args}</>,
 });
```

## Attachment Context API simplifications

### Flattened context values `useAttachment().attachment` -> `useAttachment()`

`AttachmentState` is now itself an attachment, so you no longer need to access the nested `useAttachment().attachment` field.

```diff
-useAttachment(a => a.attachment.type);
+useAttachment(a => a.type);
```

## Roundtrips renamed to steps

`AssistantMessage.roundtrips` was renamed to `AssistantMessage.metadata.steps`.

Edge runtime's `maxToolRoundtrips` was replaced with `maxSteps` (which is `maxToolRoundtrips` + 1; if you had `maxToolRoundtrips` at 2, set `maxSteps` to 3).



================================================
File: apps/docs/content/docs/migrations/v0-8.mdx
================================================
---
title: Migration to v0.8
---

## Styled Components moved to @assistant-ui/react-ui

All styled components (Thread, ThreadList, AssistantModal, makeMarkdownText, etc.) have been moved to a new package, `@assistant-ui/react-ui`.

To migrate, use the migration codemod:

```sh
# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod
npx assistant-ui upgrade
```

## Vercel AI SDK RSC requires additional setup

Built-in RSC support in assistant-ui has been removed, so an additional setup step is required.
The RSC runtime now requires additional setup to display React Server Components.

```ts
import { RSCDisplay } from "@assistant-ui/react-ai-sdk";

// if you are using the default Thread component
// add RSCDisplay to assistantMessage.components.Text
<Thread assistantMessage={{ components: { Text: RSCDisplay } }} />


// if you are using unstyled primitives, update MyThread.tsx
<MessagePrimitive.Content components={{ Text: RSCDisplay }} />
```

## Migrate away from UIContentPart

For instructions on migrating for Vercel AI SDK RSC, see section above.
This migration guide is for users of `useExternalStoreRuntime`.

### Recommended Approach: Use ToolUI

First, reconsider your approach.

Creating UI components in the `convertMessage` callback is considered an anti-pattern.
The recommended alternative approach is to pass tool-call content parts, and use `makeAssistantToolUI` to map these tool calls to UI components.

This ensures that the data layer is separate and decoupled from the UI layer.

#### Example

Consider the following example, where you are using a UIContentPart to show a loading indicator.

```ts title="bad.ts"
// THIS IS BAD
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  if (message.isLoading) {
    return { content: [{ type: "ui", display:< MyLoader /> }] };
  }
  // ...
};
```

```ts title="good.ts"
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  if (message.isLoading) {
    return { content: [] };
  }
  // ...
};

// use the empty content part to show the loading indicator
<Thread assistantMessage={{ components: { Empty: MyLoader } }} />;
```

(if you are using unstyled primitives, update MyThread.tsx, and pass the component to MessagePrimitive.Content)

#### Example 2

Consider the following example, where you are displaying a custom chart based on data received from an external source.

```ts title="bad.ts"
// THIS IS BAD
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return { content: [{ type: "ui", display: <MyChart data={message.chartData} /> }] };
};
```

```ts title="good.ts"
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return {
    content: [
      {
        type: "tool-call",
        toolName: "chart",
        args: message.chartData,
      },
    ],
  };
};

const ChartToolUI = makeAssistantToolUI({
  toolName: "chart",
  render: ({ args }) => <MyChart data={args} />,
});

// use tool UI to display the chart
<Thread tools={[ChartToolUI]} />;
```

(if you are using unstyled primitives, render the `<ChartToolUI />` component anywhere inside your AssistantRuntimeProvider)

### Fallback Approach: Override ContentPartText

However, sometimes you receive UI components from an external source.

The example below assumes that your custom `MyMessage` type has a `display` field.

First, we define a dummy `UI_PLACEHOLDER` content part, which we will replace with the UI component later:

```ts
const UI_PLACEHOLDER = Object.freeze({
  type: "text",
  text: "UI content placeholder",
});
const convertMessage = (message: MyMessage): ThreadMessageLike => ({
  content: [
    // other content parts,
    UI_PLACEHOLDER,
  ],
});
```

Then, we define a custom `TextContentPartComponent`:

```tsx
const MyText: TextContentPartComponent = () => {
  const isUIPlaceholder = useContentPart((p) => p === UI_PLACEHOLDER);

  // this assumes that you have a `display` field on your original message objects before conversion.
  const ui = useMessage((m) =>
    isUIPlaceholder ? getExternalStoreMessage(m).display : undefined,
  );
  if (ui) {
    return ui;
  }

  return <MarkdownText />; // your default text component
};
```

We pass this component to our Thread:

```tsx
<Thread
  assistantMessage={{ components: { Text: MyText } }}
  userMessage={{ components: { Text: MyText } }}
/>
```

(if you are using unstyled primitives, update MyThread.tsx, and pass the component to MessagePrimitive.Content)

Now, the `UI_PLACEHOLDER` content part is replaced with the UI component we defined earlier.



================================================
File: apps/docs/content/docs/runtimes/helicone.mdx
================================================
---
title: Helicone
---

Helicone acts as a proxy for your OpenAI API calls, enabling detailed logging and monitoring. To integrate, update your API base URL and add the Helicone-Auth header.

## AI SDK by vercel

1. **Set Environment Variables:**

   - `HELICONE_API_KEY`
   - `OPENAI_API_KEY`

2. **Configure the OpenAI client:**

```ts
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

const openai = createOpenAI({
  baseURL: "https://oai.helicone.ai/v1",
  headers: {
    "Helicone-Auth": `Bearer ${process.env.HELICONE_API_KEY}`,
  },
});

export async function POST(req: Request) {
  const { prompt } = await req.json();
  return streamText({
    model: openai("gpt-4o"),
    prompt,
  });
}
```

## LangChain Integration (Python)

1. **Set Environment Variables:**

   - `HELICONE_API_KEY`
   - `OPENAI_API_KEY`

2. **Configure ChatOpenAI:**

```python
from langchain.chat_models import ChatOpenAI
import os

llm = ChatOpenAI(
    model_name="gpt-3.5-turbo",
    temperature=0,
    openai_api_base="https://oai.helicone.ai/v1",
    openai_api_key=os.environ["OPENAI_API_KEY"],
    openai_api_headers={"Helicone-Auth": f"Bearer {os.environ['HELICONE_API_KEY']}"}
)
```

## Summary

Update your API base URL to `https://oai.helicone.ai/v1` and add the `Helicone-Auth` header with your API key either in your Vercel AI SDK or LangChain configuration.



================================================
File: apps/docs/content/docs/runtimes/langserve.mdx
================================================
---
title: LangChain LangServe
---

## Overview

Integration with a LangServe server via Vercel AI SDK.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install `@langchain/core`, `ai-sdk` and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai ai/react @langchain/core
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

```tsx twoslash title="@/app/api/chat/route.ts"
// @errors: 2558 2345
import { RemoteRunnable } from "@langchain/core/runnables/remote";
import type { RunnableConfig } from "@langchain/core/runnables";
import { streamText, LangChainAdapter, type Message } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = (await req.json()) as { messages: Message[] };

  // TODO replace with your own langserve URL
  const remoteChain = new RemoteRunnable<
    { messages: Message[] },
    string,
    RunnableConfig
  >({
    url: "<YOUR_LANGSERVE_URL>",
  });

  const stream = await remoteChain.stream({
    messages,
  });

  return LangChainAdapter.toDataStreamResponse(stream);
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

```tsx twoslash include MyRuntimeProvider title="@/app/MyRuntimeProvider.tsx"
// @filename: /app/MyRuntimeProvider.tsx
// ---cut---
"use client";

import { useChat } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({
    api: "/api/chat",
    unstable_AISDKInterop: true,
  });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

```tsx twoslash title="@/app/layout.tsx"
// @include: MyRuntimeProvider
// @filename: /app/layout.tsx
// ---cut---
import type { ReactNode } from "react";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/runtimes/meta.json
================================================
{
  "title": "Runtime",
  "pages": [
    "pick-a-runtime",
    "ai-sdk",
    "langgraph",
    "langserve",
    "external-store",
    "custom-rest",
    "helicone",
    "..."
  ]
}



================================================
File: apps/docs/content/docs/runtimes/pick-a-runtime.mdx
================================================
---
title: Picking a Runtime
---

assistant-ui offers a variety of runtimes for different use cases.

## New Chatbot

The following runtimes are recommended for new apps:

- [AI SDK](/docs/runtimes/ai-sdk/use-chat)
- [LangGraph Cloud](/docs/runtimes/langgraph)

### Vercel AI SDK

AI SDK by Vercel lets you build conversational AI agents.

### LangGraph Cloud

The LangGraph Cloud runtime lets you build stateful agents with LangGraph.

## Already using a custom backend

For custom backends, we have two entrypoints for integration:

- [LocalRuntime](/docs/runtimes/custom/local)
- [ExternalStoreRuntime](/docs/runtimes/custom/external-store)



================================================
File: apps/docs/content/docs/runtimes/ai-sdk/meta.json
================================================
{
  "title": "AI SDK by Vercel",
  "pages": ["use-chat", "use-chat-hook", "use-assistant-hook", "rsc"]
}



================================================
File: apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx
================================================
---
title: Vercel AI SDK RSC Runtime
---

## Overview

Integration with the Vercel AI SDK React Server Components. It allows streaming React components directly from the server.  
Integrates with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Example

[RSC Example App](https://assistant-ui-rsc-example.vercel.app/)

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react-ai-sdk`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai zod nanoid
```

  </Step>
  <Step>

### Setup `actions.tsx`

`@/app/actions.tsx`

```tsx
"use server";

import { createAI, getMutableAIState, streamUI } from "ai/rsc";
import { openai } from "@ai-sdk/openai";
import { ReactNode } from "react";
import { z } from "zod";
import { nanoid } from "nanoid";

export interface ServerMessage {
  role: "user" | "assistant";
  content: string;
}

export interface ClientMessage {
  id: string;
  role: "user" | "assistant";
  display: ReactNode;
}

export async function continueConversation(
  input: string,
): Promise<ClientMessage> {
  "use server";

  const history = getMutableAIState();

  const result = await streamUI({
    model: openai("gpt-3.5-turbo"),
    messages: [...history.get(), { role: "user", content: input }],
    text: ({ content, done }) => {
      if (done) {
        history.done((messages: ServerMessage[]) => [
          ...messages,
          { role: "assistant", content },
        ]);
      }

      return <div>{content}</div>;
    },
    tools: {
      deploy: {
        description: "Deploy repository to vercel",
        parameters: z.object({
          repositoryName: z
            .string()
            .describe("The name of the repository, example: vercel/ai-chatbot"),
        }),
        generate: async function* ({ repositoryName }) {
          yield <div>Cloning repository {repositoryName}...</div>; // [!code highlight:5]
          await new Promise((resolve) => setTimeout(resolve, 3000));
          yield <div>Building repository {repositoryName}...</div>;
          await new Promise((resolve) => setTimeout(resolve, 2000));
          return <div>{repositoryName} deployed!</div>;
        },
      },
    },
  });

  return {
    id: nanoid(),
    role: "assistant",
    display: result.value,
  };
}

export const AI = createAI<ServerMessage[], ClientMessage[]>({
  actions: {
    continueConversation,
  },
  initialAIState: [],
  initialUIState: [],
});
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import {
  type AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";
import { useActions, useUIState } from "ai/rsc";
import { nanoid } from "nanoid";

import type { AI } from "./actions";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { continueConversation } = useActions();
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    const message = await continueConversation(input);

    setMessages((currentConversation) => [...currentConversation, message]);
  };

  const runtime = useVercelRSCRuntime({ messages, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `AI` and `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1-2,12-13,19-20}
import { AI } from '@/app/actions';
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <AI>
      <MyRuntimeProvider>
        <html lang="en">
          <body className={inter.className}>
            {children}
          </body>
        </html>
      </MyRuntimeProvider>
    </AI>
  )
}
```

  </Step>
</Steps>

## Set up RSCDisplay

Pass the `RSCDisplay` component to your `MessagePrimitive.Content`:

```tsx
<MessagePrimitive.Content components={{ Text: RSCDisplay }} />
```

(if you are using react-ui: `<Thread assistantMessage={{ components: { Text: RSCDisplay } }} />`)

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to your message format.

```tsx
const MyAssistantMessage = () => {
  const myMessage = useMessage((m) => getExternalStoreMessages(m)[0]);
  // ...
};
```



================================================
File: apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx
================================================
---
title: useAssistant Hook Integration
---

## Overview

Integration with the Vercel AI SDK UI's `useAssistant` hook.  
This allows interaction with the OpenAI Assistants API.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react-ai-sdk`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/assistant`

`/app/api/assistant/route.ts`

```tsx
import { AssistantResponse } from "ai";
import OpenAI from "openai";
import type { Run } from "openai/resources/beta/threads/runs/runs";

const openai = new OpenAI();

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  // Parse the request body
  const input: {
    threadId: string | null;
    message: string;
  } = await req.json();

  // Create a thread if needed
  const threadId = input.threadId ?? (await openai.beta.threads.create({})).id;

  // Add a message to the thread
  const createdMessage = await openai.beta.threads.messages.create(threadId, {
    role: "user",
    content: input.message,
  });

  return AssistantResponse(
    { threadId, messageId: createdMessage.id },
    async ({ forwardStream, sendDataMessage }) => {
      // Run the assistant on the thread
      const runStream = openai.beta.threads.runs.stream(threadId, {
        assistant_id:
          process.env.ASSISTANT_ID ??
          (() => {
            throw new Error("ASSISTANT_ID is not set");
          })(),
      });

      // forward run status would stream message deltas
      let runResult: Run = await forwardStream(runStream);

      // status can be: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired
      while (
        runResult?.status === "requires_action" &&
        runResult.required_action?.type === "submit_tool_outputs"
      ) {
        const tool_outputs =
          runResult.required_action.submit_tool_outputs.tool_calls.map(
            (toolCall: any) => {
              const parameters = JSON.parse(toolCall.function.arguments);

              switch (toolCall.function.name) {
                // configure your tool calls here

                default:
                  throw new Error(
                    `Unknown tool call function: ${toolCall.function.name}`,
                  );
              }
            },
          );

        runResult = await forwardStream(
          openai.beta.threads.runs.submitToolOutputsStream(
            threadId,
            runResult.id,
            { tool_outputs },
          ),
        );
      }
    },
  );
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useAssistant } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseAssistantRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const assistant = useAssistant({
    api: "/api/assistant",
  });

  const runtime = useVercelUseAssistantRuntime(assistant);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```



================================================
File: apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx
================================================
---
title: useChat Hook Integration (Legacy)
---

## Overview

Integration with the Vercel AI SDK UI's `useChat` hook.  
It allows integration with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

`@/app/api/chat/route.ts`

```tsx
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToCoreMessages(messages),
  });

  return result.toDataStreamResponse();
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useChat } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({
    api: "/api/chat",
  });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```


================================================
File: apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx
================================================
---
title: useChatRuntime
---

## Overview

Integration with the Vercel AI SDK UI's `useChat` hook.  
It allows integration with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

`@/app/api/chat/route.ts`

```tsx
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToCoreMessages(messages),
  });

  return result.toDataStreamResponse();
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useChat } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```


================================================
File: apps/docs/content/docs/runtimes/custom/external-store.mdx
================================================
---
title: ExternalStoreRuntime
---

import { Callout } from "fumadocs-ui/components/callout";

## Overview

<Callout emoji="💡">
If you need full control over the state of the messages on the frontend, use ExternalStoreRuntime.

With LocalRuntime, the chat history state is managed by assistant-ui. This
gives you built-in support for thread management, message editing, reloading
and branch switching.

</Callout>

Use the `ExternalStoreRuntime` if you want to manage the message state yourself via any react state management library.

This runtime requires a `ExternalStoreAdapter<TMessage>` handles communication between `assistant-ui`and your state.
Unless you are storing messages as `ThreadMessage`, you need to define a `convertMessage` function to convert your messages to `ThreadMessage`.

```tsx twoslash title="@/app/MyRuntimeProvider.tsx"
type MyMessage = {
  role: "user" | "assistant";
  content: string;
};
const backendApi = async (input: string): Promise<MyMessage> => {
  return { role: "assistant", content: "Hello, world!" };
};

// ---cut---
import { useState, ReactNode } from "react";
import {
  useExternalStoreRuntime,
  ThreadMessageLike,
  AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";

const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return {
    role: message.role,
    content: [{ type: "text", text: message.content }],
  };
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  const [isRunning, setIsRunning] = useState(false);
  const [messages, setMessages] = useState<MyMessage[]>([]);

  const onNew = async (message: AppendMessage) => {
    if (message.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = message.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { role: "user", content: input },
    ]);

    setIsRunning(true);
    const assistantMessage = await backendApi(input);
    setMessages((currentConversation) => [
      ...currentConversation,
      assistantMessage,
    ]);
    setIsRunning(false);
  };

  const runtime = useExternalStoreRuntime({
    isRunning,
    messages,
    convertMessage,
    onNew,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

## Accessing External Store Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to your own message type.

```tsx
const MyAssistantMessage = () => {
  const myMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};
```

Keep in mind that `getExternalStoreMessages` may return multiple messages. This is because assistant-ui merges adjacent assistant and tool messages into a single assistant message.

You can do the same operation for individual content parts as well:

```tsx
const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const myMessages = useContentPart((p) => getExternalStoreMessages(p));
    // ...
  },
});
```



================================================
File: apps/docs/content/docs/runtimes/custom/local.mdx
================================================
---
title: LocalRuntime
---

import { Callout } from "fumadocs-ui/components/callout";

## Overview

<Callout emoji="💡">
  With LocalRuntime, the chat history state is managed by assistant-ui. This
  gives you built-in support for thread management, message editing, reloading
  and branch switching.

If you need full control over the state of the messages on the frontend, use ExternalStoreRuntime instead.
</Callout>

`assistant-ui` integrates with any custom REST API. To do so, you define a custom `ChatModelAdapter` and pass it to the `useLocalRuntime` hook.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

Update the `MyModelAdapter` below to integrate with your own custom API.

```tsx twoslash include MyRuntimeProvider title="@/app/MyRuntimeProvider.tsx"
// @filename: /app/MyRuntimeProvider.tsx

// ---cut---
"use client";

import type { ReactNode } from "react";
import {
  AssistantRuntimeProvider,
  useLocalRuntime,
  type ChatModelAdapter,
} from "@assistant-ui/react";

const MyModelAdapter: ChatModelAdapter = {
  async run({ messages, abortSignal }) {
    // TODO replace with your own API
    const result = await fetch("<YOUR_API_ENDPOINT>", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      // forward the messages in the chat to the API
      body: JSON.stringify({
        messages,
      }),
      // if the user hits the "cancel" button or escape keyboard key, cancel the request
      signal: abortSignal,
    });

    const data = await result.json();
    return {
      content: [
        {
          type: "text",
          text: data.text,
        },
      ],
    };
  },
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  const runtime = useLocalRuntime(MyModelAdapter);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

```tsx {1,11,17} twoslash title="@/app/layout.tsx"
// @include: MyRuntimeProvider
// @filename: /app/layout.tsx
// ---cut---
import type { ReactNode } from "react";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}
```

  </Step>
</Steps>

## Streaming

Declare the `run` function as an `AsyncGenerator` (`async *run`). This allows you to `yield` the results as they are generated.

```tsx twoslash {2, 11-13} title="@/app/MyRuntimeProvider.tsx"
import {
  ChatModelAdapter,
  ThreadMessage,
  type ModelContext,
} from "@assistant-ui/react";
import { OpenAI } from "openai";

const openai = new OpenAI();
const backendApi = async ({
  messages,
  abortSignal,
  context,
}: {
  messages: readonly ThreadMessage[];
  abortSignal: AbortSignal;
  context: ModelContext;
}) => {
  return openai.chat.completions.create({
    model: "gpt-4o",
    messages: [{ role: "user", content: "Say this is a test" }],
    stream: true,
  });
};

// ---cut---
const MyModelAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal, context }) {
    const stream = await backendApi({ messages, abortSignal, context });

    let text = "";
    for await (const part of stream) {
      text += part.choices[0]?.delta?.content || "";

      yield {
        content: [{ type: "text", text }],
      };
    }
  },
};
```



================================================
File: apps/docs/content/docs/runtimes/custom/meta.json
================================================
{
  "title": "Custom Backend",
  "pages": ["local", "external-store"]
}



================================================
File: apps/docs/content/docs/runtimes/langgraph/index.mdx
================================================
---
title: Getting Started
---

## Requirements

You need a LangGraph Cloud API server. You can start a server locally via [LangGraph Studio](https://github.com/langchain-ai/langgraph-studio) or use [LangSmith](https://www.langchain.com/langsmith) for a hosted version.

The state of the graph you are using must have a `messages` key with a list of LangChain-alike messages.

## New project from template

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a new project based on the LangGraph assistant-ui template

```sh
npx create-assistant-ui@latest -t langgraph my-app
```

  </Step>
  <Step>
  ### Set environment variables

Create a `.env.local` file in your project with the following variables:

```sh
# LANGCHAIN_API_KEY=your_api_key # for production
# LANGGRAPH_API_URL=your_api_url # for production
NEXT_PUBLIC_LANGGRAPH_API_URL=your_api_url # for development (no api key required)
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=your_graph_id
```

  </Step>
</Steps>

## Installation in existing React project

<Steps>
  <Step>

### Install dependencies

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ui @assistant-ui/react-langgraph @langchain/langgraph-sdk
```

  </Step>
    <Step>

### Setup a proxy backend endpoint (optional, for production)

<Callout type="warn">
  This example forwards every request to the LangGraph server directly from the
  browser. For production use-cases, you should limit the API calls to the
  subset of endpoints that you need and perform authorization checks.
</Callout>

```tsx twoslash title="@/api/api/[...path]/route.ts"
import { NextRequest, NextResponse } from "next/server";

export const runtime = "edge";

function getCorsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "*",
  };
}

async function handleRequest(req: NextRequest, method: string) {
  try {
    const path = req.nextUrl.pathname.replace(/^\/?api\//, "");
    const url = new URL(req.url);
    const searchParams = new URLSearchParams(url.search);
    searchParams.delete("_path");
    searchParams.delete("nxtP_path");
    const queryString = searchParams.toString()
      ? `?${searchParams.toString()}`
      : "";

    const options: RequestInit = {
      method,
      headers: {
        "x-api-key": process.env["LANGCHAIN_API_KEY"] || "",
      },
    };

    if (["POST", "PUT", "PATCH"].includes(method)) {
      options.body = await req.text();
    }

    const res = await fetch(
      `${process.env["LANGGRAPH_API_URL"]}/${path}${queryString}`,
      options,
    );

    return new NextResponse(res.body, {
      status: res.status,
      statusText: res.statusText,
      headers: {
        ...res.headers,
        ...getCorsHeaders(),
      },
    });
  } catch (e: any) {
    return NextResponse.json({ error: e.message }, { status: e.status ?? 500 });
  }
}

export const GET = (req: NextRequest) => handleRequest(req, "GET");
export const POST = (req: NextRequest) => handleRequest(req, "POST");
export const PUT = (req: NextRequest) => handleRequest(req, "PUT");
export const PATCH = (req: NextRequest) => handleRequest(req, "PATCH");
export const DELETE = (req: NextRequest) => handleRequest(req, "DELETE");

// Add a new OPTIONS handler
export const OPTIONS = () => {
  return new NextResponse(null, {
    status: 204,
    headers: {
      ...getCorsHeaders(),
    },
  });
};
```

  </Step>
  <Step>

### Setup helper functions

```tsx twoslash include chatApi title="@/lib/chatApi.ts"
// @filename: /lib/chatApi.ts

// ---cut---
import { Client } from "@langchain/langgraph-sdk";
import { LangChainMessage } from "@assistant-ui/react-langgraph";

const createClient = () => {
  const apiUrl = process.env["NEXT_PUBLIC_LANGGRAPH_API_URL"] || "/api";
  return new Client({
    apiUrl,
  });
};

export const createThread = async () => {
  const client = createClient();
  return client.threads.create();
};

export const getThreadState = async (
  threadId: string,
): Promise<ThreadState<{ messages: LangChainMessage[] }>> => {
  const client = createClient();
  return client.threads.getState(threadId);
};

export const sendMessage = async (params: {
  threadId: string;
  messages: LangChainMessage;
}) => {
  const client = createClient();
  return client.runs.stream(
    params.threadId,
    process.env["NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID"]!,
    {
      input: {
        messages: params.messages,
      },
      streamMode: "messages",
    },
  );
};
```

  </Step>
  <Step>

### Define a `MyAssistant` component

```tsx twoslash include MyAssistant title="@/components/MyAssistant.tsx"
// @filename: /components/MyAssistant.tsx
// @include: chatApi

// ---cut---
"use client";

import { useRef } from "react";
import { Thread, makeMarkdownText } from "@assistant-ui/react-ui";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";

import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";

const MarkdownText = makeMarkdownText();

export function MyAssistant() {
  const threadIdRef = useRef<string | undefined>();
  const runtime = useLangGraphRuntime({
    threadId: threadIdRef.current,
    stream: async (messages) => {
      if (!threadIdRef.current) {
        const { thread_id } = await createThread();
        threadIdRef.current = thread_id;
      }
      const threadId = threadIdRef.current;
      return sendMessage({
        threadId,
        messages,
      });
    },
    onSwitchToNewThread: async () => {
      const { thread_id } = await createThread();
      threadIdRef.current = thread_id;
    },
    onSwitchToThread: async (threadId) => {
      const state = await getThreadState(threadId);
      threadIdRef.current = threadId;
      return { 
        messages: state.values.messages,
        interrupts: state.tasks[0]?.interrupts,
      };
    },
  });

  return (
    <Thread
      runtime={runtime}
      assistantMessage={{ components: { Text: MarkdownText } }}
    />
  );
}
```

  </Step>
  <Step>

### Use the `MyAssistant` component

```tsx twoslash title="@/app/page.tsx" {2,8}
// @include: MyAssistant
// @filename: /app/page.tsx
// ---cut---
import { MyAssistant } from "@/components/MyAssistant";

export default function Home() {
  return (
    <main className="h-dvh">
      <MyAssistant />
    </main>
  );
}
```

  </Step>
  <Step>

### Setup environment variables

Create a `.env.local` file in your project with the following variables:

```sh
# LANGCHAIN_API_KEY=your_api_key # for production
# LANGGRAPH_API_URL=your_api_url # for production
NEXT_PUBLIC_LANGGRAPH_API_URL=your_api_url # for development (no api key required)
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=your_graph_id
```

  </Step>
  <Step>

### Setup UI components

Follow the [UI Components](/docs/ui/shadcn-ui/Thread) guide to setup the UI components.

  </Step>
</Steps>

## Advanced APIs

### Message Accumulator

The `LangGraphMessageAccumulator` lets you append messages incoming from the server to replicate the messages state client side.

```typescript
import { LangGraphMessageAccumulator, appendLangChainChunk } from "@assistant-ui/react-langgraph";

const accumulator = new LangGraphMessageAccumulator({
  appendMessage: appendLangChainChunk
});

// Add new chunks from the server
if (event.event === "messages/partial")
  accumulator.addMessages(event.data);
```

### Message Conversion

Use `convertLangChainMessages` to transform LangChain messages to assistant-ui format:

```typescript
import { convertLangChainMessages } from "@assistant-ui/react-langgraph";

const threadMessage = convertLangChainMessages(langChainMessage);
```

## Interrupt Persistence

LangGraph supports interrupting the execution flow to request user input or handle specific interactions. These interrupts can be persisted and restored when switching between threads. This means that if a user switches away from a thread during an interaction (like waiting for user approval), the interaction state will be preserved when they return to that thread.

To handle interrupts in your application:

1. Make sure your thread state type includes the `interrupts` field
2. Return the interrupts from `onSwitchToThread` along with the messages
3. The runtime will automatically restore the interrupt state when switching threads

This feature is particularly useful for applications that require user approval flows, multi-step forms, or any other interactive elements that might span multiple thread switches.


================================================
File: apps/docs/content/docs/runtimes/langgraph/meta.json
================================================
{
  "title": "LangGraph Cloud",
  "pages": ["index", "tutorial", "..."]
}



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/index.mdx
================================================
---
title: "Introduction"
---

import { redirect } from "next/navigation";

<>
  {redirect(
    "/docs/runtimes/langgraph/tutorial/introduction",
  )}
</>



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/introduction.mdx
================================================
---
title: "Introduction"
---

In this tutorial, we will build a stockbroker assistant using LangChain.js, LangGraph.js and assistant-ui.

We will go through the necessary steps to integrate assistant-ui with a LangGraph Cloud endpoint.
Code snippets focus on the setup of the frontend, but we will highlight relevant sections of the backend code as well.

This agent leverages the following features:

- 🚄 Streaming of messages from LangGraph state to assistant-ui
- 💅 Rich text rendering using Markdown
- 🛠️ Generative UI: Mapping tool calls to tool UIs
- 🔁 Approval UI: Confirming tool calls before execution (human-in-the-loop)

## Prerequisites

- Node.js 18.x or higher

## Final Result

- Demo: https://assistant-ui-stockbroker.vercel.app/
- Source Code: https://github.com/assistant-ui/assistant-ui-stockbroker

## Get Started

Begin Part 1 of the tutorial by [setting up the frontend](/docs/runtimes/langgraph/tutorial/part-1).



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/meta.json
================================================
{
  "title": "Tutorial: Stockbroker",
  "pages": ["..."]
}



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx
================================================
---
title: "Part 1: Setup frontend"
---

## Create a new project

Run the following command to create a new Next.js project with the LangGraph assistant-ui template:

```sh
npx create-assistant-ui@latest -t langgraph my-app
cd my-app
```

You should see the following files in your project:

import { File, Folder, Files } from "fumadocs-ui/components/files";

<Files>
  <Folder name="my-app" defaultOpen>
    <Folder name="app" defaultOpen>
      <Folder name="api" defaultOpen>
        <Folder name="[...path]" defaultOpen>
          <File name="route.ts" />
        </Folder>
      </Folder>
      <File name="globals.css" />
      <File name="layout.tsx" />
      <File name="MyRuntimeProvider.tsx" />
      <File name="page.tsx" />
    </Folder>
    <Folder name="lib">
      <File name="chatApi.ts" />
    </Folder>
    <File name="next.config.mjs" />
    <File name="package.json" />
    <File name="postcss.config.mjs" />
    <File name="tailwind.config.ts" />
    <File name="tsconfig.json" />
  </Folder>
</Files>

### Setup environment variables

Create a `.env.local` file in your project with the following variables:

```sh title="@/.env.local"
LANGGRAPH_API_URL=https://assistant-ui-stockbroker.vercel.app/api
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker
```

This connects the frontend to a LangGraph Cloud endpoint running under  
`https://assistant-ui-stockbroker.vercel.app/api`.  
This endpoint is running the LangGraph agent defined [in this repository](https://github.com/assistant-ui/assistant-ui-stockbroker/blob/main/backend).

### Start the server

You can start the server by running the following command:

```sh
npm run dev
```

The server will start and you can view the frontend by opening a browser tab to http://localhost:3000.

You should be able to chat with the assistant and see LLM responses streaming in real-time.

## Explore features

### Streaming

Streaming message support is enabled by default. The LangGraph integration includes sophisticated message handling that efficiently manages streaming responses:

- Messages are accumulated and updated in real-time using `LangGraphMessageAccumulator`
- Partial message chunks are automatically merged using `appendLangChainChunk`
- The runtime handles all the complexity of managing streaming state

This means you'll see tokens appear smoothly as they're generated by the LLM, with proper handling of both text content and tool calls.

### Markdown support

Rich text rendering using Markdown is enabled by default. You can view `/app/page.tsx` to see how this is implemented. The `makeMarkdownText` function accepts a configuration object to customize the markdown parser.

```tsx title="@/app/page.tsx" {4,6,11}
"use client";

import { Thread, makeMarkdownText } from "@assistant-ui/react-ui";

const MarkdownText = makeMarkdownText();

export default function Home() {
  return (
    <main className="h-full">
      <Thread assistantMessage={{ components: { Text: MarkdownText } }} />
    </main>
  );
}
```

## Add conversation starter messages

In order to help users understand what the assistant can do, we can add some conversation starter messages.

import Image from "next/image";
import starter from "./images/conversation-starters.png";

<Image
  src={starter}
  alt="Conversation starters"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

```tsx title="@/app/page.tsx" {5-17}
export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        welcome={{
          suggestions: [
            {
              prompt: "How much revenue did Apple make last year?",
            },
            {
              prompt: "Is McDonald's profitable?",
            },
            {
              prompt: "What's the current stock price of Tesla?",
            },
          ],
        }}
        assistantMessage={{ components: { Text: MarkdownText } }}
      />
    </div>
  );
}
```



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx
================================================
---
title: "Part 2: Generative UI"
---

In the previous step, we set up the frontend to connect to a LangGraph Cloud endpoint.

In this step, we will set up a component to display stock ticker information.

import Image from "next/image";
import price from "./images/acme-price.png";

<Image
  src={price}
  alt="Price snapshot"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

For reference, this the corresponding code in the backend:

https://github.com/assistant-ui/assistant-ui-stockbroker/blob/main/backend/src/tools.ts#L193C1-L216C3

```ts title="assistant-ui-stockbroker/backend/tools/PriceSnapshotTool.ts"
export const priceSnapshotTool = tool(
  async (input) => {
    const data = await callFinancialDatasetAPI<SnapshotResponse>({
      endpoint: "/prices/snapshot",
      params: {
        ticker: input.ticker,
      },
    });
    return JSON.stringify(data, null);
  },
  {
    name: "price_snapshot",
    description:
      "Retrieves the current stock price and related market data for a given company.",
    schema: z.object({
      ticker: z.string().describe("The ticker of the company. Example: 'AAPL'"),
    }),
  },
);
```

## PriceSnapshotTool

We create a new file under `/components/tools/price-snapshot/PriceSnapshotTool.tsx` to define the tool.

First, we define the tool arguments and result types:

```ts title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx"
type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  snapshot: {
    price: number;
    day_change: number;
    day_change_percent: number;
    time: string;
  };
};
```

Then, we use `makeAssistantToolUI` to define the tool UI:

```tsx title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx"
"use client";

import { makeAssistantToolUI } from "@assistant-ui/react";

export const PriceSnapshotTool = makeAssistantToolUI<
  PriceSnapshotToolArgs,
  string
>({
  toolName: "price_snapshot",
  render: function PriceSnapshotUI({ args, result }) {
    return (
      <div className="mb-4 flex flex-col items-center">
        <pre className="whitespace-pre-wrap break-all text-center">
          price_snapshot({JSON.stringify(args)})
        </pre>
      </div>
    );
  },
});
```

This simply displays the tool name and arguments passed to it, but not the result.

### Bind tool UI

```tsx title="@/app/page.tsx" {1,8}
import { PriceSnapshotTool } from "@/components/tools/price-snapshot/PriceSnapshotTool";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        tools={[PriceSnapshotTool]}
      />
    </div>
  );
}
```

### Try it out!

Ask the assistant for the current stock price of Tesla. You should see the following text appear:

```
price_snapshot({ticker: "TSLA"})
```

Next, we will visualize the function's result.

## Visualizing tool results

### Install dependencies

The tool result component relies on shadcn/ui's `Card` component. We will install it as a dependency.

```sh
npx shadcn@latest add card
```

You will be prompted to setup a `components.json` file, after this step, a `card` UI component will be installed in your project.

### Add `PriceSnapshot`

We create a new file under `/components/tools/price-snapshot/price-snapshot.tsx` to define the new tool result UI.

```tsx title="@/components/tools/price-snapshot/price-snapshot.tsx"
"use client";

import { ArrowDownIcon, ArrowUpIcon } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  price: number;
  day_change: number;
  day_change_percent: number;
  time: string;
};

export function PriceSnapshot({
  ticker,
  price,
  day_change,
  day_change_percent,
  time,
}: PriceSnapshotToolArgs & PriceSnapshotToolResult) {
  const isPositiveChange = day_change >= 0;
  const changeColor = isPositiveChange ? "text-green-600" : "text-red-600";
  const ArrowIcon = isPositiveChange ? ArrowUpIcon : ArrowDownIcon;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">{ticker}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <div className="col-span-2">
            <p className="text-3xl font-semibold">${price?.toFixed(2)}</p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Day Change</p>
            <p
              className={`flex items-center text-lg font-medium ${changeColor}`}
            >
              <ArrowIcon className="mr-1 h-4 w-4" />$
              {Math.abs(day_change)?.toFixed(2)} (
              {Math.abs(day_change_percent)?.toFixed(2)}%)
            </p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Last Updated</p>
            <p className="text-lg font-medium">
              {new Date(time).toLocaleTimeString()}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
```

### Update `PriceSnapshotTool`

We will import the new `<PriceSnapshot />` component and use it in the `render` function whenever a tool result is available.

```tsx title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx" {3,25-30,37-42}
"use client";

import { PriceSnapshot } from "./price-snapshot";
import { makeAssistantToolUI } from "@assistant-ui/react";

type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  snapshot: {
    price: number;
    day_change: number;
    day_change_percent: number;
    time: string;
  };
};

export const PriceSnapshotTool = makeAssistantToolUI<
  PriceSnapshotToolArgs,
  string
>({
  toolName: "price_snapshot",
  render: function PriceSnapshotUI({ args, result }) {
    let resultObj: PriceSnapshotToolResult | { error: string };
    try {
      resultObj = result ? JSON.parse(result) : {};
    } catch (e) {
      resultObj = { error: result! };
    }

    return (
      <div className="mb-4 flex flex-col items-center gap-2">
        <pre className="whitespace-pre-wrap break-all text-center">
          price_snapshot({JSON.stringify(args)})
        </pre>
        {"snapshot" in resultObj && (
          <PriceSnapshot ticker={args.ticker} {...resultObj.snapshot} />
        )}
        {"error" in resultObj && (
          <p className="text-red-500">{resultObj.error}</p>
        )}
      </div>
    );
  },
});
```

### Try it out!

Ask the assistant for the current stock price of Tesla. You should see the tool result appear:

import price2 from "./images/tsla-price.png";

<Image
  src={price2}
  alt="Price snapshot result"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

## Fallback tool UI

Instead of defining a custom tool UI for every tool, we can also define a fallback UI for all tools that are not explicitly defined.

This requires shadcn/ui's `Button` component. We will install it as a dependency.

```sh
npx shadcn@latest add button
```

Then create a new file under `/components/tools/ToolFallback.tsx` to define the fallback UI.

```tsx title="@/components/tools/ToolFallback.tsx"
import { ToolCallContentPartComponent } from "@assistant-ui/react";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";
import { useState } from "react";
import { Button } from "../ui/button";

export const ToolFallback: ToolCallContentPartComponent = ({
  toolName,
  argsText,
  result,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  return (
    <div className="mb-4 flex w-full flex-col gap-3 rounded-lg border py-3">
      <div className="flex items-center gap-2 px-4">
        <CheckIcon className="size-4" />
        <p className="">
          Used tool: <b>{toolName}</b>
        </p>
        <div className="flex-grow" />
        <Button onClick={() => setIsCollapsed(!isCollapsed)}>
          {isCollapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}
        </Button>
      </div>
      {!isCollapsed && (
        <div className="flex flex-col gap-2 border-t pt-2">
          <div className="px-4">
            <pre className="whitespace-pre-wrap">{argsText}</pre>
          </div>
          {result !== undefined && (
            <div className="border-t border-dashed px-4 pt-2">
              <p className="font-semibold">Result:</p>
              <pre className="whitespace-pre-wrap">
                {typeof result === "string"
                  ? result
                  : JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
```

### Bind fallback UI

```tsx title="@/app/page.tsx" {1,8}
import { ToolFallback } from "@/components/tools/ToolFallback";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        assistantMessage={{ components: { Text: MarkdownText, ToolFallback } }}
      />
    </div>
  );
}
```



================================================
File: apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx
================================================
---
title: "Part 3: Approval UI"
---

## Background: LangGraph implementation details

import Image from "next/image";
import approval from "./images/stockbroker-langgraph.png";

<Image
  src={approval}
  alt="LangChain LangGraph"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

Our LangGraph backend interrupts the `purchase_stock` tool execution in order to ensure the user confirms the purchase. The user confirms the purchase by submitting a tool message with the `approve` field set to `true`.

```ts title="assistant-ui-stockbroker/backend/src/index.ts" {6,18-19,32-35}
const purchaseApproval = async (state: typeof GraphAnnotation.State) => {
  const { messages } = state;
  const lastMessage = messages[messages.length - 1];
  if (!(lastMessage instanceof ToolMessage)) {
    // Interrupt the node to request permission to execute the purchase.
    throw new NodeInterrupt("Please confirm the purchase before executing.");
  }
};

const shouldExecutePurchase = (state: typeof GraphAnnotation.State) => {
  const { messages } = state;
  const lastMessage = messages[messages.length - 1];
  if (!(lastMessage instanceof ToolMessage)) {
    // Interrupt the node to request permission to execute the purchase.
    throw new NodeInterrupt("Please confirm the purchase before executing.");
  }

  const { approve } = JSON.parse(lastMessage.content as string);
  return approve ? "execute_purchase" : "agent";
};

const workflow = new StateGraph(GraphAnnotation)
  .addNode("agent", callModel)
  .addEdge(START, "agent")
  .addNode("tools", toolNode)
  .addNode("prepare_purchase_details", preparePurchaseDetails)
  .addNode("purchase_approval", purchaseApproval)
  .addNode("execute_purchase", executePurchase)
  .addEdge("prepare_purchase_details", "purchase_approval")
  .addEdge("execute_purchase", END)
  .addEdge("tools", "agent")
  .addConditionalEdges("purchase_approval", shouldExecutePurchase, [
    "agent",
    "execute_purchase",
  ])
  .addConditionalEdges("agent", shouldContinue, [
    "tools",
    END,
    "prepare_purchase_details",
  ]);
```

## Add approval UI

We create a new file under `/components/tools/purchase-stock/PurchaseStockTool.tsx` to define the tool.

First, we define the tool arguments and result types:

```ts title="@/components/tools/purchase-stock/PurchaseStockTool.tsx"
type PurchaseStockArgs = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

type PurchaseStockResult = {
  approve?: boolean;
  cancelled?: boolean;
  error?: string;
};
```

Then we use `makeAssistantToolUI` to define the tool UI:

```tsx title="@/components/tools/purchase-stock/PurchaseStockTool.tsx"
"use client";

import { TransactionConfirmationPending } from "./transaction-confirmation-pending";
import { TransactionConfirmationFinal } from "./transaction-confirmation-final";
import { makeAssistantToolUI } from "@assistant-ui/react";
import { updateState } from "@/lib/chatApi";

export const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(
  {
    toolName: "purchase_stock",
    render: function PurchaseStockUI({ args, result, status, addResult }) {
      const handleReject = async () => {
        addResult({ approve: false });
      };

      const handleConfirm = async () => {
        addResult({ approve: true });
      };

      return (
        <div className="mb-4 flex flex-col items-center gap-2">
          <div>
            <pre className="whitespace-pre-wrap break-all text-center">
              purchase_stock({JSON.stringify(args)})
            </pre>
          </div>
          {!result && status.type !== "running" && (
            <TransactionConfirmationPending
              {...args}
              onConfirm={handleConfirm}
              onReject={handleReject}
            />
          )}
        </div>
      );
    },
  },
);
```

Finally, we add a `TransactionConfirmationPending` component to ask for approval.

This requires shadcn/ui's `Card` and `Button` components. We will install them as a dependency.

```sh
npx shadcn@latest add card button
```

Then create a new file under `/components/tools/purchase-stock/transaction-confirmation-pending.tsx` to define the approval UI.

```tsx title="@/components/tools/purchase-stock/transaction-confirmation-pending.tsx"
"use client";

import { CheckIcon, XIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
  onConfirm: () => void;
  onReject: () => void;
};

export function TransactionConfirmationPending(props: TransactionConfirmation) {
  const {
    ticker,
    companyName,
    quantity,
    maxPurchasePrice,
    onConfirm,
    onReject,
  } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">
          Confirm Transaction
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-2">
          <p className="text-muted-foreground text-sm font-medium">Ticker:</p>
          <p className="text-sm font-bold">{ticker}</p>
          <p className="text-muted-foreground text-sm font-medium">Company:</p>
          <p className="text-sm">{companyName}</p>
          <p className="text-muted-foreground text-sm font-medium">Quantity:</p>
          <p className="text-sm">{quantity} shares</p>
          <p className="text-muted-foreground text-sm font-medium">
            Max Purchase Price:
          </p>
          <p className="text-sm">${maxPurchasePrice?.toFixed(2)}</p>
        </div>
        <div className="bg-muted rounded-md p-3">
          <p className="text-sm font-medium">Total Maximum Cost:</p>
          <p className="text-lg font-bold">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
      </CardContent>
      <CardFooter className="flex justify-end">
        <Button variant="outline" onClick={onReject}>
          <XIcon className="mr-2 h-4 w-4" />
          Reject
        </Button>
        <Button onClick={onConfirm}>
          <CheckIcon className="mr-2 h-4 w-4" />
          Confirm
        </Button>
      </CardFooter>
    </Card>
  );
}
```

### Bind approval UI

```tsx title="@/app/page.tsx" {1,8}
import { PurchaseStockTool } from "@/components/tools/purchase-stock/PurchaseStockTool";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        tools={[PriceSnapshotTool, PurchaseStockTool]}
      />
    </div>
  );
}
```

### Try it out!

Ask the assistant to buy 5 shares of Tesla. You should see the following appear:

import purchase from "./images/acme-approve.png";

<Image
  src={purchase}
  alt="Approval UI"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

## Add `TransactionConfirmationFinal` to show approval result

We will add a component to display the approval result.

```ts title="@/components/tools/purchase-stock/transaction-confirmation-final.tsx"
"use client";

import { CheckCircle } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

export function TransactionConfirmationFinal(props: TransactionConfirmation) {
  const { ticker, companyName, quantity, maxPurchasePrice } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader className="text-center">
        <CheckCircle className="mx-auto mb-4 h-16 w-16 text-green-500" />
        <CardTitle className="text-2xl font-bold text-green-700">
          Transaction Confirmed
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="rounded-md border border-green-200 bg-green-50 p-4">
          <h3 className="mb-2 text-lg font-semibold text-green-800">
            Purchase Summary
          </h3>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <p className="font-medium text-green-700">Ticker:</p>
            <p className="font-bold text-green-900">{ticker}</p>
            <p className="font-medium text-green-700">Company:</p>
            <p className="text-green-900">{companyName}</p>
            <p className="font-medium text-green-700">Quantity:</p>
            <p className="text-green-900">{quantity} shares</p>
            <p className="font-medium text-green-700">Price per Share:</p>
            <p className="text-green-900">${maxPurchasePrice?.toFixed(2)}</p>
          </div>
        </div>
        <div className="rounded-md border border-green-300 bg-green-100 p-4">
          <p className="text-lg font-semibold text-green-800">Total Cost:</p>
          <p className="text-2xl font-bold text-green-900">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
        <p className="text-center text-sm text-green-600">
          Your purchase of {quantity} shares of {companyName} ({ticker}) has
          been successfully processed.
        </p>
      </CardContent>
    </Card>
  );
}
```

### Update `PurchaseStockTool`

We will import the new `<TransactionConfirmationFinal />` component and use it in the `render` function whenever an approval result is available.

```tsx title="@/components/tools/purchase-stock/PurchaseStockTool.tsx" {3,25-30,37-42}
"use client";

import { TransactionConfirmationPending } from "./transaction-confirmation-pending";
import { TransactionConfirmationFinal } from "./transaction-confirmation-final";
import { makeAssistantToolUI } from "@assistant-ui/react";
import { updateState } from "@/lib/chatApi";

type PurchaseStockArgs = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

type PurchaseStockResult = {
  approve?: boolean;
  cancelled?: boolean;
  error?: string;
};

export const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(
  {
    toolName: "purchase_stock",
    render: function PurchaseStockUI({ args, result, status, addResult }) {
      let resultObj: PurchaseStockResult;
      try {
        resultObj = result ? JSON.parse(result) : {};
      } catch (e) {
        resultObj = { error: result! };
      }

      const handleReject = () => {
        addResult({ cancelled: true });
      };

      const handleConfirm = async () => {
        addResult({ approve: true });
      };

      return (
        <div className="mb-4 flex flex-col items-center gap-2">
          <div>
            <pre className="whitespace-pre-wrap break-all text-center">
              purchase_stock({JSON.stringify(args)})
            </pre>
          </div>
          {!result && status.type !== "running" && (
            <TransactionConfirmationPending
              {...args}
              onConfirm={handleConfirm}
              onReject={handleReject}
            />
          )}
          {resultObj.approve && <TransactionConfirmationFinal {...args} />}
          {resultObj.approve === false && (
            <pre className="font-bold text-red-600">User rejected purchase</pre>
          )}
          {resultObj.cancelled && (
            <pre className="font-bold text-red-600">Cancelled</pre>
          )}
        </div>
      );
    },
  },
);
```

### Try it out!

Confirm the purchase of shares. You should see the approval confimration UI appear.

import purchase2 from "./images/acme-confirmed.png";

<Image
  src={purchase2}
  alt="Approval result"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>




================================================
File: apps/docs/content/docs/ui/AssistantModal.mdx
================================================
---
title: AssistantModal
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

A chat bubble shown in the bottom right corner of the screen. Useful for support or Q&A use cases.

## Getting Started

<Steps>
  <Step>

### Add `assistant-modal`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/assistant-modal"
```

This adds `/components/assistant-ui/assistant-modal.tsx` to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { AssistantModal } from "@/components/assistant-ui/assistant-modal";

export default function Home() {
  return (
    <div className="h-full">
      <AssistantModal />
    </div>
  );
}
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/AssistantSidebar.mdx
================================================
---
title: AssistantSidebar
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

A chat sidebar show on the right side of the screen. Useful for co-pilot use cases.

## Getting Started

<Steps> 
  <Step>

### Add `assistant-sidebar`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/assistant-sidebar"
```

This adds `/components/assistant-ui/assistant-sidebar.tsx` to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { AssistantSidebar } from "@/components/assistant-ui/assistant-sidebar";

export default function Home() {
  return (
    <div className="h-full">
      <AssistantSidebar>{/* your app */}</AssistantSidebar>
    </div>
  );
}
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/Attachment.mdx
================================================
---
title: Attachment
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

The Attachment components let the user attach files and view the attachments.

## Getting Started

<Steps>
  <Step>

### Add `attachment`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/attachment"
```

This adds a `/components/assistant-ui/attachment.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/components/assistant-ui/thread.tsx" {1-4,9-10}
import {
  ComposerAttachments,
  ComposerAddAttachment,
} from "@/components/assistant-ui/attachment";

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="...">
      <ComposerAttachments />
      <ComposerAddAttachment />

      <ComposerPrimitive.Input
        autoFocus
        placeholder="Write a message..."
        rows={1}
        className="..."
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};
```

```tsx title="/components/assistant-ui/thread.tsx" {1,8}
import { UserMessageAttachments } from "@/components/assistant-ui/attachment";

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <UserActionBar />

      <UserMessageAttachments />

      <div className="...">
        <MessagePrimitive.Content />
      </div>

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/Markdown.mdx
================================================
---
title: Markdown
---

Allow the assistant to display rich text using markdown.

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

<Callout>
  Markdown support is already included by default in the `Thread` component.
</Callout>

## Enabling markdown support

<Steps>

<Step>
### Add `markdown-text`

```tsx
npx shadcn@latest add "https://r.assistant-ui.com/markdown-text"
```

This adds a `/components/assistant-ui/markdown-text.tsx` file to your project, which you can adjust as needed.

</Step>

<Step>

### Use it in your application

Pass the `MarkdownText` component to the `MessagePrimitive.Content` component

```tsx twoslash title="/components/assistant-ui/thread.tsx" {1,11}
// @filename: /components/assistant-ui/markdown-text.tsx
import { FC } from "react";
export const MarkdownText: FC = () => null;

// @filename: ./thread.tsx
import { FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
import { MarkdownText } from "@/components/assistant-ui/markdown-text";

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Content components={{ Text: MarkdownText }} />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

</Step>

</Steps>



================================================
File: apps/docs/content/docs/ui/Scrollbar.mdx
================================================
---
title: Custom Scrollbar
---

If you want to show a custom scrollbar UI of the Thread.Viewport in place of the system default, you can integrate `@radix-ui/react-scroll-area`.
An example implementation of this is [shadcn/ui's Scroll Area](https://ui.shadcn.com/docs/components/scroll-area).

## Add shadcn Scroll Area

```sh
npx shadcn@latest add scroll-area
```

### @radix-ui/react-scroll-area v1.2.0 release candidate required

The v1.2.0-rc.x release candidate can be installed via

```sh
pnpm add @radix-ui/react-scroll-area@next
```

## Additional Styles

The Radix UI Viewport component adds an intermediate `<div data-radix-scroll-area-content>` element.
Add the following CSS to your `globals.css`:

```css title="@/app/globals.css"
.thread-viewport > [data-radix-scroll-area-content] {
  @apply flex flex-col items-center self-stretch bg-inherit;
}
```

## Integration

- Wrap `Thread.Root` with `<ScrollAreaPrimitive.Root asChild>`
- Wrap `Thread.Viewport` with `<ScrollAreaPrimitive.Viewport className="thread-viewport" asChild>`
- Add shadcn's `<ScrollBar />` to `Thread.Root`

The resulting MyThread component should look like this:

```tsx {1-2,6,8,12-13,15}
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { ScrollBar } from "@/components/ui/scroll-area";

const MyThread: FC = () => {
  return (
    <ScrollAreaPrimitive.Root asChild>
      <ThreadPrimitive.Root className="...">
        <ScrollAreaPrimitive.Viewport className="thread-viewport" asChild>
          <ThreadPrimitive.Viewport className="...">
            ...
          </ThreadPrimitive.Viewport>
        </ScrollAreaPrimitive.Viewport>
        <ScrollBar />
      </ThreadPrimitive.Root>
    </ScrollAreaPrimitive.Root>
  );
};
```



================================================
File: apps/docs/content/docs/ui/Thread.mdx
================================================
---
title: Thread
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

## Overview

The raw message list and message composer UI.

## Getting Started

<Steps>
  <Step>

### Add `thread`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread"
```

This adds a `/components/assistant-ui/thread.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { Thread } from "@/components/assistant-ui/thread";

export default function Home() {
  return (
    <div className="h-full">
      <Thread />
    </div>
  );
}
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/ThreadList.mdx
================================================
---
title: ThreadList
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

The ThreadList component lets the user switch between threads.

## Getting Started

<Steps>
  <Step>

### Add `thread-list`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread-list"
```

This adds a `/components/assistant-ui/thread-list.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,5-6}
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export default function Home() {
  return (
    <div className="grid h-full grid-cols-[200px_1fr]">
      <ThreadList />
      <Thread />
    </div>
  );
}
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/ToolFallback.mdx
================================================
---
title: ToolFallback
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

The ToolFallback component displays a default ToolUI for tools that do not have a dedicated ToolUI.

## Getting Started

<Steps>
  <Step>

### Add `tool-fallback`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/tool-fallback"
```

This adds a `/components/assistant-ui/tool-fallback.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use it in your application

Pass the `ToolFallback` component to the `MessagePrimitive.Content` component

```tsx twoslash title="/components/assistant-ui/thread.tsx" {1,11}
// @filename: /components/assistant-ui/tool-fallback.tsx
import { FC } from "react";
export const ToolFallback: FC = () => null;

// @filename: ./thread.tsx
import { FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
import { ToolFallback } from "@/components/assistant-ui/tool-fallback";

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Content
          components={{ tools: { Fallback: ToolFallback } }}
        />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

  </Step>
</Steps>



================================================
File: apps/docs/content/docs/ui/meta.json
================================================
{
  "title": "shadcn/ui",
  "pages": [
    "Thread",
    "ThreadList",
    "Attachment",
    "AssistantModal",
    "AssistantSidebar",
    "Markdown",
    "ToolFallback",
    "Scrollbar"
  ]
}



================================================
File: apps/docs/content/docs/ui/primitives/Thread.mdx
================================================
---
title: Thread
---

A conversation between a user and an assistant.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <ThreadPrimitive.Root>
    <ThreadPrimitive.Viewport>
      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>
      <ThreadPrimitive.Messages components={...} />
    </ThreadPrimitive.Viewport>
    <Composer />
  </ThreadPrimitive.Root>
);
```

## API Reference

### Root

Contains all parts of the thread.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveViewportProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "autoScroll",
      type: "boolean",
      default: "true",
      description:
        "Whether to automatically scroll to the bottom of the viewport when new messages are added while the viewport is was previously scrolled to the bottom.",
    },
  ]}
/>

### Messages

Renders all messages. This primitive renders a separate component for each message.

<ParametersTable
  type="ThreadPrimitiveMessagesProps"
  parameters={[
    {
      name: "components",
      type: "MessageComponents",
      description: "The component to render for each message.",
      children: [
        {
          type: "MessageComponents",
          parameters: [
            {
              name: "Message",
              type: "ComponentType",
              description: "The component to render for each message.",
            },
            {
              name: "UserMessage",
              type: "ComponentType",
              description: "The component to render for user messages.",
            },
            {
              name: "EditComposer",
              type: "ComponentType",
              description:
                "The component to render for user messages that are being edited.",
            },
            {
              name: "AssistantMessage",
              type: "ComponentType",
              description: "The component to render for assistant messages.",
            },
          ],
        },
      ],
    },
  ]}
/>

### Empty

Renders children only when there are no messages.

### ScrollToBottom

A button to scroll the viewport to the bottom. Disabled when the viewport is already at bottom.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveScrollToBottomProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### `ThreadPrimitive.Suggestion`

Shows a suggestion to the user. When the user clicks on the suggestion, the composer's value is set to the suggestion's prompt.

This primitive renders a `<button>` element unless `asChild` is set.

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Suggestion = () => {
  return (
    <ThreadPrimitive.Suggestion
      prompt="I need help with product search"
      method="replace"
      autoSend
    />
  );
};
```

<ParametersTable
  type="ThreadPrimitiveSuggestionProps"
  parameters={[
    {
      name: "prompt",
      type: "string",
      description: "The suggestion's prompt.",
    },
    {
      name: "method",
      type: "'replace'",
      description:
        "How does the suggestion interact with the composer's existing value.",
    },
    {
      name: "autoSend",
      type: "boolean",
      description:
        "Whether to automatically send the suggestion when the user clicks on it.",
      default: "false",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="ThreadPrimitiveIfProps"
  parameters={[
    {
      name: "empty",
      type: "boolean | undefined",
      description: "Render children if the thread is empty.",
    },
    {
      name: "running",
      type: "boolean | undefined",
      description: "Render children if the thread is running.",
    },
  ]}
/>

```tsx
<Thread.If empty>
  {/* equivalent to <Thread.Empty> */}
</Thread.If>
<Thread.If empty={false}>
  {/* rendered if thread is not empty */}
</Thread.If>
```



================================================
File: apps/docs/lib/useMediaQuery.ts
================================================
import { useCallback, useSyncExternalStore } from "react";

export function useMediaQuery(query: string): boolean {
  const getSnapshot = useCallback(() => {
    if (typeof window === "undefined") return false;
    return window.matchMedia(query).matches;
  }, [query]);

  const subscribe = useCallback(
    (callback: () => void) => {
      if (typeof window === "undefined") return () => {};
      const mediaQueryList = window.matchMedia(query);

      if (mediaQueryList.addEventListener) {
        mediaQueryList.addEventListener("change", callback);
      } else {
        mediaQueryList.addListener(callback);
      }

      return () => {
        if (mediaQueryList.removeEventListener) {
          mediaQueryList.removeEventListener("change", callback);
        } else {
          mediaQueryList.removeListener(callback);
        }
      };
    },
    [query],
  );

  return useSyncExternalStore(subscribe, getSnapshot, () => false);
}



================================================
File: apps/docs/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}





================================================
File: apps/docs/scripts/generate-docs.mts
================================================
import {
  Project,
  Node,
  InterfaceDeclaration,
  TypeAliasDeclaration,
} from "ts-morph";
import * as fs from "fs";

const project = new Project({
  tsConfigFilePath: "tsconfig.json",
});

// Add the source file
const sourceFile = project.addSourceFileAtPath(
  "./content/auto-generated/typeDocs.ts",
);

const types: { [key: string]: any } = {};
sourceFile.getExportedDeclarations().forEach((declarations, name) => {
  declarations.forEach((declaration) => {
    // Resolve the actual declaration if it's an alias
    declaration = resolveAliasedDeclaration(declaration);

    // Process interfaces and types
    if (
      Node.isInterfaceDeclaration(declaration) ||
      Node.isTypeAliasDeclaration(declaration)
    ) {
      const typeInfo = processTypeOrInterface(declaration, name);
      types[name] = typeInfo;
    }
  });
});

const typesSrc = Object.entries(types)
  .map(([name, type]) => {
    return `export const ${name} = ${JSON.stringify(type, null, 2)};\n`;
  })
  .join("\n");

fs.mkdirSync("./generated", { recursive: true });
fs.writeFileSync("./generated/typeDocs.ts", typesSrc);

// Function to resolve aliased declarations
function resolveAliasedDeclaration(declaration: any) {
  if (Node.isExportSpecifier(declaration)) {
    const symbol = declaration.getSymbol();
    if (symbol) {
      const aliasedSymbol = symbol.getAliasedSymbol();
      if (aliasedSymbol) {
        const declarations = aliasedSymbol.getDeclarations();
        if (declarations.length > 0) {
          return declarations[0];
        }
      }
    }
  }
  return declaration;
}

// Function to process type or interface
function processTypeOrInterface(
  declaration: InterfaceDeclaration | TypeAliasDeclaration,
  typeName: string,
) {
  const type = declaration.getType();
  const properties = getPropertiesFromType(type);

  return {
    type: typeName,
    parameters: properties,
  };
}

function getPropertiesFromType(type: any) {
  const properties = type.getProperties();

  return properties.map((prop: any) => {
    const declarations = prop.getDeclarations();
    const decl = declarations[0];
    const propType = prop.getTypeAtLocation(decl).getText();
    const cleanType = cleanTypeText(propType);
    const jsDocs = decl.getJsDocs();
    const description = jsDocs.map((doc: any) => doc.getComment()).join("\n");
    const required = !decl.hasQuestionToken();
    const param: any = {
      name: prop.getName(),
      type: cleanType,
    };

    if (required) {
      param.required = true;
    }

    if (description) {
      param.description = description;
    }

    return param;
  });
}

function cleanTypeText(typeText: string): string {
  return typeText.replace(/import\(".*?"\)\./g, "");
}



================================================
File: apps/registry/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}



================================================
File: apps/registry/package.json
================================================
{
  "name": "@assistant-ui/shadcn-registry",
  "version": "0.0.1",
  "private": true,
  "license": "MIT",
  "type": "module",
  "devDependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/react-syntax-highlighter": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@types/node": "^22.13.1",
    "@types/react": "^19",
    "@types/react-syntax-highlighter": "^15.5.13",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "eslint": "^9",
    "lucide-react": "^0.475.0",
    "react": "19.0.0",
    "react-resizable-panels": "^2.1.7",
    "react-syntax-highlighter": "^15.6.1",
    "rehype-katex": "^7.0.1",
    "remark-gfm": "^4.0.0",
    "remark-math": "^6.0.0",
    "rimraf": "^6.0.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.2",
    "typescript": "^5.7.3",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "scripts": {
    "build": "tsx ./scripts/build-registry.ts"
  },
  "dependencies": {
    "ai": "^4.1.34"
  }
}



================================================
File: apps/registry/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  content: [
    "./app/**/*.{ts,tsx}",
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./registry/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;



================================================
File: apps/registry/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: apps/registry/vercel.json
================================================
{
  "rewrites": [
    {
      "source": "/:path*",
      "destination": "/:path*.json"
    }
  ],
  "outputDirectory": "dist"
}



================================================
File: apps/registry/.gitignore
================================================
.vercel



================================================
File: apps/registry/app/ai-sdk/assistant.tsx
================================================
"use client";

import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export const Assistant = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <div className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
        <ThreadList />
        <Thread />
      </div>
    </AssistantRuntimeProvider>
  );
};



================================================
File: apps/registry/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { jsonSchema, streamText } from "ai";

export const runtime = "edge";
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages, system, tools } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages,
    // forward system prompt and tools from the frontend
    system,
    tools: Object.fromEntries(
      Object.entries<{ parameters: unknown }>(tools).map(([name, tool]) => [
        name,
        {
          parameters: jsonSchema(tool.parameters!),
        },
      ]),
    ),
  });

  return result.toDataStreamResponse();
}



================================================
File: apps/registry/components/assistant-ui/assistant-modal.tsx
================================================
"use client";

import { BotIcon, ChevronDownIcon } from "lucide-react";

import { type FC, forwardRef } from "react";
import { AssistantModalPrimitive } from "@assistant-ui/react";

import { Thread } from "@/components/assistant-ui/thread";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const AssistantModal: FC = () => {
  return (
    <AssistantModalPrimitive.Root>
      <AssistantModalPrimitive.Anchor className="aui-modal-anchor">
        <AssistantModalPrimitive.Trigger asChild>
          <AssistantModalButton />
        </AssistantModalPrimitive.Trigger>
      </AssistantModalPrimitive.Anchor>
      <AssistantModalPrimitive.Content
        sideOffset={16}
        className="aui-modal-content"
      >
        <Thread />
      </AssistantModalPrimitive.Content>
    </AssistantModalPrimitive.Root>
  );
};

type AssistantModalButtonProps = { "data-state"?: "open" | "closed" };

const AssistantModalButton = forwardRef<
  HTMLButtonElement,
  AssistantModalButtonProps
>(({ "data-state": state, ...rest }, ref) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";

  return (
    <TooltipIconButton
      variant="default"
      tooltip={tooltip}
      side="left"
      {...rest}
      className="aui-modal-button"
      ref={ref}
    >
      <BotIcon data-state={state} className="aui-modal-button-closed-icon" />

      <ChevronDownIcon
        data-state={state}
        className="aui-modal-button-open-icon"
      />
      <span className="sr-only">{tooltip}</span>
    </TooltipIconButton>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";



================================================
File: apps/registry/components/assistant-ui/assistant-sidebar.tsx
================================================
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import type { FC, PropsWithChildren } from "react";

import { Thread } from "@/components/assistant-ui/thread";

export const AssistantSidebar: FC<PropsWithChildren> = ({ children }) => {
  return (
    <ResizablePanelGroup direction="horizontal">
      <ResizablePanel>{children}</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>
        <Thread />
      </ResizablePanel>
    </ResizablePanelGroup>
  );
};



================================================
File: apps/registry/components/assistant-ui/attachment.tsx
================================================
"use client";

import { PropsWithChildren, useEffect, useState, type FC } from "react";
import { CircleXIcon, FileIcon, PaperclipIcon } from "lucide-react";
import {
  AttachmentPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  useAttachment,
} from "@assistant-ui/react";
import { useShallow } from "zustand/shallow";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogTitle,
  DialogTrigger,
  DialogOverlay,
  DialogPortal,
} from "@/components/ui/dialog";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { TooltipProvider } from "@radix-ui/react-tooltip";
import { DialogContent as DialogPrimitiveContent } from "@radix-ui/react-dialog";

const useFileSrc = (file: File | undefined) => {
  const [src, setSrc] = useState<string | undefined>(undefined);

  useEffect(() => {
    if (!file) {
      setSrc(undefined);
      return;
    }

    const objectUrl = URL.createObjectURL(file);
    setSrc(objectUrl);

    return () => {
      URL.revokeObjectURL(objectUrl);
    };
  }, [file]);

  return src;
};

const useAttachmentSrc = () => {
  const { file, src } = useAttachment(
    useShallow((a): { file?: File; src?: string } => {
      if (a.type !== "image") return {};
      if (a.file) return { file: a.file };
      const src = a.content?.filter((c) => c.type === "image")[0]?.image;
      if (!src) return {};
      return { src };
    }),
  );

  return useFileSrc(file) ?? src;
};

type AttachmentPreviewProps = {
  src: string;
};

const AttachmentPreview: FC<AttachmentPreviewProps> = ({ src }) => {
  const [isLoaded, setIsLoaded] = useState(false);

  return (
    // eslint-disable-next-line @next/next/no-img-element
    <img
      src={src}
      style={{
        width: "auto",
        height: "auto",
        maxWidth: "75dvh",
        maxHeight: "75dvh",
        display: isLoaded ? "block" : "none",
        overflow: "clip",
      }}
      onLoad={() => setIsLoaded(true)}
      alt="Preview"
    />
  );
};

const AttachmentPreviewDialog: FC<PropsWithChildren> = ({ children }) => {
  const src = useAttachmentSrc();

  if (!src) return children;

  return (
    <Dialog>
      <DialogTrigger className="aui-attachment-preview-trigger" asChild>
        {children}
      </DialogTrigger>
      <AttachmentDialogContent>
        <DialogTitle className="aui-sr-only">
          Image Attachment Preview
        </DialogTitle>
        <AttachmentPreview src={src} />
      </AttachmentDialogContent>
    </Dialog>
  );
};

const AttachmentThumb: FC = () => {
  const isImage = useAttachment((a) => a.type === "image");
  const src = useAttachmentSrc();
  return (
    <Avatar className="aui-attachment-thumb">
      <AvatarFallback delayMs={isImage ? 200 : 0}>
        <FileIcon />
      </AvatarFallback>
      <AvatarImage src={src} />
    </Avatar>
  );
};

const AttachmentUI: FC = () => {
  const canRemove = useAttachment((a) => a.source !== "message");
  const typeLabel = useAttachment((a) => {
    const type = a.type;
    switch (type) {
      case "image":
        return "Image";
      case "document":
        return "Document";
      case "file":
        return "File";
      default:
        const _exhaustiveCheck: never = type;
        throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
    }
  });
  return (
    <TooltipProvider>
      <Tooltip>
        <AttachmentPrimitive.Root className="aui-attachment-root">
          <AttachmentPreviewDialog>
            <TooltipTrigger asChild>
              <div className="aui-attachment-content">
                <AttachmentThumb />
                <div className="aui-attachment-text">
                  <p className="aui-attachment-name">
                    <AttachmentPrimitive.Name />
                  </p>
                  <p className="aui-attachment-type">{typeLabel}</p>
                </div>
              </div>
            </TooltipTrigger>
          </AttachmentPreviewDialog>
          {canRemove && <AttachmentRemove />}
        </AttachmentPrimitive.Root>
        <TooltipContent side="top">
          <AttachmentPrimitive.Name />
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

const AttachmentRemove: FC = () => {
  return (
    <AttachmentPrimitive.Remove asChild>
      <TooltipIconButton
        tooltip="Remove file"
        className="aui-attachment-remove"
        side="top"
      >
        <CircleXIcon />
      </TooltipIconButton>
    </AttachmentPrimitive.Remove>
  );
};

export const UserMessageAttachments: FC = () => {
  return (
    <div className="aui-user-message-attachments">
      <MessagePrimitive.Attachments components={{ Attachment: AttachmentUI }} />
    </div>
  );
};

export const ComposerAttachments: FC = () => {
  return (
    <div className="aui-composer-attachments">
      <ComposerPrimitive.Attachments
        components={{ Attachment: AttachmentUI }}
      />
    </div>
  );
};

export const ComposerAddAttachment: FC = () => {
  return (
    <ComposerPrimitive.AddAttachment asChild>
      <TooltipIconButton
        className="aui-composer-attach"
        tooltip="Add Attachment"
        variant="ghost"
      >
        <PaperclipIcon />
      </TooltipIconButton>
    </ComposerPrimitive.AddAttachment>
  );
};

const AttachmentDialogContent: FC<PropsWithChildren> = ({ children }) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitiveContent className="aui-dialog-content">
      {children}
    </DialogPrimitiveContent>
  </DialogPortal>
);



================================================
File: apps/registry/components/assistant-ui/follow-up-suggestions.tsx
================================================
"use client";

import { useThread, ThreadPrimitive } from "@assistant-ui/react";
import type { FC } from "react";

export const ThreadFollowupSuggestions: FC = () => {
  const suggestions = useThread((t) => t.suggestions);
  return (
    <ThreadPrimitive.If empty={false} running={false}>
      <div className="aui-thread-followup-suggestions">
        {suggestions?.map((suggestion, idx) => (
          <ThreadPrimitive.Suggestion
            key={idx}
            className="aui-thread-followup-suggestion"
            prompt={suggestion.prompt}
            method="replace"
            autoSend
          >
            {suggestion.prompt}
          </ThreadPrimitive.Suggestion>
        ))}
      </div>
    </ThreadPrimitive.If>
  );
};



================================================
File: apps/registry/components/assistant-ui/markdown-text.tsx
================================================
"use client";

import "@assistant-ui/react-markdown/styles/dot.css";

import {
  CodeHeaderProps,
  MarkdownTextPrimitive,
  unstable_memoizeMarkdownComponents as memoizeMarkdownComponents,
  useIsMarkdownCodeBlock,
} from "@assistant-ui/react-markdown";
import remarkGfm from "remark-gfm";
import { FC, memo, useState } from "react";
import { CheckIcon, CopyIcon } from "lucide-react";

import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { cn } from "@/lib/utils";

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      remarkPlugins={[remarkGfm]}
      className="aui-md"
      components={defaultComponents}
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);

const CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {
  const { isCopied, copyToClipboard } = useCopyToClipboard();
  const onCopy = () => {
    if (!code || isCopied) return;
    copyToClipboard(code);
  };

  return (
    <div className="flex items-center justify-between gap-4 rounded-t-lg bg-zinc-900 px-4 py-2 text-sm font-semibold text-white">
      <span className="lowercase [&>span]:text-xs">{language}</span>
      <TooltipIconButton tooltip="Copy" onClick={onCopy}>
        {!isCopied && <CopyIcon />}
        {isCopied && <CheckIcon />}
      </TooltipIconButton>
    </div>
  );
};

const useCopyToClipboard = ({
  copiedDuration = 3000,
}: {
  copiedDuration?: number;
} = {}) => {
  const [isCopied, setIsCopied] = useState<boolean>(false);

  const copyToClipboard = (value: string) => {
    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  };

  return { isCopied, copyToClipboard };
};

const defaultComponents = memoizeMarkdownComponents({
  h1: ({ className, ...props }) => (
    <h1 className={cn("aui-md-h1", className)} {...props} />
  ),
  h2: ({ className, ...props }) => (
    <h2 className={cn("aui-md-h2", className)} {...props} />
  ),
  h3: ({ className, ...props }) => (
    <h3 className={cn("aui-md-h3", className)} {...props} />
  ),
  h4: ({ className, ...props }) => (
    <h4 className={cn("aui-md-h4", className)} {...props} />
  ),
  h5: ({ className, ...props }) => (
    <h5 className={cn("aui-md-h5", className)} {...props} />
  ),
  h6: ({ className, ...props }) => (
    <h6 className={cn("aui-md-h6", className)} {...props} />
  ),
  p: ({ className, ...props }) => (
    <p className={cn("aui-md-p", className)} {...props} />
  ),
  a: ({ className, ...props }) => (
    <a className={cn("aui-md-a", className)} {...props} />
  ),
  blockquote: ({ className, ...props }) => (
    <blockquote className={cn("aui-md-blockquote", className)} {...props} />
  ),
  ul: ({ className, ...props }) => (
    <ul className={cn("aui-md-ul", className)} {...props} />
  ),
  ol: ({ className, ...props }) => (
    <ol className={cn("aui-md-ol", className)} {...props} />
  ),
  hr: ({ className, ...props }) => (
    <hr className={cn("aui-md-hr", className)} {...props} />
  ),
  table: ({ className, ...props }) => (
    <table className={cn("aui-md-table", className)} {...props} />
  ),
  th: ({ className, ...props }) => (
    <th className={cn("aui-md-th", className)} {...props} />
  ),
  td: ({ className, ...props }) => (
    <td className={cn("aui-md-td", className)} {...props} />
  ),
  tr: ({ className, ...props }) => (
    <tr className={cn("aui-md-tr", className)} {...props} />
  ),
  sup: ({ className, ...props }) => (
    <sup className={cn("aui-md-sup", className)} {...props} />
  ),
  pre: ({ className, ...props }) => (
    <pre className={cn("aui-md-pre", className)} {...props} />
  ),
  code: function Code({ className, ...props }) {
    const isCodeBlock = useIsMarkdownCodeBlock();
    return (
      <code
        className={cn(!isCodeBlock && "aui-md-inline-code", className)}
        {...props}
      />
    );
  },
  CodeHeader,
});



================================================
File: apps/registry/components/assistant-ui/syntax-highlighter.tsx
================================================
import { PrismAsyncLight } from "react-syntax-highlighter";
import { makePrismAsyncLightSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";

import tsx from "react-syntax-highlighter/dist/esm/languages/prism/tsx";
import python from "react-syntax-highlighter/dist/esm/languages/prism/python";

import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";

// register languages you want to support
PrismAsyncLight.registerLanguage("js", tsx);
PrismAsyncLight.registerLanguage("jsx", tsx);
PrismAsyncLight.registerLanguage("ts", tsx);
PrismAsyncLight.registerLanguage("tsx", tsx);
PrismAsyncLight.registerLanguage("python", python);

export const SyntaxHighlighter = makePrismAsyncLightSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    width: "100%",
    background: "black",
    padding: "1.5rem 1rem",
  },
});



================================================
File: apps/registry/components/assistant-ui/thread-list.tsx
================================================
import type { FC } from "react";
import {
  ThreadListItemPrimitive,
  ThreadListPrimitive,
} from "@assistant-ui/react";
import { ArchiveIcon, PlusIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const ThreadList: FC = () => {
  return (
    <ThreadListPrimitive.Root className="aui-root aui-thread-list-root">
      <ThreadListNew />
      <ThreadListItems />
    </ThreadListPrimitive.Root>
  );
};

const ThreadListNew: FC = () => {
  return (
    <ThreadListPrimitive.New asChild>
      <Button className="aui-thread-list-new" variant="ghost">
        <PlusIcon />
        New Thread
      </Button>
    </ThreadListPrimitive.New>
  );
};

const ThreadListItems: FC = () => {
  return <ThreadListPrimitive.Items components={{ ThreadListItem }} />;
};

const ThreadListItem: FC = () => {
  return (
    <ThreadListItemPrimitive.Root className="aui-thread-list-item">
      <ThreadListItemPrimitive.Trigger className="aui-thread-list-item-trigger">
        <ThreadListItemTitle />
      </ThreadListItemPrimitive.Trigger>
      <ThreadListItemArchive />
    </ThreadListItemPrimitive.Root>
  );
};

const ThreadListItemTitle: FC = () => {
  return (
    <p className="aui-thread-list-item-title">
      <ThreadListItemPrimitive.Title fallback="New Chat" />
    </p>
  );
};

const ThreadListItemArchive: FC = () => {
  return (
    <ThreadListItemPrimitive.Archive asChild>
      <TooltipIconButton
        className="aui-thread-list-item-archive"
        variant="ghost"
        tooltip="Archive thread"
      >
        <ArchiveIcon />
      </TooltipIconButton>
    </ThreadListItemPrimitive.Archive>
  );
};



================================================
File: apps/registry/components/assistant-ui/thread.tsx
================================================
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="aui-root aui-thread-root"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="aui-thread-viewport">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        <ThreadPrimitive.If empty={false}>
          <div className="min-h-8 flex-grow" />
        </ThreadPrimitive.If>

        <div className="aui-thread-viewport-footer">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="aui-thread-scroll-to-bottom"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="aui-thread-welcome-root">
        <div className="aui-thread-welcome-center">
          <p className="aui-thread-welcome-message">
            How can I help you today?
          </p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="aui-thread-welcome-suggestions">
      <ThreadPrimitive.Suggestion
        className="aui-thread-welcome-suggestion"
        prompt="What is the weather in Tokyo?"
        method="replace"
        autoSend
      >
        <span className="aui-thread-welcome-suggestion-text">
          What is the weather in Tokyo?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="aui-thread-welcome-suggestion"
        prompt="What is assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="aui-thread-welcome-suggestion-text">
          What is assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="aui-composer-root">
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="aui-composer-input"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="aui-composer-send"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="aui-composer-cancel"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="aui-user-message-root">
      <UserActionBar />

      <div className="aui-user-message-content">
        <MessagePrimitive.Content />
      </div>

      <BranchPicker className="aui-user-branch-picker" />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="aui-user-action-bar-root"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="aui-edit-composer-root">
      <ComposerPrimitive.Input className="aui-edit-composer-input" />

      <div className="aui-edit-composer-footer">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost">Cancel</Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button>Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="aui-assistant-message-root">
      <div className="aui-assistant-message-content">
        <MessagePrimitive.Content components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="aui-assistant-branch-picker" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="aui-assistant-action-bar-root"
    >
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn("aui-branch-picker-root", className)}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="aui-branch-picker-state">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
File: apps/registry/components/assistant-ui/tool-fallback.tsx
================================================
import { ToolCallContentPartComponent } from "@assistant-ui/react";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";
import { useState } from "react";
import { Button } from "../ui/button";

export const ToolFallback: ToolCallContentPartComponent = ({
  toolName,
  argsText,
  result,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  return (
    <div className="mb-4 flex w-full flex-col gap-3 rounded-lg border py-3">
      <div className="flex items-center gap-2 px-4">
        <CheckIcon className="size-4" />
        <p className="">
          Used tool: <b>{toolName}</b>
        </p>
        <div className="flex-grow" />
        <Button onClick={() => setIsCollapsed(!isCollapsed)}>
          {isCollapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}
        </Button>
      </div>
      {!isCollapsed && (
        <div className="flex flex-col gap-2 border-t pt-2">
          <div className="px-4">
            <pre className="whitespace-pre-wrap">{argsText}</pre>
          </div>
          {result !== undefined && (
            <div className="border-t border-dashed px-4 pt-2">
              <p className="font-semibold">Result:</p>
              <pre className="whitespace-pre-wrap">
                {typeof result === "string"
                  ? result
                  : JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};



================================================
File: apps/registry/components/assistant-ui/tooltip-icon-button.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef } from "react";

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export type TooltipIconButtonProps = ComponentPropsWithoutRef<typeof Button> & {
  tooltip: string;
  side?: "top" | "bottom" | "left" | "right";
};

export const TooltipIconButton = forwardRef<
  HTMLButtonElement,
  TooltipIconButtonProps
>(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            {...rest}
            className={cn("size-6 p-1", className)}
            ref={ref}
          >
            {children}
            <span className="sr-only">{tooltip}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent side={side}>{tooltip}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
});

TooltipIconButton.displayName = "TooltipIconButton";



================================================
File: apps/registry/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className,
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className,
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: apps/registry/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };



================================================
File: apps/registry/components/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed left-[50%] top-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground rounded-xs focus:outline-hidden absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg font-semibold leading-none", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};



================================================
File: apps/registry/components/ui/resizable.tsx
================================================
"use client";

import * as React from "react";
import { GripVerticalIcon } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className,
      )}
      {...props}
    />
  );
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />;
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring focus-visible:outline-hidden relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border rounded-xs z-10 flex h-4 w-3 items-center justify-center border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  );
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
File: apps/registry/components/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit text-balance rounded-md px-3 py-1.5 text-xs",
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
File: apps/registry/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: apps/registry/scripts/build-registry.ts
================================================
import { promises as fs, readFileSync } from "node:fs";
import * as path from "node:path";
import { registry } from "../src/registry";
import { RegistryItem } from "@/src/schema";
import threadStyles from "../../../packages/react-ui/dist/styles/tailwindcss/thread.css.json";
import modalStyles from "../../../packages/react-ui/dist/styles/tailwindcss/modal.css.json";
import markdownStyles from "../../../packages/react-ui/dist/styles/tailwindcss/markdown.css.json";

const REGISTRY_PATH = path.join(process.cwd(), "dist");

const tailwindStyles = Object.entries({
  ".aui-root": {},
  ...threadStyles,
  ...modalStyles,
  ...markdownStyles,
}).map(([key, value]) => {
  return {
    key: key.replace(/^\./, ""),
    value: Object.keys(value)
      .map((key) =>
        key
          .replace(/^\@apply /, "")
          .replaceAll("-aui-", "-")
          .replaceAll("max-w-thread", "max-w-aui-thread"),
      )
      .filter((k) => k)
      .join(" "),
  };
});

const transformClassnames = (content: string) => {
  for (const style of tailwindStyles) {
    if (style.key.startsWith(":where")) continue;

    content = content.replaceAll(
      new RegExp(`("| )${style.key}("| )`, "g"),
      `$1${style.value}$2`,
    );
  }

  return content.replaceAll(/className=" /g, `className="`);
};

async function buildRegistry(registry: RegistryItem[]) {
  await fs.mkdir(REGISTRY_PATH, { recursive: true });

  for (const item of registry) {
    const files = item.files?.map((file) => {
      const content = readFileSync(path.join(process.cwd(), file.path), "utf8");
      const transformedContent = transformClassnames(content);

      // in debug mode, write the transformed content to a file
      const debugPath = path.join(
        process.cwd(),
        "dist/debug",
        `${item.name}-${file.path}`,
      );
      fs.mkdir(path.dirname(debugPath), { recursive: true }).then(() => {
        fs.writeFile(debugPath, transformedContent, "utf8");
      });

      return {
        content: transformedContent,
        ...file,
      };
    });

    const payload = {
      $schema: "https://ui.shadcn.com/schema/registry-item.json",
      ...item,
      files,
    };

    const p = path.join(REGISTRY_PATH, `${item.name}.json`);
    await fs.mkdir(path.dirname(p), { recursive: true });

    await fs.writeFile(p, JSON.stringify(payload, null, 2), "utf8");
  }
}

await buildRegistry(registry);



================================================
File: apps/registry/src/registry.ts
================================================
import { RegistryItem } from "./schema";

export const registry: RegistryItem[] = [
  {
    name: "chat/b/ai-sdk-quick-start/json",
    type: "registry:page",
    files: [
      {
        type: "registry:page",
        path: "app/ai-sdk/assistant.tsx",
        target: "app/assistant.tsx",
      },
    ],
    registryDependencies: [
      "https://r.assistant-ui.com/ai-sdk-backend",
      "https://r.assistant-ui.com/thread",
      "https://r.assistant-ui.com/thread-list",
    ],
    meta: {
      importSpecifier: "Assistant",
      moduleSpecifier: "@/app/assistant",
      nextVersion: "15.1.6",
    },
  },
  {
    name: "ai-sdk-backend",
    type: "registry:page",
    files: [
      {
        type: "registry:page",
        path: "app/api/chat/route.ts",
        target: "app/api/chat/route.ts",
      },
    ],
    dependencies: ["@assistant-ui/react-ai-sdk", "ai", "@ai-sdk/openai"],
  },
  {
    name: "thread",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/thread.tsx",
      },
    ],
    dependencies: ["@assistant-ui/react", "lucide-react"],
    registryDependencies: [
      "button",
      "https://r.assistant-ui.com/markdown-text",
      "https://r.assistant-ui.com/tooltip-icon-button",
    ],
  },
  {
    name: "markdown-text",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/markdown-text.tsx",
      },
    ],
    registryDependencies: ["https://r.assistant-ui.com/tooltip-icon-button"],
    dependencies: [
      "@assistant-ui/react-markdown",
      "lucide-react",
      "remark-gfm",
    ],
  },
  {
    name: "thread-list",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/thread-list.tsx",
      },
    ],
    registryDependencies: [
      "button",
      "https://r.assistant-ui.com/tooltip-icon-button",
    ],
    dependencies: ["@assistant-ui/react", "lucide-react"],
  },
  {
    name: "attachment",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/attachment.tsx",
      },
    ],
    registryDependencies: [
      "dialog",
      "tooltip",
      "avatar",
      "https://r.assistant-ui.com/tooltip-icon-button",
    ],
    dependencies: ["@assistant-ui/react", "lucide-react", "zustand"],
  },
  {
    name: "follow-up-suggestions",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/follow-up-suggestions.tsx",
      },
    ],
    registryDependencies: [],
    dependencies: ["@assistant-ui/react"],
  },
  {
    name: "tooltip-icon-button",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/tooltip-icon-button.tsx",
      },
    ],
    registryDependencies: ["tooltip", "button"],
  },
  {
    name: "syntax-highlighter",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/syntax-highlighter.tsx",
      },
    ],
    dependencies: [
      "@assistant-ui/react-syntax-highlighter",
      "react-syntax-highlighter",
      "@types/react-syntax-highlighter",
    ],
  },
  {
    name: "assistant-modal",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/assistant-modal.tsx",
      },
    ],
    dependencies: ["@assistant-ui/react", "lucide-react"],
    registryDependencies: [
      "https://r.assistant-ui.com/thread",
      "https://r.assistant-ui.com/tooltip-icon-button",
    ],
  },
  {
    name: "assistant-sidebar",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/assistant-sidebar.tsx",
      },
    ],
    dependencies: ["@assistant-ui/react"],
    registryDependencies: ["https://r.assistant-ui.com/thread", "resizable"],
  },
  {
    name: "tool-fallback",
    type: "registry:component",
    files: [
      {
        type: "registry:component",
        path: "components/assistant-ui/tool-fallback.tsx",
      },
    ],
    dependencies: ["@assistant-ui/react", "lucide-react"],
    registryDependencies: ["button"],
  },
];



================================================
File: apps/registry/src/schema.ts
================================================
import { z } from "zod";

export const registryItemTypeSchema = z.enum([
  "registry:style",
  "registry:lib",
  "registry:example",
  "registry:block",
  "registry:component",
  "registry:ui",
  "registry:hook",
  "registry:theme",
  "registry:page",
]);

export const registryItemFileSchema = z.object({
  path: z.string(),
  content: z.string().optional(),
  type: registryItemTypeSchema,
  target: z.string().optional(),
});

export const registryItemTailwindSchema = z.object({
  config: z
    .object({
      content: z.array(z.string()).optional(),
      theme: z.record(z.string(), z.any()).optional(),
      plugins: z.array(z.string()).optional(),
    })
    .optional(),
});

export const registryItemCssVarsSchema = z.object({
  light: z.record(z.string(), z.string()).optional(),
  dark: z.record(z.string(), z.string()).optional(),
});

export const registryItemSchema = z.object({
  name: z.string(),
  type: registryItemTypeSchema,
  description: z.string().optional(),
  dependencies: z.array(z.string()).optional(),
  devDependencies: z.array(z.string()).optional(),
  registryDependencies: z.array(z.string()).optional(),
  files: z.array(registryItemFileSchema).optional(),
  tailwind: registryItemTailwindSchema.optional(),
  cssVars: registryItemCssVarsSchema.optional(),
  meta: z.record(z.string(), z.any()).optional(),
  docs: z.string().optional(),
});

export type RegistryItem = z.infer<typeof registryItemSchema>;



================================================
File: examples/local-ollama/README.md
================================================
## Project Overview

This project configures `assistant-ui` to work with Ollama hosted on a local instance. Additionally, it changes the theme to dark mode.

This source code was generated using the `Getting Started` guide hosted on [assistant-ui.com/docs](https://www.assistant-ui.com/docs).

## Prerequisites

Ensure you have the following installed:

- Node.js
- npm

## Installation

Clone the repository:

```bash
git clone https://github.com/yourusername/assistant-ui-local-ollama.git
cd assistant-ui-local-ollama
```

Install the dependencies:

```bash
npm install
```

## Configuration

Copy the `.env.local.example` file to `.env`:

Add `OLLAMA_API_URL` to the `.env` file:

```
OLLAMA_API_URL=http:/x.x.x.x:11434/api
```

## Running the Development Server

Start the development server:

```bash
npm run dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Editing the Project

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

## Changing the Theme to Dark Mode

The theme has been set to dark mode by default. You can customize the theme by annotating html with the className `dark`.

## License

This project is licensed under the MIT License.



================================================
File: examples/local-ollama/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/local-ollama/package.json
================================================
{
  "name": "with-local-ollama",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "next": "15.1.6",
    "ollama-ai-provider": "^1.2.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/local-ollama/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/local-ollama/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: "class",
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss"),
  ],
} satisfies Config;

export default config;



================================================
File: examples/local-ollama/tsconfig.json
================================================
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "target": "ES2017"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================
File: examples/local-ollama/.env.example
================================================
OLLAMA_API_URL=


================================================
File: examples/local-ollama/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp


================================================
File: examples/local-ollama/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: examples/local-ollama/app/layout.tsx
================================================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}



================================================
File: examples/local-ollama/app/page.tsx
================================================
import { MyAssistant } from "@/components/MyAssistant";

export default function Home() {
  return (
    <main className="h-dvh">
      <MyAssistant />
    </main>
  );
}



================================================
File: examples/local-ollama/app/api/chat/route.ts
================================================
import { createOllama } from "ollama-ai-provider";
import { createEdgeRuntimeAPI } from "@assistant-ui/react/edge";

const local_ollama = createOllama({
  baseURL: process.env.OLLAMA_API_URL,
});

export const { POST } = createEdgeRuntimeAPI({
  model: local_ollama("llama3.1"),
});



================================================
File: examples/local-ollama/app/fonts/GeistMonoVF.woff
================================================
[Non-text file]


================================================
File: examples/local-ollama/app/fonts/GeistVF.woff
================================================
[Non-text file]


================================================
File: examples/local-ollama/components/MyAssistant.tsx
================================================
"use client";

import { useEdgeRuntime } from "@assistant-ui/react";
import { Thread, makeMarkdownText } from "@assistant-ui/react-ui";

const MarkdownText = makeMarkdownText();

export function MyAssistant() {
  const runtime = useEdgeRuntime({ api: "/api/chat" });

  return (
    <Thread
      runtime={runtime}
      assistantMessage={{ components: { Text: MarkdownText } }}
    />
  );
}



================================================
File: examples/search-agent-for-e-commerce/README.md
================================================
## Getting Started

1. Clone the repository:

```sh
git clone https://github.com/assistant-ui/assistant-ui.git
```

2. Navigate to the project directory:

```sh
cd assistant-ui/examples/search-agent-for-e-commerce
```

3. Create a `.env` file with the following variable:

```sh
OPENAI_API_KEY="skXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
```

4. Make the `start.sh` script executable:

```sh
chmod +x start.sh
```

5. Start the servers:

```sh
./start.sh
```

6. Open the dummy e-commerce website in your browser:
   [http://localhost:8080/dummy-ecommerce-website.html](http://localhost:8080/dummy-ecommerce-website.html)

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

## Learn More

This project uses:

- assistant-ui components
- shadcn components
- Vercel AI SDK



================================================
File: examples/search-agent-for-e-commerce/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
File: examples/search-agent-for-e-commerce/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/search-agent-for-e-commerce/package.json
================================================
{
  "name": "search-agent-for-e-commerce",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "ai": "^4.1.25",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "embla-carousel-autoplay": "^8.5.2",
    "embla-carousel-react": "^8.5.2",
    "lucide-react": "^0.475.0",
    "nanoid": "3.3.8",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22.13.1",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}



================================================
File: examples/search-agent-for-e-commerce/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/search-agent-for-e-commerce/start.sh
================================================
#!/bin/bash

# Install dependencies
npm install

# Start the Next.js app
npm run dev &

# Start the HTTP server for the dummy HTML page
http-server -p 8080 &

# Wait for both processes to complete
wait


================================================
File: examples/search-agent-for-e-commerce/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;



================================================
File: examples/search-agent-for-e-commerce/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/search-agent-for-e-commerce/vercel.json
================================================
{
  "version": 2,
  "builds": [
    {
      "src": "src/app/api/chat/validate.ts",
      "use": "@vercel/node"
    },
    {
      "src": "next.config.mjs",
      "use": "@vercel/next"
    }
  ],
  "routes": [
    {
      "src": "/api/validate",
      "dest": "src/app/api/chat/validate.ts"
    },
    {
      "src": "/(.*)",
      "dest": "/"
    }
  ]
}



================================================
File: examples/search-agent-for-e-commerce/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/search-agent-for-e-commerce/public/dummy-ecommerce-website.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Iframe Widget Test</title>
    <script nonce="your-nonce-value" type="text/javascript">
      window.addEventListener("DOMContentLoaded", (event) => {
        const iframe = document.createElement("iframe");
        iframe.src = "http://localhost:3000?iframeId=666fc2181f6bb6fa20a4a9e7";
        iframe.style.position = "fixed";
        iframe.style.bottom = "10px";
        iframe.style.right = "10px";
        iframe.style.width = "70px";
        iframe.style.height = "70px";
        iframe.style.border = "none";
        iframe.style.zIndex = "9999";
        document.body.appendChild(iframe);
      });
      window.addEventListener("message", (event) => {
        if (event.data.type === "resize") {
          const iframe = document.querySelector("iframe");
          let newHeight = event.data.height;
          let newWidth = event.data.width;
          if (newHeight === 0) {
            newHeight = 70;
            newWidth = 70;
          }
          iframe.style.height = newHeight + "px";
          iframe.style.width = newWidth + "px";
        }
      });
    </script>
  </head>
  <body>
    <h1>Testing Iframe Widget</h1>

    <!-- Dummy E-commerce Shop Content -->
    <div class="container my-5">
      <h2 class="text-center mb-4">Our Products</h2>
      <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
        <!-- Product 1 -->
        <div class="col">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Product 1</h5>
              <p class="card-text">$29.99</p>
              <button class="btn btn-primary">Add to Cart</button>
            </div>
          </div>
        </div>
        <!-- Product 2 -->
        <div class="col">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Product 2</h5>
              <p class="card-text">$39.99</p>
              <button class="btn btn-primary">Add to Cart</button>
            </div>
          </div>
        </div>
        <!-- Product 3 -->
        <div class="col">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Product 3</h5>
              <p class="card-text">$49.99</p>
              <button class="btn btn-primary">Add to Cart</button>
            </div>
          </div>
        </div>
        <!-- Product 4 -->
        <div class="col">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Product 4</h5>
              <p class="card-text">$59.99</p>
              <button class="btn btn-primary">Add to Cart</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>



================================================
File: examples/search-agent-for-e-commerce/public/shop_info.txt
================================================
About Mr. SHOP
Founded: 1986

About: Dummy Shop likes to sell only the best quality clothing at the best price!

Description: In 1978 ESPIRIDIÓN SHOP, a notorious spanish bull fighter landed a direct hit to his ball sack by famous 'Sally the Bull' and tragically lost his left ball completely. Ending his fighting career soon after Mr SHOP built up enough ball to open his own sweat shop in New Mexico City. Quickly growing very popular selling tens of thousands of units across the the mexican boarder to the USA, Mr SHOP got caught up selling more than just t-shirts if you know what i mean…. Partying with high profile models and gangland leaders SHOP was now known to many as Dummy Shop. or Mr Dummy Shop to some.After being forced to shutdown his sweatshop operation because of a dispute with police on his premises, Dummy Shop slipped through the ever so corrupt law system and moved to Australia with model and stripper girl friend Bella Rose. With his greasy hair slicked back and an overgrown moustache intact Dummy Shop decided to get back into clothing manufacturing. SHOP believes he can create a great product for the Australian market. Opening his new sweat shop in 1999 Dummy Shop hopes he can deliver the best quality vintage retro garments across Australia and again the world.
He says "I know what I'm doing people doubt me but i see alot of people in this industry come and go, they silly they don't have good product like me they dont know who i know, I have my contacts and I have my passion for clothing back so now there is no stopping me Dummy Shop, people often ask me why i started a sweat shop again competing with Australia's best street wear brands and I tell them, I have new product I make vintage retro clothing from things people used to love, its that
simple people used to love it I bring it back better than ever before". I think we can expect big things from Dummy Shop's vintage and retro Collections be sure to keep an eye on the crazy Spanish/ mexican bull fighter because he has promised big things. adios amigos...

Awards: 1976- Spanish Bull Fighter of the Year.

"The best vintage prints in the world" Dummy Shop xoxo

Love Dummy Shop

Size Chart:
https://www.dummyshop.com/catalog/size_chart.php


Shipping & Returns
PAYMENT, SHIPPING, RETURNS AND REFUNDS
PAYMENT:
We accept credit card, American Express,PayPal, and Afterpay Payments only.
Payment MUST be made in full before we will start to process any orders. Credit Card Payments will be processed every morning, so please be aware even if you purchase at night it’s likely in some cases we wont process the payment until the next morning.
SHIPPING:
Your items will be shipped within 1-6 business days from your purchase date this allows enough time to us to custom print some items and handling delays. However if you wish to recieve your order quicker please select our VIP Front of Queue shipping option in the checkout section which will push your order to the front of the queue and be dispatched in less than 48hours.
Due to Australia post systems on our website some items may be shipped via regular E-Parcel due to your location or item purchased.
International orders will be shipped via E-Parcel unless you select the DHL option in the check-out.
We are not responsible for any international taxes or import duties your order may have when it enters your country from Australia.
POSTAGE:
We use Australia post for all our Dummy Shop online store distribution.
We ship worldwide from our distribution centre in Melbourne Australia.
We have 2 postage options: EXPRESS, AND INTERNATIONAL SHIPPING
We will send your items by your choosen postage option AFTER the 1-6 business days in printing and handling delay. Therefore if you choose and pay for express post you will still end up getting your item before a customer that has just chosen regular post.
If you pay for registered or express post you will have the luxury of a tracking number upon request. 
Free Shipping could be available at certain times however we don't offer any free shipping during a sale period.
RETURNS AND EXCHANGES:
We accept returns however the customer needs pay for postage back to us and then again back to them, please email us your order details before sending anything back to us so we can check stock levels of sizes or designs that you are swapping it for. 
If an item is wrong by our error then please email us at sales@dummyshop.com and a customer services representative will help you get your correct item sorted.
To check our size charts please see here: http://www.dummyshop.com/sizes.html
If an item is wrong or damaged on our error we will pay for your postage back to us and replace the item for you at no further costs.
If you require an exchange, you have 14 days to contact us via email to organise an exchange, and 30 days to have to product/s returned to us from the recieved product date.
If you have not received your item/s within 30 days, please contact us immediately. Orders can not be reshipped or refunded if we have not been contacted within the first 45 days since the purchase date, due to Australia Post's tracking numbers expiring.
If your parcel is returned to sender by Australia Post for an incorrect address or after failing to be collected from the post office, we will email you notifying you of this. You will also be asked to pay for the shipping again when your item is re-sent to you. If you do not reply to this email within 14 days, you will forfeit the order.
REFUNDS:
Sorry unfortunately we are a small business and DO NOT DO REFUNDS for incorrect sizes or wrong products ordered, however we do offer exchanges. For size changes and products swaps, postage must be covered both ways by the customer.
We DO NOT offer exchanges or refunds if the product you ordered is out of stock or was a clearance item / lucky dip. We also DO NOT offer exchanges or refunds on womens swimwear if the hygiene patch has been removed. 
We are very sorry for any inconvenience this has caused you.
If you have any further questions please feel free to email us: sales@dummyshop.com
We hope to get an order from you soon
 
Love 
 
Dummy Shop xx


Dummy Shop Online Clothing and Streetwear
Dummy Shop leads the way in vintage clothing and pop-culture apparel. Along with our unrivalled quirky accessories, Dummy Shop is unlike anything else in the Australian streetwear market. We produce only the highest quality of clothing, accessories and apparel across all our assortment of items.
Ranging from our vibrant party shirts to beach shorts, swimwear to festival headwear, funny t-shirts to crew jumpers and custom stubby holders to themed beer pong tables – Dummy Shop has you covered to meet all of your party and festival needs.
Our designs are current and topical within Australian culture, as well as combining all of the best movie and tv references, Dummy Shop leads the way in pop-culture clothing and accessories. With a huge social following on Instagram and Facebook, be sure to follow us to receive updates on all of our newly released products.


TERMS AND CONDITIONS 

Dummy Shop – LIMITED EDITION VB X Dummy Shop STEEDED GIVEAWAY JUNE 2023

MUST BE OVER 18 YEARS OLD TO ENTER AND CLAIM THE PRIZE. 

The Promoter is: Dummy Shop in Melbourne Victoria, Australia.
The above-mentioned companies will be hereafter jointly referred to as the ‘Promoter.’
Employees of the Promoter or their family members or anyone else connected in any way with the competition or helping to set up the competition shall not be permitted to enter the competition.
To enter the competition an entrant must follow us on either Facebook or Instagram, as well as tagging one or more people in the comments of the competition post.
To enter the competition, you must live in Australia or New Zealand and must be over the age of 18. Photo ID will be requested to check proof of age before the prize can be awarded.
The Prize is a brand-new, limited-edition Steeden Rugby League Ball, valued at $49.95 Inc. GST, which includes free shipping to the winners provided shipping address of choice within Australia or New Zealand.
The start date of the competition is June the 8th 2023 (AEST) and the closing date for entry will be 11.59pm (AEST) Tuesday June the 20th 2023. After this date no further entries to the competition will be permitted.
No responsibility can be accepted for entries not received within the above dates for whatever reason.
The rules of the competition are as follows:
Each entrant must follow the Dummy Shop Facebook page or Instagram pages.
The entrant must also tag one or more friends in the competition post on our Facebook and Instagram pages.
You must follow the Dummy Shop page on the same social media platform that you have commented on. For example an entry will not count if an entrant follows the Facebook page & comments on the Instagram post.
The Promoter reserves the right to cancel or amend the competition and these terms and conditions without notice in the event of a catastrophe, war, civil or military disturbance, act of God or any actual or anticipated breach of any applicable law or regulation or any other event outside of the Promoter’s control. Any changes to the competition will be notified to entrants as soon as possible by the Promoter.
The Promoter is not responsible for inaccurate prize details supplied to any entrant by any third party connected with this competition.
No cash alternative to the prizes will be offered. The prizes are not transferable. Prizes are subject to availability and we reserve the right to substitute any prize with another of equivalent value without giving notice.
Winner will be drawn at random at in Melbourne, Victoria, Australia on June the 21st 2023.
The winner will be notified by email and/or phone call within 28 days after the closing date. If the winner cannot be contacted or do not claim the prize within 14 days of notification, we reserve the right to withdraw the prize from the winner and pick a replacement winner.
The Promoter will notify the winner when their prize will be delivered to them.
The Promoter’s decision in respect of all matters to do with the competition will be final and no correspondence will be entered into.
By entering this competition, an entrant is indicating his/her acceptance and agreement to be bound by these terms and conditions.
The competition and these terms and conditions will be governed by Australian law and any disputes will be subject to the exclusive jurisdiction of the courts of Australia.
The winner agrees to the use of his/her name and image in any publicity material. Any personal data relating to the winner or any other entrants will be used solely in accordance with current Australian data protection legislation and will not be disclosed to a third party without the entrant’s prior consent.
The winner’s name will be published on our social media and website.
This promotion is in no way sponsored, endorsed or administered by, or associated with, Facebook, Twitter or any other Social Network. You are providing your information to the Promoter and not to any other party.
Thanks SHOP HQ


Pay over 8 weeks and receive your order now!
Using Afterpay you can pay for your order over 8 weeks. There's no interest or added fees. Payment will be automatically taken from your debit or credit card in four equal payments each fortnight over 8 weeks, and you will receive your order immediately. When using a promo code this must be applied to the order before continuing to the next step.

You simply need:
A debit card or credit card
To be over 18 years of age
To live in Australia OR New Zealand
To use this service simply:
Add your items to your shopping bag, and checkout as normal. Valid for amounts up to $1000.
On the checkout page select Afterpay as your payment method.
Enter your details with Afterpay and you're done.
The funds for the first payment will need to be available on the card at the time of checkout. If you are a new Afterpay customer payment will be made at the time of purchase, with payments over the next 6 weeks. Existing Afterpay customers first payment will be made in 14 days, with payments over 8 weeks. The full payment schedule will be provided to you at time of purchase.

If you wish to return your goods you can choose to receive an exchange, or the Afterpay payment plan can be cancelled. If you fail to make a payment you will be charged a late payment fee of $10 and an incremental $7 late fee for each week the order is overdue.

There is no waiting and we’ll ship out your order immediately as normal.

For full terms and conditions please visit Afterpay.


FAQ
How do I place an order on your website? - Simply add your desired item to your cart and follow the checkout prompts. You must create an account with us in order to finalize your order. By creating an Dummy Shop account, you can save your cart items and shopping history, as well as track and manage your orders.
We will email you once your order has been shipped and send you the tracking number.
What payment methods do you accept? - We accept a variety of payment methods, including Mastercard, Visa, Afterpay, PayPal, Apple Pay, and Google Pay.
Can I use a coupon code during a sale period? - Sorry we don't allow further discount stacking when the store is in a sale period. The only Coupons that will work will be ones from purchased Gift Vouchers.
Do you offer Free Shipping? - There are certain times of the year we may offer a free shipping promtion however we don't offer free shipping during a sale period.
Do you offer international shipping? - Yes, we do offer international shipping. As we are based in Australia, we provide free shipping within Australia for orders over $150 AUD. We also have shipping options available for most countries around the world.
Can I get a refund on sale items? - Sorry you can not get a refund on sale items
What is your return and exc - If you receive an item that doesn't fit or you're not satisfied with the product, you can return it to us at your own cost. We offer exchanges, store credit, and refunds. For more information, please contact sales@dummyshop.com.
How long does it take to process and ship an order? - Most orders are shipped within 6 business days of being placed. We also offer a VIP option during checkout that guarantees your order will ship within 24 hours. Shipping times depend on your local courier but are typically within 2-5 business days.
Can I track the status of my order? - Once your order is shipped, you will receive a shipping confirmation email containing a tracking number.
What should I do if I receive a damaged or incorrect item? - If you receive a damaged or incorrect item, please contact us immediately and provide photos of the issue. For more information, please contact sales@dummyshop.com.
Are there any size guides available? - Accurate size guides are available on each product's page.
Can I cancel or modify my order after it has been placed? - You can cancel or modify your order up until it has been shipped. Please contact sales@dummyshop.com as early as possible if you would like to make changes. Once the order has been shipped, we can no longer make adjustments.
Do you offer gift wrapping or personalization services? - If you are purchasing an item as a gift, you can include a personalized note with your order. We will print it out on a custom Dummy Shop card and include it in the package.
Are there any discounts or promotions available? - We regularly run sales and promotions. Be sure to sign up for our newsletter to be the first to know about special offers.
How can I contact your customer support? - For any further inquiries, please contact our customer support team at sales@dummyshop.com.
Do you have a physical store or showroom? - We are an online-only retailer and do not have a physical store or showroom.
Can I purchase gift cards? - Yes, we do offer gift cards the get emailed to you directly once you purchase them from our online store.
Are there any specific care instructions for your clothing items? - We recommend washing our products on a gentle cycle and avoiding tumble drying, as this will significantly prolong the quality of the product.

privacy_statement
PRIVACY STATEMENT
----
SECTION 1 - WHAT DO WE DO WITH YOUR INFORMATION?
When you purchase something from our store, as part of the buying and selling process, we collect the personal information you give us such as your name, address and email address.
When you browse our store, we also automatically receive your computer’s internet protocol (IP) address in order to provide us with information that helps us learn about your browser and operating system.
Email marketing (if applicable): With your permission, we may send you emails about our store, new products and other updates.

SECTION 2 - CONSENT
How do you get my consent?
When you provide us with personal information to complete a transaction, verify your credit card, place an order, arrange for a delivery or return a purchase, we imply that you consent to our collecting it and using it for that specific reason only.
If we ask for your personal information for a secondary reason, like marketing, we will either ask you directly for your expressed consent, or provide you with an opportunity to say no.
How do I withdraw my consent?
If after you opt-in, you change your mind, you may withdraw your consent for us to contact you, for the continued collection, use or disclosure of your information, at anytime, by contacting us at sales@dummyshop.com or mailing us at: Dummy's empire PTY LTD
SECTION 3 - DISCLOSURE
We may disclose your personal information if we are required by law to do so or if you violate our Terms of Service.

SECTION 4 - SHOPIFY
Our store is hosted on Dummy Inc. They provide us with the online e-commerce platform that allows us to sell our products and services to you.
Your data is stored through Shopify’s data storage, databases and the general Shopify application. They store your data on a secure server behind a firewall.
Payment:
If you choose a direct payment gateway to complete your purchase, then Shopify stores your credit card data. It is encrypted through the Payment Card Industry Data Security Standard (PCI-DSS). Your purchase transaction data is stored only as long as is necessary to complete your purchase transaction. After that is complete, your purchase transaction information is deleted.
All direct payment gateways adhere to the standards set by PCI-DSS as managed by the PCI Security Standards Council, which is a joint effort of brands like Visa, MasterCard, American Express and Discover.
PCI-DSS requirements help ensure the secure handling of credit card information by our store and its service providers.
For more insight, you may also want to read Shopify’s Terms of Service here or Privacy Statement here.

SECTION 5 - THIRD-PARTY SERVICES
In general, the third-party providers used by us will only collect, use and disclose your information to the extent necessary to allow them to perform the services they provide to us.
However, certain third-party service providers, such as payment gateways and other payment transaction processors, have their own privacy policies in respect to the information we are required to provide to them for your purchase-related transactions.
For these providers, we recommend that you read their privacy policies so you can understand the manner in which your personal information will be handled by these providers.
In particular, remember that certain providers may be located in or have facilities that are located in a different jurisdiction than either you or us. So if you elect to proceed with a transaction that involves the services of a third-party service provider, then your information may become subject to the laws of the jurisdiction(s) in which that service provider or its facilities are located.
As an example, if you are located in Canada and your transaction is processed by a payment gateway located in the United States, then your personal information used in completing that transaction may be subject to disclosure under United States legislation, including the Patriot Act.
Once you leave our store’s website or are redirected to a third-party website or application, you are no longer governed by this Privacy Policy or our website’s Terms of Service.

Links
When you click on links on our store, they may direct you away from our site. We are not responsible for the privacy practices of other sites and encourage you to read their privacy statements.
SECTION 6 - SECURITY
To protect your personal information, we take reasonable precautions and follow industry best practices to make sure it is not inappropriately lost, misused, accessed, disclosed, altered or destroyed.
If you provide us with your credit card information, the information is encrypted using secure socket layer technology (SSL) and stored with a AES-256 encryption.  Although no method of transmission over the Internet or electronic storage is 100% secure, we follow all PCI-DSS requirements and implement additional generally accepted industry standards.

COOKIES
Here is a list of cookies that we use. We’ve listed them here so you can choose if you want to opt-out of cookies or not.
_session_id, unique token, sessional, Allows Shopify to store information about your session (referrer, landing page, etc).
_shopify_visit, no data held, Persistent for 30 minutes from the last visit, Used by our website provider’s internal stats tracker to record the number of visits
_shopify_uniq, no data held, expires midnight (relative to the visitor) of the next day, Counts the number of visits to a store by a single customer.
cart, unique token, persistent for 2 weeks, Stores information about the contents of your cart.
_secure_session_id, unique token, sessional
storefront_digest, unique token, indefinite If the shop has a password, this is used to determine if the current visitor has access.
 
SECTION 7 - AGE OF CONSENT
By using this site, you represent that you are at least the age of majority in your state or province of residence, or that you are the age of majority in your state or province of residence and you have given us your consent to allow any of your minor dependents to use this site.
SECTION 8 - CHANGES TO THIS PRIVACY POLICY
We reserve the right to modify this privacy policy at any time, so please review it frequently. Changes and clarifications will take effect immediately upon their posting on the website. If we make material changes to this policy, we will notify you here that it has been updated, so that you are aware of what information we collect, how we use it, and under what circumstances, if any, we use and/or disclose it.
If our store is acquired or merged with another company, your information may be transferred to the new owners so that we may continue to sell products to you.

QUESTIONS AND CONTACT INFORMATION
If you would like to: access, correct, amend or delete any personal information we have about you, register a complaint, or simply want more information contact our Privacy Compliance Officer at sales@dummyshop.com or by mail at Dummy's empire PTY LTD
[Re: Privacy Compliance Officer]
[ Bayswater, VIC, 3168, Australia]


================================================
File: examples/search-agent-for-e-commerce/src/app/MyRuntimeProvider.tsx
================================================
"use client";

import {
  type AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";
import { useActions, useUIState } from "ai/rsc";
import { nanoid } from "nanoid";

import type { AI } from "@/app/actions";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { continueConversation } = useActions();
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    const message = await continueConversation(input);

    setMessages((currentConversation) => [...currentConversation, message]);
  };

  const runtime = useVercelRSCRuntime({ messages, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/search-agent-for-e-commerce/src/app/actions.tsx
================================================
"use server";

import { openai } from "@ai-sdk/openai";
import { createAI, getMutableAIState, streamUI } from "ai/rsc";
import { nanoid } from "nanoid";
import type { ReactNode } from "react";
import { z } from "zod";
import { CarouselPlugin } from "../components/ui/productcarousel";
import fs from "fs";
import path from "path";
import { streamText } from "ai";

export interface ServerMessage {
  role: "user" | "assistant";
  content: string;
}

export interface ClientMessage {
  id: string;
  role: "user" | "assistant";
  display: ReactNode;
}

export async function continueConversation(
  input: string,
  indexId: string,
): Promise<ClientMessage> {
  "use server";

  const history = getMutableAIState();

  const result = await streamUI({
    model: openai("gpt-3.5-turbo"),
    temperature: 0,
    system: `\
    You are a friendly assistant that helps the user with shopping on a ecommerce website ('DUMMY SHOP'). You help users with end-to-end shopping experience
    starting from general information about the brands and products, and helping with product discovery, search, and product details, as well as
    product purchase, customer support, fitting questions, technical questions.
    Your responses are solely based on the provided context about the store and its products.
    Right now, the user clicked on the AI assistant widget and your job is to determine their intent.
    The user intent migth not be clear, in this case you ask clarifications questions.
    The user quesiton might not be complete, in this case you ask for follow up questions.
      
    Here's a list of user intents to pick from: 
    - Product search
    - Guideline for clothes fitting
    - Product specific questions
    - Customer support questions (e.g. track purchase, payment issues, order issues)
    - Escalate to human agent
    - Ask a clarification/follow up question
    - Product comparison
    - Promotions, hot deals
    `,
    messages: [...history.get(), { role: "user", content: input, indexId }],
    text: ({ content, done }) => {
      if (done) {
        history.done((messages: ServerMessage[]) => [
          ...messages,
          { role: "assistant", content },
        ]);
      }
      return <div>{content}</div>;
    },
    // toolChoice: 'required', // force the model to call a tool
    // maxToolRoundtrips: 5, // allow up to 5 tool roundtrips
    tools: {
      product_search: {
        description:
          "Search for products on this website using pre-built indices",
        parameters: z.object({
          query: z
            .string()
            .describe(
              "A clear factual product query, potentially including type, name, qualities, characteristics of the product",
            ),
        }),
        generate: async ({ query }) => {
          try {
            console.log("query=", query);
            const response = await fetch(
              `https://dummyjson.com/products/search?q=${query}`,
            );
            const data = (await response.json()) as {
              products: {
                thumbnail: string;
                title: string;
                description: string;
                price: string;
                url: string;
              }[];
            };
            console.log("data=", data);
            if (data.products && data.products.length > 0) {
              const products = data.products.map((item) => ({
                thumbnail: item.thumbnail,
                title: item.title,
                description: item.description,
                metadata_3: item.price,
                link: item.url,
              }));
              return <CarouselPlugin products={products} />;
            } else {
              return <p>No products found.</p>;
            }
          } catch {
            return (
              <p>
                Sorry, we are experiencing some error. Please refresh the chat
                and try again.
              </p>
            );
          }
        },
      },
      general_question: {
        description: "User questions not related to products directly",
        parameters: z.object({
          user_question: z
            .string()
            .describe("User questions not related to products directly"),
        }),
        generate: async function* ({ user_question }) {
          const filePath = path.resolve(process.cwd(), "public/shop_info.txt");
          const generalInfo = fs.readFileSync(filePath, "utf-8");
          const result = streamText({
            model: openai("gpt-3.5-turbo"),
            temperature: 0,
            prompt: `Generate response to user question ${user_question} based on the context ${generalInfo}`,
          });
          let textContent = "";

          for await (const textPart of result.textStream) {
            textContent += textPart;
            yield textContent;
          }
          return textContent;
        },
      },
      clothes_fitting: {
        description:
          "Send to user link to guidelines for clothes fitting https://images.app.goo.gl/LECaeXJfXa7gzYCC8 ",
        parameters: z.object({}),
        generate: async ({}) => {
          const fittingGuidelinesLink =
            "https://images.app.goo.gl/LECaeXJfXa7gzYCC8 ";
          const formattedLink = `<a href="${fittingGuidelinesLink}" target="_blank">Guidelines for clothes fitting</a>`;
          const linkStyle = {
            color: "blue",
            textDecoration: "underline",
          };
          history.done((messages: ServerMessage[]) => [
            ...messages,
            {
              role: "assistant",
              content: formattedLink,
            },
          ]);

          return (
            <a href={fittingGuidelinesLink} target="_blank" style={linkStyle}>
              Guidelines for clothes fitting
            </a>
          );
        },
      },
      escalate: {
        description:
          "Escalate to human agent if none of the other tools seem relevant or the interaction is repetative, or if the user is getting upset",
        parameters: z.object({
          identifiable_info: z
            .string()
            .describe(
              "Email, full name, or order number to make the request identifiable",
            ),
          summary: z.string().describe("Summarize user request concisely"),
        }),
        generate: async function* ({ identifiable_info, summary }) {
          let textContent =
            "I am escalating your question to the human assistant\n\n";
          yield textContent;
          console.log(
            "generating answer while escalating, ",
            identifiable_info,
          );
          const filePath = path.resolve(process.cwd(), "public/shop_info.txt");
          const generalInfo = fs.readFileSync(filePath, "utf-8");
          const result = await streamText({
            model: openai("gpt-3.5-turbo"),
            temperature: 0,
            system: `Generate response to user question ${summary} based on the context ${generalInfo}. Your answer begins with: "While we wait for the human assistant,`,
            messages: [
              {
                role: "user",
                content: summary,
              },
              {
                role: "assistant",
                content: textContent,
              },
            ],
          });

          for await (const textPart of result.textStream) {
            textContent += textPart;
            yield textContent;
          }
          return textContent;
        },
      },
    },
  });

  return {
    id: nanoid(),
    role: "assistant",
    display: result.value,
  };
}

export const AI = createAI<ServerMessage[], ClientMessage[]>({
  actions: {
    continueConversation,
  },
  initialAIState: [],
  initialUIState: [],
});



================================================
File: examples/search-agent-for-e-commerce/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: examples/search-agent-for-e-commerce/src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { AI } from "@/app/actions";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";
import type React from "react";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <AI>
        <MyRuntimeProvider>
          <body
            className={inter.className}
            style={{ backgroundColor: "transparent" }}
          >
            {children}
          </body>
        </MyRuntimeProvider>
      </AI>
    </html>
  );
}



================================================
File: examples/search-agent-for-e-commerce/src/app/page.tsx
================================================
"use client";

import { Suspense } from "react";
import { AssistantModal } from "@/components/ui/assistant-ui/assistant-modal";

function Home() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <div className="fixed bottom-4 right-4 size-12 rounded-full shadow">
        <AssistantModal />
      </div>
    </Suspense>
  );
}

export default function Page() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Home />
    </Suspense>
  );
}



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    src="/favicon.ico"
    alt="AI"
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "bg-muted flex h-full w-full items-center justify-center rounded-full",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-card text-card-foreground rounded-lg border shadow-sm",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/carousel.tsx
================================================
"use client";

import * as React from "react";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/popover.tsx
================================================
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ComponentRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-none",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/productcarousel.tsx
================================================
"use client";

import * as React from "react";
import Autoplay from "embla-carousel-autoplay";

import { Card, CardContent } from "@/components/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

interface Product {
  thumbnail: string;
  title: string;
  description: string;
  metadata_3: string;
  link: string;
}

interface ProductCarouselProps {
  products: Product[];
}

const productStyle = {
  display: "flex",
  flexDirection: "column" as const,
  alignItems: "center",
  textAlign: "center" as const,
};

const imageContainerStyle = {
  justifyContent: "center",
  maxWidth: "100%",
  overflow: "hidden",
};

const productLinkStyle = {
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  maxWidth: "100%",
  height: "100%",
};

const productNameStyle = {
  marginTop: "0.5rem",
};

const productPriceStyle = {
  marginTop: "0.5rem",
};

export function CarouselPlugin({ products }: ProductCarouselProps) {
  const plugin = React.useRef(
    Autoplay({ delay: 2000, stopOnInteraction: true }),
  );

  return (
    <Carousel
      plugins={[plugin.current]}
      className="relative w-full max-w-2xl"
      onMouseEnter={plugin.current.stop}
      onMouseLeave={plugin.current.reset}
    >
      <CarouselContent className="w-full">
        {products.map((product, index) => (
          <CarouselItem key={index} className="basis-1/2">
            <div className="relative w-full p-1">
              <Card className="h-full w-full">
                <CardContent className="flex flex-col items-center justify-center p-6">
                  <div className="product" style={productStyle}>
                    <div
                      className="image-container"
                      style={imageContainerStyle}
                    >
                      <a
                        className="product-link product_image"
                        href={product.link}
                        style={productLinkStyle}
                        data-mpn={product.metadata_3}
                        data-query={product.title}
                        data-intent="product_search"
                        data-order={index}
                      >
                        {/* eslint-disable-next-line @next/next/no-img-element */}
                        <img
                          className="img-fluid mb-3"
                          src={product.thumbnail}
                          alt={product.title}
                          style={{ maxWidth: "100%", maxHeight: "100%" }}
                        />
                      </a>
                      <div className="productName" style={productNameStyle}>
                        <a
                          className="product-name-link"
                          href={product.link}
                          data-mpn={product.metadata_3}
                        >
                          {product.title}
                        </a>
                      </div>
                      <p>
                        <span
                          className="productPrice"
                          style={productPriceStyle}
                          dangerouslySetInnerHTML={{
                            __html: product.metadata_3,
                          }}
                        />
                      </p>
                      {/* <div className="actionGroup" style={actionGroupStyle}>
                        <a
                          className="chat_buy_now"
                          href={product.link}
                          data-mpn={product.metadata_3}
                        >
                          Buy Now
                        </a>
                      </div>
                      <div
                        className="see_more_products"
                        style={seeMoreProductsStyle}
                        data-mpn={product.metadata_3}
                        data-image={product.thumbnail}
                        data-title={product.title}
                      >
                        See more like this
                      </div> */}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious className="absolute left-2 top-1/2 z-10 -translate-y-1/2 transform" />
      <CarouselNext className="absolute right-2 top-1/2 z-10 -translate-y-1/2 transform" />
    </Carousel>
  );
}



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ComponentRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/assistant-ui/assistant-modal.tsx
================================================
import { BotIcon, ChevronDownIcon } from "lucide-react";
import { Thread } from "@/components/ui/assistant-ui/thread";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { TooltipProvider } from "@radix-ui/react-tooltip";
import { useEffect, forwardRef, useState } from "react";

export const AssistantModal = () => {
  const [open, setOpen] = useState(false);

  useEffect(() => {
    const height = open ? 770 : 70; // Set the height based on the modal state
    const width = open ? 720 : 70; // Set the width based on the modal state
    window.parent.postMessage(
      {
        type: "resize",
        height: height,
        width: width,
      },
      "*",
    );
  }, [open]);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <FloatingAssistantButton />
      </PopoverTrigger>
      <PopoverContent
        side="top"
        align="end"
        className="fixed bottom-0 right-0 z-50 h-[700px] w-[700px] overflow-y-auto rounded-2xl p-0"
      >
        <Thread />
      </PopoverContent>
    </Popover>
  );
};

type FloatingAssistantButton = { "data-state"?: "open" | "closed" };

const FloatingAssistantButton = forwardRef<
  HTMLButtonElement,
  FloatingAssistantButton
>(({ "data-state": state, ...rest }, forwardedRef) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="default"
            size="icon"
            className="fixed bottom-4 right-4 size-12 rounded-full shadow transition-transform hover:scale-110 active:scale-90"
            {...rest}
            ref={forwardedRef}
            style={{ zIndex: 1000 }}
          >
            <BotIcon
              className={cn(
                "absolute size-6 transition-all",
                state === "open" && "rotate-90 scale-0",
                state === "closed" && "rotate-0 scale-100",
              )}
            />

            <ChevronDownIcon
              className={cn(
                "absolute size-6 transition-all",
                state === "open" && "rotate-0 scale-100",
                state === "closed" && "-rotate-90 scale-0",
              )}
            />
            <span className="sr-only">{tooltip}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent side="left">{tooltip}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
});

FloatingAssistantButton.displayName = "FloatingAssistantButton";



================================================
File: examples/search-agent-for-e-commerce/src/components/ui/assistant-ui/thread.tsx
================================================
"use client";

import {
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import type { FC, PropsWithChildren } from "react";
import { Button, type ButtonProps } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  TooltipProvider,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { ArrowDownIcon, SendHorizontalIcon } from "lucide-react";
import Image from "next/image";

export const Thread: FC = () => {
  return (
    <TooltipProvider>
      <ThreadPrimitive.Root className="flex h-full flex-col items-center pb-3">
        <ThreadPrimitive.Viewport className="flex w-full flex-grow flex-col items-center overflow-y-scroll scroll-smooth px-4 pt-12">
          <ThreadPrimitive.Empty>
            <ThreadEmpty />
          </ThreadPrimitive.Empty>

          <ThreadPrimitive.Messages
            components={{
              UserMessage,
              AssistantMessage,
            }}
          />
          <ThreadScrollToBottom />
        </ThreadPrimitive.Viewport>

        <Composer />
      </ThreadPrimitive.Root>
    </TooltipProvider>
  );
};

const ThreadEmpty: FC = () => {
  return (
    <div className="flex w-full max-w-2xl grow flex-col justify-end px-4 py-6">
      {" "}
      {/* Stick to bottom */}
      <div className="mb-1 flex flex-grow flex-col items-center justify-center">
        {" "}
        {/* Reduced margin-bottom */}
        <Image
          src="/image.png"
          alt="Your Logo"
          className="mb-4 w-1/2 max-w-xs"
          width={320}
          height={164}
        />{" "}
        {/* Smaller image */}
        <div className="flex items-center">
          <Avatar className="mr-4" style={{ width: "20px", height: "20px" }}>
            {" "}
            {/* Adjusted size */}
            <AvatarImage src="/favicon.ico" alt="AI" />
            <AvatarFallback>AI</AvatarFallback>
          </Avatar>
          <p className="mt-4">
            Hi, do you know what product you are looking for, or you have a
            general question?
          </p>
        </div>
      </div>
      <div className="flex flex-col gap-4 self-stretch sm:flex-row">
        <ThreadSuggestion prompt="I need help with product search">
          <p className="mb-2 font-semibold">Product search</p>
        </ThreadSuggestion>
        <ThreadSuggestion prompt="I need to talk to human agent support">
          <p className="mb-2 font-semibold">Human agent</p>
        </ThreadSuggestion>
      </div>
    </div>
  );
};

const ThreadSuggestion: FC<PropsWithChildren<{ prompt: string }>> = ({
  prompt,
  children,
}) => {
  return (
    <ThreadPrimitive.Suggestion
      prompt={prompt}
      method="replace"
      autoSend
      asChild
    >
      <Button
        variant="outline"
        className="text-md flex h-full items-center justify-center sm:basis-full"
      >
        {children}
      </Button>
    </ThreadPrimitive.Suggestion>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <div className="sticky bottom-0">
      <ThreadPrimitive.ScrollToBottom asChild>
        <IconButton
          tooltip="Scroll to bottom"
          variant="outline"
          className="absolute -top-10 rounded-full disabled:invisible"
        >
          <ArrowDownIcon className="size-4" />
        </IconButton>
      </ThreadPrimitive.ScrollToBottom>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="flex w-[calc(100%-32px)] max-w-[42rem] items-end rounded-lg border p-0.5 transition-shadow focus-within:shadow-sm">
      <ComposerPrimitive.Input
        placeholder="Write a message..."
        className="placeholder:text-foreground/50 h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm outline-none"
      />
      <ComposerPrimitive.Send className="bg-foreground m-2 flex h-8 w-8 items-center justify-center rounded-md text-2xl font-bold shadow transition-opacity disabled:opacity-10">
        <SendHorizontalIcon className="text-background size-4" />
      </ComposerPrimitive.Send>
    </ComposerPrimitive.Root>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-6 flex w-full max-w-2xl flex-col items-end gap-2 pl-24">
      <div className="relative mr-1 flex items-start gap-3">
        <p className="bg-foreground/5 text-foreground max-w-xl whitespace-pre-line break-words rounded-3xl px-5 py-2.5">
          <MessagePrimitive.Content />
        </p>
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-6 flex w-full max-w-2xl gap-3">
      <Avatar>
        <AvatarFallback>A</AvatarFallback>
      </Avatar>

      <div className="mt-2 flex-grow">
        <p className="text-foreground max-w-xl whitespace-pre-line break-words">
          <MessagePrimitive.Content />
        </p>
      </div>
    </MessagePrimitive.Root>
  );
};

type IconButton = ButtonProps & { tooltip: string };

const IconButton: FC<IconButton> = ({
  children,
  tooltip,
  className,
  ...rest
}) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className={cn("size-auto p-1", className)}
          {...rest}
        >
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">{tooltip}</TooltipContent>
    </Tooltip>
  );
};



================================================
File: examples/search-agent-for-e-commerce/src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-ai-sdk/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-ai-sdk/package.json
================================================
{
  "name": "with-ai-sdk",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:^",
    "@assistant-ui/react-ui": "workspace:^",
    "ai": "^4.1.25",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/with-ai-sdk/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-ai-sdk/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss"),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-ai-sdk/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-ai-sdk/.env.example
================================================
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



================================================
File: examples/with-ai-sdk/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/with-ai-sdk/app/MyRuntimeProvider.tsx
================================================
"use client";

import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";
import { useChat } from "ai/react";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({ api: "/api/chat" });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-ai-sdk/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: examples/with-ai-sdk/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en" className="h-full">
        <body className={`${inter.className} h-full`}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-ai-sdk/app/page.tsx
================================================
"use client";

import { Thread } from "@assistant-ui/react-ui";

export default function Home() {
  return (
    <main className="h-full">
      <Thread />
    </main>
  );
}



================================================
File: examples/with-ai-sdk/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages,
  });

  return result.toDataStreamResponse();
}



================================================
File: examples/with-cloud/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;




================================================
File: examples/with-cloud/package.json
================================================
{
  "name": "with-cloud",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:^",
    "@assistant-ui/react-ui": "workspace:^",
    "ai": "^4.1.25",
    "jsonwebtoken": "^9.0.2",
    "nanoid": "3.3.8",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/jsonwebtoken": "^9.0.8",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/with-cloud/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-cloud/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss"),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-cloud/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-cloud/.env.example
================================================
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
JWT_SECRET=1234
ASSISTANT_API_KEY=sk-aui-proj-xxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
NEXT_PUBLIC_ASSISTANT_BASE_URL=https://proj-xxxxxxxxxxxxx.assistant-api.com




================================================
File: examples/with-cloud/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/with-cloud/app/MyRuntimeProvider.tsx
================================================
"use client";

import { AssistantCloud, AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

const cloud = new AssistantCloud({
  baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
  authToken: () =>
    fetch("/api/assistant-ui-token", { method: "POST" })
      .then((r) => r.json())
      .then((r) => r.token),
});

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useChatRuntime({
    cloud,
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-cloud/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: examples/with-cloud/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Assistant Cloud Example",
  description: "Example showcasing assistant-cloud thread history integration",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="h-full">
      <body className={`${inter.className} h-full`}>
        <MyRuntimeProvider>{children}</MyRuntimeProvider>
      </body>
    </html>
  );
}



================================================
File: examples/with-cloud/app/page.tsx
================================================
"use client";

import { Thread, ThreadList } from "@assistant-ui/react-ui";

export default function Home() {
  return (
    <main className="grid h-full grid-cols-[200px,1fr] gap-4 p-4">
      <ThreadList />
      <Thread />
    </main>
  );
}



================================================
File: examples/with-cloud/app/api/assistant-ui-token/route.ts
================================================
import { customAlphabet } from "nanoid";
import { cookies } from "next/headers";
import jwt, { JwtPayload } from "jsonwebtoken";
import { AssistantCloud } from "@assistant-ui/react";

const generateId = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  32,
);
const randomUserId = () => {
  const userId = `usr_anon_${generateId()}`;
  return userId;
};

const getJwtForUser = (userId: string) => {
  return jwt.sign(
    {
      sub: userId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7, // 1 week
    },
    process.env["JWT_SECRET"]!,
  );
};

const getUserIdFromJwt = (token: string) => {
  const decoded = jwt.verify(token, process.env["JWT_SECRET"]!) as JwtPayload;
  return decoded.sub!;
};

export const POST = async () => {
  const cookieStore = await cookies();
  const jwtCookie = cookieStore.get("jwt");
  let userId;
  if (!jwtCookie) {
    userId = randomUserId();
  } else {
    userId = getUserIdFromJwt(jwtCookie.value);
  }

  cookieStore.set("jwt", getJwtForUser(userId), {
    path: "/",
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 60 * 60 * 24 * 7, // 1 week
  });

  const client = new AssistantCloud({
    apiKey: process.env["ASSISTANT_API_KEY"]!,
    userId,
    workspaceId: userId,
  });
  const { token } = await client.auth.tokens.create();
  return Response.json({ token });
};



================================================
File: examples/with-cloud/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages,
  });

  return result.toDataStreamResponse();
}



================================================
File: examples/with-external-store/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-external-store/package.json
================================================
{
  "name": "with-external-store",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/with-external-store/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-external-store/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss"),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-external-store/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-external-store/.env.example
================================================
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



================================================
File: examples/with-external-store/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/with-external-store/app/MyRuntimeProvider.tsx
================================================
"use client";

import { ThreadMessageLike } from "@assistant-ui/react";
import { AppendMessage } from "@assistant-ui/react";
import {
  AssistantRuntimeProvider,
  useExternalStoreRuntime,
} from "@assistant-ui/react";
import { useState } from "react";

const convertMessage = (message: ThreadMessageLike) => {
  return message;
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [messages, setMessages] = useState<readonly ThreadMessageLike[]>([]);

  const onNew = async (message: AppendMessage) => {
    if (message.content.length !== 1 || message.content[0]?.type !== "text")
      throw new Error("Only text content is supported");

    const userMessage: ThreadMessageLike = {
      role: "user",
      content: [{ type: "text", text: message.content[0].text }],
    };
    setMessages((currentMessages) => [...currentMessages, userMessage]);

    // normally you would perform an API call here to get the assistant response
    await new Promise((resolve) => setTimeout(resolve, 1000));

    const assistantMessage: ThreadMessageLike = {
      role: "assistant",
      content: [{ type: "text", text: "Hello, world!" }],
    };
    setMessages((currentMessages) => [...currentMessages, assistantMessage]);
  };

  const runtime = useExternalStoreRuntime<ThreadMessageLike>({
    messages,
    setMessages,
    onNew,
    convertMessage,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-external-store/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: examples/with-external-store/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en" className="h-full">
        <body className={`${inter.className} h-full`}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-external-store/app/page.tsx
================================================
"use client";

import { Thread } from "@assistant-ui/react-ui";

export default function Home() {
  return (
    <main className="h-full">
      <Thread />
    </main>
  );
}



================================================
File: examples/with-external-store/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { createEdgeRuntimeAPI } from "@assistant-ui/react/edge";

export const maxDuration = 30;

export const { POST } = createEdgeRuntimeAPI({
  model: openai("gpt-4o"),
});



================================================
File: examples/with-ffmpeg/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
File: examples/with-ffmpeg/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: examples/with-ffmpeg/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-ffmpeg/package.json
================================================
{
  "name": "with-ffmpeg",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-hook-form": "workspace:*",
    "@assistant-ui/react-ui": "workspace:*",
    "@ffmpeg/ffmpeg": "^0.12.15",
    "@ffmpeg/util": "^0.12.2",
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@react-hook/media-query": "^1.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "json-schema-to-zod": "^2.6.0",
    "lucide-react": "^0.475.0",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-hook-form": "^7.54.2",
    "react-resizable-panels": "^2.1.7",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1",
    "zod-to-json-schema": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}



================================================
File: examples/with-ffmpeg/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-ffmpeg/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: {
        xs: "2rem",
      },
      screens: {
        xs: "460px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")({ shadcn: true }),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-ffmpeg/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-ffmpeg/.gitignore
================================================
.vercel



================================================
File: examples/with-ffmpeg/app/MyRuntimeProvider.tsx
================================================
"use client";

import { AssistantRuntimeProvider, useEdgeRuntime } from "@assistant-ui/react";
import { AttachmentAdapter } from "@assistant-ui/react";
import { INTERNAL } from "@assistant-ui/react";

const { generateId } = INTERNAL;

const attachmentAdapter: AttachmentAdapter = {
  accept: "image/*,video/*,audio/*",
  async add({ file }) {
    return {
      id: generateId(),
      file,
      type: "file",
      name: file.name,
      contentType: file.type,
      status: { type: "requires-action", reason: "composer-send" },
    };
  },
  async send(attachment) {
    return {
      ...attachment,
      content: [
        {
          type: "text",
          text: `[User attached a file: ${attachment.name}]`,
        },
      ],
      status: { type: "complete" },
    };
  },
  async remove() {
    // noop
  },
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useEdgeRuntime({
    api: "/api/chat",
    maxSteps: 4,
    adapters: {
      attachments: attachmentAdapter,
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-ffmpeg/app/NoSSRWrapper.tsx
================================================
import dynamic from "next/dynamic";
import { FC, PropsWithChildren } from "react";

const NoSSRWrapper: FC<PropsWithChildren> = (props) => <>{props.children}</>;

export default dynamic(() => Promise.resolve(NoSSRWrapper), {
  ssr: false,
});



================================================
File: examples/with-ffmpeg/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: examples/with-ffmpeg/app/layout.tsx
================================================
import "./globals.css";

import { cn } from "@/lib/utils";
import { Montserrat } from "next/font/google";
import { MyRuntimeProvider } from "./MyRuntimeProvider";

const montserrat = Montserrat({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={cn(montserrat.className, "h-dvh")}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-ffmpeg/app/page.tsx
================================================
"use client";

import {
  useAssistantInstructions,
  useAssistantTool,
  useThreadComposer,
} from "@assistant-ui/react";
import { Thread } from "@assistant-ui/react-ui";
import { z } from "zod";
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { toBlobURL } from "@ffmpeg/util";
import { FC, useEffect, useRef, useState } from "react";
import {
  CircleCheckIcon,
  RefreshCcwIcon,
  TriangleAlertIcon,
} from "lucide-react";

// MVP: upload file, enter command
// MVP: convert command to tool call
// MVP: tool call: ffmpeg

const FfmpegTool: FC<{ file: File }> = ({ file }) => {
  const loadingRef = useRef(false);
  const ffmpegRef = useRef(new FFmpeg());

  useEffect(() => {
    if (loadingRef.current) return;
    loadingRef.current = true;

    const load = async () => {
      const baseURL = "https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd";
      const ffmpeg = ffmpegRef.current;
      // toBlobURL is used to bypass CORS issue, urls with the same
      // domain can be used directly.
      await ffmpeg.load({
        coreURL: await toBlobURL(
          `${baseURL}/ffmpeg-core.js`,
          "text/javascript",
        ),
        wasmURL: await toBlobURL(
          `${baseURL}/ffmpeg-core.wasm`,
          "application/wasm",
        ),
      });
    };
    load();
  }, []);

  useAssistantInstructions("The user has attached a file: " + file.name);

  useAssistantTool({
    toolName: "run_ffmpeg",
    parameters: z.object({
      command: z
        .string()
        .array()
        .describe("The ffmpeg command line arguments to provide"),
      outputFileName: z
        .string()
        .describe(
          "The name of the output file including extension, corresponding to the command provided",
        ),
      outputMimeType: z
        .string()
        .describe("The mime type of the output file, e.g. image/png"),
    }),
    execute: async ({ command }) => {
      const transcode = async () => {
        const ffmpeg = ffmpegRef.current;

        const logs: string[] = [];
        const logger = ({ message }: { message: string }) => {
          logs.push(message);
        };
        ffmpeg.on("log", logger);

        await ffmpeg.writeFile(
          file.name,
          new Uint8Array(await file.arrayBuffer()),
        );

        const code = await ffmpeg.exec(command);
        ffmpeg.off("log", logger);

        return { code, logs };
      };
      const { code, logs } = await transcode();

      return {
        success: code === 0,
        hint:
          code === 0
            ? "note: a download button is appearing in the chat for the user"
            : "some error happened, logs: " + logs.join("\n"),
      };
    },
    render: function RenderFfmpeg({
      args: { command, outputFileName, outputMimeType },
      result: { success } = {},
    }) {
      const handleDownload = async () => {
        const ffmpeg = ffmpegRef.current;
        const data = (await ffmpeg.readFile(
          outputFileName,
        )) as Uint8Array<ArrayBuffer>;
        window.open(
          URL.createObjectURL(
            new Blob([data.buffer], { type: outputMimeType }),
          ),
          "_blank",
        );
      };
      return (
        <div className="flex flex-col gap-2 rounded-lg border px-5 py-4">
          <div>
            <div className="flex items-center gap-2">
              {success == null && (
                <RefreshCcwIcon className="size-4 animate-spin text-blue-600" />
              )}
              {success === false && (
                <TriangleAlertIcon className="size-4 text-red-600" />
              )}
              {success === true && (
                <CircleCheckIcon className="size-4 text-green-600" />
              )}
              <p>Running ffmpeg</p>
            </div>
            <pre className="font-sm overflow-y-scroll">
              ffmpeg {command?.join(" ")}
            </pre>
          </div>
          {!!success && (
            <div className="mt-2 border-t border-dashed pt-3">
              <button onClick={handleDownload}>
                Download {outputFileName}
              </button>
            </div>
          )}
          {success === false && (
            <div className="mt-2 border-t border-dashed pt-3">
              Encountered an error.
            </div>
          )}
        </div>
      );
    },
  });

  return null;
};

export default function Home() {
  const [lastFile, setLastFile] = useState<File | null>(null);
  const attachments = useThreadComposer((c) => c.attachments);
  useEffect(() => {
    const lastAttachment = attachments[attachments.length - 1];
    if (!lastAttachment) return;
    setLastFile(lastAttachment.file!);
  }, [attachments]);

  console.log(lastFile);
  return (
    <div className="flex h-full flex-col">
      <div className="border-b">
        <p className="my-4 ml-8 text-xl font-bold">
          ConvertGPT (built with{" "}
          <a
            href="https://github.com/assistant-ui/assistant-ui"
            className="underline"
          >
            assistant-ui
          </a>
          )
        </p>
      </div>
      <Thread />
      {lastFile && <FfmpegTool file={lastFile} />}
    </div>
  );
}



================================================
File: examples/with-ffmpeg/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { createEdgeRuntimeAPI } from "@assistant-ui/react/edge";

export const runtime = "edge";

export const { POST } = createEdgeRuntimeAPI({
  model: openai("gpt-4o-2024-08-06"),
});



================================================
File: examples/with-ffmpeg/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-inline-suggestions/README.md
================================================
# AI_button

This project is something I've been missing quite a lot. How do I engage user with AI chat with less friction?

So, I integrated LLM calls to auto-generate follow-up questions based on the latest conversation, displayed as clickable buttons.

![Demo](./app/demo.gif)

## Getting Started

First, add your OpenAI API key to `.env` file:

```
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

Then, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.



================================================
File: examples/with-inline-suggestions/LICENSE
================================================
MIT License

Copyright (c) 2024 Matthew Diakonov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: examples/with-inline-suggestions/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================
File: examples/with-inline-suggestions/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-inline-suggestions/package.json
================================================
{
  "name": "with-inline-suggestions",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "ai": "^4.1.25",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.475.0",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/with-inline-suggestions/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-inline-suggestions/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;



================================================
File: examples/with-inline-suggestions/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-inline-suggestions/.env.example
================================================
OPENAI_API_KEY=sk-proj-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


================================================
File: examples/with-inline-suggestions/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Secret file
.env        

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/with-inline-suggestions/app/MyRuntimeProvider.tsx
================================================
"use client";

import { useChat } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({
    api: "/api/chat",
  });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-inline-suggestions/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
File: examples/with-inline-suggestions/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";
import { cn } from "@/lib/utils";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en" className="h-full">
        <body className={cn(inter.className, "h-full")}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-inline-suggestions/app/page.tsx
================================================
import { Thread } from "@/components/ui/assistant-ui/thread";

export default function Home() {
  return (
    <main className="h-full">
      <Thread />
    </main>
  );
}



================================================
File: examples/with-inline-suggestions/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages,
  });

  return result.toDataStreamResponse();
}



================================================
File: examples/with-inline-suggestions/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "bg-muted flex h-full w-full items-center justify-center rounded-full",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: examples/with-inline-suggestions/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: examples/with-inline-suggestions/components/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ComponentRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
File: examples/with-inline-suggestions/components/ui/assistant-ui/AI_ThreadSuggestion.tsx
================================================
import React, {
  FC,
  PropsWithChildren,
  useState,
  useEffect,
  useCallback,
  useRef,
} from "react";
import { Button } from "@/components/ui/button";
import { ThreadPrimitive } from "@assistant-ui/react";
import { useLastAssistantMessage } from "./LastMessageHook";
import { generate } from "./actions";
import { readStreamableValue } from "ai/rsc";

const AI_ThreadSuggestion: FC<PropsWithChildren> = ({ children }) => {
  const lastAssistantMessage = useLastAssistantMessage();
  const [output, setOutput] = useState<string | null>(null);
  const [output2, setOutput2] = useState<string | null>(null);

  const debounceRef = useRef(false);
  const generateSuggestions = useCallback(async (content: string) => {
    // do not send duplicate requests in React Strict Mode during development
    if (process.env.NODE_ENV === "development") {
      if (debounceRef.current) return;
      debounceRef.current = true;
      setTimeout(() => {
        debounceRef.current = false;
      }, 0);
    }

    const [response1, response2] = await Promise.all([
      generate(
        `Generate a optimistic very very short one sentence follow up question based on this response: "${content}"`,
      ),
      generate(
        `Generate a very skeptical very very short one sentence follow up question based on this response: "${content}"`,
      ),
    ]);

    let generatedOutput = "";
    for await (const delta of readStreamableValue(response1.output)) {
      generatedOutput += delta;
    }
    console.log(generatedOutput);
    setOutput(generatedOutput);

    let generatedOutput2 = "";
    for await (const delta of readStreamableValue(response2.output)) {
      generatedOutput2 += delta;
    }
    console.log(generatedOutput2);
    setOutput2(generatedOutput2);
  }, []);

  useEffect(() => {
    const lastMessageContent = lastAssistantMessage?.content;
    const lastMessageString = JSON.stringify(lastMessageContent);
    generateSuggestions(lastMessageString);
  }, [lastAssistantMessage, generateSuggestions]);

  return (
    <div className="flex w-full space-x-2">
      <ThreadPrimitive.Suggestion
        prompt={output || ""}
        method="replace"
        autoSend
        asChild
      >
        <Button
          variant="outline"
          className="h-auto flex-1 p-2"
          style={{ whiteSpace: "normal", wordWrap: "break-word" }}
        >
          {output || children}
        </Button>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        prompt={output2 || ""}
        method="replace"
        autoSend
        asChild
      >
        <Button
          variant="outline"
          className="h-auto flex-1 p-2"
          style={{ whiteSpace: "normal", wordWrap: "break-word" }}
        >
          {output2 || children}
        </Button>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const WrappedAI_ThreadSuggestion = () => {
  return (
    <ThreadPrimitive.If running={false}>
      <AI_ThreadSuggestion />
    </ThreadPrimitive.If>
  );
};

export default WrappedAI_ThreadSuggestion;



================================================
File: examples/with-inline-suggestions/components/ui/assistant-ui/LastMessageHook.tsx
================================================
import { ThreadAssistantMessage, useThread } from "@assistant-ui/react";

export const useLastAssistantMessage = () => {
  return useThread(({ messages }) => {
    for (let i = messages.length - 1; i >= 0; i--) {
      if (messages[i]?.role === "assistant") {
        return messages[i]! as ThreadAssistantMessage;
      }
    }
    return null;
  });
};



================================================
File: examples/with-inline-suggestions/components/ui/assistant-ui/ThreadSuggestion.tsx
================================================
import React, { FC, PropsWithChildren } from "react";
import { Button } from "@/components/ui/button";
import { ThreadPrimitive } from "@assistant-ui/react";

const ThreadSuggestion: FC<PropsWithChildren<{ prompt: string }>> = ({
  prompt,
  children,
}) => {
  return (
    <ThreadPrimitive.Suggestion
      prompt={prompt}
      method="replace"
      autoSend
      asChild
    >
      <Button variant="outline" className="h-12 flex-1">
        {children}
      </Button>
    </ThreadPrimitive.Suggestion>
  );
};

export default ThreadSuggestion;



================================================
File: examples/with-inline-suggestions/components/ui/assistant-ui/actions.ts
================================================
"use server";

import { streamText } from "ai";
import { openai } from "@ai-sdk/openai";
import { createStreamableValue } from "ai/rsc";

export async function generate(input: string) {
  const stream = createStreamableValue("");

  (async () => {
    const { textStream } = streamText({
      model: openai("gpt-3.5-turbo"),
      prompt: input,
    });

    for await (const delta of textStream) {
      stream.update(delta);
    }

    stream.done();
  })();

  return { output: stream.value };
}



================================================
File: examples/with-inline-suggestions/components/ui/assistant-ui/thread.tsx
================================================
"use client";

import {
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import React, { type FC } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  TooltipProvider,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { SendHorizontalIcon } from "lucide-react";
import AI_ThreadSuggestion from "./AI_ThreadSuggestion";
import ThreadSuggestion from "./ThreadSuggestion";

export const Thread: FC = () => {
  {
    /* This is UI for ongoing chat */
  }
  return (
    <TooltipProvider>
      <ThreadPrimitive.Root className="bg-background h-full">
        <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth px-4 pt-8">
          <ThreadWelcome />
          <ThreadPrimitive.Messages
            components={{
              UserMessage,
              AssistantMessage,
            }}
          />
          <div className="sticky bottom-0 mt-4 flex w-full max-w-2xl flex-grow flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
            <ThreadPrimitive.If empty={false}>
              <div className="mb-4 w-full px-4">
                <div className="flex flex-wrap justify-center gap-4">
                  <ThreadPrimitive.If running={false}>
                    {" "}
                    {/*Important to wrap Thread suggestion into if statement since the original message is streamed and we don't want to generate buttons ahead of time*/}
                    <AI_ThreadSuggestion></AI_ThreadSuggestion>
                  </ThreadPrimitive.If>
                </div>
              </div>
            </ThreadPrimitive.If>
            <Composer />
          </div>
        </ThreadPrimitive.Viewport>
      </ThreadPrimitive.Root>
    </TooltipProvider>
  );
};

const ThreadWelcome: FC = () => {
  {
    /* This is WELCOME UI */
  }
  return (
    <div className="flex w-full max-w-2xl grow flex-col px-4 py-6">
      <ThreadPrimitive.Empty>
        <div className="flex flex-grow basis-full flex-col items-center justify-center">
          <h1 className="leading-tighter mb-4 text-center text-5xl font-extrabold tracking-tighter md:text-6xl">
            <span className="bg-gradient-to-r from-green-500 to-teal-400 bg-clip-text text-transparent">
              AI_button. Try me
            </span>
          </h1>
        </div>
        <div className="mb-4 w-full px-4">
          <div className="flex flex-wrap justify-center gap-4">
            <ThreadSuggestion prompt="Tell me something goofy">
              <p className="font-semibold">Press here</p>
            </ThreadSuggestion>
          </div>
        </div>
      </ThreadPrimitive.Empty>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="relative flex w-full items-end rounded-lg border transition-shadow focus-within:shadow-sm">
      <ComposerPrimitive.Input
        autoFocus
        placeholder="Write a message..."
        rows={1}
        className="placeholder:text-muted-foreground size-full max-h-40 resize-none bg-transparent p-4 pr-12 text-sm outline-none"
      />
      <Tooltip>
        <ComposerPrimitive.Send asChild>
          <TooltipTrigger asChild>
            <Button
              size="icon"
              className={cn(
                "absolute bottom-0 right-0 m-2.5 size-8 p-2 transition-opacity",
              )}
            >
              <SendHorizontalIcon />
              <span className="sr-only">Send</span>
            </Button>
          </TooltipTrigger>
        </ComposerPrimitive.Send>
        <TooltipContent side="bottom">Send</TooltipContent>
      </Tooltip>
    </ComposerPrimitive.Root>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="my-4 grid w-full max-w-2xl auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2">
      <div className="bg-muted text-foreground col-start-2 row-start-1 max-w-xl break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Content />
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative my-4 grid w-full max-w-2xl grid-cols-[auto_1fr] grid-rows-[auto_1fr]">
      <Avatar className="col-start-1 row-span-full row-start-1 mr-4">
        <AvatarFallback>A</AvatarFallback>
      </Avatar>

      <div className="text-foreground col-start-2 row-start-1 my-1.5 max-w-xl break-words leading-7">
        <MessagePrimitive.Content />
      </div>
    </MessagePrimitive.Root>
  );
};



================================================
File: examples/with-inline-suggestions/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-langgraph/README.md
================================================
# LangGraph Example

[Hosted Demo](https://assistant-ui-langgraph.vercel.app/)

This example demonstrates how to use LangChain LangGraph with assistant-ui.

It is meant to be used with the backend found at LangGraph's Stockbroker example: https://github.com/bracesproul/langgraphjs-examples/tree/main/stockbroker

You need to set the following environment variables:

```env
NEXT_PUBLIC_API_URL=https://stockbrokeragent-bracesprouls-projects.vercel.app/api
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker
```

To run the example, run the following commands:

```sh
npm install
npm run dev
```


================================================
File: examples/with-langgraph/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
File: examples/with-langgraph/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: examples/with-langgraph/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-langgraph/package.json
================================================
{
  "name": "with-langgraph",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-langgraph": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "@langchain/langgraph-sdk": "^0.0.37",
    "@radix-ui/react-slot": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "js-cookie": "^3.0.5",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.475.0",
    "nanoid": "3.3.8",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/js-cookie": "^3.0.6",
    "@types/jsonwebtoken": "^9.0.8",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}



================================================
File: examples/with-langgraph/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-langgraph/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: {
        xs: "2rem",
      },
      screens: {
        xs: "460px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")({ shadcn: true }),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-langgraph/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-langgraph/.env.example
================================================
NEXT_PUBLIC_API_URL=...
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker


================================================
File: examples/with-langgraph/.gitignore
================================================
.vercel



================================================
File: examples/with-langgraph/app/MyRuntimeProvider.tsx
================================================
"use client";

import {
  AssistantCloud,
  AssistantRuntimeProvider,
  useCloudThreadListRuntime,
  useThreadListItemRuntime,
} from "@assistant-ui/react";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";
import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";
import { LangChainMessage } from "@assistant-ui/react-langgraph";

const useMyLangGraphRuntime = () => {
  const threadListItemRuntime = useThreadListItemRuntime();
  const runtime = useLangGraphRuntime({
    stream: async function* (messages) {
      const { externalId } = await threadListItemRuntime.initialize();
      if (!externalId) throw new Error("Thread not found");

      const generator = await sendMessage({
        threadId: externalId,
        messages,
      });

      for await (const message of generator) {
        yield message;
      }
    },
    onSwitchToThread: async (externalId) => {
      const state = await getThreadState(externalId);
      return {
        messages:
          (state.values as { messages?: LangChainMessage[] }).messages ?? [],
        interrupts: state.tasks[0]?.interrupts ?? [],
      };
    },
  });

  return runtime;
};

const cloud = new AssistantCloud({
  baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
  authToken: () =>
    fetch("/api/assistant-ui-token", { method: "POST" })
      .then((r) => r.json())
      .then((r) => r.token),
});

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useCloudThreadListRuntime({
    cloud,
    runtimeHook: useMyLangGraphRuntime,
    create: async () => {
      const { thread_id } = await createThread();
      return { externalId: thread_id };
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-langgraph/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: examples/with-langgraph/app/layout.tsx
================================================
import "./globals.css";

import { cn } from "@/lib/utils";
import { Montserrat } from "next/font/google";
import { MyRuntimeProvider } from "./MyRuntimeProvider";
import { Suspense } from "react";

const montserrat = Montserrat({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={cn(montserrat.className, "h-dvh")}>
          <Suspense>{children}</Suspense>
        </body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-langgraph/app/page.tsx
================================================
"use client";

import { Thread, ThreadList, makeMarkdownText } from "@assistant-ui/react-ui";
import { PriceSnapshotTool } from "@/components/tools/price-snapshot/PriceSnapshotTool";
import { PurchaseStockTool } from "@/components/tools/purchase-stock/PurchaseStockTool";
import { ToolFallback } from "@/components/tools/ToolFallback";

const MarkdownText = makeMarkdownText({});

export default function Home() {
  return (
    <div className="flex h-full">
      <div className="max-w-md">
        <ThreadList />
      </div>
      <div className="flex-grow">
        <Thread
          welcome={{
            suggestions: [
              {
                prompt: "How much revenue did Apple make last year?",
              },
              {
                prompt: "Is McDonald's profitable?",
              },
              {
                prompt: "What's the current stock price of Tesla?",
              },
            ],
          }}
          assistantMessage={{
            components: { Text: MarkdownText, ToolFallback },
          }}
          tools={[PriceSnapshotTool, PurchaseStockTool]}
        />
      </div>
    </div>
  );
}



================================================
File: examples/with-langgraph/app/api/[..._path]/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";

export const runtime = "edge";

function getCorsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "*",
  };
}

async function handleRequest(req: NextRequest, method: string) {
  try {
    const path = req.nextUrl.pathname.replace(/^\/?api\//, "");
    const url = new URL(req.url);
    const searchParams = new URLSearchParams(url.search);
    searchParams.delete("_path");
    searchParams.delete("nxtP_path");
    const queryString = searchParams.toString()
      ? `?${searchParams.toString()}`
      : "";

    const options: RequestInit = {
      method,
      headers: {
        "x-api-key": process.env["LANGCHAIN_API_KEY"] || "",
      },
    };

    if (["POST", "PUT", "PATCH"].includes(method)) {
      options.body = await req.text();
    }

    const res = await fetch(
      `${process.env["LANGGRAPH_API_URL"]}/${path}${queryString}`,
      options,
    );

    return new NextResponse(res.body, {
      status: res.status,
      statusText: res.statusText,
      headers: {
        ...res.headers,
        ...getCorsHeaders(),
      },
    });
  } catch (e: unknown) {
    if (e instanceof Error) {
      return NextResponse.json(
        { error: e.message },
        { status: (e as { status?: number }).status ?? 500 },
      );
    }
    return NextResponse.json({ error: "Unknown error" }, { status: 500 });
  }
}

export const GET = (req: NextRequest) => handleRequest(req, "GET");
export const POST = (req: NextRequest) => handleRequest(req, "POST");
export const PUT = (req: NextRequest) => handleRequest(req, "PUT");
export const PATCH = (req: NextRequest) => handleRequest(req, "PATCH");
export const DELETE = (req: NextRequest) => handleRequest(req, "DELETE");

// Add a new OPTIONS handler
export const OPTIONS = () => {
  return new NextResponse(null, {
    status: 204,
    headers: {
      ...getCorsHeaders(),
    },
  });
};



================================================
File: examples/with-langgraph/app/api/assistant-ui-token/route.ts
================================================
import { customAlphabet } from "nanoid";
import { cookies } from "next/headers";
import jwt, { JwtPayload } from "jsonwebtoken";
import { AssistantCloud } from "@assistant-ui/react";

const generateId = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  32,
);
const randomUserId = () => {
  const userId = "usr_anon_" + generateId();
  return userId;
};

const getJwtForUser = (userId: string) => {
  return jwt.sign(
    {
      sub: userId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7, // 1 week
    },
    process.env["JWT_SECRET"]!,
  );
};

const getUserIdFromJwt = (token: string) => {
  const decoded = jwt.verify(token, process.env["JWT_SECRET"]!) as JwtPayload;
  return decoded.sub!;
};

export const POST = async () => {
  const cookieStore = await cookies();
  const jwtCookie = cookieStore.get("jwt");
  let userId;
  if (!jwtCookie) {
    userId = randomUserId();
  } else {
    userId = getUserIdFromJwt(jwtCookie.value);
  }

  cookieStore.set("jwt", getJwtForUser(userId), {
    path: "/",
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 60 * 60 * 24 * 7, // 1 week
  });

  const client = new AssistantCloud({
    apiKey: process.env["ASSISTANT_API_KEY"]!,
    userId,
    workspaceId: userId,
  });
  const { token } = await client.auth.tokens.create();
  return Response.json({ token });
};



================================================
File: examples/with-langgraph/components/tools/ToolFallback.tsx
================================================
import { ToolCallContentPartComponent } from "@assistant-ui/react";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";
import { useState } from "react";
import { Button } from "../ui/button";

export const ToolFallback: ToolCallContentPartComponent = ({
  toolName,
  argsText,
  result,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  return (
    <div className="mb-4 flex w-full flex-col gap-3 rounded-lg border py-3">
      <div className="flex items-center gap-2 px-4">
        <CheckIcon className="size-4" />
        <p className="">
          Used tool: <b>{toolName}</b>
        </p>
        <div className="flex-grow" />
        <Button onClick={() => setIsCollapsed(!isCollapsed)}>
          {isCollapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}
        </Button>
      </div>
      {!isCollapsed && (
        <div className="flex flex-col gap-2 border-t pt-2">
          <div className="px-4">
            <pre className="whitespace-pre-wrap">{argsText}</pre>
          </div>
          {result !== undefined && (
            <div className="border-t border-dashed px-4 pt-2">
              <p className="font-semibold">Result:</p>
              <pre className="whitespace-pre-wrap">
                {typeof result === "string"
                  ? result
                  : JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};



================================================
File: examples/with-langgraph/components/tools/price-snapshot/PriceSnapshotTool.tsx
================================================
"use client";

import { PriceSnapshot } from "./price-snapshot";
import { makeAssistantToolUI } from "@assistant-ui/react";

type PriceSnapshotToolArgs = {
  ticker: string;
};
type PriceSnapshotToolResult = {
  snapshot: {
    price: number;
    day_change: number;
    day_change_percent: number;
    time: string;
  };
};
export const PriceSnapshotTool = makeAssistantToolUI<
  PriceSnapshotToolArgs,
  string
>({
  toolName: "price_snapshot",
  render: function PriceSnapshotUI({ args, argsText, result }) {
    const resultObj = result
      ? (JSON.parse(result) as PriceSnapshotToolResult)
      : undefined;

    return (
      <div className="mb-4 flex flex-col items-center gap-2">
        <pre className="whitespace-pre-wrap">price_snapshot({argsText})</pre>
        {resultObj && (
          <PriceSnapshot ticker={args.ticker} {...resultObj.snapshot} />
        )}
      </div>
    );
  },
});



================================================
File: examples/with-langgraph/components/tools/price-snapshot/price-snapshot.tsx
================================================
"use client";

import { ArrowDownIcon, ArrowUpIcon } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  price: number;
  day_change: number;
  day_change_percent: number;
  time: string;
};

export function PriceSnapshot({
  ticker,
  price,
  day_change,
  day_change_percent,
  time,
}: PriceSnapshotToolArgs & PriceSnapshotToolResult) {
  const isPositiveChange = day_change >= 0;
  const changeColor = isPositiveChange ? "text-green-600" : "text-red-600";
  const ArrowIcon = isPositiveChange ? ArrowUpIcon : ArrowDownIcon;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">{ticker}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <div className="col-span-2">
            <p className="text-3xl font-semibold">${price?.toFixed(2)}</p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Day Change</p>
            <p
              className={`flex items-center text-lg font-medium ${changeColor}`}
            >
              <ArrowIcon className="mr-1 h-4 w-4" />$
              {Math.abs(day_change)?.toFixed(2)} (
              {Math.abs(day_change_percent)?.toFixed(2)}%)
            </p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Last Updated</p>
            <p className="text-lg font-medium">
              {new Date(time).toLocaleTimeString()}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================
File: examples/with-langgraph/components/tools/purchase-stock/PurchaseStockTool.tsx
================================================
"use client";

import { TransactionConfirmationPending } from "./transaction-confirmation-pending";
import { TransactionConfirmationFinal } from "./transaction-confirmation-final";
import { makeAssistantToolUI } from "@assistant-ui/react";

type PurchaseStockArgs = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

export const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(
  {
    toolName: "purchase_stock",
    render: function PurchaseStockUI({
      args,
      argsText,
      result,
      status,
      addResult,
    }) {
      const resultObj = result
        ? (JSON.parse(result) as { transactionId: string })
        : undefined;

      const handleConfirm = async () => {
        addResult({ confirmed: true });
      };

      return (
        <div className="mb-4 flex flex-col items-center gap-2">
          <pre className="whitespace-pre-wrap">purchase_stock({argsText})</pre>
          {!resultObj && status.type !== "running" && (
            <TransactionConfirmationPending
              {...args}
              onConfirm={handleConfirm}
            />
          )}
          {resultObj && <TransactionConfirmationFinal {...args} />}
        </div>
      );
    },
  },
);



================================================
File: examples/with-langgraph/components/tools/purchase-stock/transaction-confirmation-final.tsx
================================================
"use client";

import { CheckCircle } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

export function TransactionConfirmationFinal(props: TransactionConfirmation) {
  const { ticker, companyName, quantity, maxPurchasePrice } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader className="text-center">
        <CheckCircle className="mx-auto mb-4 h-16 w-16 text-green-500" />
        <CardTitle className="text-2xl font-bold text-green-700">
          Transaction Confirmed
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="rounded-md border border-green-200 bg-green-50 p-4">
          <h3 className="mb-2 text-lg font-semibold text-green-800">
            Purchase Summary
          </h3>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <p className="font-medium text-green-700">Ticker:</p>
            <p className="font-bold text-green-900">{ticker}</p>
            <p className="font-medium text-green-700">Company:</p>
            <p className="text-green-900">{companyName}</p>
            <p className="font-medium text-green-700">Quantity:</p>
            <p className="text-green-900">{quantity} shares</p>
            <p className="font-medium text-green-700">Price per Share:</p>
            <p className="text-green-900">${maxPurchasePrice?.toFixed(2)}</p>
          </div>
        </div>
        <div className="rounded-md border border-green-300 bg-green-100 p-4">
          <p className="text-lg font-semibold text-green-800">Total Cost:</p>
          <p className="text-2xl font-bold text-green-900">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
        <p className="text-center text-sm text-green-600">
          Your purchase of {quantity} shares of {companyName} ({ticker}) has
          been successfully processed.
        </p>
      </CardContent>
    </Card>
  );
}



================================================
File: examples/with-langgraph/components/tools/purchase-stock/transaction-confirmation-pending.tsx
================================================
"use client";

import { CheckIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
  onConfirm: () => void;
};

export function TransactionConfirmationPending(props: TransactionConfirmation) {
  const { ticker, companyName, quantity, maxPurchasePrice, onConfirm } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">
          Confirm Transaction
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-2">
          <p className="text-muted-foreground text-sm font-medium">Ticker:</p>
          <p className="text-sm font-bold">{ticker}</p>
          <p className="text-muted-foreground text-sm font-medium">Company:</p>
          <p className="text-sm">{companyName}</p>
          <p className="text-muted-foreground text-sm font-medium">Quantity:</p>
          <p className="text-sm">{quantity} shares</p>
          <p className="text-muted-foreground text-sm font-medium">
            Max Purchase Price:
          </p>
          <p className="text-sm">${maxPurchasePrice?.toFixed(2)}</p>
        </div>
        <div className="bg-muted rounded-md p-3">
          <p className="text-sm font-medium">Total Maximum Cost:</p>
          <p className="text-lg font-bold">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
      </CardContent>
      <CardFooter className="flex justify-end">
        {/* <Button variant="outline" onClick={onReject}>
          <X className="mr-2 h-4 w-4" />
          Reject
        </Button> */}
        <Button onClick={onConfirm}>
          <CheckIcon className="mr-2 h-4 w-4" />
          Confirm
        </Button>
      </CardFooter>
    </Card>
  );
}



================================================
File: examples/with-langgraph/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: examples/with-langgraph/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-card text-card-foreground rounded-xl border shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
File: examples/with-langgraph/lib/chatApi.ts
================================================
import { ThreadState, Client } from "@langchain/langgraph-sdk";
import { LangChainMessage } from "@assistant-ui/react-langgraph";

const createClient = () => {
  const apiUrl =
    process.env["NEXT_PUBLIC_LANGGRAPH_API_URL"] ||
    new URL("/api", window.location.href).href;
  return new Client({
    apiUrl,
  });
};

export const createAssistant = async (graphId: string) => {
  const client = createClient();
  return client.assistants.create({ graphId });
};

export const createThread = async () => {
  const client = createClient();
  return client.threads.create();
};

export const getThreadState = async (
  threadId: string,
): Promise<ThreadState<Record<string, unknown>>> => {
  const client = createClient();
  return client.threads.getState(threadId);
};

export const updateState = async (
  threadId: string,
  fields: {
    newState: Record<string, unknown>;
    asNode?: string;
  },
) => {
  const client = createClient();
  return client.threads.updateState(threadId, {
    values: fields.newState,
    asNode: fields.asNode!,
  });
};

export const sendMessage = async (params: {
  threadId: string;
  messages: LangChainMessage[];
}) => {
  const client = createClient();

  const input: Record<string, unknown> | null = {
    messages: params.messages,
  };
  const config = {
    configurable: {
      model_name: "openai",
    },
  };

  return client.runs.stream(
    params.threadId,
    process.env["NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID"]!,
    {
      input,
      config,
      streamMode: "messages",
    },
  );
};



================================================
File: examples/with-langgraph/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-openai-assistants/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================
File: examples/with-openai-assistants/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-openai-assistants/package.json
================================================
{
  "name": "with-openai-assistants",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@radix-ui/react-avatar": "^1.1.3",
    "ai": "^4.1.25",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.475.0",
    "next": "15.1.6",
    "openai": "^4.83.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: examples/with-openai-assistants/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-openai-assistants/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;



================================================
File: examples/with-openai-assistants/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-openai-assistants/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/with-openai-assistants/app/MyRuntimeProvider.tsx
================================================
"use client";

import { useAssistant } from "ai/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseAssistantRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const assistant = useAssistant({
    api: "/api/assistant",
  });

  const runtime = useVercelUseAssistantRuntime(assistant);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-openai-assistants/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
File: examples/with-openai-assistants/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";
import { cn } from "@/lib/utils";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en" className="h-full">
        <body className={cn(inter.className, "h-full")}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-openai-assistants/app/page.tsx
================================================
"use client";

import { Thread } from "@/components/ui/assistant-ui/thread";
import { cn } from "@/lib/utils";
import { makeAssistantToolUI } from "@assistant-ui/react";

type WeatherArgs = {
  location: string;
  unit: "c" | "f";
};

type WeatherResult = {
  content: string;
};

const WeatherTool = makeAssistantToolUI<WeatherArgs, WeatherResult>({
  toolName: "get_weather",
  render: ({ args, result, status }) => {
    return (
      <p
        className={cn(
          "my-4 text-center font-mono text-sm font-bold text-blue-500 first:mt-0",
          status.type === "running" && "animate-pulse",
        )}
      >
        get_weather({JSON.stringify(args)})
        {!!result && <> =&gt; {JSON.stringify(result)}</>}
      </p>
    );
  },
});

export default function Home() {
  return (
    <main className="h-full">
      <Thread />
      <WeatherTool />
    </main>
  );
}



================================================
File: examples/with-openai-assistants/app/api/assistant/route.ts
================================================
import { AssistantResponse } from "ai";
import OpenAI from "openai";
import type { Run } from "openai/resources/beta/threads/runs/runs";

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  const openai = new OpenAI();

  // Parse the request body
  const input: {
    threadId: string | null;
    message: string;
  } = await req.json();

  // Create a thread if needed
  const threadId = input.threadId ?? (await openai.beta.threads.create({})).id;

  // Add a message to the thread
  const createdMessage = await openai.beta.threads.messages.create(threadId, {
    role: "user",
    content: input.message,
  });

  return AssistantResponse(
    { threadId, messageId: createdMessage.id },
    async ({ forwardStream, sendDataMessage }) => {
      // Run the assistant on the thread
      const runStream = openai.beta.threads.runs.stream(threadId, {
        assistant_id:
          process.env["ASSISTANT_ID"] ??
          (() => {
            throw new Error("ASSISTANT_ID is not set");
          })(),
      });

      // forward run status would stream message deltas
      let runResult: Run = await forwardStream(runStream);

      // status can be: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired
      while (
        runResult?.status === "requires_action" &&
        runResult.required_action?.type === "submit_tool_outputs"
      ) {
        const tool_outputs = await Promise.all(
          runResult.required_action.submit_tool_outputs.tool_calls.map(
            async (toolCall) => {
              const args = JSON.parse(toolCall.function.arguments);

              switch (toolCall.function.name) {
                // configure your tool calls here

                case "get_weather":
                  const { unit } = args;

                  sendDataMessage({
                    role: "data",
                    data: {
                      type: "tool-call",
                      toolCallId: toolCall.id,
                      toolName: toolCall.function.name,
                      args,
                    },
                  });

                  await new Promise((resolve) => setTimeout(resolve, 5000));

                  const result = { t: unit === "c" ? 21 : 70 };

                  sendDataMessage({
                    role: "data",
                    data: {
                      type: "tool-result",
                      toolCallId: toolCall.id,
                      result,
                    },
                  });

                  return {
                    tool_call_id: toolCall.id,
                    output: JSON.stringify(result),
                  };

                default:
                  throw new Error(
                    `Unknown tool call function: ${toolCall.function.name}`,
                  );
              }
            },
          ),
        );

        runResult = await forwardStream(
          openai.beta.threads.runs.submitToolOutputsStream(
            threadId,
            runResult.id,
            { tool_outputs },
          ),
        );
      }
    },
  );
}



================================================
File: examples/with-openai-assistants/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "bg-muted flex h-full w-full items-center justify-center rounded-full",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: examples/with-openai-assistants/components/ui/assistant-ui/thread.tsx
================================================
"use client";

import {
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";

import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { SendHorizontalIcon } from "lucide-react";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root className="flex h-full flex-col items-center pb-3">
      <ThreadPrimitive.Viewport className="flex w-full flex-grow flex-col items-center overflow-y-scroll scroll-smooth px-4 pt-12">
        <ThreadPrimitive.Empty>
          <ThreadEmpty />
        </ThreadPrimitive.Empty>

        <ThreadPrimitive.Messages
          components={{
            UserMessage,
            AssistantMessage,
          }}
        />
      </ThreadPrimitive.Viewport>

      <Composer />
    </ThreadPrimitive.Root>
  );
};

const ThreadEmpty: FC = () => {
  return (
    <div className="flex flex-grow flex-col items-center justify-center">
      <Avatar>
        <AvatarFallback>C</AvatarFallback>
      </Avatar>
      <p className="mt-4 text-xl">How can I help you today?</p>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="flex w-[calc(100%-32px)] max-w-[42rem] items-end rounded-lg border p-0.5 transition-shadow focus-within:shadow-sm">
      <ComposerPrimitive.Input
        placeholder="Write a message..."
        className="placeholder:text-foreground/50 h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm outline-none"
      />
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send className="bg-foreground m-2 flex h-8 w-8 items-center justify-center rounded-md text-2xl font-bold shadow transition-opacity disabled:opacity-10">
          <SendHorizontalIcon className="text-background size-4" />
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel className="border-foreground m-3.5 flex size-5 items-center justify-center rounded-full border-2">
          <div className="bg-foreground size-2 rounded-[1px]" />
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </ComposerPrimitive.Root>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-6 flex w-full max-w-2xl flex-col items-end gap-2 pl-24">
      <div className="relative mr-1 flex items-start gap-3">
        <div className="bg-foreground/5 text-foreground max-w-xl break-words rounded-3xl px-5 py-2.5">
          <MessagePrimitive.Content />
        </div>
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-6 flex w-full max-w-2xl gap-3">
      <Avatar>
        <AvatarFallback>A</AvatarFallback>
      </Avatar>

      <div className="mt-2 flex-grow">
        <div className="text-foreground max-w-x break-words">
          <MessagePrimitive.Content />
        </div>
      </div>
    </MessagePrimitive.Root>
  );
};



================================================
File: examples/with-openai-assistants/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-react-hook-form/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
File: examples/with-react-hook-form/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: examples/with-react-hook-form/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-react-hook-form/package.json
================================================
{
  "name": "with-react-hook-form",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-hook-form": "workspace:*",
    "@assistant-ui/react-ui": "workspace:^",
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@react-hook/media-query": "^1.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "json-schema-to-zod": "^2.6.0",
    "lucide-react": "^0.475.0",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-hook-form": "^7.54.2",
    "react-resizable-panels": "^2.1.7",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1",
    "zod-to-json-schema": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}



================================================
File: examples/with-react-hook-form/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-react-hook-form/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: {
        xs: "2rem",
      },
      screens: {
        xs: "460px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")({ shadcn: true }),
  ],
} satisfies Config;

export default config;



================================================
File: examples/with-react-hook-form/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-react-hook-form/app/MyRuntimeProvider.tsx
================================================
"use client";

import { AssistantRuntimeProvider, useEdgeRuntime } from "@assistant-ui/react";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useEdgeRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}



================================================
File: examples/with-react-hook-form/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: examples/with-react-hook-form/app/layout.tsx
================================================
import "./globals.css";

import { cn } from "@/lib/utils";
import { Montserrat } from "next/font/google";
import { MyRuntimeProvider } from "./MyRuntimeProvider";

const montserrat = Montserrat({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={cn(montserrat.className, "h-dvh")}>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}



================================================
File: examples/with-react-hook-form/app/page.tsx
================================================
"use client";

import { SignupForm } from "@/components/SignupForm";
import { AssistantSidebar } from "@/components/ui/assistant-ui/assistant-sidebar";
import { Form } from "@/components/ui/form";
import { useAssistantForm } from "@assistant-ui/react-hook-form";
import { useAssistantInstructions } from "@assistant-ui/react";
import Link from "next/link";

const SetFormFieldTool = () => {
  return (
    <p className="text-center font-mono text-sm font-bold text-blue-500">
      set_form_field(...)
    </p>
  );
};

const SubmitFormTool = () => {
  return (
    <p className="text-center font-mono text-sm font-bold text-blue-500">
      submit_form(...)
    </p>
  );
};

export default function Home() {
  useAssistantInstructions("Help users sign up for Simon's hackathon.");
  const form = useAssistantForm({
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      cityAndCountry: "",
      projectIdea: "",
      proficientTechnologies: "",
    },
    assistant: {
      tools: {
        set_form_field: {
          render: SetFormFieldTool,
        },
        submit_form: {
          render: SubmitFormTool,
        },
      },
    },
  });

  return (
    <AssistantSidebar>
      <div className="h-full overflow-y-scroll">
        <main className="container py-8">
          <h1 className="mb-2 text-2xl font-semibold">
            Simon&apos;s Hackathon
          </h1>
          <p>
            I&apos;m hosting a Hackathon on AI UX. Be the first to get an
            invite!
          </p>

          <div className="my-4 font-bold">
            Built with{" "}
            <Link
              href="https://github.com/assistant-ui/assistant-ui"
              className="text-blue-600 underline"
            >
              assistant-ui
            </Link>
            .
          </div>

          <Form {...(form as any)}>
            <SignupForm />
          </Form>
        </main>
      </div>
    </AssistantSidebar>
  );
}



================================================
File: examples/with-react-hook-form/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { createEdgeRuntimeAPI } from "@assistant-ui/react/edge";

export const runtime = "edge";

export const { POST } = createEdgeRuntimeAPI({
  model: openai("gpt-4o"),
});



================================================
File: examples/with-react-hook-form/components/SignupForm.tsx
================================================
"use client";
import { Button } from "@/components/ui/button";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { type FC, useState } from "react";
import { useFormContext } from "react-hook-form";
import { submitSignup } from "../lib/submitSignup";

export const SignupForm: FC = () => {
  const form = useFormContext();

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const onSubmit = async (values: object) => {
    try {
      setIsSubmitting(true);
      await submitSignup(values);
      setIsSubmitted(true);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSubmitting)
    return <p className="my-4 font-bold text-green-600">Submitting...</p>;

  if (isSubmitted)
    return (
      <p className="my-4 font-bold text-green-600">
        Thank you for signing up, you will hear from me soon!
      </p>
    );

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
      <input type="hidden" {...form.register("hidden")} />

      <FormField
        control={form.control}
        name="firstName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>First Name</FormLabel>
            <FormDescription>Your first name.</FormDescription>
            <FormControl>
              <Input placeholder="First Name" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="lastName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Last Name</FormLabel>
            <FormDescription>Your last name.</FormDescription>
            <FormControl>
              <Input placeholder="Last Name" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="email"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Email</FormLabel>
            <FormDescription>Your email.</FormDescription>
            <FormControl>
              <Input placeholder="Email" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="cityAndCountry"
        render={({ field }) => (
          <FormItem>
            <FormLabel>City</FormLabel>
            <FormDescription>The city and country you live in.</FormDescription>
            <FormControl>
              <Input placeholder="City" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="projectIdea"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Idea</FormLabel>
            <FormDescription>
              Do you have an idea for a project?
            </FormDescription>
            <FormControl>
              <Input placeholder="Idea" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="proficientTechnologies"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Technologies</FormLabel>
            <FormDescription>
              What technologies are you most comfortable with?
            </FormDescription>
            <FormControl>
              <Input placeholder="Next.js, Tailwind CSS" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <Button type="submit">Submit</Button>
    </form>
  );
};



================================================
File: examples/with-react-hook-form/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: examples/with-react-hook-form/components/ui/form.tsx
================================================
import type * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
import {
  ComponentPropsWithoutRef,
  createContext,
  ComponentRef,
  forwardRef,
  HTMLAttributes,
  useContext,
  useId,
} from "react";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = useContext(FormFieldContext);
  const itemContext = useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const id = useId();

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn("space-y-2", className)} {...props} />
      </FormItemContext.Provider>
    );
  },
);
FormItem.displayName = "FormItem";

const FormLabel = forwardRef<
  ComponentRef<typeof LabelPrimitive.Root>,
  ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = forwardRef<
  ComponentRef<typeof Slot>,
  ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = forwardRef<
  HTMLParagraphElement,
  HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-muted-foreground text-[0.8rem]", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = forwardRef<
  HTMLParagraphElement,
  HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-destructive text-[0.8rem] font-medium", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};



================================================
File: examples/with-react-hook-form/components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:ring-ring flex h-9 w-full rounded-md border bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };



================================================
File: examples/with-react-hook-form/components/ui/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ComponentRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================
File: examples/with-react-hook-form/components/ui/resizable.tsx
================================================
"use client";

import { DragHandleDots2Icon } from "@radix-ui/react-icons";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-sm border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
File: examples/with-react-hook-form/components/ui/tabs.tsx
================================================
"use client";

import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ComponentRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "bg-muted text-muted-foreground inline-flex h-9 items-center justify-center rounded-lg p-1",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ComponentRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "ring-offset-background focus-visible:ring-ring data-[state=active]:bg-background data-[state=active]:text-foreground inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ComponentRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "ring-offset-background focus-visible:ring-ring mt-2 flex-grow focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };



================================================
File: examples/with-react-hook-form/components/ui/assistant-ui/assistant-sidebar.tsx
================================================
"use client";

import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import { useMediaQuery } from "@react-hook/media-query";
import type { FC, PropsWithChildren } from "react";
import { Thread } from "@assistant-ui/react-ui";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../tabs";

export const AssistantSidebar: FC<PropsWithChildren> = ({ children }) => {
  const isSmall = useMediaQuery("(max-width: 768px)");

  if (isSmall) {
    return (
      <Tabs
        defaultValue="app"
        className="mx-auto flex h-full max-w-[480px] flex-col px-4 pt-4"
      >
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="app">Form</TabsTrigger>
          <TabsTrigger value="thread">Chat</TabsTrigger>
        </TabsList>
        <TabsContent value="app">{children}</TabsContent>
        <TabsContent value="thread">
          <Thread />
        </TabsContent>
      </Tabs>
    );
  }

  return (
    <ResizablePanelGroup direction="horizontal">
      <ResizablePanel>{children}</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>
        <Thread />
      </ResizablePanel>
    </ResizablePanelGroup>
  );
};



================================================
File: examples/with-react-hook-form/lib/submitSignup.tsx
================================================
"use server";

export const submitSignup = async (data: object) => {
  const res = await fetch(process.env["ASSISTANT_UI_SUBMIT_SIGNUP_ENDPOINT"]!, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  return res.json();
};



================================================
File: examples/with-react-hook-form/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: examples/with-vercel-ai-rsc/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
File: examples/with-vercel-ai-rsc/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: examples/with-vercel-ai-rsc/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: examples/with-vercel-ai-rsc/package.json
================================================
{
  "name": "with-vercel-ai-rsc",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.9",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "ai": "4.1.25",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.475.0",
    "nanoid": "3.3.8",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}



================================================
File: examples/with-vercel-ai-rsc/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/with-vercel-ai-rsc/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;



================================================
File: examples/with-vercel-ai-rsc/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/with-vercel-ai-rsc/app/actions.tsx
================================================
"use server";

import { openai } from "@ai-sdk/openai";
import { createAI, getMutableAIState, streamUI } from "ai/rsc";
import type { ReactNode } from "react";
import { z } from "zod";

export interface ServerMessage {
  role: "user" | "assistant";
  content: string;
}

export interface ClientMessage {
  role: "user" | "assistant";
  display: ReactNode;
}

export async function continueConversation(
  input: string,
): Promise<ClientMessage> {
  "use server";

  const history = getMutableAIState();

  const result = await streamUI({
    model: openai("gpt-3.5-turbo"),
    messages: [...history.get(), { role: "user", content: input }],
    text: ({ content, done }) => {
      if (done) {
        history.done((messages: ServerMessage[]) => [
          ...messages,
          { role: "assistant", content },
        ]);
      }

      return <div>{content}</div>;
    },
    tools: {
      showStockInformation: {
        description:
          "Get stock information for symbol for the last numOfMonths months",
        parameters: z.object({
          symbol: z
            .string()
            .describe("The stock symbol to get information for"),
          numOfMonths: z
            .number()
            .describe("The number of months to get historical information for"),
        }),
        generate: async ({ symbol }) => {
          history.done((messages: ServerMessage[]) => [
            ...messages,
            {
              role: "assistant",
              content: `Showing stock information for ${symbol}`,
            },
          ]);

          return <p className="font-bold">Test</p>;
        },
      },
    },
  });

  return {
    role: "assistant",
    display: result.value,
  };
}

export const AI = createAI<ServerMessage[], ClientMessage[]>({
  actions: {
    continueConversation,
  },
  initialAIState: [],
  initialUIState: [],
});



================================================
File: examples/with-vercel-ai-rsc/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: examples/with-vercel-ai-rsc/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { AI } from "./actions";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AI>{children}</AI>
      </body>
    </html>
  );
}



================================================
File: examples/with-vercel-ai-rsc/app/page.tsx
================================================
"use client";

import { useActions, useUIState } from "ai/rsc";
import { nanoid } from "nanoid";
import type { AI } from "./actions";

import { Thread } from "@/components/ui/assistant-ui/thread";
import {
  type AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";
import { useState } from "react";

export default function Home() {
  return (
    <main className="h-dvh">
      <MyRuntimeProvider>
        <Thread />
      </MyRuntimeProvider>
    </main>
  );
}

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const { continueConversation } = useActions();
  const [isRunning, setIsRunning] = useState(false);
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    try {
      setIsRunning(true);
      const message = await continueConversation(input);
      setMessages((currentConversation) => [...currentConversation, message]);
    } finally {
      setIsRunning(false);
    }
  };

  const runtime = useVercelRSCRuntime({ messages, isRunning, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};



================================================
File: examples/with-vercel-ai-rsc/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "bg-muted flex h-full w-full items-center justify-center rounded-full",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
File: examples/with-vercel-ai-rsc/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: examples/with-vercel-ai-rsc/components/ui/tooltip.tsx
================================================
"use client";

import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import * as React from "react";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ComponentRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
File: examples/with-vercel-ai-rsc/components/ui/assistant-ui/thread.tsx
================================================
"use client";

import {
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";

import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button, type ButtonProps } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { SendHorizontalIcon } from "lucide-react";
import { RSCDisplay } from "@assistant-ui/react-ai-sdk";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root className="flex h-full flex-col items-center px-4 pb-3">
      <ThreadPrimitive.Viewport className="flex w-full flex-grow flex-col items-center overflow-y-scroll pt-16">
        <ThreadPrimitive.Empty>
          <ThreadEmpty />
        </ThreadPrimitive.Empty>

        <ThreadPrimitive.Messages
          components={{
            UserMessage,
            AssistantMessage,
          }}
        />
      </ThreadPrimitive.Viewport>

      <Composer />
    </ThreadPrimitive.Root>
  );
};

const ThreadEmpty: FC = () => {
  return (
    <div className="flex flex-grow flex-col items-center justify-center">
      <Avatar>
        <AvatarFallback>C</AvatarFallback>
      </Avatar>
      <p className="mt-4 text-xl">How can I help you today?</p>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="flex w-full max-w-2xl items-end rounded-lg border p-0.5 shadow-sm">
      <ComposerPrimitive.Input
        placeholder="Write a message..."
        className="placeholder:text-foreground/50 h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm outline-none"
      />
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send className="bg-foreground m-2 flex h-8 w-8 items-center justify-center rounded-md text-2xl font-bold shadow disabled:opacity-10">
          <SendHorizontalIcon className="text-background size-4" />
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel className="border-foreground m-3.5 flex size-5 items-center justify-center rounded-full border-2">
          <div className="bg-foreground size-2 rounded-[1px]" />
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </ComposerPrimitive.Root>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-12 flex w-full max-w-2xl gap-3">
      <Avatar>
        <AvatarFallback>Y</AvatarFallback>
      </Avatar>

      <div className="flex-grow">
        <p className="font-semibold">You</p>

        <MessagePrimitive.Content />
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mb-12 flex w-full max-w-2xl gap-3">
      <Avatar>
        <AvatarFallback>A</AvatarFallback>
      </Avatar>

      <div className="flex-grow">
        <p className="font-semibold">Assistant</p>

        <MessagePrimitive.Content components={{ Text: RSCDisplay }} />
      </div>
    </MessagePrimitive.Root>
  );
};

type IconButton = ButtonProps & { tooltip: string };

const IconButton: FC<IconButton> = ({
  children,
  tooltip,
  className,
  ...rest
}) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className={cn("size-auto p-1", className)}
          {...rest}
        >
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">{tooltip}</TooltipContent>
    </Tooltip>
  );
};



================================================
File: examples/with-vercel-ai-rsc/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}




================================================
File: packages/assistant-stream/CHANGELOG.md
================================================
# assistant-stream

## 0.0.21

### Patch Changes

- fix: pin nanoid version for CJS compat

## 0.0.20

### Patch Changes

- 7f7ab5e: refactor: assitant-stream API

## 0.0.19

### Patch Changes

- 72e66db: chore: update dependencies

## 0.0.18

### Patch Changes

- b44a7ad: feat: error content part
- 22272e6: chore: update dependencies

## 0.0.17

### Patch Changes

- 70ccbe6: feat: AssistantMessageStream

## 0.0.16

### Patch Changes

- 345f3d5: chore: update dependencies

## 0.0.15

### Patch Changes

- 4c2bf58: chore: update dependencies

## 0.0.14

### Patch Changes

- 982a6a2: chore: update dependencies

## 0.0.13

### Patch Changes

- ec3b8cc: chore: update dependencies

## 0.0.12

### Patch Changes

- ignore unsupported data stream parts

## 0.0.11

### Patch Changes

- 4c54273: chore: update dependencies

## 0.0.10

### Patch Changes

- interop with module resolution node

## 0.0.8

### Patch Changes

- 2112ce8: chore: update dependencies

## 0.0.7

### Patch Changes

- 933b8c0: chore: update deps

## 0.0.6

### Patch Changes

- c59d8b5: chore: update dependencies

## 0.0.5

### Patch Changes

- 1ada091: chore: update deps

## 0.0.4

### Patch Changes

- ff5b86c: chore: update deps

## 0.0.3

### Patch Changes

- d2375cd: build: disable bundling in UI package releases

## 0.0.1

### Patch Changes

- fb32e61: chore: update deps

## 0.0.0

### Patch Changes

- fb46305: chore: update dependencies



================================================
File: packages/assistant-stream/package.json
================================================
{
  "name": "assistant-stream",
  "version": "0.0.21",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    },
    "./ai-sdk": {
      "import": {
        "types": "./dist/ai-sdk.d.mts",
        "default": "./dist/ai-sdk.mjs"
      },
      "require": {
        "types": "./dist/ai-sdk.d.ts",
        "default": "./dist/ai-sdk.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "ai-sdk",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "ai": "^4.1.25",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6",
    "tsx": "^4.19.2"
  },
  "publishConfig": {
    "access": "public"
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  },
  "dependencies": {
    "nanoid": "3.3.8",
    "secure-json-parse": "^3.0.2"
  }
}



================================================
File: packages/assistant-stream/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-stream/*": ["../*/src"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/assistant-stream/ai-sdk/README.md
================================================
This directory exists to support subpath imports for TypeScript projects using --moduleResolution node.


================================================
File: packages/assistant-stream/ai-sdk/package.json
================================================
{
  "main": "../dist/ai-sdk.js",
  "module": "../dist/ai-sdk.mjs",
  "types": "../dist/ai-sdk.d.ts"
}


================================================
File: packages/assistant-stream/scripts/build.mts
================================================
import { build } from "tsup";

// JS
await build({
  entry: ["src/index.ts", "src/ai-sdk.ts"],
  format: ["cjs", "esm"],
  dts: true,
  sourcemap: true,
  clean: true,
});



================================================
File: packages/assistant-stream/src/ai-sdk.ts
================================================
export * from "./ai-sdk/index";



================================================
File: packages/assistant-stream/src/index.ts
================================================
export * from "./core";



================================================
File: packages/assistant-stream/src/ai-sdk/index.ts
================================================
import type { TextStreamPart, CoreTool, ObjectStreamPart } from "ai";
import { AssistantStream, AssistantStreamChunk } from "../core/AssistantStream";
import { generateId } from "../core/utils/generateId";

export const fromStreamText = (
  stream: ReadableStream<TextStreamPart<Record<string, CoreTool>>>,
): AssistantStream => {
  const transformer = new TransformStream<
    TextStreamPart<Record<string, CoreTool>>,
    AssistantStreamChunk
  >({
    transform(chunk, controller) {
      const { type } = chunk;
      switch (type) {
        case "text-delta": {
          const { textDelta } = chunk;
          controller.enqueue({
            type: "text-delta",
            textDelta,
          });
          break;
        }
        case "tool-call-streaming-start": {
          const { toolCallId, toolName } = chunk;
          controller.enqueue({
            type: "tool-call-begin",
            toolCallId,
            toolName,
          });
          break;
        }
        case "tool-call-delta": {
          const { toolCallId, argsTextDelta } = chunk;
          controller.enqueue({
            type: "tool-call-delta",
            toolCallId,
            argsTextDelta,
          });
          break;
        }
        case "tool-result" as string: {
          const { toolCallId, result } = chunk as unknown as {
            toolCallId: string;
            result: unknown;
          };
          controller.enqueue({
            type: "tool-result",
            toolCallId,
            result,
          });
          break;
        }
        case "tool-call": {
          const { toolCallId, toolName, args } = chunk;
          controller.enqueue({
            type: "tool-call-begin",
            toolCallId,
            toolName,
          });
          controller.enqueue({
            type: "tool-call-delta",
            toolCallId,
            argsTextDelta: JSON.stringify(args),
          });
          break;
        }

        case "reasoning":
        case "step-start":
        case "step-finish":
        case "error":
        case "finish": {
          break;
        }

        default: {
          const unhandledType: never = type;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },
  });

  return stream.pipeThrough(transformer);
};

export const fromStreamObject = (
  stream: ReadableStream<ObjectStreamPart<unknown>>,
  toolName: string,
): AssistantStream => {
  const toolCallId = generateId();
  const transformer = new TransformStream<
    ObjectStreamPart<unknown>,
    AssistantStreamChunk
  >({
    start(controller) {
      controller.enqueue({
        type: "tool-call-begin",
        toolName,
        toolCallId,
      });
    },
    transform(chunk, controller) {
      const { type } = chunk;
      switch (type) {
        case "text-delta": {
          const { textDelta } = chunk;
          controller.enqueue({
            type: "tool-call-delta",
            toolCallId,
            argsTextDelta: textDelta,
          });
          break;
        }
        case "finish": {
          controller.enqueue({
            type: "tool-result",
            toolCallId,
            result: "",
          });
          break;
        }

        case "object":
        case "error": {
          break;
        }

        default: {
          const unhandledType: never = type;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },
  });

  return stream.pipeThrough(transformer);
};



================================================
File: packages/assistant-stream/src/core/AssistantStream.ts
================================================
export type AssistantStreamChunk =
  | {
      type: "text-delta";
      textDelta: string;
    }
  | {
      type: "tool-call-begin";
      toolCallId: string;
      toolName: string;
    }
  | {
      type: "tool-call-delta";
      toolCallId: string;
      argsTextDelta: string;
    }
  | {
      type: "tool-result";
      toolCallId: string;
      result: any;
    }
  | {
      type: "error";
      error: string;
    };

export type AssistantStream = ReadableStream<AssistantStreamChunk>;

export const AssistantStream = {
  toResponse(
    stream: AssistantStream,
    transformer: ReadableWritablePair<Uint8Array, AssistantStreamChunk>,
  ) {
    return new Response(AssistantStream.toByteStream(stream, transformer));
  },

  fromResponse(
    response: Response,
    transformer: ReadableWritablePair<AssistantStreamChunk, Uint8Array>,
  ) {
    return AssistantStream.fromByteStream(response.body!, transformer);
  },

  toByteStream(
    stream: AssistantStream,
    transformer: ReadableWritablePair<Uint8Array, AssistantStreamChunk>,
  ) {
    return stream.pipeThrough(transformer);
  },

  fromByteStream(
    readable: ReadableStream<Uint8Array>,
    transformer: ReadableWritablePair<AssistantStreamChunk, Uint8Array>,
  ) {
    return readable.pipeThrough(transformer);
  },
};



================================================
File: packages/assistant-stream/src/core/index.ts
================================================
// tools  type error

export {
  createAssistantStream,
  createAssistantStreamResponse,
} from "./modules/runs";
export { AssistantStream, type AssistantStreamChunk } from "./AssistantStream";
export {
  DataStreamDecoder,
  DataStreamEncoder,
} from "./serialization/DataStream";
export { PlainTextDecoder, PlainTextEncoder } from "./serialization/PlainText";
export { AssistantMessageStream } from "./accumulators/AssistantMessageStream";



================================================
File: packages/assistant-stream/src/core/test.ts
================================================
// span = assistant-stream
// you can nest assistant-streams (inside spans that accept nesting)
// 1 content part = 1 assistant-stream / span

// root container span
// spans have controllers to emit events
// assistant-stream === span  (span: start, events, finish, errors?)

import { createAssistantStreamResponse } from "./modules/runs";
import { AssistantStream } from "./AssistantStream";
import { DataStreamDecoder } from "./serialization/DataStream";

const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

export const POST = () => {
  return createAssistantStreamResponse(async (controller) => {
    controller.appendText("hello ");
    await sleep(1000);
    controller.appendText("world!");
  });
};

const stream = AssistantStream.fromResponse(POST(), new DataStreamDecoder());
const reader = stream.getReader();
console.log(await reader.read());
console.log(await reader.read());
console.log(await reader.read());



================================================
File: packages/assistant-stream/src/core/accumulators/AssistantMessageStream.ts
================================================
import { AssistantStream } from "../AssistantStream";
import { AssistantMessage } from "../utils/types";
import { assistantMessageAccumulator } from "./assistantMessageAccumulator";

export class AssistantMessageStream {
  constructor(public readonly readable: ReadableStream<AssistantMessage>) {
    this.readable = readable;
  }

  static fromAssistantStream(stream: AssistantStream) {
    return new AssistantMessageStream(
      stream.pipeThrough(assistantMessageAccumulator()),
    );
  }

  async unstable_result(): Promise<AssistantMessage> {
    let last: AssistantMessage | undefined;
    for await (const chunk of this) {
      last = chunk;
    }

    if (!last) {
      return {
        role: "assistant",
        status: { type: "complete", reason: "unknown" },
        content: [],
        metadata: {
          steps: [],
          custom: {},
        },
      };
    }
    return last;
  }

  [Symbol.asyncIterator]() {
    const reader = this.readable.getReader();
    return {
      async next(): Promise<IteratorResult<AssistantMessage, undefined>> {
        const { done, value } = await reader.read();
        return done ? { done: true, value: undefined } : { done: false, value };
      },
    };
  }

  tee(): [AssistantMessageStream, AssistantMessageStream] {
    const [readable1, readable2] = this.readable.tee();
    return [
      new AssistantMessageStream(readable1),
      new AssistantMessageStream(readable2),
    ];
  }
}



================================================
File: packages/assistant-stream/src/core/accumulators/assistantMessageAccumulator.ts
================================================
import { AssistantStreamChunk } from "../AssistantStream";
import { parsePartialJson } from "./partial-json/parse-partial-json";
import { AssistantMessage, ToolCallContentPart } from "../utils/types";

export const assistantMessageAccumulator = () => {
  let message: AssistantMessage = {
    role: "assistant",
    content: [],
    status: { type: "running" },
    metadata: {
      steps: [],
      custom: {},
    },
  };
  const transformer = new TransformStream<
    AssistantStreamChunk,
    AssistantMessage
  >({
    transform(chunk, controller) {
      const { type } = chunk;
      switch (type) {
        case "text-delta": {
          message = appendOrUpdateText(message, chunk.textDelta);
          controller.enqueue(message);
          break;
        }

        case "tool-call-begin": {
          const { toolCallId, toolName } = chunk;
          message = appendToolCall(message, toolCallId, toolName);
          controller.enqueue(message);
          break;
        }
        case "tool-call-delta": {
          const { toolCallId, argsTextDelta } = chunk;
          message = appendToolArgsTextDelta(message, toolCallId, argsTextDelta);
          controller.enqueue(message);
          break;
        }
        case "tool-result": {
          const { toolCallId, result } = chunk;
          message = setToolResult(message, toolCallId, result);
          controller.enqueue(message);

          break;
        }

        case "error": {
          const { error } = chunk;
          message = setError(message, error);
          controller.enqueue(message);
          break;
        }

        default: {
          const _exhaustiveCheck: never = type;
          throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);
        }
      }
    },
    flush(controller) {
      message = appendOrUpdateFinish(message);
      controller.enqueue(message);
    },
  });

  return transformer;
};

const appendOrUpdateText = (message: AssistantMessage, textDelta: string) => {
  let contentParts = message.content ?? [];
  let contentPart = message.content?.at(-1);
  if (contentPart?.type !== "text") {
    contentPart = {
      type: "text",
      text: textDelta,
      status: { type: "running" },
    };
  } else {
    contentParts = contentParts.slice(0, -1);
    contentPart = {
      type: "text",
      text: contentPart.text + textDelta,
      status: { type: "running" },
    };
  }
  return {
    ...message,
    content: contentParts.concat([contentPart]),
  };
};

const appendToolCall = (
  message: AssistantMessage,
  toolCallId: string,
  toolName: string,
): AssistantMessage => {
  return {
    ...message,
    content: [
      ...message.content,
      {
        type: "tool-call",
        toolCallId,
        toolName,
        argsText: "",
        args: {},
        status: { type: "running", isArgsComplete: false },
      },
    ],
  };
};

const appendToolArgsTextDelta = (
  message: AssistantMessage,
  toolCallId: string,
  argsTextDelta: string,
): AssistantMessage => {
  const contentPartIdx = message.content.findIndex(
    (part) => part.type === "tool-call" && part.toolCallId === toolCallId,
  );
  if (contentPartIdx === -1)
    throw new Error(
      `Received tool call delta for unknown tool call "${toolCallId}".`,
    );
  const contentPart = message.content[contentPartIdx]! as ToolCallContentPart;
  const newArgsText = contentPart.argsText + argsTextDelta;

  return {
    ...message,
    content: [
      ...message.content.slice(0, contentPartIdx),
      {
        ...contentPart,
        argsText: newArgsText,
        args: parsePartialJson(newArgsText),
      },
      ...message.content.slice(contentPartIdx + 1),
    ],
  };
};

const setToolResult = (
  message: AssistantMessage,
  toolCallId: string,
  result: any,
) => {
  let found = false;
  const newContentParts = message.content?.map((part) => {
    if (part.type !== "tool-call" || part.toolCallId !== toolCallId)
      return part;
    found = true;

    return {
      ...part,
      result,
    };
  });
  if (!found)
    throw new Error(
      `Received tool result for unknown tool call "${toolCallId}". This is likely an internal bug in assistant-ui.`,
    );

  return {
    ...message,
    content: newContentParts!,
  };
};

const appendOrUpdateFinish = (message: AssistantMessage): AssistantMessage => {
  return {
    ...message,
    status: {
      type: "complete",
      reason: "unknown",
    },
  };
};

const setError = (
  message: AssistantMessage,
  error: string,
): AssistantMessage => {
  return {
    ...message,
    status: {
      type: "incomplete",
      reason: "error",
      error,
    },
  };
};



================================================
File: packages/assistant-stream/src/core/accumulators/partial-json/fix-json.ts
================================================
// LICENSE for this file only

// Copyright 2023 Vercel, Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type State =
  | "ROOT"
  | "FINISH"
  | "INSIDE_STRING"
  | "INSIDE_STRING_ESCAPE"
  | "INSIDE_LITERAL"
  | "INSIDE_NUMBER"
  | "INSIDE_OBJECT_START"
  | "INSIDE_OBJECT_KEY"
  | "INSIDE_OBJECT_AFTER_KEY"
  | "INSIDE_OBJECT_BEFORE_VALUE"
  | "INSIDE_OBJECT_AFTER_VALUE"
  | "INSIDE_OBJECT_AFTER_COMMA"
  | "INSIDE_ARRAY_START"
  | "INSIDE_ARRAY_AFTER_VALUE"
  | "INSIDE_ARRAY_AFTER_COMMA";

// Implemented as a scanner with additional fixing
// that performs a single linear time scan pass over the partial JSON.
//
// The states should ideally match relevant states from the JSON spec:
// https://www.json.org/json-en.html
//
// Please note that invalid JSON is not considered/covered, because it
// is assumed that the resulting JSON will be processed by a standard
// JSON parser that will detect any invalid JSON.
export function fixJson(input: string): string {
  const stack: State[] = ["ROOT"];
  let lastValidIndex = -1;
  let literalStart: number | null = null;

  function processValueStart(char: string, i: number, swapState: State) {
    {
      switch (char) {
        case '"': {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_STRING");
          break;
        }

        case "f":
        case "t":
        case "n": {
          lastValidIndex = i;
          literalStart = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_LITERAL");
          break;
        }

        case "-": {
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }

        case "{": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_OBJECT_START");
          break;
        }

        case "[": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_ARRAY_START");
          break;
        }
      }
    }
  }

  function processAfterObjectValue(char: string, i: number) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_OBJECT_AFTER_COMMA");
        break;
      }
      case "}": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }

  function processAfterArrayValue(char: string, i: number) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_ARRAY_AFTER_COMMA");
        break;
      }
      case "]": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }

  for (let i = 0; i < input.length; i++) {
    const char = input[i]!;
    const currentState = stack[stack.length - 1];

    switch (currentState) {
      case "ROOT":
        processValueStart(char, i, "FINISH");
        break;

      case "INSIDE_OBJECT_START": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
          case "}": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_AFTER_COMMA": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_KEY": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_AFTER_KEY");
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_AFTER_KEY": {
        switch (char) {
          case ":": {
            stack.pop();
            stack.push("INSIDE_OBJECT_BEFORE_VALUE");

            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_BEFORE_VALUE": {
        processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
        break;
      }

      case "INSIDE_OBJECT_AFTER_VALUE": {
        processAfterObjectValue(char, i);
        break;
      }

      case "INSIDE_STRING": {
        switch (char) {
          case '"': {
            stack.pop();
            lastValidIndex = i;
            break;
          }

          case "\\": {
            stack.push("INSIDE_STRING_ESCAPE");
            break;
          }

          default: {
            lastValidIndex = i;
          }
        }

        break;
      }

      case "INSIDE_ARRAY_START": {
        switch (char) {
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }

          default: {
            lastValidIndex = i;
            processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
            break;
          }
        }
        break;
      }

      case "INSIDE_ARRAY_AFTER_VALUE": {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_ARRAY_AFTER_COMMA");
            break;
          }

          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }

          default: {
            lastValidIndex = i;
            break;
          }
        }

        break;
      }

      case "INSIDE_ARRAY_AFTER_COMMA": {
        processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
        break;
      }

      case "INSIDE_STRING_ESCAPE": {
        stack.pop();
        lastValidIndex = i;

        break;
      }

      case "INSIDE_NUMBER": {
        switch (char) {
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9": {
            lastValidIndex = i;
            break;
          }

          case "e":
          case "E":
          case "-":
          case ".": {
            break;
          }

          case ",": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }

            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }

            break;
          }

          case "}": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }

            break;
          }

          case "]": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }

            break;
          }

          default: {
            stack.pop();
            break;
          }
        }

        break;
      }

      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart!, i + 1);

        if (
          !"false".startsWith(partialLiteral) &&
          !"true".startsWith(partialLiteral) &&
          !"null".startsWith(partialLiteral)
        ) {
          stack.pop();

          if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
            processAfterObjectValue(char, i);
          } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
            processAfterArrayValue(char, i);
          }
        } else {
          lastValidIndex = i;
        }

        break;
      }
    }
  }

  let result = input.slice(0, lastValidIndex + 1);

  for (let i = stack.length - 1; i >= 0; i--) {
    const state = stack[i];

    switch (state) {
      case "INSIDE_STRING": {
        result += '"';
        break;
      }

      case "INSIDE_OBJECT_KEY":
      case "INSIDE_OBJECT_AFTER_KEY":
      case "INSIDE_OBJECT_AFTER_COMMA":
      case "INSIDE_OBJECT_START":
      case "INSIDE_OBJECT_BEFORE_VALUE":
      case "INSIDE_OBJECT_AFTER_VALUE": {
        result += "}";
        break;
      }

      case "INSIDE_ARRAY_START":
      case "INSIDE_ARRAY_AFTER_COMMA":
      case "INSIDE_ARRAY_AFTER_VALUE": {
        result += "]";
        break;
      }

      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart!, input.length);

        if ("true".startsWith(partialLiteral)) {
          result += "true".slice(partialLiteral.length);
        } else if ("false".startsWith(partialLiteral)) {
          result += "false".slice(partialLiteral.length);
        } else if ("null".startsWith(partialLiteral)) {
          result += "null".slice(partialLiteral.length);
        }
      }
    }
  }

  return result;
}



================================================
File: packages/assistant-stream/src/core/accumulators/partial-json/parse-partial-json.ts
================================================
import sjson from "secure-json-parse";
import { fixJson } from "./fix-json";

export const parsePartialJson = (json: string) => {
  try {
    return sjson.parse(json);
  } catch {
    try {
      return sjson.parse(fixJson(json));
    } catch {
      return undefined;
    }
  }
};



================================================
File: packages/assistant-stream/src/core/modules/runs.ts
================================================
import { AssistantStream, AssistantStreamChunk } from "../AssistantStream";
import { DataStreamEncoder } from "../serialization/DataStream";
import { generateId } from "../utils/generateId";
import { createTextStream, TextStreamController } from "./text";
import { createToolCallStream, ToolCallStreamController } from "./tool-call";

type MergeStreamItem = {
  reader: ReadableStreamDefaultReader<AssistantStreamChunk>;
  promise?: Promise<unknown> | undefined;
};

const promiseWithResolvers = () => {
  let resolve: () => void;
  let reject: (reason?: any) => void;
  const promise = new Promise<void>((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return { promise, resolve: resolve!, reject: reject! };
};

const createMergeStream = () => {
  const list: MergeStreamItem[] = [];
  let sealed = false;
  let controller: ReadableStreamDefaultController<AssistantStreamChunk>;
  let currentPull: ReturnType<typeof promiseWithResolvers> | undefined;

  const handlePull = (item: MergeStreamItem) => {
    if (!item.promise) {
      item.promise = item.reader
        .read()
        .then(({ done, value }) => {
          item.promise = undefined;
          if (done) {
            list.splice(list.indexOf(item), 1);
            if (sealed && list.length === 0) {
              controller.close();
            }
          } else {
            controller.enqueue(value);
          }

          currentPull?.resolve();
          currentPull = undefined;
        })
        .catch((e) => {
          list.forEach((item) => {
            item.reader.cancel();
          });
          list.length = 0;

          controller.error(e);

          currentPull?.reject(e);
          currentPull = undefined;
        });
    }
  };

  const readable = new ReadableStream<AssistantStreamChunk>({
    start(c) {
      controller = c;
    },
    async pull() {
      list.map((item) => {
        handlePull(item);
        return item.promise!;
      });

      currentPull = promiseWithResolvers();
      return currentPull.promise;
    },
    cancel() {
      list.forEach((item) => {
        item.reader.cancel();
      });
      list.length = 0;
    },
  });

  return {
    stream: readable,
    seal() {
      sealed = true;
      if (list.length === 0) controller.close();
    },
    addStream(stream: AssistantStream) {
      if (sealed)
        throw new Error(
          "Cannot add streams after the run callback has settled.",
        );

      const item = { reader: stream.getReader() };
      list.push(item);
      if (list.length === 1) {
        handlePull(item);
      }
    },
  };
};

export type AssistantStreamController = {
  appendText(textDelta: string): void;
  // addTextPart(): TextStreamController;
  addToolCallPart(toolName: string): ToolCallStreamController;
  addToolCallPart(options: {
    toolCallId?: string;
    toolName: string;
    args?: Record<string, unknown>;
    result?: unknown;
  }): ToolCallStreamController;

  merge(stream: AssistantStream): void;
};

class RunControllerImpl implements AssistantStreamController {
  private _merge = createMergeStream();
  private _textPartController: TextStreamController | undefined;

  getReadable() {
    return this._merge.stream;
  }

  close() {
    this._merge.seal();
    this._textPartController?.close();
  }

  merge(stream: AssistantStream) {
    this._merge.addStream(stream);
  }

  appendText(textDelta: string) {
    if (!this._textPartController) {
      this._textPartController = this.addTextPart();
    }
    this._textPartController.append(textDelta);
  }

  addTextPart() {
    let controller: TextStreamController;
    const textStream = createTextStream({
      start(c) {
        controller = c;
      },
    });
    this.merge(textStream);
    return controller!;
  }

  addToolCallPart(
    options:
      | string
      | {
          toolName: string;
          toolCallId?: string;
          args?: Record<string, unknown>;
          result?: unknown;
        },
  ): ToolCallStreamController {
    const opt = typeof options === "string" ? { toolName: options } : options;

    let controller: ToolCallStreamController;
    const toolCallStream = createToolCallStream({
      toolCallId: opt.toolCallId ?? generateId(),
      toolName: opt.toolName,
      start(c) {
        controller = c;
      },
    });
    this.merge(toolCallStream);

    if (opt.args !== undefined) {
      controller!.argsText.append(JSON.stringify(opt.args));
      controller!.argsText.close();
    }
    if (opt !== undefined) {
      controller!.setResult(opt.result);
    }

    return controller!;
  }

  addError(error: string) {
    this._merge.addStream(
      new ReadableStream({
        start(c) {
          c.enqueue({
            type: "error",
            error,
          });
        },
      }),
    );
  }
}

export function createAssistantStream(
  callback: (controller: AssistantStreamController) => PromiseLike<void> | void,
): AssistantStream {
  const controller = new RunControllerImpl();
  const promiseOrVoid = callback(controller);
  if (promiseOrVoid instanceof Promise) {
    const runTask = async () => {
      try {
        await promiseOrVoid;
      } catch (e) {
        controller.addError(e instanceof Error ? e.message : String(e));
        throw e;
      } finally {
        controller.close();
      }
    };
    runTask();
  } else {
    controller.close();
  }

  return controller.getReadable();
}

export function createAssistantStreamResponse(
  callback: (controller: AssistantStreamController) => PromiseLike<void> | void,
) {
  return AssistantStream.toResponse(
    createAssistantStream(callback),
    new DataStreamEncoder(),
  );
}



================================================
File: packages/assistant-stream/src/core/modules/text.ts
================================================
import { AssistantStream, AssistantStreamChunk } from "../AssistantStream";
import { UnderlyingReadable } from "../utils/UnderlyingReadable";

export type TextStreamController = {
  append(textDelta: string): void;
  close(): void; // TODO reason? error?
};

class TextStreamControllerImpl implements TextStreamController {
  private _controller: ReadableStreamDefaultController<AssistantStreamChunk>;

  constructor(
    controller: ReadableStreamDefaultController<AssistantStreamChunk>,
  ) {
    this._controller = controller;
  }

  append(textDelta: string) {
    this._controller.enqueue({
      type: "text-delta",
      textDelta,
    });
    return this;
  }

  close() {
    this._controller.close();
  }
}

export const createTextStream = (
  readable: UnderlyingReadable<TextStreamController>,
): AssistantStream => {
  return new ReadableStream({
    start(c) {
      return readable.start?.(new TextStreamControllerImpl(c));
    },
    pull(c) {
      return readable.pull?.(new TextStreamControllerImpl(c));
    },
    cancel(c) {
      return readable.cancel?.(c);
    },
  });
};



================================================
File: packages/assistant-stream/src/core/modules/tool-call.ts
================================================
import { AssistantStream, AssistantStreamChunk } from "../AssistantStream";
import { UnderlyingReadable } from "../utils/UnderlyingReadable";
import { createTextStream, TextStreamController } from "./text";

export type ToolCallStreamController = {
  readonly toolCallId: string;
  readonly toolName: string;

  argsText: TextStreamController;

  setResult(result: unknown): void;
  close(): void;
};

class ToolCallStreamControllerImpl implements ToolCallStreamController {
  public get toolCallId() {
    return this._options.toolCallId;
  }

  public get toolName() {
    return this._options.toolName;
  }

  constructor(
    private _controller: ReadableStreamDefaultController<AssistantStreamChunk>,
    private _options: { toolCallId: string; toolName: string },
  ) {
    this._controller.enqueue({
      type: "tool-call-begin",
      toolCallId: this._options.toolCallId,
      toolName: this._options.toolName,
    });

    const stream = createTextStream({
      start: (c) => {
        this._argsTextController = c;
      },
    });
    stream.pipeTo(
      new WritableStream({
        write: (chunk) => {
          if (chunk.type !== "text-delta")
            throw new Error("Unexpected chunk type");

          this._controller.enqueue({
            type: "tool-call-delta",
            toolCallId: this._options.toolCallId,
            argsTextDelta: chunk.textDelta,
          });
        },
      }),
    );
  }

  get argsText() {
    return this._argsTextController;
  }

  private _argsTextController!: TextStreamController;

  setResult(result: unknown) {
    this._controller.enqueue({
      type: "tool-result",
      toolCallId: this._options.toolCallId,
      result,
    });
  }

  close() {
    this._controller.close();
  }
}

type UnderlyingToolCallStreamReadable =
  UnderlyingReadable<ToolCallStreamController> & {
    toolCallId: string;
    toolName: string;
  };

export const createToolCallStream = (
  readable: UnderlyingToolCallStreamReadable,
): AssistantStream => {
  const options = {
    toolCallId: readable.toolCallId,
    toolName: readable.toolName,
  };
  return new ReadableStream({
    start(c) {
      return readable.start?.(new ToolCallStreamControllerImpl(c, options));
    },
    pull(c) {
      return readable.pull?.(new ToolCallStreamControllerImpl(c, options));
    },
    cancel(c) {
      return readable.cancel?.(c);
    },
  });
};



================================================
File: packages/assistant-stream/src/core/serialization/DataStream.ts
================================================
import { AssistantStreamChunk } from "../AssistantStream";
import { PipeableTransformStream } from "../utils/PipeableTransformStream";
import { StreamPart } from "./streamPart/StreamPart";

export class DataStreamEncoder {
  private _transformStream;

  public get writable() {
    return this._transformStream.writable;
  }

  public get readable() {
    return this._transformStream.readable;
  }

  constructor() {
    this._transformStream = new PipeableTransformStream<
      AssistantStreamChunk,
      Uint8Array
    >((readable) => {
      const transform = new TransformStream<AssistantStreamChunk, string>({
        transform(chunk, controller) {
          const type = chunk.type;
          switch (type) {
            case "text-delta":
              controller.enqueue("0:" + JSON.stringify(chunk.textDelta) + "\n");
              break;

            case "tool-call-begin":
              controller.enqueue(
                "b:" +
                  JSON.stringify({
                    toolCallId: chunk.toolCallId,
                    toolName: chunk.toolName,
                  }) +
                  "\n",
              );
              break;

            case "tool-call-delta":
              controller.enqueue(
                "c:" +
                  JSON.stringify({
                    toolCallId: chunk.toolCallId,
                    argsTextDelta: chunk.argsTextDelta,
                  }) +
                  "\n",
              );
              break;

            case "tool-result":
              controller.enqueue(
                "a:" +
                  JSON.stringify({
                    toolCallId: chunk.toolCallId,
                    result: chunk.result,
                  }) +
                  "\n",
              );
              break;

            case "error":
              controller.enqueue(`3:${JSON.stringify(chunk.error)}\n`);
              break;

            default:
              const exhaustiveCheck: never = type;
              throw new Error(`unsupported chunk type: ${exhaustiveCheck}`);
          }
        },
      });

      return readable
        .pipeThrough(transform)
        .pipeThrough(new TextEncoderStream());
    });
  }
}

const decodeStreamPart = <T extends Record<string, unknown>>(
  part: string,
): StreamPart<T> => {
  const index = part.indexOf(":");
  if (index === -1) throw new Error("Invalid stream part");
  return {
    type: part.slice(0, index),
    value: JSON.parse(part.slice(index + 1)),
  };
};

export class DataStreamDecoder {
  private _transformStream;

  public get writable() {
    return this._transformStream.writable;
  }

  public get readable() {
    return this._transformStream.readable;
  }

  constructor() {
    this._transformStream = new PipeableTransformStream<
      Uint8Array,
      AssistantStreamChunk
    >((readable) => {
      const transform = new TransformStream<string, AssistantStreamChunk>({
        transform(chunk, controller) {
          const { type, value } = decodeStreamPart(chunk);
          switch (type) {
            case "0":
              controller.enqueue({
                type: "text-delta",
                textDelta: value as string,
              });
              break;

            case "b": {
              const { toolCallId, toolName } = value as {
                toolCallId: string;
                toolName: string;
              };
              controller.enqueue({
                type: "tool-call-begin",
                toolCallId,
                toolName,
              });
              break;
            }

            case "c": {
              const { toolCallId, argsTextDelta } = value as {
                toolCallId: string;
                argsTextDelta: string;
              };
              controller.enqueue({
                type: "tool-call-delta",
                toolCallId,
                argsTextDelta,
              });
              break;
            }

            case "a": {
              const { toolCallId, result } = value as {
                toolCallId: string;
                result: any;
              };

              controller.enqueue({
                type: "tool-result",
                toolCallId,
                result,
              });
              break;
            }

            case "9": {
              const { toolCallId, args } = value as {
                toolCallId: string;
                toolName: string;
                args: object;
              };
              controller.enqueue({
                type: "tool-call-begin",
                toolCallId,
                toolName: toolCallId,
              });
              controller.enqueue({
                type: "tool-call-delta",
                toolCallId,
                argsTextDelta: JSON.stringify(args),
              });
              break;
            }

            case "2":
            case "3":
            case "8":
            case "d":
            case "e": {
              break; // ignore
            }

            default:
              const exhaustiveCheck: string = type;
              throw new Error(`unsupported chunk type: ${exhaustiveCheck}`);
          }
        },
      });

      return readable
        .pipeThrough(new TextDecoderStream())
        .pipeThrough(new ChunkByLineStream())
        .pipeThrough(transform);
    });
  }
}

export class ChunkByLineStream extends TransformStream<string, string> {
  private buffer = "";

  constructor() {
    super({
      transform: (chunk, controller) => {
        this.buffer += chunk;
        const lines = this.buffer.split("\n");

        // Process all complete lines
        for (let i = 0; i < lines.length - 1; i++) {
          controller.enqueue(lines[i]);
        }

        // Keep the last incomplete line in the buffer
        this.buffer = lines[lines.length - 1]!;
      },
      flush: (controller) => {
        // flush any remaining content in the buffer
        if (this.buffer) {
          controller.enqueue(this.buffer);
        }
      },
    });
  }
}



================================================
File: packages/assistant-stream/src/core/serialization/PlainText.ts
================================================
import { AssistantStreamChunk } from "../AssistantStream";
import { PipeableTransformStream } from "../utils/PipeableTransformStream";

export class PlainTextEncoder
  implements ReadableWritablePair<Uint8Array, AssistantStreamChunk>
{
  private _transformStream;

  public get writable() {
    return this._transformStream.writable;
  }

  public get readable() {
    return this._transformStream.readable;
  }

  constructor() {
    this._transformStream = new PipeableTransformStream<
      AssistantStreamChunk,
      Uint8Array
    >((readable) => {
      const transform = new TransformStream<AssistantStreamChunk, string>({
        transform(chunk, controller) {
          const type = chunk.type;
          switch (type) {
            case "text-delta":
              controller.enqueue(chunk.textDelta);
              break;

            default:
              const unsupportedType:
                | "tool-call-begin"
                | "tool-call-delta"
                | "tool-result"
                | "error" = type;
              throw new Error(`unsupported chunk type: ${unsupportedType}`);
          }
        },
      });

      return readable
        .pipeThrough(transform)
        .pipeThrough(new TextEncoderStream());
    });
  }
}

export class PlainTextDecoder {
  private _transformStream;

  public get writable() {
    return this._transformStream.writable;
  }

  public get readable() {
    return this._transformStream.readable;
  }

  constructor() {
    this._transformStream = new PipeableTransformStream<
      Uint8Array,
      AssistantStreamChunk
    >((readable) => {
      const transform = new TransformStream<string, AssistantStreamChunk>({
        transform(chunk, controller) {
          controller.enqueue({
            type: "text-delta",
            textDelta: chunk,
          });
        },
      });

      return readable
        .pipeThrough(new TextDecoderStream())
        .pipeThrough(transform);
    });
  }
}



================================================
File: packages/assistant-stream/src/core/serialization/streamPart/StreamPart.ts
================================================
export type StreamPart<T extends Record<string, unknown>> = {
  [K in keyof T]: { type: K; value: T[K] };
}[keyof T];



================================================
File: packages/assistant-stream/src/core/utils/PipeableTransformStream.ts
================================================
export class PipeableTransformStream<I, O> extends TransformStream<I, O> {
  constructor(transform: (readable: ReadableStream<I>) => ReadableStream<O>) {
    super();
    const readable = transform(super.readable as any);
    Object.defineProperty(this, "readable", {
      value: readable,
      writable: false,
    });
  }
}



================================================
File: packages/assistant-stream/src/core/utils/UnderlyingReadable.ts
================================================
export type UnderlyingReadable<TController> = {
  start?: (controller: TController) => void;
  pull?: (controller: TController) => void | PromiseLike<void>;
  cancel?: UnderlyingSourceCancelCallback;
};



================================================
File: packages/assistant-stream/src/core/utils/generateId.tsx
================================================
import { customAlphabet } from "nanoid/non-secure";

export const generateId = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7,
);



================================================
File: packages/assistant-stream/src/core/utils/types.ts
================================================
type TextStatus =
  | {
      type: "running";
    }
  | {
      type: "complete";
      reason: "stop" | "unknown";
    }
  | {
      type: "incomplete";
      reason: "cancelled" | "length" | "content-filter" | "other";
    };

type TextContentPart = {
  type: "text";
  text: string;
  status: TextStatus;
};

type ToolCallStatus =
  | {
      type: "running";
      isArgsComplete: boolean;
    }
  | {
      type: "requires-action";
      reason: "tool-call-result";
    }
  | {
      type: "complete";
      reason: "stop" | "unknown";
    }
  | {
      type: "incomplete";
      reason: "cancelled" | "length" | "content-filter" | "other";
    };

export type ToolCallContentPart = {
  type: "tool-call";
  status: ToolCallStatus;
  toolCallId: string;
  toolName: string;
  argsText: string;
  args: Record<string, unknown>;
  result?: unknown;
};

type AssistantMessageContentPart = TextContentPart | ToolCallContentPart;

type AssistantMessageStepMetadata = Record<string, unknown>;

export type AssitantMessageStatus =
  | {
      type: "running";
    }
  | {
      type: "requires-action";
      reason: "tool-calls";
    }
  | {
      type: "complete";
      reason: "stop" | "unknown";
    }
  | {
      type: "incomplete";
      reason:
        | "cancelled"
        | "tool-calls"
        | "length"
        | "content-filter"
        | "other"
        | "error";
      error?: unknown;
    };

export type AssistantMessage = {
  role: "assistant";
  status: AssitantMessageStatus;
  content: AssistantMessageContentPart[];
  metadata: {
    steps: AssistantMessageStepMetadata[];
    custom: Record<string, unknown>;
  };
};



================================================
File: packages/cli/README.md
================================================
# `assistant-ui` CLI

This package contains the command line interface for `assistant-ui`.

## Usage

```sh
npx assistant-ui@latest add
```



================================================
File: packages/cli/CHANGELOG.md
================================================
# assistant-ui

## 0.0.39

### Patch Changes

- 1d56298: fix: make CLI's add command work w new templates

## 0.0.38

### Patch Changes

- 65a2c7c: feat: assistant-ui init CLI

## 0.0.37

### Patch Changes

- 72e66db: chore: update dependencies

## 0.0.36

### Patch Changes

- 8190d09: fix: fileURLToPath to get codemods

## 0.0.35

### Patch Changes

- 1a42993: fix: always use npx for jscodeshift

## 0.0.34

### Patch Changes

- c760cb3: fix: node 20 support

## 0.0.33

### Patch Changes

- 0a23a70: fix: node 20 support

## 0.0.32

### Patch Changes

- 6703842: feat: codemod to migrate to @assistant-ui/react-ui

## 0.0.31

### Patch Changes

- cefd975: fix: use mjs entrypoint

## 0.0.30

### Patch Changes

- f3368ad: feat: codemod for v0.8 migration

## 0.0.29

### Patch Changes

- 22272e6: chore: update dependencies

## 0.0.28

### Patch Changes

- 345f3d5: chore: update dependencies

## 0.0.27

### Patch Changes

- 4c2bf58: chore: update dependencies

## 0.0.26

### Patch Changes

- 982a6a2: chore: update dependencies

## 0.0.25

### Patch Changes

- ec3b8cc: chore: update dependencies

## 0.0.24

### Patch Changes

- 4c54273: chore: update dependencies

## 0.0.23

### Patch Changes

- 2112ce8: chore: update dependencies

## 0.0.22

### Patch Changes

- 938e734: fix: correctly pass component URLs to shadcn CLI

## 0.0.21

### Patch Changes

- 933b8c0: chore: update deps

## 0.0.20

### Patch Changes

- c59d8b5: chore: update dependencies

## 0.0.18

### Patch Changes

- 1ada091: chore: update deps

## 0.0.17

### Patch Changes

- ff5b86c: chore: update deps

## 0.0.16

### Patch Changes

- d2375cd: build: disable bundling in UI package releases

## 0.0.15

### Patch Changes

- fb32e61: chore: update deps

## 0.0.14

### Patch Changes

- fb46305: chore: update dependencies

## 0.0.13

### Patch Changes

- d8bd40b: chore: update dependencies

## 0.0.12

### Patch Changes

- c438773: feat: allow disabling ComposerInput keyboard shortcuts
- e1ae3d0: chore: update dependencies

## 0.0.11

### Patch Changes

- 155d6e7: chore: update dependencies

## 0.0.10

### Patch Changes

- c348553: chore: update dependencies

## 0.0.9

### Patch Changes

- 7faa03b: cli: create -t langgraph

## 0.0.8

### Patch Changes

- 7d7bbce: fix: create command windows compatibility

## 0.0.7

### Patch Changes

- 9a55735: chore: update deps

## 0.0.6

### Patch Changes

- ab031a0: fix: make `create` directory argument optional

## 0.0.5

### Patch Changes

- 36f3a1f: chore: update dependencies
- 1f8cc5e: refactor: make cli package more lightweight
- 3810443: feat: npx assistant-ui create



================================================
File: packages/cli/package.json
================================================
{
  "name": "assistant-ui",
  "version": "0.0.39",
  "license": "MIT",
  "source": "./src/index.ts",
  "dependencies": {
    "chalk": "^5.4.1",
    "cli-progress": "^3.12.0",
    "commander": "^13.1.0",
    "cross-spawn": "^7.0.6",
    "debug": "^4.4.0",
    "detect-package-manager": "^3.0.2",
    "glob": "^11.0.1",
    "jscodeshift": "^17.1.2"
  },
  "devDependencies": {
    "@assistant-ui/tsbuildutils": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/cli-progress": "^3.11.6",
    "@types/cross-spawn": "^6.0.6",
    "@types/debug": "^4.1.12",
    "@types/jscodeshift": "^0.12.0",
    "@types/node": "^22.13.1",
    "eslint-config-next": "15.1.6",
    "tsx": "^4.19.2"
  },
  "files": [
    "dist",
    "README.md"
  ],
  "bin": "./dist/index.mjs",
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  },
  "engines": {
    "node": ">=20.10.0"
  }
}



================================================
File: packages/cli/tsconfig.declarations.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "declarationDir": "./dist",
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "paths": null
  },
  "include": ["src"]
}



================================================
File: packages/cli/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/cli/scripts/build.mts
================================================
import { Build } from "@assistant-ui/tsbuildutils";

await Build.start().transpileTypescript();



================================================
File: packages/cli/src/index.ts
================================================
#!/usr/bin/env node

import { Command } from "commander";

import packageJson from "../package.json" with { type: "json" };
import { create } from "./commands/create";
import { shadcnAdd } from "./commands/shadcn/add";
import { codemodCommand, upgradeCommand } from "./commands/upgrade";
import { init } from "./commands/init";

process.on("SIGINT", () => process.exit(0));
process.on("SIGTERM", () => process.exit(0));

function main() {
  const program = new Command()
    .name("assistant-ui")
    .description("add components and dependencies to your project")
    .version(
      packageJson.version || "1.0.0",
      "-v, --version",
      "display the version number",
    );

  program.addCommand(shadcnAdd);
  program.addCommand(create);
  program.addCommand(init);
  program.addCommand(codemodCommand);
  program.addCommand(upgradeCommand);

  program.parse();
}

main();



================================================
File: packages/cli/src/codemods/utils/createTransformer.ts
================================================
import { FileInfo, API, JSCodeshift, Collection } from "jscodeshift";

export type TransformerFunction = (
  context: TransformContext,
  fileInfo: FileInfo,
  api: API,
  options: any,
) => void;

export interface TransformContext {
  /**
   * The jscodeshift API object.
   */
  j: JSCodeshift;

  /**
   * The root collection of the AST.
   */
  root: Collection<any>;

  markAsChanged: () => void;
}

export function createTransformer(transformFn: TransformerFunction) {
  return function transformer(fileInfo: FileInfo, api: API, options: any) {
    const j = api.jscodeshift;
    const root = j(fileInfo.source);

    let isChanged = false;
    const context: TransformContext = {
      j,
      root,
      markAsChanged: () => {
        isChanged = true;
      },
    };

    transformFn(context, fileInfo, api, options);
    return isChanged ? root.toSource() : null;
  };
}



================================================
File: packages/cli/src/codemods/v0-8/ui-package-split.ts
================================================
import { createTransformer } from "../utils/createTransformer";

const reactUIExports: string[] = [
  "ThreadConfigProvider",
  "useThreadConfig",
  "ThreadConfig",
  "ThreadWelcomeConfig",
  "UserMessageConfig",
  "AssistantMessageConfig",
  "StringsConfig",
  "SuggestionConfig",
  "ThreadConfigProviderProps",
  "AssistantActionBar",
  "AssistantMessage",
  "AssistantModal",
  "BranchPicker",
  "Composer",
  "ContentPart",
  "AttachmentUI",
  "EditComposer",
  "Thread",
  "ThreadList",
  "ThreadListItem",
  "ThreadWelcome",
  "UserMessage",
  "makeMarkdownText",
  "MakeMarkdownTextProps",
  "CodeHeader",
];

const migrateAssistantUI = createTransformer(({ j, root, markAsChanged }) => {
  const sourcesToMigrate: string[] = [
    "@assistant-ui/react",
    "@assistant-ui/react-markdown",
  ];
  const movedSpecifiers: any[] = [];
  let lastMigratedImportPath: any = null;

  root
    .find(j.ImportDeclaration)
    .filter((path: any) => sourcesToMigrate.includes(path.value.source.value))
    .forEach((path: any) => {
      let hadMigratedSpecifiers = false;
      const remainingSpecifiers: any[] = [];
      path.value.specifiers.forEach((specifier: any) => {
        if (
          j.ImportSpecifier.check(specifier) &&
          reactUIExports.includes(specifier.imported.name)
        ) {
          movedSpecifiers.push(specifier);
          hadMigratedSpecifiers = true;
        } else {
          remainingSpecifiers.push(specifier);
        }
      });
      if (hadMigratedSpecifiers) {
        lastMigratedImportPath = path;
      }
      if (remainingSpecifiers.length === 0) {
        j(path).remove();
        markAsChanged();
      } else if (remainingSpecifiers.length !== path.value.specifiers.length) {
        path.value.specifiers = remainingSpecifiers;
        markAsChanged();
      }
    });

  if (movedSpecifiers.length > 0) {
    const existingReactUIImport = root.find(j.ImportDeclaration, {
      source: { value: "@assistant-ui/react-ui" },
    });
    if (existingReactUIImport.size() > 0) {
      existingReactUIImport.forEach((path: any) => {
        movedSpecifiers.forEach((specifier: any) => {
          if (
            !path.value.specifiers.some(
              (s: any) => s.imported.name === specifier.imported.name,
            )
          ) {
            path.value.specifiers.push(specifier);
          }
        });
      });
    } else {
      const newImport = j.importDeclaration(
        movedSpecifiers,
        j.literal("@assistant-ui/react-ui"),
      );
      if (lastMigratedImportPath) {
        j(lastMigratedImportPath).insertAfter(newImport);
      } else {
        const firstImport = root.find(j.ImportDeclaration).at(0);
        if (firstImport.size() > 0) {
          firstImport.insertBefore(newImport);
        } else {
          root.get().node.program.body.unshift(newImport);
        }
      }
    }
    markAsChanged();
  }

  const cssReplacements: Record<string, string> = {
    "@assistant-ui/react/styles/index.css":
      "@assistant-ui/react-ui/styles/index.css",
    "@assistant-ui/react/styles/modal.css":
      "@assistant-ui/react-ui/styles/modal.css",
    "@assistant-ui/react-markdown/styles/markdown.css":
      "@assistant-ui/react-ui/styles/markdown.css",
  };

  root.find(j.ImportDeclaration).forEach((path: any) => {
    const sourceValue: string = path.value.source.value;
    if (cssReplacements[sourceValue]) {
      path.value.source = j.literal(cssReplacements[sourceValue]);
      markAsChanged();
    }
  });

  let removedMarkdownPlugin = false;
  root
    .find(j.CallExpression, { callee: { name: "require" } })
    .filter((path: any) => {
      const arg = path.value.arguments[0];
      return (
        arg &&
        (arg.type === "Literal" || arg.type === "StringLiteral") &&
        arg.value === "@assistant-ui/react-markdown/tailwindcss"
      );
    })
    .forEach((path: any) => {
      removedMarkdownPlugin = true;
      const parent = path.parentPath;
      if (
        parent &&
        parent.value &&
        parent.value.type === "VariableDeclarator"
      ) {
        const varDecl = parent.parentPath;
        if (
          varDecl &&
          varDecl.value.declarations &&
          varDecl.value.declarations.length === 1
        ) {
          j(varDecl).remove();
        } else {
          varDecl.value.declarations = varDecl.value.declarations.filter(
            (decl: any) => decl !== parent.value,
          );
        }
        markAsChanged();
      } else {
        j(path).remove();
        markAsChanged();
      }
    });

  root
    .find(j.CallExpression, { callee: { name: "require" } })
    .filter((path: any) => {
      const arg = path.value.arguments[0];
      return (
        arg &&
        (arg.type === "Literal" || arg.type === "StringLiteral") &&
        arg.value === "@assistant-ui/react/tailwindcss"
      );
    })
    .forEach((path: any) => {
      path.value.arguments[0].value = "@assistant-ui/react-ui/tailwindcss";
      markAsChanged();
      if (removedMarkdownPlugin) {
        if (
          path.parentPath &&
          path.parentPath.value &&
          path.parentPath.value.type === "CallExpression" &&
          path.parentPath.value.arguments.length > 0
        ) {
          const configObj = path.parentPath.value.arguments[0];
          if (configObj && configObj.type === "ObjectExpression") {
            const componentsProp = configObj.properties.find((prop: any) => {
              return (
                (prop.key.name === "components" ||
                  prop.key.value === "components") &&
                prop.value.type === "ArrayExpression"
              );
            });
            if (componentsProp) {
              const componentsArray = componentsProp.value.elements;
              const hasMarkdown = componentsArray.some(
                (el: any) => el.type === "Literal" && el.value === "markdown",
              );
              if (!hasMarkdown) {
                componentsArray.push(j.literal("markdown"));
                markAsChanged();
              }
            }
          }
        }
      }
    });
});

export default migrateAssistantUI;



================================================
File: packages/cli/src/commands/create.ts
================================================
import { Command } from "commander";
import chalk from "chalk";
import { spawn } from "cross-spawn";

export const create = new Command()
  .name("create")
  .description("create a new project")
  .argument("[project-directory]")
  .usage(`${chalk.green("[project-directory]")} [options]`)
  .option(
    "-t, --template <template>",
    `

  The template to use for the project, e.g. default, langgraph
`,
  )
  .option(
    "--use-npm",
    `

  Explicitly tell the CLI to bootstrap the application using npm
`,
  )
  .option(
    "--use-pnpm",
    `

  Explicitly tell the CLI to bootstrap the application using pnpm
`,
  )
  .option(
    "--use-yarn",
    `

  Explicitly tell the CLI to bootstrap the application using Yarn
`,
  )
  .option(
    "--use-bun",
    `

  Explicitly tell the CLI to bootstrap the application using Bun
`,
  )
  .option(
    "--skip-install",
    `

  Explicitly tell the CLI to skip installing packages
`,
  )
  .action((_, opts) => {
    const templates = {
      default: "https://github.com/assistant-ui/assistant-ui-starter",
      langgraph:
        "https://github.com/assistant-ui/assistant-ui-starter-langgraph",
    };

    const templateUrl =
      templates[(opts.template as keyof typeof templates) ?? "default"];
    if (!templateUrl) {
      console.error(`Unknown template: ${opts.template}`);
      process.exit(1);
    }

    const filteredArgs = process.argv.slice(3).filter((arg, index, arr) => {
      return !(
        arg === "-t" ||
        arg === "--template" ||
        arr[index - 1] === "-t" ||
        arr[index - 1] === "--template"
      );
    });

    const child = spawn(
      "npx",
      [`create-next-app@latest`, ...filteredArgs, "-e", templateUrl],
      {
        stdio: "inherit",
      },
    );

    child.on("error", (error) => {
      console.error(`Error: ${error.message}`);
    });

    child.on("close", (code) => {
      if (code !== 0) {
        console.log(`other-package-script process exited with code ${code}`);
      }
    });
  });



================================================
File: packages/cli/src/commands/init.ts
================================================
import { Command } from "commander";
import { spawn } from "cross-spawn";

export const init = new Command()
  .name("init")
  .description("initialize assistant-ui in a new or existing project")
  .action(() => {
    const child = spawn(
      "npx",
      [
        `shadcn@latest`,
        "add",
        "https://r.assistant-ui.com/chat/b/ai-sdk-quick-start/json",
      ],
      {
        stdio: "inherit",
      },
    );

    child.on("error", (error) => {
      console.error(`Error: ${error.message}`);
    });

    child.on("close", (code) => {
      if (code !== 0) {
        console.log(`other-package-script process exited with code ${code}`);
      }
    });
  });



================================================
File: packages/cli/src/commands/upgrade.ts
================================================
import { Command } from "commander";
import { transform } from "../lib/transform";
import { upgrade } from "../lib/upgrade";
import debug from "debug";

export interface TransformOptions {
  dry?: boolean;
  print?: boolean;
  verbose?: boolean;
  jscodeshift?: string;
}

const error = debug("codemod:error");
debug.enable("codemod:*");

const addTransformOptions = (command: Command): Command => {
  return command
    .option("-d, --dry", "Dry run (no changes are made to files)")
    .option("-p, --print", "Print transformed files to stdout")
    .option("--verbose", "Show more information about the transform process")
    .option(
      "-j, --jscodeshift <options>",
      "Pass options directly to jscodeshift",
    );
};

export const codemodCommand = addTransformOptions(
  new Command()
    .name("codemod")
    .description("CLI tool for running codemods")
    .argument("<codemod>", "Codemod to run (e.g., rewrite-framework-imports)")
    .argument("<source>", "Path to source files or directory to transform"),
).action((codemod, source, options: TransformOptions) => {
  try {
    transform(codemod, source, options);
  } catch (err: any) {
    error(`Error transforming: ${err}`);
    error(err.stack);
    process.exit(1);
  }
});

export const upgradeCommand = addTransformOptions(
  new Command()
    .command("upgrade")
    .description("Upgrade ai package dependencies and apply codemods"),
).action((options: TransformOptions) => {
  try {
    upgrade(options);
  } catch (err: any) {
    error(`Error upgrading: ${err}`);
    error(err.stack);
    process.exit(1);
  }
});



================================================
File: packages/cli/src/commands/shadcn/add.ts
================================================
import { Command } from "commander";
import { spawn } from "cross-spawn";

const REGISTRY_BASE_URL = "https://r.assistant-ui.com";

export const shadcnAdd = new Command()
  .name("add")
  .description("add a component to your project")
  .argument("<components...>", "the components to add")
  .option("-y, --yes", "skip confirmation prompt.", true)
  .option("-o, --overwrite", "overwrite existing files.", false)
  .option(
    "-c, --cwd <cwd>",
    "the working directory. defaults to the current directory.",
    process.cwd(),
  )
  .option("-p, --path <path>", "the path to add the component to.")
  .action((components: string[], opts) => {
    const componentsToAdd = components.map((c) => {
      if (!/^[a-zA-Z0-9-\/]+$/.test(c)) {
        throw new Error(`Invalid component name: ${c}`);
      }
      return `${REGISTRY_BASE_URL}/${encodeURIComponent(c)}`;
    });

    const args = [`shadcn@latest`, "add", ...componentsToAdd];

    if (opts.yes) args.push("--yes");
    if (opts.overwrite) args.push("--overwrite");
    if (opts.cwd) args.push("--cwd", opts.cwd);
    if (opts.path) args.push("--path", opts.path);

    const child = spawn("npx", args, {
      stdio: "inherit",
      shell: true,
    });

    child.on("error", (error) => {
      console.error(`Error: ${error.message}`);
    });

    child.on("close", (code) => {
      if (code !== 0) {
        console.log(`other-package-script process exited with code ${code}`);
      }
    });
  });



================================================
File: packages/cli/src/lib/install-ui-lib.ts
================================================
import * as fs from "fs";
import * as path from "path";
import { execSync } from "child_process";
import { sync as globSync } from "glob";
import * as readline from "readline";
import { detect } from "detect-package-manager";

function askQuestion(query: string): Promise<string> {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
    rl.question(query, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

function isPackageInstalled(pkg: string): boolean {
  const cwd = process.cwd();
  try {
    const pkgJsonPath = path.join(cwd, "package.json");
    if (fs.existsSync(pkgJsonPath)) {
      const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, "utf8"));
      const deps = pkgJson.dependencies || {};
      const devDeps = pkgJson.devDependencies || {};
      if (deps[pkg] || devDeps[pkg]) {
        return true;
      }
    }
  } catch (e) {
    // Fall back to node_modules check below.
  }
  const modulePath = path.join(cwd, "node_modules", ...pkg.split("/"));
  return fs.existsSync(modulePath);
}

export default async function installReactUILib(): Promise<void> {
  const cwd = process.cwd();
  const pattern = "**/*.{js,jsx,ts,tsx}";
  const files = globSync(pattern, {
    cwd,
    ignore: ["**/node_modules/**", "**/dist/**", "**/build/**"],
  });

  let found = false;
  for (const file of files) {
    const fullPath = path.join(cwd, file);
    const content = fs.readFileSync(fullPath, "utf8");
    if (content.includes("@assistant-ui/react-ui")) {
      found = true;
      break;
    }
  }

  if (found) {
    if (isPackageInstalled("@assistant-ui/react-ui")) {
      console.log(
        "@assistant-ui/react-ui is already installed. Skipping installation.",
      );
      return;
    }

    const answer = await askQuestion(
      "React UI imports were added but @assistant-ui/react-ui is not installed. Do you want to install it? (Y/n) ",
    );
    if (answer === "" || answer.toLowerCase().startsWith("y")) {
      const pm = await detect();
      let cmd = "";
      if (pm === "yarn") {
        cmd = "yarn add @assistant-ui/react-ui";
      } else if (pm === "pnpm") {
        cmd = "pnpm add @assistant-ui/react-ui";
      } else if (pm === "bun") {
        cmd = "bun add @assistant-ui/react-ui";
      } else {
        cmd = "npm install @assistant-ui/react-ui";
      }
      try {
        execSync(cmd, { stdio: "inherit" });
      } catch (e) {
        console.error("Installation failed:", e);
      }
    } else {
      console.log("Skipping installation.");
    }
  } else {
    console.log("No React UI imports found; skipping installation.");
  }
}



================================================
File: packages/cli/src/lib/transform-options.ts
================================================
export interface TransformOptions {
  dry?: boolean;
  print?: boolean;
  verbose?: boolean;
  jscodeshift?: string;
}



================================================
File: packages/cli/src/lib/transform.ts
================================================
import { execFileSync } from "child_process";
import debug from "debug";
import path from "path";
import { TransformOptions } from "./transform-options";
import { fileURLToPath } from "url";

const log = debug("codemod:transform");
const error = debug("codemod:transform:error");

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function buildCommand(
  codemodPath: string,
  targetPath: string,
  options: TransformOptions,
): string[] {
  const command = [
    "npx",
    "jscodeshift",
    "-t",
    codemodPath,
    targetPath,
    "--parser",
    "tsx",
    "--ignore-pattern=**/node_modules/**",
    "--ignore-pattern=**/.*/**",
    "--ignore-pattern=**/dist/**",
    "--ignore-pattern=**/build/**",
    "--ignore-pattern=**/*.min.js",
    "--ignore-pattern=**/*.bundle.js",
  ];

  if (options.dry) {
    command.push("--dry");
  }

  if (options.print) {
    command.push("--print");
  }

  if (options.verbose) {
    command.push("--verbose");
  }

  if (options.jscodeshift) {
    command.push(options.jscodeshift);
  }

  return command;
}

export type TransformErrors = {
  transform: string;
  filename: string;
  summary: string;
}[];

function parseErrors(transform: string, output: string): TransformErrors {
  const errors: TransformErrors = [];
  const errorRegex = /ERR (.+) Transformation error/g;
  const syntaxErrorRegex = /SyntaxError: .+/g;

  let match;
  while ((match = errorRegex.exec(output)) !== null) {
    const filename = match[1]!;
    const syntaxErrorMatch = syntaxErrorRegex.exec(output);
    if (syntaxErrorMatch) {
      const summary = syntaxErrorMatch[0];
      errors.push({ transform, filename, summary });
    }
  }

  return errors;
}

export function transform(
  codemod: string,
  source: string,
  transformOptions: TransformOptions,
  options: { logStatus: boolean } = { logStatus: true },
): TransformErrors {
  if (options.logStatus) {
    log(`Applying codemod '${codemod}': ${source}`);
  }
  const codemodPath = path.resolve(__dirname, `../codemods/${codemod}.js`);

  const targetPath = path.resolve(source);
  const command = buildCommand(codemodPath, targetPath, transformOptions);
  const stdout = execFileSync(command[0]!, command.slice(1), {
    encoding: "utf8",
    stdio: "pipe",
  });
  const errors = parseErrors(codemod, stdout);
  if (options.logStatus && errors.length > 0) {
    errors.forEach(({ transform, filename, summary }) => {
      error(
        `Error applying codemod [codemod=${transform}, path=${filename}, summary=${summary}]`,
      );
    });
  }
  return errors;
}



================================================
File: packages/cli/src/lib/upgrade.ts
================================================
import debug from "debug";
import { transform, TransformErrors } from "./transform";
import { TransformOptions } from "./transform-options";
import { SingleBar, Presets } from "cli-progress";
import installReactUILib from "./install-ui-lib";

const bundle = ["v0-8/ui-package-split"];

const log = debug("codemod:upgrade");
const error = debug("codemod:upgrade:error");

/**
 * Runs the upgrade cycle:
 *   - Runs each codemod in the bundle.
 *   - Displays progress using cli-progress.
 *   - After codemods run, checks if any file now imports from "@assistant-ui/react-ui".
 *     If so, prompts the user to install the package.
 */
export async function upgrade(options: TransformOptions) {
  const cwd = process.cwd();
  log("Starting upgrade...");
  const modCount = bundle.length;
  const bar = new SingleBar(
    {
      format: "Progress |{bar}| {percentage}% | ETA: {eta}s || {codemod}",
      hideCursor: true,
    },
    Presets.shades_classic,
  );
  bar.start(modCount, 0, { codemod: "Starting..." });
  const allErrors: TransformErrors = [];
  for (const codemod of bundle) {
    const errors = transform(codemod, cwd, options, { logStatus: false });
    allErrors.push(...errors);
    bar.increment(1, { codemod });
  }
  bar.stop();

  if (allErrors.length > 0) {
    log("Some codemods did not apply successfully to all files. Details:");
    allErrors.forEach(({ transform, filename, summary }) => {
      error(`codemod=${transform}, path=${filename}, summary=${summary}`);
    });
  }

  // After codemods run, check if any file imports "@assistant-ui/react-ui" and prompt for install.
  await installReactUILib();

  log("Upgrade complete.");
}



================================================
File: packages/create-assistant-ui/README.md
================================================
# `create-assistant-ui`

This package contains the command line interface for `create-assistant-ui`.

## Usage

```sh
npm create assistant-ui
```



================================================
File: packages/create-assistant-ui/CHANGELOG.md
================================================
# create-assistant-ui

## 0.0.12

### Patch Changes

- fix: create CLI

## 0.0.11

### Patch Changes

- 72e66db: chore: update dependencies

## 0.0.10

### Patch Changes

- c760cb3: fix: node 20 support

## 0.0.9

### Patch Changes

- 22272e6: chore: update dependencies

## 0.0.8

### Patch Changes

- 345f3d5: chore: update dependencies

## 0.0.7

### Patch Changes

- 4c2bf58: chore: update dependencies

## 0.0.6

### Patch Changes

- 982a6a2: chore: update dependencies

## 0.0.5

### Patch Changes

- ec3b8cc: chore: update dependencies

## 0.0.4

### Patch Changes

- 4c54273: chore: update dependencies

## 0.0.3

### Patch Changes

- 2112ce8: chore: update dependencies

## 0.0.2

### Patch Changes

- 933b8c0: chore: update deps



================================================
File: packages/create-assistant-ui/package.json
================================================
{
  "name": "create-assistant-ui",
  "version": "0.0.12",
  "license": "MIT",
  "dependencies": {
    "chalk": "^5.4.1",
    "commander": "^13.1.0",
    "cosmiconfig": "^9.0.0",
    "cross-spawn": "^7.0.6",
    "tsconfig-paths": "^4.2.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@assistant-ui/tsbuildutils": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/cross-spawn": "^6.0.6",
    "@types/node": "^22.13.1",
    "tsx": "^4.19.2"
  },
  "files": [
    "dist",
    "README.md"
  ],
  "bin": "./dist/index.mjs",
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/create-assistant-ui/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/create-assistant-ui/scripts/build.mts
================================================
import { Build } from "@assistant-ui/tsbuildutils";

await Build.start().transpileTypescript();



================================================
File: packages/create-assistant-ui/src/index.ts
================================================
#!/usr/bin/env node
import { create } from "../../cli/src/commands/create";

process.on("SIGINT", () => process.exit(0));
process.on("SIGTERM", () => process.exit(0));

function main() {
  create.parse();
}

main();



================================================
File: packages/react/README.md
================================================
<a href="https://www.assistant-ui.com">
  <img src="https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/header.svg" alt="assistant-ui Header" width="100%" style="width: 1000px" />
</a>

<p align="center">
  <a href="https://www.assistant-ui.com">Product</a> ·
  <a href="https://www.assistant-ui.com/docs/getting-started">Documentation</a> ·
  <a href="https://www.assistant-ui.com/examples">Examples</a> ·
  <a href="https://discord.gg/S9dwgCNEFs">Discord Community</a> ·
  <a href="https://cal.com/simon-farshid/assistant-ui">Contact Sales</a>
</p>

[![Weave Badge](https://img.shields.io/endpoint?url=https%3A%2F%2Fapp.workweave.ai%2Fapi%2Frepository%2Fbadge%2Forg_GhSIrtWo37b5B3Mv0At3wQ1Q%2F722184017&cacheSeconds=3600)](https://app.workweave.ai/reports/repository/org_GhSIrtWo37b5B3Mv0At3wQ1Q/722184017)
![Backed by Y Combinator](https://img.shields.io/badge/Backed_by-Y_Combinator-orange)

- [⭐️ Star us on GitHub](https://github.com/assistant-ui/assistant-ui)

## The UX of ChatGPT in your React app 💬🚀

**assistant-ui** is an open source Typescript/React library for AI chat.

The library handles essential chat features such as auto-scrolling, accessibility, and real-time updates, while providing easy integration with LangGraph, AI SDK and custom backends.

The API of assistant-ui is inspired by libraries like shadcn/ui and cmdk. Instead of a single monolithic chat component, developers get primitive components that can be fully customized.

We have wide model provider support (OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, Replicate, Ollama) out of the box and the ability to integrate custom APIs.

## Getting Started

You can get started by running `npx assistant-ui create` (new project) or `npx assistant-ui init` (existing project) in your terminal.

[![assistant-ui starter template](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/assistant-ui-starter.gif)](https://youtu.be/k6Dc8URmLjk)

## Features

- shadcn/ui
  - Radix UI-inspired primitives for AI Chat
  - Beautiful shadcn/ui theme to get you started
- Chat UI
  - Streaming, Auto-scrolling, Markdown, Code Highlighting, File Attachments, and more
- Keyboard shortcuts and accessibility features
- Generative UI
  - Map LLM tool calls and JSONs to custom UI components
- Frontend tool calls
  - Let LLMs take action in your frontend application
- Human tool calls
  - Human approvals and input collection
- Chat history and analytics
  - Sign up for assistant-cloud and configure by simply setting an environment variable

## Choose your backend

- AI SDK
  - First class integration into AI SDK by Vercel. Connect to any LLM provider supported by AI SDK.
- LangGraph
  - First class integration into LangGraph and LangGraph Cloud. Connect to any LLM provider supported by LangChain.
- Custom
  - Use assistant-ui as the visualization layer on top your own backend/streaming protocols.

## Customization

The API of assistant-ui is inspired by libraries like Radix UI and cmdk. Instead of a single monolithic chat component, we give you composable primitives and a great starter configuration. You have full control over the look and feel of every pixel while leaving auto-scrolling, LLM streaming and accessibility to us.

![Overview of components](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/components.png)

Sample customization to make a perplexity lookalike:

![Perplexity clone created with assistant-ui](https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/perplexity.gif)

## **Demo Video**

[![Short Demo](https://img.youtube.com/vi/ZW56UHlqTCQ/hqdefault.jpg)](https://youtu.be/ZW56UHlqTCQ)

[![Long Demo](https://img.youtube.com/vi/9eLKs9AM4tU/hqdefault.jpg)](https://youtu.be/9eLKs9AM4tU)

## Traction

Hundreds of projects use assistant-ui to build in-app AI assistants, including companies like LangChain, AthenaIntelligence, Browser Use, and more.

With >50k+ monthly downloads, assistant-ui is the most popular UI library for AI chat.

<img src="https://raw.githubusercontent.com/assistant-ui/assistant-ui/main/.github/assets/growth.png" alt="Growth" style="max-width: 400px;">

## 2025 Q1 Roadmap

- [x] Assistant Cloud
- [x] Chat Persistence
- [x] React 19, Tailwind v4, NextJS 19 support
- [x] Improved Markdown rendering performance
- [x] LangGraph `interrupt()` support
- [x] Open in v0 support
- [ ] Improved documentation (work in progress)
- [ ] OpenAI Realtime Voice (work in progress)
- [ ] Resume interrupted LLM calls (work in progress)
- [ ] Native PDF attachment support
- [ ] Follow-up suggestions

## Next Steps

- [Check out example demos](https://www.assistant-ui.com/)
- [Read our docs](https://www.assistant-ui.com/docs/)
- [Join our Discord](https://discord.com/invite/S9dwgCNEFs)
- [Book a sales call](https://cal.com/simon-farshid/assistant-ui)



================================================
File: packages/react/CHANGELOG.md
================================================
# @assistant-ui/react

## 0.8.5

### Patch Changes

- chore: update deps

## 0.8.4

### Patch Changes

- 4f22af9: fix: infinite rerender bug with useThread

## 0.8.3

### Patch Changes

- 2e299b6: chore: update typescript

## 0.8.2

### Patch Changes

- feat: source content parts

## 0.8.1

### Patch Changes

- ba4a282: fix: cloud env variable loading

## 0.8.0

### Breaking changes

- pre-styled UI components have moved to `@assistant-ui/react-ui`
- run `npx assistant-ui upgrade` to update your codebase
- manual upgrade: change styled component imports from `@assistant-ui/react` to `@assistant-ui/react-ui` (and same with markdown)

* manual upgrade: change styled component imports from `@assistant-ui/react` to `@assistant-ui/react-ui` (and same with Markdown)

## 0.7.91

### Patch Changes

- feat: dispatch events for edit action; allow text area

## 0.7.90

### Patch Changes

- feat: makeAssistantVisible editable

## 0.7.89

### Patch Changes

- 5540aae: feat: local runtime SuggestionAdapter

## 0.7.88

### Patch Changes

- a36fd9e: fix: bind reset method

## 0.7.87

### Patch Changes

- e01b6cd: fix: remove reset() method on local-runtime
- 2dd5abc: feat: makeAssistantReadable
- 4531190: feat: ExportdMessageRepository.fromArray
- 400ff97: feat:thread.import() should reset the MessageRepository

## 0.7.86

### Patch Changes

- 4685652: feat: useToolArgsFieldStatus

## 0.7.85

### Patch Changes

- 3454871: fix: Vite bundler compat

## 0.7.84

### Patch Changes

- fix: pin nanoid version for CJS compat
- Updated dependencies
  - assistant-stream@0.0.21

## 0.7.83

### Patch Changes

- 54b631c: chore: update README

## 0.7.82

### Patch Changes

- 934ee4b: feat: anonymous login and auto-config for cloud

## 0.7.81

### Patch Changes

- 7f7ab5e: refactor: assitant-stream API
- Updated dependencies [7f7ab5e]
  - assistant-stream@0.0.20

## 0.7.80

### Patch Changes

- fix: relax ReadonlyJSONObject requirement on tool/toolUI

## 0.7.79

### Patch Changes

- fix: argsText parsing

## 0.7.78

### Patch Changes

- fix: result sometimes set to undefined

## 0.7.77

### Patch Changes

- f2a1e86: feat: unstable_humanToolNames

## 0.7.76

### Patch Changes

- fix: README

## 0.7.75

### Patch Changes

- 87fa024: fix: remove tailwind from peerdeps

## 0.7.74

### Patch Changes

- 61f278b: fix: drop tailwind peer dependency

## 0.7.73

### Patch Changes

- fix: return from createMessageConverter
- 86ba433: fix: ToolContentPart.args should never be null

## 0.7.72

### Patch Changes

- 797ce9c: fix: ToolContentPart.args should never be null

## 0.7.71

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - assistant-stream@0.0.19

## 0.7.70

### Patch Changes

- 55a9cb2: fix: runConfig for reload / edits
- 2bc6781: feat: send toolCallId to the exeucte callback
- 2bc6781: feat: Tool.experimental_onSchemaValidationError
- 9fefc9d: feat: ThreadViewportContext & multiple renders of the same thread support

## 0.7.69

### Patch Changes

- a7a871e: feat: make ThreadPrimitive.Suggestion method optional
- a7a871e: fix: ThreadPrimitive.Suggestion no longer clears the composer
- a7a871e: feat: expose the useThreadViewportAutoScroll in the API

## 0.7.68

### Patch Changes

- eb4e13c: feat: useExternalMessageConverter megeConfig.joinStrategy

## 0.7.67

### Patch Changes

- ddf468e: fix: import path

## 0.7.66

### Patch Changes

- f4d71da: feat: Edge Runtime onResponse/onError/onfinish, sendExtraMessageFields, unstable_AISDKInterop=v2 support
- 16cd124: feat(local-runtime): native support for AssistantCloud

## 0.7.65

### Patch Changes

- a07d8c1: fix: thread auto-scroll reliability

## 0.7.64

### Patch Changes

- 6703842: feat: codemod to migrate to @assistant-ui/react-ui
- 79f7120: feat: createMessageConverter API

## 0.7.63

### Patch Changes

- 843047d: feat(thread-list): forward model context to thread runtimes

## 0.7.62

### Patch Changes

- 7e5f127: fix: useSmooth unnecessary re-renders

## 0.7.61

### Patch Changes

- bd78a70: feat: ThreadListPrimitive.Root
- 9ea8100: feat: ThreadMessageLike optional toolCallId + args

## 0.7.60

### Patch Changes

- 246ce4e: fix: export getExternalStoreMessages

## 0.7.59

### Patch Changes

- 8ec1f07: feat: AssistantCloudThreadHistoryAdapter
- 4f5d77f: feat: ToolCallContentPart.args should be JSONObject
- 8ec1f07: feat: auto-inject history adapter in local runtime

## 0.7.58

### Patch Changes

- 02996f9: fix: support AISDKInterop + sendMessageId for human+system messages

## 0.7.57

### Patch Changes

- 103efee: fix: mark ChatAdapter types as readonly
- 60bb6ff: fix: memoize MessageRepository.getMessages()

## 0.7.56

### Patch Changes

- dba4dde: feat(ai-sdk): message.metadata.annotations
- efd60fe: fix(ai-sdk): onSwitchToThread

## 0.7.55

### Patch Changes

- 0bf5082: fix: tailwindcss plugin crashes without config

## 0.7.54

### Patch Changes

- 6cb7d10: refactor: rename ModelConfig to ModelContext
- c302933: feat: convertExternalMessages

## 0.7.53

### Patch Changes

- 7618bf3: feat: AI SDK DataStream ReasoningDelta, StartStep support

## 0.7.52

### Patch Changes

- fix: excessive number of classes included via tailwindcss plugin

## 0.7.51

### Patch Changes

- fix: crash when content part is empty

## 0.7.50

### Patch Changes

- fix: properly forward unstable_shouldContinueIgnoreToolNames

## 0.7.49

### Patch Changes

- feat(local-runtime): add temporary shouldContinueIgnoreToolNames override

## 0.7.48

### Patch Changes

- fix: crash

## 0.7.47

### Patch Changes

- a3c6c1a: feat: ensure runtime methods are bound to the object
- a76ea0e: feat: AttachmentAdapter file upload progress update support via generator add callback
- a3c6c1a: feat: useRuntimeState API

## 0.7.46

### Patch Changes

- fix: improved interrupt+Command support
- feat: MessagesFooter UI
- 2713487: feat: styled UI assistant message footer

## 0.7.45

### Patch Changes

- 9934aef: feat(cloud-threadlist): auto initialize threads
- 3a8b55a: feat: styled UI assistant message footer

## 0.7.44

### Patch Changes

- 2f44e9e: refactor: move switchToThread / switchToNewThread to runtime.threads
- 2f44e9e: refactor: rename runtime.threadList to runtime.threads
- 2f44e9e: refactor: drop CloudThreadListItemRuntime
- 2f44e9e: feat: add threads.getById and threads.main
- 2f44e9e: feat: ThreadListItemRuntime.initialize()

## 0.7.43

### Patch Changes

- feat: reverse order of threads in useRemoteThreadListRuntime

## 0.7.42

### Patch Changes

- 9c3961d: fix: event subscriptions triggering on threadList changes

## 0.7.41

### Patch Changes

- 08de9c9: fix: RemoteThreadList should not return an iterator

## 0.7.40

### Patch Changes

- feat: export useRemoteThreadListRuntime

## 0.7.39

### Patch Changes

- 0979334: feat(local-runtime): New ThreadList items should appear at the top of the list
- 22272e6: chore: update dependencies
- Updated dependencies [b44a7ad]
- Updated dependencies [22272e6]
  - assistant-stream@0.0.18

## 0.7.38

### Patch Changes

- 5794b1b: feat: CreateStartRunConfig

## 0.7.37

### Patch Changes

- 799dc79: feat: AppendMessage.sourceId
- 799dc79: feat: StartRunConfig.sourceId

## 0.7.36

### Patch Changes

- 34d2915: feat: widen initialMessages type to ThreadMessageLike
- 4f3834a: refactor: deprecate UIContentPart
- b8b11d3: feat: FileContentPart
- 889a55e: fix: attachment filename should never overflow
- a7d9e41: feat: ComposerRuntime.unstable_on("attachment_add", ...)

## 0.7.35

### Patch Changes

- 345f3d5: chore: update dependencies
- 345f3d5: fix: import errors in react server environments
- 2846559: feat: allow selecting multiple files as attachments

## 0.7.34

### Patch Changes

- 9a3dc93: fix(external-store): metadata & attachments support
- 4c2bf58: chore: update dependencies

## 0.7.33

### Patch Changes

- bb47b90: fix: invalid JSON in argsText should be gracefully handled

## 0.7.32

### Patch Changes

- feat: MessagePrimitive.tools.Override

## 0.7.31

### Patch Changes

- fix: data results should be forwarded via LocalThreadRuntime

## 0.7.30

### Patch Changes

- 982a6a2: chore: update dependencies

## 0.7.29

### Patch Changes

- 75a274f: feat: AssistantRuntimeCore.RenderComponent
- dcf51cb: fix: do not throw on AI SDK annotation packets
- 9ad9e75: fix: mark arrays in message types as readonly
- 75a274f: refactor: drop AssistantRuntimeCore.Provider due to causing app rerenders on runtime switch
- 65de5d6: feat: message.metadata.unstable_data

## 0.7.28

### Patch Changes

- a8ac203: feat: export useThreadListItemRuntime

## 0.7.27

### Patch Changes

- 528cfd3: feat: ExternalStoreAdapter.unstable_Provider
- 3c70ea1: feat: allow customizing thread max width

## 0.7.26

### Patch Changes

- 6a17ec2: feat: useAssistantInstructions disable support

## 0.7.25

### Patch Changes

- 798e9f3: fix: AttachmentRemove should not trigger AttachmentPreviewDialog
- 37e1abc: feat: ComposerRuntime.clearAttachments
- d6b3b79: feat: useRemoteThreadListRuntime

## 0.7.24

### Patch Changes

- fix: ComposerRuntime.send() should not reset role or runConfig

## 0.7.23

### Patch Changes

- feat(edge-runtime): pass RunConfig to backend

## 0.7.22

### Patch Changes

- feat: RunConfig

## 0.7.21

### Patch Changes

- feat: Composer.unstable_on("send", callback)

## 0.7.20

### Patch Changes

- 2c7dec0: feat: useAssistantTool allow disabling tools

## 0.7.19

### Patch Changes

- ec3b8cc: chore: update dependencies

## 0.7.18

### Patch Changes

- 1b16dce: fix: thread initialization
- b0f309a: feat: allow specifying Empty component in thread-config

## 0.7.17

### Patch Changes

- fix: toLanguageModelMessages should include attachments

## 0.7.16

### Patch Changes

- fix: ensure message status is set on runResultStream flush

## 0.7.15

### Patch Changes

- fix: toolResultStream should support JSONSchema params

## 0.7.14

### Patch Changes

- fix: assistantDecoderStream should end current tool call on flush

## 0.7.12

### Patch Changes

- 4c54273: chore: update dependencies
- 4c54273: fix: initialize thread on import

## 0.7.11

### Patch Changes

- 0f88efb: fix: external store thread list should not crash

## 0.7.10

### Patch Changes

- 1eab7b4: refactor: ThreadList

## 0.7.9

### Patch Changes

- 2276e57: fix: cjs builds
- e8752ac: fix: ThreadList a11y improvements

## 0.7.8

### Patch Changes

- 589d37b: feat: ThreadList / ThreadListItem UI
- 2112ce8: chore: update dependencies

## 0.7.7

### Patch Changes

- 10d70db: fix: remove console.log
- c3027a0: fix: disallow nested ThreadConfigs

## 0.7.6

### Patch Changes

- 933b8c0: chore: update deps
- 09a2a38: fix: TextContentPartProvider should support contentPartRuntime.getState()

## 0.7.5

### Patch Changes

- c59d8b5: chore: update dependencies

## 0.7.4

### Patch Changes

- 5462390: fix: Thread.Messages AssistantEditComposer support
- 0fb80c1: feat: ThreadConfig.UserMessage / AssistantMessage / EditComposer

## 0.7.3

### Patch Changes

- 0dcd9cf: feat: mark message types as readonly

## 0.7.2

### Patch Changes

- 7fa9a1b: feat: ThreadMessageLike metadata support
- 1a1f4a5: feat: message metadata for all message types

## 0.7.1

### Patch Changes

- c2f75e5: feat: ThreadListRuntime API types

## 0.7.0

### Breaking Changes

- c6e886b: refactor!: drop deprecated features

### Patch Changes

- 2912fda: feat: ThreadListItemPrimitive

## 0.5.100

### Patch Changes

- b5f92fe: fix(external-store): crash on cancel when using separate converter, fix branching

## 0.5.99

### Patch Changes

- cdcfe1e: feat: ThreadListItemPrimitive (wip)
- cdcfe1e: fix: add React 19 RC to peerDeps
- 94feab2: feat: ComposerState.role / ComposerRuntime.setRole
- 472c548: feat: ThreadListPrimitive
- 14da684: feat: AppendMessage.startRun flag
- 1ada091: chore: update deps

## 0.5.98

### Patch Changes

- ff5b86c: build: refactor build script into @assistant-ui/tsbuildutils
- ff5b86c: fix: better ESM compatibility
- ff5b86c: chore: update deps

## 0.5.97

### Patch Changes

- 9a9c01d: feat(edge-runtime): add unstable_AISDKInterop flag

## 0.5.96

### Patch Changes

- fix: properly pass initialMessages to LocalRuntime

## 0.5.95

### Patch Changes

- fix: include generated css files in bundle

## 0.5.94

### Patch Changes

- fix: toContentPartStatus support for parallel tool calls

## 0.5.93

### Patch Changes

- d2375cd: build: disable bundling in UI package releases

## 0.5.92

### Patch Changes

- f6d197a: feat: Edge Runtime Server Accessible Ids (temp)

## 0.5.91

### Patch Changes

- 56f80fa: fix: tailwind plugin turbopack interop

## 0.5.90

### Patch Changes

- 2090544: fix: attachments infinite rerender bug
- be04b5b: feat: Unstable_AudioContentPart (wip)
- 2090544: fix: Attachment preview accessibility
- fb32e61: chore: update deps
- fb32e61: feat: react-19 support

## 0.5.89

### Patch Changes

- fd9ff67: fix(local-runtime): update capabilities on initial render

## 0.5.88

### Patch Changes

- 0afecda: fix(ai-sdk): server-side maxSteps interop

## 0.5.87

### Patch Changes

- b38165d: feat: export useAttachmentRuntime, useAttachment, FeedbackAdapter
- a1bfd26: fix(ai-sdk): DataStream interop without tool call streaming
- b38165d: feat(ai-sdk): Adapters support (attachment, feedback, speech, threadManager)

## 0.5.86

### Patch Changes

- fix: do not cache adapter in useEdgeRuntime

## 0.5.85

### Patch Changes

- 3a602b9: fix: correctly handle new thread creation

## 0.5.84

### Patch Changes

- ba5116f: feat: useInlineRender hook

## 0.5.83

### Patch Changes

- c38a018: feat: ThreadListRuntime

## 0.5.82

### Patch Changes

- 0edadd1: feat: useThreadModelConfig API
- 1aeda53: feat: Runtime.path API
- 0c8277e: feat: MessageRuntime.unstable_getCopyText API
- 91d3951: feat: MessageRuntime.getContentPartByToolCallId
- cf6861c: refactor!: simplify SpeechSynthesisAdapter to accept a text string
- 7c76939: feat: ThreadRuntime.getMesssageById

## 0.5.79

### Patch Changes

- feat: allow out of order tool args streaming

## 0.5.78

### Patch Changes

- dba0082: fix: border should apply to all aui-root children
- b182ea5: feat: Events API (experimental)

## 0.5.77

### Patch Changes

- 0a3bd06: feat: Attachment image thumbnail and previews

## 0.5.76

### Patch Changes

- c3806f8: fix: do not export internal Runtime types
- 899b963: refactor: add BaseThreadRuntimeCore class
- 899b963: feat: work towards Edit Composer attachment support
- 899b963: refactor: remove composerState.attachmentAccept, add composerRuntime.getAttachmentAccept()
- 8c80f2a: feat: MessageState.submittedFeedback state
- 809c5c1: feat: New Attachment UI

## 0.5.75

### Patch Changes

- 31702b2: feat: MessageRuntime.stopSpeaking MessageState.speech state
- 44bfecd: refactor: move primitive types under the same namespace as the primitive components

## 0.5.74

### Patch Changes

- 3d31f10: refactor: deprecate primitive-hooks
- cf872da: feat: AttachmentPrimitive

## 0.5.73

### Patch Changes

- fb46305: chore: update dependencies
- e225116: feat(ui): add component override option for ThreadWelcome
- 0ff22a7: feat: switch to DataStream transfer protocol for edge runtime
- 378ee99: refactor: rename maxToolRoundtrips to maxSteps
- 378ee99: feat: server-side tool roundtrips support

## 0.5.72

### Patch Changes

- d0db602: fix: useDangerousInBrowserRuntime correct options forwarding

## 0.5.71

### Patch Changes

- 55942d8: fix: useContentPartText backwards compat type
- e455aff: feat: FollowupSuggestions
- f7c156b: feat: mark new runtime API methods as stable
- f6a832e: chore: update dependencies
- 2b7c6fe: refactor: define interface types for the new runtime API

## 0.5.70

### Patch Changes

- 3df0061: fix: TextContentPartProvider missing fields

## 0.5.69

### Patch Changes

- 46f91c2: feat(langgraph): allow disabling autocancellation of pending tool calls

## 0.5.68

### Patch Changes

- 96b9d1f: feat: new Runtime API part 8
- 9fd85da: fix: ensure branch picker is supported before showing it
- d8bd40b: chore: update dependencies
- 42156cf: refactor: drop ReactThreadRuntimeCore, unstable_synchronizer

## 0.5.67

### Patch Changes

- cfa8844: feat: useComposerRuntime hook
- 70720ba: feat: lift EditComposer to runtime layer

## 0.5.66

### Patch Changes

- 325b049: fix: include attachments prop in the useExternalMessageConverter
- df9ec8f: feat: new Runtime API rollout part 2
- 3f549b2: refactor: rename internal export

## 0.5.65

### Patch Changes

- 27208fb: fix: only include "use client" banner in ESM builds

## 0.5.64

### Patch Changes

- ed24305: fix: add newline after "use client" for .js builds

## 0.5.63

### Patch Changes

- c438773: feat: allow disabling ComposerInput keyboard shortcuts
- e1ae3d0: chore: update dependencies

## 0.5.62

### Patch Changes

- cd1b286: fix: BranchPicker styles

## 0.5.61

### Patch Changes

- 88957ac: feat: New unified Runtime API (part 1/n)
- 1a99132: feat: ThreadRuntime.Composer subscribe
- 3187013: feat: add status, attachments and metadata fields to all messages

## 0.5.60

### Patch Changes

- 926dce5: feat: Feedback Primtives, UI and Adapter
- 155d6e7: chore: update dependencies
- f80226f: feat: ThreadActions.getModelConfig

## 0.5.59

### Patch Changes

- 0f547a9: fix: useSmooth should work inside TextContentPartProvider

## 0.5.58

### Patch Changes

- 6507071: fix: TextContentPartProvider text streaming support
- 6507071: feat: TextContentPartProvider isRunning

## 0.5.57

### Patch Changes

- 745d6e1: fix(runtimes/external-store): switch to thread should correctly copy the entire store
- 745d6e1: fix: only deprecate the null usage of switchToThread

## 0.5.56

### Patch Changes

- e4863bb: feat(runtimes/external): add onSwitchToNewThread callback
- e4863bb: feat: add attachmentAccept to ThreadComposer

## 0.5.55

### Patch Changes

- b0a22e3: feat: runtime.switchToNewThread()
- 11ca453: refactor: drop useModelConfig Context - use useAssistantActions instead

## 0.5.54

### Patch Changes

- 0f99aa6: feat: New Context API
- c348553: chore: update dependencies

## 0.5.53

### Patch Changes

- f0f7497: feat: MessageContent Empty should be displayed for empty messages with empty text part
- 8555685: feat: allow editing assistant/system messages
- 892b019: fix: Empty should default to the provided Text component

## 0.5.52

### Patch Changes

- c0f975a: feat: TextContentPartProvider

## 0.5.51

### Patch Changes

- 164e46c: feat: ignore edits with text part unchanged
- 5eccae7: fix: createActionButton disabled handling

## 0.5.50

### Patch Changes

- 04f6fc8: chore: update deps

## 0.5.49

### Patch Changes

- 7ed296b: fix: make AppendMessage attachments field optional for now

## 0.5.48

### Patch Changes

- 25a711d: fix: user message action bar css

## 0.5.47

### Patch Changes

- a81b18f: feat: ComposerPrimitive.AddAttachment
- 44d08bd: feat: styled components for attachments
- b48fbcc: feat: UserMessageAttachment UI
- cc5e7d4: perf: memoize tool Ul components
- bdd3084: feat: allow runtimes to signal support for attachments
- 7dcab47: fix: message copy handling for runtimes
- a22e6bb: feat: AttachmentAdapter.accept allow attachment adapters to specify supported file types
- 9e00772: feat: add composer attachments state
- d2580d3: feat: SimpleImageAttachmentAdapter
- c845fcf: feat: allow sending attachment-only messages
- 3ba193e: feat: AttachmentContext
- d2580d3: feat: SimpleTextAttachmentAdapter
- 3b0f20b: feat: MessagePrimitive.Attachments
- 3ba193e: feat: ComposerPrimitive.Attachments
- d2580d3: feat: CompositeAttachmentAdapter
- 44d08bd: feat: Edge/Local runtime AttachmentAdapter support

## 0.5.46

### Patch Changes

- 0a4b8d7: feat: adjust the override order of tool UIs
- 34ad491: feat: ThreadConfig.ToolFallback
- 34ad491: feat: ThreadConfig.tools
- 0a4b8d7: fix: tool UI fallback should not override makeAssistantToolUI definitions

## 0.5.45

### Patch Changes

- fb8e58f: feat: add thread runtime threadId

## 0.5.44

### Patch Changes

- b2801ce: feat(styling): cursor-not-allowed when composer input is disabled
- 0aa4e6b: fix: use-smooth-state should notdesync

## 0.5.43

### Patch Changes

- 3962831: feat: useExternalMessageConverter API
- 85defe1: feat: allow string content in ThreadMessageLike
- 6f7ccf7: feat: add toolName to addToolResult callback
- 6f7ccf7: feat: thread converter should ignore empty text parts

## 0.5.42

### Patch Changes

- c8b98b6: feat: animate composer border color on focus
- 800eb9e: fix: error on switchToThread / switchToNewThread
- 8768c67: feat: support shadcn scroll area

## 0.5.41

### Patch Changes

- f526279: feat: SpeechSyntehsis
- e8aa697: refactor: remove unsupported external runtime onCopy callback

## 0.5.40

### Patch Changes

- 4333382: fix(runtime/edge): handle maxToolRoundtrips

## 0.5.39

### Patch Changes

- ab1160c: fix: switchToThread should persist maxToolRoundtrips

## 0.5.38

### Patch Changes

- 554a423: chore: update deps

## 0.5.37

### Patch Changes

- 60c0fdc: fix: remove Composer focus ring when using @tailwindcss/forms
- edbab24: feat(runtimes/local): reset thread

## 0.5.36

### Patch Changes

- edb5a16: feat: DangerousInBrowserRuntime
- f8e2cf1: fix: @tailwindcss/forms input border

## 0.5.35

### Patch Changes

- 53cf707: fix: do not require content in ChatModelRunResult

## 0.5.34

### Patch Changes

- 3178788: feat: custom AssistantMessage metadata

## 0.5.33

### Patch Changes

- c154b8f: feat(runtime/edge): allow extra headers & body

## 0.5.32

### Patch Changes

- cd70d4f: refactor: rewrite ai-sdk integration to use external runtime

## 0.5.31

### Patch Changes

- 34621cc: feat(runtimes/edge): getEdgeRuntimeResponse API
- 2df3e73: fix: CircleStopIcon invisible on safari
- 1b9ded0: feat: lift thread composer state to ThreadRuntime.Composer

## 0.5.30

### Patch Changes

- ccf5fef: fix: do not capture enter key during IME composition events

## 0.5.29

### Patch Changes

- 556001f: chore: update deps
- 556001f: feat: tool call cancellation support

## 0.5.28

### Patch Changes

- 915b5b7: feat: expose streamUtils
- 9a55735: chore: update deps

## 0.5.27

### Patch Changes

- dbf1042: fix: minor styling fixes
- dbf1042: chore: update deps

## 0.5.26

### Patch Changes

- 440b051: fix: sending messages when thread is empty

## 0.5.25

### Patch Changes

- 0445cdf: fix: disallow sending new messages when last message is in requires-action state
- 0445cdf: refactor: remove Runtime.isRunning / auto-infer isRunning state from last message state
- 71f4b77: feat: update Tooltip styles

## 0.5.24

### Patch Changes

- a7e8ef6: refactor: rewrite external store sync
- 6629dd8: fix: render loop if a message ID is used twice

## 0.5.23

### Patch Changes

- f83e4d1: feat: LocalRuntime export / import

## 0.5.22

### Patch Changes

- 134d39e: fix: undo moving internal utilities to /react/internal

## 0.5.20

### Patch Changes

- de04d92: feat: loading status & smooth streaming interop
- 3cc67f2: refactor: move internal utilities to @assistant-ui/react/internal

## 0.5.19

### Patch Changes

- 2534938: feat: Message.Content Empty component

## 0.5.18

### Patch Changes

- 0302235: fix(external-store): add initial messages to message repository

## 0.5.17

### Patch Changes

- 4b4f9c8: feat(local-runtime): AsyncGenerator support

## 0.5.16

### Patch Changes

- 9dc942f: feat: useThread.isDisabled flag

## 0.5.15

### Patch Changes

- 0418c73: fix(runtimes/external-store): invalidate cache when isRunning changes during autoStatus

## 0.5.12

### Patch Changes

- 8688a9f: feat(runtimes/external-store): loosen the return type for convertMessage callback

## 0.5.11

### Patch Changes

- fc6bc35: feat: initialMessages SSR support

## 0.5.10

### Patch Changes

- 1c6bf72: feat(tailwindcss): allow customizing colors directly in tailwind config

## 0.5.9

### Patch Changes

- a216fbf: chore: update deps

## 0.5.6

### Patch Changes

- e5e6b20: feat(runtime): BranchPicker feature detection

## 0.5.5

### Patch Changes

- f26783a: feat(ui): allow ReactNode in SuggestionConfig.text

## 0.5.4

### Patch Changes

- f2d7590: fix(rsc): hide copy message button

## 0.5.3

### Patch Changes

- 1acdf45: feat: external store runtime

## 0.5.2

### Patch Changes

- 2d7a8bd: fix: markdown loading indicator
- 2d7a8bd: fix: ScrollToBottom visbility bug
- 2d7a8bd: fix: text content part data-status field

## 0.5.1

### Patch Changes

- ee38c0c: feat: message status v2
- ee38c0c: fix(runtimes/edge): wait for serverside tool call results before reporting onFinish
- 2baa898: chore: v5

## 0.4.6

### Patch Changes

- bc77b4f: feat(runtimes/edge): dynamic model creator functions
- e220617: feat(runtimes/edge): client side API key, model name, model parameters specification

## 0.4.4

### Patch Changes

- 998081b: fix: reduce specificity of built-in CSS styles

## 0.4.3

### Minor Changes

- feat: scrolling to bottom during streaming is now instant
- fix: useSmooth gets triggered during branch switch

## 0.4.2

### Minor Changes

- fix: issue with forwarding props to primitives

## 0.4.1

### Minor Changes

- fix: useSmooth scrolling performance in dev mode

## 0.4.0

### Minor Changes

- e0e51cf: refactor!: Rename AssistantMessage to ThreadAssistantMessage
- e0e51cf: refactor!: Rename UserMessage to ThreadUserMessage
- 679cd54: feat: system message support

### Patch Changes

- c7ba6a2: feat: Edge Runtime API
- e0e51cf: feat: add styled UI components

## 0.3.5

### Patch Changes

- ef25706: feat: Code Header and Syntax Highlighter support

## 0.3.3

### Patch Changes

- b5aa29f: feat: smooth streaming by default

## 0.3.2

### Patch Changes

- 1a8919b: feat: smooth text streaming

## 0.3.1

### Patch Changes

- 05fd5d6: feat: runtime capabilities API

## 0.3.0

### Minor Changes

- 5b68f4a: refactor!: drop Message.InProgress support

### Patch Changes

- 3dd7384: fix: better message hover state tracking
- 23f474e: fix: remove warning about useLayoutEffect in SSR

## 0.2.4

### Patch Changes

- c373fc9: feat: AssistantModalPrimitive.Anchor

## 0.2.3

### Patch Changes

- be2c26b: fix: Vercel useAssistant BranchPicker duplicates bug

## 0.2.2

### Patch Changes

- 62e9f19: feat: AssistantRuntime newThread
- 611fdcc: feat: useAssistantActions
- ca0eaa1: feat: Programmatic Interactions API

## 0.2.1

### Patch Changes

- d52c345: feat: Primitive Prop Types

## 0.2.0

### Minor Changes

- de20b1c: feat!: ContentPartText is now a <p> element
- 2ab2cab: feat!: experimental features are now marked as stable

## 0.1.12

### Patch Changes

- 904556d: feat: ComposerContext focus() API
- 33ae8f9: feat: AssistantModalPrimitive

## 0.1.11

### Patch Changes

- fd6a202: feat: Primitive Hook useThreadViewportAutoScroll
- c2a6b22: fix: improved Viewport autoscroll handling
- c2a6b22: fix: more reliable escape hotkey handling
- c2a6b22: feat: add "role" field to AppendMessage

## 0.1.10

### Patch Changes

- 269b32f: feat: Primitive Hooks API
- 2867923: feat: Composer API Docs

## 0.1.9

### Patch Changes

- ab16a99: feat: useMessageUtils Context API
- ab16a99: feat: useThreadActions Context API
- ab16a99: fix: make all Context APIs read-only

## 0.1.8

### Patch Changes

- 8513f9a: feat: ToolUI addResult API

## 0.1.7

### Patch Changes

- 36f3a1f: fix: add DisplayName to primitive components for better error logs
- 36f3a1f: chore: upgrade to radix-ui 1.1
- 36f3a1f: chore: update dependencies

## 0.1.6

### Patch Changes

- a6769d5: feat: ContentPartComponent types
- 52236ab: feat: new default chat bubble design

## 0.1.5

### Patch Changes

- 671dc86: feat: Tool Render functions

## 0.1.4

### Patch Changes

- a73b50f: fix: ComposerRoot onSubmit should be called when using keyboard shortcuts

## 0.1.3

### Patch Changes

- 6e9528d: build: add changesets
- 6e9528d: feat: add useAssistantTool API



================================================
File: packages/react/package.json
================================================
{
  "name": "@assistant-ui/react",
  "description": "Typescript/React library for AI Chat",
  "keywords": [
    "radix-ui",
    "nextjs",
    "vercel",
    "ai-sdk",
    "react",
    "components",
    "ui",
    "frontend",
    "tailwind",
    "shadcn",
    "assistant",
    "openai",
    "ai",
    "chat",
    "chatbot",
    "copilot",
    "assistant",
    "ai-chat",
    "ai-chatbot",
    "ai-assistant",
    "ai-copilot",
    "chatgpt",
    "gpt4",
    "gpt-4",
    "conversational-ui",
    "conversational-ai"
  ],
  "version": "0.8.5",
  "license": "MIT",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./edge": {
      "types": "./dist/edge.d.ts",
      "import": "./dist/edge.mjs",
      "require": "./dist/edge.js"
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "generated",
    "edge",
    "src",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "dependencies": {
    "@ai-sdk/provider": "^1.0.7",
    "@radix-ui/primitive": "^1.1.1",
    "@radix-ui/react-compose-refs": "^1.1.1",
    "@radix-ui/react-context": "^1.1.1",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-primitive": "^2.0.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-use-callback-ref": "^1.1.0",
    "@radix-ui/react-use-escape-keydown": "^1.1.0",
    "assistant-stream": "workspace:^",
    "json-schema": "^0.4.0",
    "nanoid": "3.3.8",
    "react-textarea-autosize": "^8.5.7",
    "secure-json-parse": "^3.0.2",
    "zod": "^3.24.1",
    "zod-to-json-schema": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "peerDependencies": {
    "@types/react": "*",
    "@types/react-dom": "*",
    "react": "^18 || ^19 || ^19.0.0-rc",
    "react-dom": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@types/react-dom": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/tsbuildutils": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/json-schema": "^7.0.15",
    "@types/node": "^22.13.1",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "tsx": "^4.19.2"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "https://github.com/assistant-ui/assistant-ui/tree/main/packages/react"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  },
  "engines": {
    "node": ">=20.10.0"
  }
}



================================================
File: packages/react/tsconfig.declarations.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "declarationDir": "./dist",
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "paths": null
  },
  "include": ["src"]
}



================================================
File: packages/react/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react/edge/README.md
================================================
This directory exists to support subpath imports for TypeScript projects using --moduleResolution node.


================================================
File: packages/react/edge/package.json
================================================
{
  "main": "../dist/edge.js",
  "module": "../dist/edge.mjs",
  "types": "../dist/edge.d.ts"
}


================================================
File: packages/react/scripts/build.mts
================================================
import { Build } from "@assistant-ui/tsbuildutils";

await Build.start().transpileTypescript();



================================================
File: packages/react/src/edge.ts
================================================
export {
  createEdgeRuntimeAPI,
  getEdgeRuntimeResponse,
} from "./runtimes/edge/createEdgeRuntimeAPI";



================================================
File: packages/react/src/index.ts
================================================
export * from "./api";
export * from "./cloud";
export * from "./context";
export * from "./model-context";
export * from "./primitives";
export * from "./runtimes";
export * from "./types";

export { useToolArgsFieldStatus as unstable_useToolArgsFieldStatus } from "./utils/json/parse-partial-json";

export * as INTERNAL from "./internal";



================================================
File: packages/react/src/internal.ts
================================================
export type { ThreadRuntimeCore } from "./runtimes/core/ThreadRuntimeCore";
export type { ThreadListRuntimeCore } from "./runtimes/core/ThreadListRuntimeCore";
export { DefaultThreadComposerRuntimeCore } from "./runtimes/composer/DefaultThreadComposerRuntimeCore";
export { CompositeContextProvider } from "./utils/CompositeContextProvider";
export { MessageRepository } from "./runtimes/utils/MessageRepository";
export { BaseAssistantRuntimeCore } from "./runtimes/core/BaseAssistantRuntimeCore";
export { generateId } from "./utils/idUtils";
export { AssistantRuntimeImpl } from "./api/AssistantRuntime";
export {
  ThreadRuntimeImpl,
  type ThreadRuntimeCoreBinding,
  type ThreadListItemRuntimeBinding,
} from "./api/ThreadRuntime";
export { fromThreadMessageLike } from "./runtimes/external-store/ThreadMessageLike";
export { getAutoStatus } from "./runtimes/external-store/auto-status";
export { EdgeRuntimeRequestOptionsSchema } from "./runtimes/edge/EdgeRuntimeRequestOptions";

export * from "./utils/smooth";



================================================
File: packages/react/src/api/AssistantRuntime.ts
================================================
import { AssistantRuntimeCore } from "../runtimes/core/AssistantRuntimeCore";
import { ModelContextProvider } from "../model-context/ModelContextTypes";
import { ThreadRuntime } from "./ThreadRuntime";
import { Unsubscribe } from "../types";
import { ThreadListRuntime, ThreadListRuntimeImpl } from "./ThreadListRuntime";
import { ExportedMessageRepository, ThreadMessageLike } from "../runtimes";

export type AssistantRuntime = {
  /**
   * The threads in this assistant.
   */
  readonly threads: ThreadListRuntime;

  /**
   * The currently selected main thread. Equivalent to `threads.main`.
   */
  readonly thread: ThreadRuntime;

  /**
   * @deprecated This field was renamed to `threads`.
   */
  readonly threadList: ThreadListRuntime;

  /**
   * Switch to a new thread.
   *
   * @deprecated This method was moved to `threads.switchToNewThread`.
   */
  switchToNewThread(): void;

  /**
   * Switch to a thread.
   *
   * @param threadId The thread ID to switch to.
   * @deprecated This method was moved to `threads.switchToThread`.
   */
  switchToThread(threadId: string): void;

  /**
   * Register a model context provider. Model context providers are configuration such as system message, temperature, etc. that are set in the frontend.
   *
   * @param provider The model context provider to register.
   */
  registerModelContextProvider(provider: ModelContextProvider): Unsubscribe;

  /**
   * @deprecated This method was renamed to `registerModelContextProvider`.
   */
  registerModelConfigProvider(provider: ModelContextProvider): Unsubscribe;

  /**
   * @deprecated Deprecated. Please use `runtime.threads.main.import(ExportedMessageRepository.fromArray(initialMessages))`.
   */
  reset: unknown; // make it a type error
};

export class AssistantRuntimeImpl implements AssistantRuntime {
  public readonly threads;
  public get threadList() {
    return this.threads;
  }

  public readonly _thread: ThreadRuntime;

  public constructor(private readonly _core: AssistantRuntimeCore) {
    this.threads = new ThreadListRuntimeImpl(_core.threads);
    this._thread = this.threads.main;
  }

  protected __internal_bindMethods() {
    this.switchToNewThread = this.switchToNewThread.bind(this);
    this.switchToThread = this.switchToThread.bind(this);
    this.registerModelContextProvider =
      this.registerModelContextProvider.bind(this);
    this.registerModelConfigProvider =
      this.registerModelConfigProvider.bind(this);
    this.reset = this.reset.bind(this);
  }

  public get thread() {
    return this._thread;
  }

  public switchToNewThread() {
    return this._core.threads.switchToNewThread();
  }

  public switchToThread(threadId: string) {
    return this._core.threads.switchToThread(threadId);
  }

  public registerModelContextProvider(provider: ModelContextProvider) {
    return this._core.registerModelContextProvider(provider);
  }

  public registerModelConfigProvider(provider: ModelContextProvider) {
    return this.registerModelContextProvider(provider);
  }

  public reset({
    initialMessages,
  }: { initialMessages?: ThreadMessageLike[] } = {}) {
    return this._core.threads
      .getMainThreadRuntimeCore()
      .import(ExportedMessageRepository.fromArray(initialMessages ?? []));
  }
}



================================================
File: packages/react/src/api/AttachmentRuntime.ts
================================================
import { SubscribableWithState } from "./subscribable/Subscribable";

import { ComposerRuntimeCoreBinding } from "./ComposerRuntime";
import {
  Attachment,
  CompleteAttachment,
  PendingAttachment,
  Unsubscribe,
} from "../types";
import { AttachmentRuntimePath } from "./RuntimePathTypes";

type MessageAttachmentState = CompleteAttachment & {
  readonly source: "message";
};

type ThreadComposerAttachmentState = PendingAttachment & {
  readonly source: "thread-composer";
};

type EditComposerAttachmentState = Attachment & {
  readonly source: "edit-composer";
};

export type AttachmentState =
  | ThreadComposerAttachmentState
  | EditComposerAttachmentState
  | MessageAttachmentState;

type AttachmentSnapshotBinding<Source extends AttachmentRuntimeSource> =
  SubscribableWithState<
    AttachmentState & { source: Source },
    AttachmentRuntimePath & { attachmentSource: Source }
  >;

type AttachmentRuntimeSource = AttachmentState["source"];

export type AttachmentRuntime<
  TSource extends AttachmentRuntimeSource = AttachmentRuntimeSource,
> = {
  readonly path: AttachmentRuntimePath & { attachmentSource: TSource };
  readonly source: TSource;
  getState(): AttachmentState & { source: TSource };
  remove(): Promise<void>;
  subscribe(callback: () => void): Unsubscribe;
};

export abstract class AttachmentRuntimeImpl<
  Source extends AttachmentRuntimeSource = AttachmentRuntimeSource,
> implements AttachmentRuntime
{
  public get path() {
    return this._core.path;
  }

  public abstract get source(): Source;

  constructor(private _core: AttachmentSnapshotBinding<Source>) {}

  protected __internal_bindMethods() {
    this.getState = this.getState.bind(this);
    this.remove = this.remove.bind(this);
    this.subscribe = this.subscribe.bind(this);
  }

  public getState(): AttachmentState & { source: Source } {
    return this._core.getState();
  }

  public abstract remove(): Promise<void>;

  public subscribe(callback: () => void) {
    return this._core.subscribe(callback);
  }
}

abstract class ComposerAttachmentRuntime<
  Source extends "thread-composer" | "edit-composer",
> extends AttachmentRuntimeImpl<Source> {
  constructor(
    core: AttachmentSnapshotBinding<Source>,
    private _composerApi: ComposerRuntimeCoreBinding,
  ) {
    super(core);
  }

  public remove() {
    const core = this._composerApi.getState();
    if (!core) throw new Error("Composer is not available");
    return core.removeAttachment(this.getState().id);
  }
}

export class ThreadComposerAttachmentRuntimeImpl extends ComposerAttachmentRuntime<"thread-composer"> {
  public get source(): "thread-composer" {
    return "thread-composer";
  }
}

export class EditComposerAttachmentRuntimeImpl extends ComposerAttachmentRuntime<"edit-composer"> {
  public get source(): "edit-composer" {
    return "edit-composer";
  }
}

export class MessageAttachmentRuntimeImpl extends AttachmentRuntimeImpl<"message"> {
  public get source(): "message" {
    return "message";
  }

  constructor(core: AttachmentSnapshotBinding<"message">) {
    super(core);
  }

  public remove(): never {
    throw new Error("Message attachments cannot be removed");
  }
}



================================================
File: packages/react/src/api/ComposerRuntime.ts
================================================
import { Attachment, PendingAttachment } from "../types/AttachmentTypes";
import {
  ComposerRuntimeCore,
  ComposerRuntimeEventType,
  ThreadComposerRuntimeCore,
} from "../runtimes/core/ComposerRuntimeCore";
import { Unsubscribe } from "../types";
import { SubscribableWithState } from "./subscribable/Subscribable";
import { LazyMemoizeSubject } from "./subscribable/LazyMemoizeSubject";
import {
  AttachmentRuntime,
  AttachmentState,
  EditComposerAttachmentRuntimeImpl,
  ThreadComposerAttachmentRuntimeImpl,
} from "./AttachmentRuntime";
import { ShallowMemoizeSubject } from "./subscribable/ShallowMemoizeSubject";
import { SKIP_UPDATE } from "./subscribable/SKIP_UPDATE";
import { ComposerRuntimePath } from "./RuntimePathTypes";
import { MessageRole, RunConfig } from "../types/AssistantTypes";
import { EventSubscriptionSubject } from "./subscribable/EventSubscriptionSubject";

export type ThreadComposerRuntimeCoreBinding = SubscribableWithState<
  ThreadComposerRuntimeCore | undefined,
  ComposerRuntimePath & { composerSource: "thread" }
>;

export type EditComposerRuntimeCoreBinding = SubscribableWithState<
  ComposerRuntimeCore | undefined,
  ComposerRuntimePath & { composerSource: "edit" }
>;

export type ComposerRuntimeCoreBinding = SubscribableWithState<
  ComposerRuntimeCore | undefined,
  ComposerRuntimePath
>;

type BaseComposerState = {
  readonly canCancel: boolean;
  readonly isEditing: boolean;
  readonly isEmpty: boolean;

  readonly text: string;
  readonly role: MessageRole;
  readonly attachments: readonly Attachment[];
  readonly runConfig: RunConfig;
};

export type ThreadComposerState = BaseComposerState & {
  readonly type: "thread";

  readonly attachments: readonly PendingAttachment[];
};

export type EditComposerState = BaseComposerState & {
  readonly type: "edit";
};

export type ComposerState = ThreadComposerState | EditComposerState;

const EMPTY_ARRAY = Object.freeze([]);
const EMPTY_OBJECT = Object.freeze({});
const getThreadComposerState = (
  runtime: ThreadComposerRuntimeCore | undefined,
): ThreadComposerState => {
  return Object.freeze({
    type: "thread",

    isEditing: runtime?.isEditing ?? false,
    canCancel: runtime?.canCancel ?? false,
    isEmpty: runtime?.isEmpty ?? true,

    attachments: runtime?.attachments ?? EMPTY_ARRAY,
    text: runtime?.text ?? "",
    role: runtime?.role ?? "user",
    runConfig: runtime?.runConfig ?? EMPTY_OBJECT,

    value: runtime?.text ?? "",
  });
};

const getEditComposerState = (
  runtime: ComposerRuntimeCore | undefined,
): EditComposerState => {
  return Object.freeze({
    type: "edit",

    isEditing: runtime?.isEditing ?? false,
    canCancel: runtime?.canCancel ?? false,
    isEmpty: runtime?.isEmpty ?? true,

    text: runtime?.text ?? "",
    role: runtime?.role ?? "user",
    attachments: runtime?.attachments ?? EMPTY_ARRAY,
    runConfig: runtime?.runConfig ?? EMPTY_OBJECT,

    value: runtime?.text ?? "",
  });
};

export type ComposerRuntime = {
  readonly path: ComposerRuntimePath;
  readonly type: "edit" | "thread";
  getState(): ComposerState;

  getAttachmentAccept(): string;
  addAttachment(file: File): Promise<void>;

  setText(text: string): void;
  setRole(role: MessageRole): void;
  setRunConfig(runConfig: RunConfig): void;

  reset(): Promise<void>;
  clearAttachments(): Promise<void>;

  send(): void;
  cancel(): void;
  subscribe(callback: () => void): Unsubscribe;
  getAttachmentByIndex(idx: number): AttachmentRuntime;
};

export abstract class ComposerRuntimeImpl implements ComposerRuntime {
  public get path() {
    return this._core.path;
  }

  public abstract get type(): "edit" | "thread";

  constructor(protected _core: ComposerRuntimeCoreBinding) {}

  protected __internal_bindMethods() {
    this.setText = this.setText.bind(this);
    this.setRunConfig = this.setRunConfig.bind(this);
    this.getState = this.getState.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.addAttachment = this.addAttachment.bind(this);
    this.reset = this.reset.bind(this);
    this.clearAttachments = this.clearAttachments.bind(this);
    this.send = this.send.bind(this);
    this.cancel = this.cancel.bind(this);
    this.setRole = this.setRole.bind(this);
    this.getAttachmentAccept = this.getAttachmentAccept.bind(this);
    this.getAttachmentByIndex = this.getAttachmentByIndex.bind(this);
    this.unstable_on = this.unstable_on.bind(this);
  }

  public abstract getState(): ComposerState;

  public setText(text: string) {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    core.setText(text);
  }

  public setRunConfig(runConfig: RunConfig) {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    core.setRunConfig(runConfig);
  }

  public addAttachment(file: File) {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    return core.addAttachment(file);
  }

  public reset() {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    return core.reset();
  }

  public clearAttachments() {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    return core.clearAttachments();
  }

  public send() {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    core.send();
  }

  public cancel() {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    core.cancel();
  }

  public setRole(role: MessageRole) {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    core.setRole(role);
  }

  public subscribe(callback: () => void) {
    return this._core.subscribe(callback);
  }

  private _eventSubscriptionSubjects = new Map<
    string,
    EventSubscriptionSubject<ComposerRuntimeEventType>
  >();

  public unstable_on(
    event: ComposerRuntimeEventType,
    callback: () => void,
  ): Unsubscribe {
    let subject = this._eventSubscriptionSubjects.get(event);
    if (!subject) {
      subject = new EventSubscriptionSubject({
        event: event,
        binding: this._core,
      });
      this._eventSubscriptionSubjects.set(event, subject);
    }
    return subject.subscribe(callback);
  }

  public getAttachmentAccept(): string {
    const core = this._core.getState();
    if (!core) throw new Error("Composer is not available");
    return core.getAttachmentAccept();
  }

  public abstract getAttachmentByIndex(idx: number): AttachmentRuntime;
}

export type ThreadComposerRuntime = Omit<
  ComposerRuntime,
  "getState" | "getAttachmentByIndex"
> & {
  readonly path: ComposerRuntimePath & { composerSource: "thread" };
  readonly type: "thread";
  getState(): ThreadComposerState;

  getAttachmentByIndex(
    idx: number,
  ): AttachmentRuntime & { source: "thread-composer" };
};

export class ThreadComposerRuntimeImpl
  extends ComposerRuntimeImpl
  implements ThreadComposerRuntime
{
  public override get path() {
    return this._core.path as ComposerRuntimePath & {
      composerSource: "thread";
    };
  }

  public get type() {
    return "thread" as const;
  }

  private _getState;

  constructor(core: ThreadComposerRuntimeCoreBinding) {
    const stateBinding = new LazyMemoizeSubject({
      path: core.path,
      getState: () => getThreadComposerState(core.getState()),
      subscribe: (callback) => core.subscribe(callback),
    });
    super({
      path: core.path,
      getState: () => core.getState(),
      subscribe: (callback) => stateBinding.subscribe(callback),
    });
    this._getState = stateBinding.getState.bind(stateBinding);
  }

  public override getState(): ThreadComposerState {
    return this._getState();
  }

  public getAttachmentByIndex(idx: number) {
    return new ThreadComposerAttachmentRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ...this.path,
          attachmentSource: "thread-composer",
          attachmentSelector: { type: "index", index: idx },
          ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,
        },
        getState: () => {
          const attachments = this.getState().attachments;
          const attachment = attachments[idx];
          if (!attachment) return SKIP_UPDATE;

          return {
            ...attachment,
            source: "thread-composer",
          } satisfies AttachmentState & { source: "thread-composer" };
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );
  }
}

export type EditComposerRuntime = Omit<
  ComposerRuntime,
  "getState" | "getAttachmentByIndex"
> & {
  readonly path: ComposerRuntimePath & { composerSource: "edit" };
  readonly type: "edit";

  getState(): EditComposerState;
  beginEdit(): void;

  getAttachmentByIndex(
    idx: number,
  ): AttachmentRuntime & { source: "edit-composer" };
};

export class EditComposerRuntimeImpl
  extends ComposerRuntimeImpl
  implements EditComposerRuntime
{
  public override get path() {
    return this._core.path as ComposerRuntimePath & { composerSource: "edit" };
  }

  public get type() {
    return "edit" as const;
  }

  private _getState;
  constructor(
    core: EditComposerRuntimeCoreBinding,
    private _beginEdit: () => void,
  ) {
    const stateBinding = new LazyMemoizeSubject({
      path: core.path,
      getState: () => getEditComposerState(core.getState()),
      subscribe: (callback) => core.subscribe(callback),
    });

    super({
      path: core.path,
      getState: () => core.getState(),
      subscribe: (callback) => stateBinding.subscribe(callback),
    });

    this._getState = stateBinding.getState.bind(stateBinding);
  }

  public override __internal_bindMethods() {
    super.__internal_bindMethods();
    this.beginEdit = this.beginEdit.bind(this);
  }

  public override getState(): EditComposerState {
    return this._getState();
  }

  public beginEdit() {
    this._beginEdit();
  }

  public getAttachmentByIndex(idx: number) {
    return new EditComposerAttachmentRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ...this.path,
          attachmentSource: "edit-composer",
          attachmentSelector: { type: "index", index: idx },
          ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,
        },
        getState: () => {
          const attachments = this.getState().attachments;
          const attachment = attachments[idx];
          if (!attachment) return SKIP_UPDATE;

          return {
            ...attachment,
            source: "edit-composer",
          } satisfies AttachmentState & { source: "edit-composer" };
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );
  }
}



================================================
File: packages/react/src/api/ContentPartRuntime.ts
================================================
import {
  ThreadAssistantContentPart,
  ThreadUserContentPart,
  ContentPartStatus,
  ToolCallContentPartStatus,
} from "../types/AssistantTypes";
import { ThreadRuntimeCoreBinding } from "./ThreadRuntime";
import { MessageStateBinding } from "./MessageRuntime";
import { SubscribableWithState } from "./subscribable/Subscribable";
import { Unsubscribe } from "../types";
import { ContentPartRuntimePath } from "./RuntimePathTypes";

export type ContentPartState = (
  | ThreadUserContentPart
  | ThreadAssistantContentPart
) & {
  readonly status: ContentPartStatus | ToolCallContentPartStatus;
};

type ContentPartSnapshotBinding = SubscribableWithState<
  ContentPartState,
  ContentPartRuntimePath
>;

export type ContentPartRuntime = {
  /**
   * Add tool result to a tool call content part that has no tool result yet.
   * This is useful when you are collecting a tool result via user input ("human tool calls").
   */
  addToolResult(result: any): void;

  readonly path: ContentPartRuntimePath;
  getState(): ContentPartState;
  subscribe(callback: () => void): Unsubscribe;
};

export class ContentPartRuntimeImpl implements ContentPartRuntime {
  public get path() {
    return this.contentBinding.path;
  }

  constructor(
    private contentBinding: ContentPartSnapshotBinding,
    private messageApi?: MessageStateBinding,
    private threadApi?: ThreadRuntimeCoreBinding,
  ) {}

  protected __internal_bindMethods() {
    this.addToolResult = this.addToolResult.bind(this);
    this.getState = this.getState.bind(this);
    this.subscribe = this.subscribe.bind(this);
  }

  public getState() {
    return this.contentBinding.getState();
  }

  public addToolResult(result: any) {
    const state = this.contentBinding.getState();
    if (!state) throw new Error("Content part is not available");

    if (state.type !== "tool-call")
      throw new Error("Tried to add tool result to non-tool content part");

    if (!this.messageApi)
      throw new Error(
        "Message API is not available. This is likely a bug in assistant-ui.",
      );
    if (!this.threadApi) throw new Error("Thread API is not available");

    const message = this.messageApi.getState();
    if (!message) throw new Error("Message is not available");

    const toolName = state.toolName;
    const toolCallId = state.toolCallId;

    this.threadApi.getState().addToolResult({
      messageId: message.id,
      toolName,
      toolCallId,
      result,
    });
  }

  public subscribe(callback: () => void) {
    return this.contentBinding.subscribe(callback);
  }
}



================================================
File: packages/react/src/api/MessageRuntime.ts
================================================
import {
  SpeechState,
  SubmittedFeedback,
} from "../runtimes/core/ThreadRuntimeCore";
import { symbolInnerMessage } from "../runtimes/external-store/getExternalStoreMessage";
import {
  ThreadMessage,
  ThreadAssistantContentPart,
  ThreadUserContentPart,
  Unsubscribe,
} from "../types";
import {
  ContentPartStatus,
  RunConfig,
  ToolCallContentPartStatus,
} from "../types/AssistantTypes";
import { getThreadMessageText } from "../utils/getThreadMessageText";
import {
  AttachmentRuntime,
  AttachmentState,
  MessageAttachmentRuntimeImpl,
} from "./AttachmentRuntime";
import {
  EditComposerRuntime,
  EditComposerRuntimeImpl,
} from "./ComposerRuntime";
import {
  ContentPartRuntime,
  ContentPartRuntimeImpl,
  ContentPartState,
} from "./ContentPartRuntime";
import { MessageRuntimePath } from "./RuntimePathTypes";
import { ThreadRuntimeCoreBinding } from "./ThreadRuntime";
import { NestedSubscriptionSubject } from "./subscribable/NestedSubscriptionSubject";
import { SKIP_UPDATE } from "./subscribable/SKIP_UPDATE";
import { ShallowMemoizeSubject } from "./subscribable/ShallowMemoizeSubject";
import { SubscribableWithState } from "./subscribable/Subscribable";

const COMPLETE_STATUS: ContentPartStatus = Object.freeze({
  type: "complete",
});

export const toContentPartStatus = (
  message: ThreadMessage,
  partIndex: number,
  part: ThreadUserContentPart | ThreadAssistantContentPart,
): ToolCallContentPartStatus => {
  if (message.role !== "assistant") return COMPLETE_STATUS;

  if (part.type === "tool-call") {
    if (!part.result) {
      return message.status as ToolCallContentPartStatus;
    } else {
      return COMPLETE_STATUS;
    }
  }

  const isLastPart = partIndex === Math.max(0, message.content.length - 1);
  if (message.status.type === "requires-action") return COMPLETE_STATUS;
  return isLastPart ? (message.status as ContentPartStatus) : COMPLETE_STATUS;
};

const getContentPartState = (
  message: MessageState,
  partIndex: number,
): ContentPartState | SKIP_UPDATE => {
  const part = message.content[partIndex];
  if (!part) {
    return SKIP_UPDATE;
  }

  // if the content part is the same, don't update
  const status = toContentPartStatus(message, partIndex, part);
  return Object.freeze({
    ...part,
    ...{ [symbolInnerMessage]: (part as any)[symbolInnerMessage] },
    status,
  });
};

export type MessageState = ThreadMessage & {
  readonly parentId: string | null;
  readonly isLast: boolean;

  readonly branchNumber: number;
  readonly branchCount: number;

  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  readonly speech: SpeechState | undefined;
  readonly submittedFeedback: SubmittedFeedback | undefined;
};

export type MessageStateBinding = SubscribableWithState<
  MessageState,
  MessageRuntimePath
>;

type ReloadConfig = {
  runConfig?: RunConfig;
};

export type MessageRuntime = {
  readonly path: MessageRuntimePath;

  readonly composer: EditComposerRuntime;

  getState(): MessageState;
  reload(config?: ReloadConfig): void;
  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  speak(): void;
  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  stopSpeaking(): void;
  submitFeedback({ type }: { type: "positive" | "negative" }): void;
  switchToBranch({
    position,
    branchId,
  }: {
    position?: "previous" | "next" | undefined;
    branchId?: string | undefined;
  }): void;
  unstable_getCopyText(): string;

  subscribe(callback: () => void): Unsubscribe;

  getContentPartByIndex(idx: number): ContentPartRuntime;
  getContentPartByToolCallId(toolCallId: string): ContentPartRuntime;

  getAttachmentByIndex(idx: number): AttachmentRuntime & { source: "message" };
};

export class MessageRuntimeImpl implements MessageRuntime {
  public get path() {
    return this._core.path;
  }

  constructor(
    private _core: MessageStateBinding,
    private _threadBinding: ThreadRuntimeCoreBinding,
  ) {
    this.composer = new EditComposerRuntimeImpl(
      new NestedSubscriptionSubject({
        path: {
          ...this.path,
          ref: this.path.ref + `${this.path.ref}.composer`,
          composerSource: "edit",
        },
        getState: this._getEditComposerRuntimeCore,
        subscribe: (callback) => this._threadBinding.subscribe(callback),
      }),
      () => this._threadBinding.getState().beginEdit(this._core.getState().id),
    );
  }

  protected __internal_bindMethods() {
    this.reload = this.reload.bind(this);
    this.getState = this.getState.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.getContentPartByIndex = this.getContentPartByIndex.bind(this);
    this.getContentPartByToolCallId =
      this.getContentPartByToolCallId.bind(this);
    this.getAttachmentByIndex = this.getAttachmentByIndex.bind(this);
    this.unstable_getCopyText = this.unstable_getCopyText.bind(this);
    this.speak = this.speak.bind(this);
    this.stopSpeaking = this.stopSpeaking.bind(this);
    this.submitFeedback = this.submitFeedback.bind(this);
    this.switchToBranch = this.switchToBranch.bind(this);
  }

  public readonly composer;

  private _getEditComposerRuntimeCore = () => {
    return this._threadBinding
      .getState()
      .getEditComposer(this._core.getState().id);
  };

  public getState() {
    return this._core.getState();
  }

  public reload(reloadConfig: ReloadConfig = {}) {
    const editComposerRuntimeCore = this._getEditComposerRuntimeCore();
    const composerRuntimeCore =
      editComposerRuntimeCore ?? this._threadBinding.getState().composer;
    const composer = editComposerRuntimeCore ?? composerRuntimeCore;

    const { runConfig = composer.runConfig } = reloadConfig;
    const state = this._core.getState();
    if (state.role !== "assistant")
      throw new Error("Can only reload assistant messages");

    this._threadBinding.getState().startRun({
      parentId: state.parentId,
      sourceId: state.id,
      runConfig,
    });
  }

  public speak() {
    const state = this._core.getState();
    return this._threadBinding.getState().speak(state.id);
  }

  public stopSpeaking() {
    const state = this._core.getState();
    const thread = this._threadBinding.getState();
    if (thread.speech?.messageId === state.id) {
      this._threadBinding.getState().stopSpeaking();
    } else {
      throw new Error("Message is not being spoken");
    }
  }

  public submitFeedback({ type }: { type: "positive" | "negative" }) {
    const state = this._core.getState();
    this._threadBinding.getState().submitFeedback({
      messageId: state.id,
      type,
    });
  }

  public switchToBranch({
    position,
    branchId,
  }: {
    position?: "previous" | "next" | undefined;
    branchId?: string | undefined;
  }) {
    const state = this._core.getState();
    if (branchId && position) {
      throw new Error("May not specify both branchId and position");
    } else if (!branchId && !position) {
      throw new Error("Must specify either branchId or position");
    }

    const thread = this._threadBinding.getState();
    const branches = thread.getBranches(state.id);
    let targetBranch = branchId;
    if (position === "previous") {
      targetBranch = branches[state.branchNumber - 2];
    } else if (position === "next") {
      targetBranch = branches[state.branchNumber];
    }
    if (!targetBranch) throw new Error("Branch not found");

    this._threadBinding.getState().switchToBranch(targetBranch);
  }

  public unstable_getCopyText() {
    return getThreadMessageText(this.getState());
  }

  public subscribe(callback: () => void) {
    return this._core.subscribe(callback);
  }

  public getContentPartByIndex(idx: number) {
    if (idx < 0) throw new Error("Content part index must be >= 0");
    return new ContentPartRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ...this.path,
          ref: this.path.ref + `${this.path.ref}.content[${idx}]`,
          contentPartSelector: { type: "index", index: idx },
        },
        getState: () => {
          return getContentPartState(this.getState(), idx);
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
      this._threadBinding,
    );
  }

  public getContentPartByToolCallId(toolCallId: string) {
    return new ContentPartRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ...this.path,
          ref:
            this.path.ref +
            `${this.path.ref}.content[toolCallId=${JSON.stringify(toolCallId)}]`,
          contentPartSelector: { type: "toolCallId", toolCallId },
        },
        getState: () => {
          const state = this._core.getState();
          const idx = state.content.findIndex(
            (part) =>
              part.type === "tool-call" && part.toolCallId === toolCallId,
          );
          if (idx === -1) return SKIP_UPDATE;
          return getContentPartState(state, idx);
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
      this._threadBinding,
    );
  }

  public getAttachmentByIndex(idx: number) {
    return new MessageAttachmentRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ...this.path,
          ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,
          attachmentSource: "message",
          attachmentSelector: { type: "index", index: idx },
        },
        getState: () => {
          const attachments = this.getState().attachments;
          const attachment = attachments?.[idx];
          if (!attachment) return SKIP_UPDATE;

          return {
            ...attachment,
            source: "message",
          } satisfies AttachmentState & { source: "message" };
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
    );
  }
}



================================================
File: packages/react/src/api/RuntimePathTypes.ts
================================================
export type ThreadListItemRuntimePath = {
  readonly ref: string;
  readonly threadSelector:
    | { readonly type: "main" }
    | { readonly type: "index"; readonly index: number }
    | { readonly type: "archiveIndex"; readonly index: number }
    | { readonly type: "threadId"; readonly threadId: string };
};

export type ThreadRuntimePath = {
  readonly ref: string;
  readonly threadSelector:
    | { readonly type: "main" }
    | {
        readonly type: "threadId";
        readonly threadId: string;
      };
};

export type MessageRuntimePath = ThreadRuntimePath & {
  readonly messageSelector:
    | { readonly type: "messageId"; readonly messageId: string }
    | { readonly type: "index"; readonly index: number };
};

export type ContentPartRuntimePath = MessageRuntimePath & {
  readonly contentPartSelector:
    | { readonly type: "index"; readonly index: number }
    | { readonly type: "toolCallId"; readonly toolCallId: string };
};

export type AttachmentRuntimePath = (
  | (MessageRuntimePath & {
      readonly attachmentSource: "message" | "edit-composer";
    })
  | (ThreadRuntimePath & {
      readonly attachmentSource: "thread-composer";
    })
) & {
  readonly attachmentSelector:
    | {
        readonly type: "index";
        readonly index: number;
      }
    | {
        readonly type: "index";
        readonly index: number;
      }
    | {
        readonly type: "index";
        readonly index: number;
      };
};

export type ComposerRuntimePath =
  | (ThreadRuntimePath & {
      readonly composerSource: "thread";
    })
  | (MessageRuntimePath & {
      readonly composerSource: "edit";
    });



================================================
File: packages/react/src/api/ThreadListItemRuntime.ts
================================================
import { Unsubscribe } from "../types";
import { ThreadListItemRuntimePath } from "./RuntimePathTypes";
import { SubscribableWithState } from "./subscribable/Subscribable";
import { ThreadListRuntimeCoreBinding } from "./ThreadListRuntime";

export type ThreadListItemEventType = "switched-to" | "switched-away";

export type ThreadListItemState = {
  readonly isMain: boolean;

  readonly id: string;
  readonly remoteId: string | undefined;
  readonly externalId: string | undefined;

  /**
   * @deprecated This field was renamed to `id`. This field will be removed in 0.8.0.
   */
  readonly threadId: string;

  readonly status: "archived" | "regular" | "new" | "deleted";
  readonly title?: string | undefined;
};

export type ThreadListItemRuntime = {
  readonly path: ThreadListItemRuntimePath;
  getState(): ThreadListItemState;

  initialize(): Promise<{ remoteId: string; externalId: string | undefined }>;
  generateTitle(): Promise<void>;

  switchTo(): Promise<void>;
  rename(newTitle: string): Promise<void>;
  archive(): Promise<void>;
  unarchive(): Promise<void>;
  delete(): Promise<void>;

  subscribe(callback: () => void): Unsubscribe;

  unstable_on(
    event: ThreadListItemEventType,
    callback: () => void,
  ): Unsubscribe;
};

export type ThreadListItemStateBinding = SubscribableWithState<
  ThreadListItemState,
  ThreadListItemRuntimePath
>;

export class ThreadListItemRuntimeImpl implements ThreadListItemRuntime {
  public get path() {
    return this._core.path;
  }

  constructor(
    private _core: ThreadListItemStateBinding,
    private _threadListBinding: ThreadListRuntimeCoreBinding,
  ) {}

  protected __internal_bindMethods() {
    this.switchTo = this.switchTo.bind(this);
    this.rename = this.rename.bind(this);
    this.archive = this.archive.bind(this);
    this.unarchive = this.unarchive.bind(this);
    this.delete = this.delete.bind(this);
    this.initialize = this.initialize.bind(this);
    this.generateTitle = this.generateTitle.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.unstable_on = this.unstable_on.bind(this);
    this.getState = this.getState.bind(this);
  }

  public getState(): ThreadListItemState {
    return this._core.getState();
  }

  public switchTo(): Promise<void> {
    const state = this._core.getState();
    return this._threadListBinding.switchToThread(state.id);
  }

  public rename(newTitle: string): Promise<void> {
    const state = this._core.getState();

    return this._threadListBinding.rename(state.id, newTitle);
  }

  public archive(): Promise<void> {
    const state = this._core.getState();

    return this._threadListBinding.archive(state.id);
  }

  public unarchive(): Promise<void> {
    const state = this._core.getState();

    return this._threadListBinding.unarchive(state.id);
  }

  public delete(): Promise<void> {
    const state = this._core.getState();

    return this._threadListBinding.delete(state.id);
  }

  public initialize(): Promise<{
    remoteId: string;
    externalId: string | undefined;
  }> {
    const state = this._core.getState();
    return this._threadListBinding.initialize(state.id);
  }

  public generateTitle(): Promise<void> {
    const state = this._core.getState();
    return this._threadListBinding.generateTitle(state.id);
  }

  public unstable_on(event: ThreadListItemEventType, callback: () => void) {
    let prevIsMain = this._core.getState().isMain;
    return this.subscribe(() => {
      const newIsMain = this._core.getState().isMain;
      if (prevIsMain === newIsMain) return;
      prevIsMain = newIsMain;

      if (event === "switched-to" && !newIsMain) return;
      if (event === "switched-away" && newIsMain) return;
      callback();
    });
  }

  public subscribe(callback: () => void): Unsubscribe {
    return this._core.subscribe(callback);
  }
}



================================================
File: packages/react/src/api/ThreadListRuntime.ts
================================================
import { LazyMemoizeSubject } from "./subscribable/LazyMemoizeSubject";
import { ThreadListRuntimeCore } from "../runtimes/core/ThreadListRuntimeCore";
import { Unsubscribe } from "../types";
import {
  ThreadListItemRuntime,
  ThreadListItemRuntimeImpl,
  ThreadListItemState,
} from "./ThreadListItemRuntime";
import { SKIP_UPDATE } from "./subscribable/SKIP_UPDATE";
import { ShallowMemoizeSubject } from "./subscribable/ShallowMemoizeSubject";
import {
  ThreadListItemRuntimeBinding,
  ThreadRuntime,
  ThreadRuntimeCoreBinding,
  ThreadRuntimeImpl,
} from "./ThreadRuntime";
import { NestedSubscriptionSubject } from "./subscribable/NestedSubscriptionSubject";

export type ThreadListState = {
  readonly mainThreadId: string;
  readonly newThread: string | undefined;
  readonly threads: readonly string[];
  readonly archivedThreads: readonly string[];
};

export type ThreadListRuntime = {
  getState(): ThreadListState;

  subscribe(callback: () => void): Unsubscribe;

  readonly main: ThreadRuntime;
  getById(threadId: string): ThreadRuntime;

  readonly mainItem: ThreadListItemRuntime;
  getItemById(threadId: string): ThreadListItemRuntime;
  getItemByIndex(idx: number): ThreadListItemRuntime;
  getArchivedItemByIndex(idx: number): ThreadListItemRuntime;

  switchToThread(threadId: string): Promise<void>;
  switchToNewThread(): Promise<void>;
};

const getThreadListState = (
  threadList: ThreadListRuntimeCore,
): ThreadListState => {
  return {
    mainThreadId: threadList.mainThreadId,
    newThread: threadList.newThreadId,
    threads: threadList.threadIds,
    archivedThreads: threadList.archivedThreadIds,
  };
};

const getThreadListItemState = (
  threadList: ThreadListRuntimeCore,
  threadId: string | undefined,
): ThreadListItemState | SKIP_UPDATE => {
  if (threadId === undefined) return SKIP_UPDATE;

  const threadData = threadList.getItemById(threadId);
  if (!threadData) return SKIP_UPDATE;
  return {
    id: threadData.threadId,
    threadId: threadData.threadId, // TODO remove in 0.8.0
    remoteId: threadData.remoteId,
    externalId: threadData.externalId,
    title: threadData.title,
    status: threadData.status,
    isMain: threadData.threadId === threadList.mainThreadId,
  };
};

export type ThreadListRuntimeCoreBinding = ThreadListRuntimeCore;

export class ThreadListRuntimeImpl implements ThreadListRuntime {
  private _getState;
  constructor(
    private _core: ThreadListRuntimeCoreBinding,
    private _runtimeFactory: new (
      binding: ThreadRuntimeCoreBinding,
      threadListItemBinding: ThreadListItemRuntimeBinding,
    ) => ThreadRuntime = ThreadRuntimeImpl,
  ) {
    const stateBinding = new LazyMemoizeSubject({
      path: {},
      getState: () => getThreadListState(_core),
      subscribe: (callback) => _core.subscribe(callback),
    });

    this._getState = stateBinding.getState.bind(stateBinding);

    this._mainThreadListItemRuntime = new ThreadListItemRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ref: `threadItems[main]`,
          threadSelector: { type: "main" },
        },
        getState: () => {
          return getThreadListItemState(this._core, this._core.mainThreadId);
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );

    this.main = new _runtimeFactory(
      new NestedSubscriptionSubject({
        path: {
          ref: "threads.main",
          threadSelector: { type: "main" },
        },
        getState: () => _core.getMainThreadRuntimeCore(),
        subscribe: (callback) => _core.subscribe(callback),
      }),
      this._mainThreadListItemRuntime, // TODO capture "main" threadListItem from context around useLocalRuntime / useExternalStoreRuntime
    );
  }

  protected __internal_bindMethods() {
    this.switchToThread = this.switchToThread.bind(this);
    this.switchToNewThread = this.switchToNewThread.bind(this);
    this.getState = this.getState.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.getById = this.getById.bind(this);
    this.getItemById = this.getItemById.bind(this);
    this.getItemByIndex = this.getItemByIndex.bind(this);
    this.getArchivedItemByIndex = this.getArchivedItemByIndex.bind(this);
  }

  public switchToThread(threadId: string): Promise<void> {
    return this._core.switchToThread(threadId);
  }

  public switchToNewThread(): Promise<void> {
    return this._core.switchToNewThread();
  }

  public getState(): ThreadListState {
    return this._getState();
  }

  public subscribe(callback: () => void): Unsubscribe {
    return this._core.subscribe(callback);
  }

  private _mainThreadListItemRuntime;

  public readonly main: ThreadRuntime;

  public get mainItem() {
    return this._mainThreadListItemRuntime;
  }

  public getById(threadId: string) {
    return new this._runtimeFactory(
      new NestedSubscriptionSubject({
        path: {
          ref: "threads[threadId=" + JSON.stringify(threadId) + "]",
          threadSelector: { type: "threadId", threadId },
        },
        getState: () => this._core.getThreadRuntimeCore(threadId),
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this.mainItem, // TODO capture "main" threadListItem from context around useLocalRuntime / useExternalStoreRuntime
    );
  }

  public getItemByIndex(idx: number) {
    return new ThreadListItemRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ref: `threadItems[${idx}]`,
          threadSelector: { type: "index", index: idx },
        },
        getState: () => {
          return getThreadListItemState(this._core, this._core.threadIds[idx]);
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );
  }

  public getArchivedItemByIndex(idx: number) {
    return new ThreadListItemRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ref: `archivedThreadItems[${idx}]`,
          threadSelector: { type: "archiveIndex", index: idx },
        },
        getState: () => {
          return getThreadListItemState(
            this._core,
            this._core.archivedThreadIds[idx],
          );
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );
  }

  public getItemById(threadId: string) {
    return new ThreadListItemRuntimeImpl(
      new ShallowMemoizeSubject({
        path: {
          ref: `threadItems[threadId=${threadId}]`,
          threadSelector: { type: "threadId", threadId },
        },
        getState: () => {
          return getThreadListItemState(this._core, threadId);
        },
        subscribe: (callback) => this._core.subscribe(callback),
      }),
      this._core,
    );
  }
}



================================================
File: packages/react/src/api/ThreadRuntime.ts
================================================
import {
  ThreadSuggestion,
  RuntimeCapabilities,
  ThreadRuntimeCore,
  SpeechState,
  ThreadRuntimeEventType,
  StartRunConfig,
} from "../runtimes/core/ThreadRuntimeCore";
import { ExportedMessageRepository } from "../runtimes/utils/MessageRepository";
import { AppendMessage, ThreadMessage, Unsubscribe } from "../types";
import {
  MessageRuntime,
  MessageRuntimeImpl,
  MessageState,
} from "./MessageRuntime";
import { NestedSubscriptionSubject } from "./subscribable/NestedSubscriptionSubject";
import { ShallowMemoizeSubject } from "./subscribable/ShallowMemoizeSubject";
import { SubscribableWithState } from "./subscribable/Subscribable";
import {
  ThreadComposerRuntime,
  ThreadComposerRuntimeImpl,
} from "./ComposerRuntime";
import { SKIP_UPDATE } from "./subscribable/SKIP_UPDATE";
import {
  MessageRuntimePath,
  ThreadListItemRuntimePath,
  ThreadRuntimePath,
} from "./RuntimePathTypes";
import { ThreadListItemState } from "./ThreadListItemRuntime";
import { RunConfig } from "../types/AssistantTypes";
import { EventSubscriptionSubject } from "./subscribable/EventSubscriptionSubject";
import { symbolInnerMessage } from "../runtimes/external-store/getExternalStoreMessage";
import { ModelContext } from "../model-context";

export type CreateStartRunConfig = {
  parentId: string | null;
  sourceId?: string | null | undefined;
  runConfig?: RunConfig | undefined;
};

const toStartRunConfig = (message: CreateStartRunConfig): StartRunConfig => {
  return {
    parentId: message.parentId ?? null,
    sourceId: message.sourceId ?? null,
    runConfig: message.runConfig ?? {},
  };
};

export type CreateAppendMessage =
  | string
  | {
      parentId?: string | null | undefined;
      sourceId?: string | null | undefined;
      role?: AppendMessage["role"] | undefined;
      content: AppendMessage["content"];
      attachments?: AppendMessage["attachments"] | undefined;
      startRun?: boolean | undefined;
    };

const toAppendMessage = (
  messages: readonly ThreadMessage[],
  message: CreateAppendMessage,
): AppendMessage => {
  if (typeof message === "string") {
    return {
      parentId: messages.at(-1)?.id ?? null,
      sourceId: null,
      runConfig: {},
      role: "user",
      content: [{ type: "text", text: message }],
      attachments: [],
    };
  }

  if (message.role && message.parentId && message.attachments) {
    return message as AppendMessage;
  }

  return {
    ...message,
    parentId: message.parentId ?? messages.at(-1)?.id ?? null,
    sourceId: message.sourceId ?? null,
    role: message.role ?? "user",
    attachments: message.attachments ?? [],
  } as AppendMessage;
};

export type ThreadRuntimeCoreBinding = SubscribableWithState<
  ThreadRuntimeCore,
  ThreadRuntimePath
> & {
  outerSubscribe(callback: () => void): Unsubscribe;
};

export type ThreadListItemRuntimeBinding = SubscribableWithState<
  ThreadListItemState,
  ThreadListItemRuntimePath
>;

export type ThreadState = {
  /**
   * The thread ID.
   * @deprecated This field is deprecated and will be removed in 0.8.0. Use `useThreadListItem().id` instead.
   */
  readonly threadId: string;

  /**
   * The thread metadata.
   *
   * @deprecated Use `useThreadListItem()` instead. This field is deprecated and will be removed in 0.8.0.
   */
  readonly metadata: ThreadListItemState;

  /**
   * Whether the thread is disabled. Disabled threads cannot receive new messages.
   */
  readonly isDisabled: boolean;

  /**
   * Whether the thread is running. A thread is considered running when there is an active stream connection to the backend.
   */
  readonly isRunning: boolean;

  /**
   * The capabilities of the thread, such as whether the thread supports editing, branch switching, etc.
   */
  readonly capabilities: RuntimeCapabilities;

  /**
   * The messages in the currently selected branch of the thread.
   */
  readonly messages: readonly ThreadMessage[];

  /**
   * Follow up message suggestions to show the user.
   */
  readonly suggestions: readonly ThreadSuggestion[];

  /**
   * Custom extra information provided by the runtime.
   */
  readonly extras: unknown;

  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  readonly speech: SpeechState | undefined;
};

export const getThreadState = (
  runtime: ThreadRuntimeCore,
  threadListItemState: ThreadListItemState,
): ThreadState => {
  const lastMessage = runtime.messages.at(-1);
  return Object.freeze({
    threadId: threadListItemState.id,
    metadata: threadListItemState,
    capabilities: runtime.capabilities,
    isDisabled: runtime.isDisabled,
    isRunning:
      lastMessage?.role !== "assistant"
        ? false
        : lastMessage.status.type === "running",
    messages: runtime.messages,
    suggestions: runtime.suggestions,
    extras: runtime.extras,
    speech: runtime.speech,
  });
};

export type ThreadRuntime = {
  /**
   * The selector for the thread runtime.
   */
  readonly path: ThreadRuntimePath;

  /**
   * The thread composer runtime.
   */
  readonly composer: ThreadComposerRuntime;

  /**
   * Gets a snapshot of the thread state.
   */
  getState(): ThreadState;

  /**
   * Append a new message to the thread.
   *
   * @example ```ts
   * // append a new user message with the text "Hello, world!"
   * threadRuntime.append("Hello, world!");
   * ```
   *
   * @example ```ts
   * // append a new assistant message with the text "Hello, world!"
   * threadRuntime.append({
   *   role: "assistant",
   *   content: [{ type: "text", text: "Hello, world!" }],
   * });
   * ```
   */
  append(message: CreateAppendMessage): void;

  /**
   * @deprecated pass an object with `parentId` instead. This will be removed in 0.8.0.
   */
  startRun(parentId: string | null): void;
  /**
   * Start a new run with the given configuration.
   * @param config The configuration for starting the run
   */
  startRun(config: CreateStartRunConfig): void;
  subscribe(callback: () => void): Unsubscribe;
  cancelRun(): void;
  getModelContext(): ModelContext;

  /**
   * @deprecated This method was renamed to `getModelContext`.
   */
  getModelConfig(): ModelContext;

  export(): ExportedMessageRepository;
  import(repository: ExportedMessageRepository): void;
  getMesssageByIndex(idx: number): MessageRuntime;
  getMesssageById(messageId: string): MessageRuntime;

  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  stopSpeaking: () => void;

  unstable_on(event: ThreadRuntimeEventType, callback: () => void): Unsubscribe;
};

export class ThreadRuntimeImpl implements ThreadRuntime {
  public get path() {
    return this._threadBinding.path;
  }

  public get __internal_threadBinding() {
    return this._threadBinding;
  }

  private readonly _threadBinding: ThreadRuntimeCoreBinding & {
    getStateState(): ThreadState;
  };

  constructor(
    threadBinding: ThreadRuntimeCoreBinding,
    threadListItemBinding: ThreadListItemRuntimeBinding,
  ) {
    const stateBinding = new ShallowMemoizeSubject({
      path: threadBinding.path,
      getState: () =>
        getThreadState(
          threadBinding.getState(),
          threadListItemBinding.getState(),
        ),
      subscribe: (callback) => {
        const sub1 = threadBinding.subscribe(callback);
        const sub2 = threadListItemBinding.subscribe(callback);
        return () => {
          sub1();
          sub2();
        };
      },
    });

    this._threadBinding = {
      path: threadBinding.path,
      getState: () => threadBinding.getState(),
      getStateState: () => stateBinding.getState(),
      outerSubscribe: (callback) => threadBinding.outerSubscribe(callback),
      subscribe: (callback) => threadBinding.subscribe(callback),
    };

    this.composer = new ThreadComposerRuntimeImpl(
      new NestedSubscriptionSubject({
        path: {
          ...this.path,
          ref: this.path.ref + `${this.path.ref}.composer`,
          composerSource: "thread",
        },
        getState: () => this._threadBinding.getState().composer,
        subscribe: (callback) => this._threadBinding.subscribe(callback),
      }),
    );
  }

  protected __internal_bindMethods() {
    this.append = this.append.bind(this);
    this.startRun = this.startRun.bind(this);
    this.cancelRun = this.cancelRun.bind(this);
    this.stopSpeaking = this.stopSpeaking.bind(this);
    this.export = this.export.bind(this);
    this.import = this.import.bind(this);
    this.getMesssageByIndex = this.getMesssageByIndex.bind(this);
    this.getMesssageById = this.getMesssageById.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.unstable_on = this.unstable_on.bind(this);
    this.getModelContext = this.getModelContext.bind(this);
    this.getModelConfig = this.getModelConfig.bind(this);
    this.getState = this.getState.bind(this);
  }

  public readonly composer;

  public getState() {
    return this._threadBinding.getStateState();
  }

  public append(message: CreateAppendMessage) {
    this._threadBinding
      .getState()
      .append(
        toAppendMessage(this._threadBinding.getState().messages, message),
      );
  }

  public subscribe(callback: () => void) {
    return this._threadBinding.subscribe(callback);
  }

  public getModelContext() {
    return this._threadBinding.getState().getModelContext();
  }

  public getModelConfig() {
    return this.getModelContext();
  }

  public startRun(configOrParentId: string | null | CreateStartRunConfig) {
    const config =
      configOrParentId === null || typeof configOrParentId === "string"
        ? { parentId: configOrParentId }
        : configOrParentId;
    return this._threadBinding.getState().startRun(toStartRunConfig(config));
  }

  public cancelRun() {
    this._threadBinding.getState().cancelRun();
  }

  public stopSpeaking() {
    return this._threadBinding.getState().stopSpeaking();
  }

  public export() {
    return this._threadBinding.getState().export();
  }

  public import(data: ExportedMessageRepository) {
    this._threadBinding.getState().import(data);
  }

  public getMesssageByIndex(idx: number) {
    if (idx < 0) throw new Error("Message index must be >= 0");

    return this._getMessageRuntime(
      {
        ...this.path,
        ref: this.path.ref + `${this.path.ref}.messages[${idx}]`,
        messageSelector: { type: "index", index: idx },
      },
      () => {
        const messages = this._threadBinding.getState().messages;
        const message = messages[idx];
        if (!message) return undefined;
        return {
          message,
          parentId: messages[idx - 1]?.id ?? null,
        };
      },
    );
  }

  public getMesssageById(messageId: string) {
    return this._getMessageRuntime(
      {
        ...this.path,
        ref:
          this.path.ref +
          `${this.path.ref}.messages[messageId=${JSON.stringify(messageId)}]`,
        messageSelector: { type: "messageId", messageId: messageId },
      },
      () => this._threadBinding.getState().getMessageById(messageId),
    );
  }

  private _getMessageRuntime(
    path: MessageRuntimePath,
    callback: () =>
      | { parentId: string | null; message: ThreadMessage }
      | undefined,
  ) {
    return new MessageRuntimeImpl(
      new ShallowMemoizeSubject({
        path,
        getState: () => {
          const { message, parentId } = callback() ?? {};

          const { messages, speech: speechState } =
            this._threadBinding.getState();

          if (!message || parentId === undefined) return SKIP_UPDATE;

          const thread = this._threadBinding.getState();

          const branches = thread.getBranches(message.id);
          const submittedFeedback = thread.getSubmittedFeedback(message.id);

          return {
            ...message,
            ...{ [symbolInnerMessage]: (message as any)[symbolInnerMessage] },

            isLast: messages.at(-1)?.id === message.id,
            parentId,

            branchNumber: branches.indexOf(message.id) + 1,
            branchCount: branches.length,

            speech:
              speechState?.messageId === message.id ? speechState : undefined,

            submittedFeedback,
          } satisfies MessageState;
        },
        subscribe: (callback) => this._threadBinding.subscribe(callback),
      }),
      this._threadBinding,
    );
  }

  private _eventSubscriptionSubjects = new Map<
    string,
    EventSubscriptionSubject<ThreadRuntimeEventType>
  >();

  public unstable_on(
    event: ThreadRuntimeEventType,
    callback: () => void,
  ): Unsubscribe {
    let subject = this._eventSubscriptionSubjects.get(event);
    if (!subject) {
      subject = new EventSubscriptionSubject({
        event: event,
        binding: this._threadBinding,
      });
      this._eventSubscriptionSubjects.set(event, subject);
    }
    return subject.subscribe(callback);
  }
}



================================================
File: packages/react/src/api/index.ts
================================================
export type { AssistantRuntime } from "./AssistantRuntime";
export type {
  ThreadRuntime,
  ThreadState,
  CreateAppendMessage,
  CreateStartRunConfig,
} from "./ThreadRuntime";
export type { MessageRuntime, MessageState } from "./MessageRuntime";
export type {
  ContentPartRuntime,
  ContentPartState,
} from "./ContentPartRuntime";
export type {
  ComposerRuntime,
  ThreadComposerRuntime,
  EditComposerRuntime,
  EditComposerState,
  ThreadComposerState,
  ComposerState,
} from "./ComposerRuntime";
export type { AttachmentRuntime, AttachmentState } from "./AttachmentRuntime";
export type { ThreadListRuntime, ThreadListState } from "./ThreadListRuntime";
export type {
  ThreadListItemRuntime,
  ThreadListItemState,
} from "./ThreadListItemRuntime";



================================================
File: packages/react/src/api/subscribable/BaseSubject.ts
================================================
import { Unsubscribe } from "../../types/Unsubscribe";

export abstract class BaseSubject {
  private _subscriptions = new Set<() => void>();
  private _connection: Unsubscribe | undefined;

  protected get isConnected() {
    return !!this._connection;
  }

  protected abstract _connect(): Unsubscribe;

  protected notifySubscribers() {
    for (const callback of this._subscriptions) callback();
  }

  private _updateConnection() {
    if (this._subscriptions.size > 0) {
      if (this._connection) return;
      this._connection = this._connect();
    } else {
      this._connection?.();
      this._connection = undefined;
    }
  }

  public subscribe(callback: () => void) {
    this._subscriptions.add(callback);
    this._updateConnection();

    return () => {
      this._subscriptions.delete(callback);
      this._updateConnection();
    };
  }
}



================================================
File: packages/react/src/api/subscribable/EventSubscriptionSubject.ts
================================================
import { Unsubscribe } from "../../types";
import { BaseSubject } from "./BaseSubject";
import { EventSubscribable } from "./Subscribable";

export class EventSubscriptionSubject<
  TEvent extends string,
> extends BaseSubject {
  constructor(private config: EventSubscribable<TEvent>) {
    super();
  }

  public getState() {
    return this.config.binding.getState();
  }

  public outerSubscribe(callback: () => void) {
    return this.config.binding.subscribe(callback);
  }

  protected _connect(): Unsubscribe {
    const callback = () => {
      this.notifySubscribers();
    };

    let lastState = this.config.binding.getState();
    let innerUnsubscribe = lastState?.unstable_on(this.config.event, callback);
    const onRuntimeUpdate = () => {
      const newState = this.config.binding.getState();
      if (newState === lastState) return;
      lastState = newState;

      innerUnsubscribe?.();
      innerUnsubscribe = this.config.binding
        .getState()
        ?.unstable_on(this.config.event, callback);
    };

    const outerUnsubscribe = this.outerSubscribe(onRuntimeUpdate);
    return () => {
      outerUnsubscribe?.();
      innerUnsubscribe?.();
    };
  }
}



================================================
File: packages/react/src/api/subscribable/LazyMemoizeSubject.ts
================================================
import { BaseSubject } from "./BaseSubject";
import { SKIP_UPDATE } from "./SKIP_UPDATE";
import { SubscribableWithState } from "./Subscribable";

export class LazyMemoizeSubject<TState extends object, TPath>
  extends BaseSubject
  implements SubscribableWithState<TState, TPath>
{
  public get path() {
    return this.binding.path;
  }

  constructor(
    private binding: SubscribableWithState<TState | SKIP_UPDATE, TPath>,
  ) {
    super();
  }

  private _previousStateDirty = true;
  private _previousState: TState | undefined;
  public getState = () => {
    if (!this.isConnected || this._previousStateDirty) {
      const newState = this.binding.getState();
      if (newState !== SKIP_UPDATE) {
        this._previousState = newState;
      }
      this._previousStateDirty = false;
    }
    if (this._previousState === undefined)
      throw new Error("Entry not available in the store");
    return this._previousState;
  };

  protected _connect() {
    const callback = () => {
      this._previousStateDirty = true;
      this.notifySubscribers();
    };

    return this.binding.subscribe(callback);
  }
}



================================================
File: packages/react/src/api/subscribable/NestedSubscriptionSubject.ts
================================================
import { Unsubscribe } from "../../types";
import { BaseSubject } from "./BaseSubject";
import {
  NestedSubscribable,
  Subscribable,
  SubscribableWithState,
} from "./Subscribable";

export class NestedSubscriptionSubject<
    TState extends Subscribable | undefined,
    TPath,
  >
  extends BaseSubject
  implements
    SubscribableWithState<TState, TPath>,
    NestedSubscribable<TState, TPath>
{
  public get path() {
    return this.binding.path;
  }

  constructor(private binding: NestedSubscribable<TState, TPath>) {
    super();
  }

  public getState() {
    return this.binding.getState();
  }

  public outerSubscribe(callback: () => void) {
    return this.binding.subscribe(callback);
  }

  protected _connect(): Unsubscribe {
    const callback = () => {
      this.notifySubscribers();
    };

    let lastState = this.binding.getState();
    let innerUnsubscribe = lastState?.subscribe(callback);
    const onRuntimeUpdate = () => {
      const newState = this.binding.getState();
      if (newState === lastState) return;
      lastState = newState;

      innerUnsubscribe?.();
      innerUnsubscribe = this.binding.getState()?.subscribe(callback);

      callback();
    };

    const outerUnsubscribe = this.outerSubscribe(onRuntimeUpdate);
    return () => {
      outerUnsubscribe?.();
      innerUnsubscribe?.();
    };
  }
}



================================================
File: packages/react/src/api/subscribable/SKIP_UPDATE.ts
================================================
export const SKIP_UPDATE = Symbol("skip-update");
export type SKIP_UPDATE = typeof SKIP_UPDATE;



================================================
File: packages/react/src/api/subscribable/ShallowMemoizeSubject.ts
================================================
import { shallowEqual } from "./shallowEqual";
import { BaseSubject } from "./BaseSubject";
import { SubscribableWithState } from "./Subscribable";
import { SKIP_UPDATE } from "./SKIP_UPDATE";

export class ShallowMemoizeSubject<TState extends object, TPath>
  extends BaseSubject
  implements SubscribableWithState<TState, TPath>
{
  public get path() {
    return this.binding.path;
  }

  constructor(
    private binding: SubscribableWithState<TState | SKIP_UPDATE, TPath>,
  ) {
    super();
    const state = binding.getState();
    if (state === SKIP_UPDATE)
      throw new Error("Entry not available in the store");
    this._previousState = state;
  }

  private _previousState: TState;
  public getState = () => {
    if (!this.isConnected) this._syncState();
    return this._previousState;
  };

  private _syncState() {
    const state = this.binding.getState();
    if (state === SKIP_UPDATE) return false;
    if (shallowEqual(state, this._previousState)) return false;
    this._previousState = state;
    return true;
  }

  protected _connect() {
    const callback = () => {
      if (this._syncState()) {
        this.notifySubscribers();
      }
    };

    return this.binding.subscribe(callback);
  }
}



================================================
File: packages/react/src/api/subscribable/Subscribable.ts
================================================
import { Unsubscribe } from "../../types";

export type Subscribable = {
  subscribe: (callback: () => void) => Unsubscribe;
};

export type SubscribableWithState<TState, TPath> = Subscribable & {
  path: TPath;
  getState: () => TState;
};

export type NestedSubscribable<
  TState extends Subscribable | undefined,
  TPath,
> = SubscribableWithState<TState, TPath>;

export type EventSubscribable<TEvent extends string> = {
  event: TEvent;
  binding: SubscribableWithState<
    | {
        unstable_on: (event: TEvent, callback: () => void) => Unsubscribe;
      }
    | undefined,
    unknown
  >;
};



================================================
File: packages/react/src/api/subscribable/shallowEqual.ts
================================================
export function shallowEqual<T extends object>(
  objA: T | undefined,
  objB: T | undefined,
) {
  if (objA === undefined && objB === undefined) return true;
  if (objA === undefined) return false;
  if (objB === undefined) return false;

  for (const key of Object.keys(objA)) {
    const valueA = objA[key as keyof T];
    const valueB = objB[key as keyof T];
    if (!Object.is(valueA, valueB)) return false;
  }

  return true;
}



================================================
File: packages/react/src/cloud/AssistantCloud.tsx
================================================
import { AssistantCloudAPI, AssistantCloudConfig } from "./AssistantCloudAPI";
import { AssistantCloudAuthTokens } from "./AssistantCloudAuthTokens";
import { AssistantCloudRuns } from "./AssistantCloudRuns";
import { AssistantCloudThreads } from "./AssistantCloudThreads";

export class AssistantCloud {
  public readonly threads;
  public readonly auth;
  public readonly runs;

  constructor(config: AssistantCloudConfig) {
    const api = new AssistantCloudAPI(config);
    this.threads = new AssistantCloudThreads(api);
    this.auth = {
      tokens: new AssistantCloudAuthTokens(api),
    };
    this.runs = new AssistantCloudRuns(api);
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudAPI.tsx
================================================
import {
  AssistantCloudAuthStrategy,
  AssistantCloudJWTAuthStrategy,
  AssistantCloudAPIKeyAuthStrategy,
  AssistantCloudAnonymousAuthStrategy,
} from "./AssistantCloudAuthStrategy";

export type AssistantCloudConfig =
  | {
      baseUrl: string;
      authToken: () => Promise<string | null>;
    }
  | {
      apiKey: string;
      userId: string;
      workspaceId: string;
    }
  | {
      baseUrl: string;
      anonymous: true;
    };

class CloudAPIError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "APIError";
  }
}

type MakeRequestOptions = {
  method?: "POST" | "PUT" | "DELETE" | undefined;
  headers?: Record<string, string> | undefined;
  query?: Record<string, string | number | boolean> | undefined;
  body?: object | undefined;
};

export class AssistantCloudAPI {
  private _auth: AssistantCloudAuthStrategy;
  private _baseUrl;

  constructor(config: AssistantCloudConfig) {
    if ("authToken" in config) {
      this._baseUrl = config.baseUrl;
      this._auth = new AssistantCloudJWTAuthStrategy(config.authToken);
    } else if ("apiKey" in config) {
      this._baseUrl = "https://backend.assistant-api.com";
      this._auth = new AssistantCloudAPIKeyAuthStrategy(
        config.apiKey,
        config.userId,
        config.workspaceId,
      );
    } else if ("anonymous" in config) {
      this._baseUrl = config.baseUrl;
      this._auth = new AssistantCloudAnonymousAuthStrategy(config.baseUrl);
    } else {
      throw new Error(
        "Invalid configuration: Must provide authToken, apiKey, or anonymous configuration",
      );
    }
  }

  public async initializeAuth() {
    return !!this._auth.getAuthHeaders();
  }

  public async makeRawRequest(
    endpoint: string,
    options: MakeRequestOptions = {},
  ) {
    const authHeaders = await this._auth.getAuthHeaders();
    if (!authHeaders) throw new Error("Authorization failed");

    const headers = {
      ...authHeaders,
      ...options.headers,
      "Content-Type": "application/json",
    };

    const queryParams = new URLSearchParams();
    if (options.query) {
      for (const [key, value] of Object.entries(options.query)) {
        if (value === false) continue;
        if (value === true) {
          queryParams.set(key, "true");
        } else {
          queryParams.set(key, value.toString());
        }
      }
    }

    const url = new URL(`${this._baseUrl}/v1${endpoint}`);
    url.search = queryParams.toString();

    const response = await fetch(url, {
      method: options.method ?? "GET",
      headers,
      body: options.body ? JSON.stringify(options.body) : null,
    });

    this._auth.readAuthHeaders(response.headers);

    if (!response.ok) {
      const text = await response.text();
      try {
        const body = JSON.parse(text);
        throw new CloudAPIError(body.message);
      } catch {
        throw new Error(
          `Request failed with status ${response.status}, ${text}`,
        );
      }
    }

    return response;
  }

  public async makeRequest(endpoint: string, options: MakeRequestOptions = {}) {
    const response = await this.makeRawRequest(endpoint, options);
    return response.json();
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudAuthStrategy.tsx
================================================
export type AssistantCloudAuthStrategy = {
  readonly strategy: "anon" | "jwt" | "api-key";
  getAuthHeaders(): Promise<Record<string, string> | false>;
  readAuthHeaders(headers: Headers): void;
};

const getJwtExpiry = (jwt: string): number => {
  try {
    const parts = jwt.split(".");
    const bodyPart = parts[1];
    if (!bodyPart) {
      throw new Error("Invalid JWT format");
    }

    // Convert from Base64Url to Base64 and add padding if necessary
    let base64 = bodyPart.replace(/-/g, "+").replace(/_/g, "/");
    while (base64.length % 4 !== 0) {
      base64 += "=";
    }

    // Decode the Base64 string and parse the payload
    const payload = atob(base64);
    const payloadObj = JSON.parse(payload);
    const exp = payloadObj.exp;

    if (!exp || typeof exp !== "number") {
      throw new Error('JWT does not contain a valid "exp" field');
    }

    // Convert expiration time to milliseconds
    return exp * 1000;
  } catch (error) {
    throw new Error("Unable to determine the token expiry: " + error);
  }
};

export class AssistantCloudJWTAuthStrategy
  implements AssistantCloudAuthStrategy
{
  public readonly strategy = "jwt";

  private cachedToken: string | null = null;
  private tokenExpiry: number | null = null;
  #authTokenCallback: () => Promise<string | null>;

  constructor(authTokenCallback: () => Promise<string | null>) {
    this.#authTokenCallback = authTokenCallback;
  }

  public async getAuthHeaders(): Promise<Record<string, string> | false> {
    const currentTime = Date.now();

    // Use cached token if it's valid for at least 30 more seconds
    if (
      this.cachedToken &&
      this.tokenExpiry &&
      this.tokenExpiry - currentTime > 30 * 1000
    ) {
      return { Authorization: `Bearer ${this.cachedToken}` };
    }

    // Fetch a new token via the callback
    const newToken = await this.#authTokenCallback();
    if (!newToken) return false;

    this.cachedToken = newToken;
    this.tokenExpiry = getJwtExpiry(newToken);

    return { Authorization: `Bearer ${newToken}` };
  }

  public readAuthHeaders(headers: Headers) {
    const authHeader = headers.get("Authorization");
    if (!authHeader) return;

    const [scheme, token] = authHeader.split(" ");
    if (scheme !== "Bearer" || !token) {
      throw new Error("Invalid auth header received");
    }

    this.cachedToken = token;
    this.tokenExpiry = getJwtExpiry(token);
  }
}

export class AssistantCloudAPIKeyAuthStrategy
  implements AssistantCloudAuthStrategy
{
  public readonly strategy = "api-key";

  #apiKey: string;
  #userId: string;
  #workspaceId: string;

  constructor(apiKey: string, userId: string, workspaceId: string) {
    this.#apiKey = apiKey;
    this.#userId = userId;
    this.#workspaceId = workspaceId;
  }

  public async getAuthHeaders(): Promise<Record<string, string>> {
    return {
      Authorization: `Bearer ${this.#apiKey}`,
      "Aui-User-Id": this.#userId,
      "Aui-Workspace-Id": this.#workspaceId,
    };
  }

  public readAuthHeaders() {
    // No operation needed for API key auth
  }
}

const AUI_REFRESH_TOKEN_NAME = "aui:refresh_token";

export class AssistantCloudAnonymousAuthStrategy
  implements AssistantCloudAuthStrategy
{
  public readonly strategy = "anon";

  private baseUrl: string;
  private jwtStrategy: AssistantCloudJWTAuthStrategy;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
    this.jwtStrategy = new AssistantCloudJWTAuthStrategy(async () => {
      const currentTime = Date.now();
      const storedRefreshTokenJson = localStorage.getItem(
        AUI_REFRESH_TOKEN_NAME,
      );
      const storedRefreshToken = storedRefreshTokenJson
        ? (JSON.parse(storedRefreshTokenJson) as {
            token: string;
            expires_at: string;
          })
        : undefined;

      if (storedRefreshToken) {
        const refreshExpiry = new Date(storedRefreshToken.expires_at).getTime();
        if (refreshExpiry - currentTime > 30 * 1000) {
          const response = await fetch(
            `${this.baseUrl}/v1/auth/tokens/refresh`,
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ refresh_token: storedRefreshToken.token }),
            },
          );

          if (response.ok) {
            const data = await response.json();
            const { access_token, refresh_token } = data;
            if (refresh_token) {
              localStorage.setItem(
                AUI_REFRESH_TOKEN_NAME,
                JSON.stringify(refresh_token),
              );
            }
            return access_token;
          }
        } else {
          localStorage.removeItem(AUI_REFRESH_TOKEN_NAME);
        }
      }

      // No valid refresh token; request a new anonymous token
      const response = await fetch(`${this.baseUrl}/v1/auth/tokens/anonymous`, {
        method: "POST",
      });

      if (!response.ok) return null;

      const data = await response.json();
      const { access_token, refresh_token } = data;

      if (!access_token || !refresh_token) return null;

      localStorage.setItem(
        AUI_REFRESH_TOKEN_NAME,
        JSON.stringify(refresh_token),
      );
      return access_token;
    });
  }

  public async getAuthHeaders(): Promise<Record<string, string> | false> {
    return this.jwtStrategy.getAuthHeaders();
  }

  public readAuthHeaders(headers: Headers): void {
    this.jwtStrategy.readAuthHeaders(headers);
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudAuthTokens.tsx
================================================
import { AssistantCloudAPI } from "./AssistantCloudAPI";

type AssistantCloudAuthTokensCreateResponse = {
  token: string;
};

export class AssistantCloudAuthTokens {
  constructor(private cloud: AssistantCloudAPI) {}

  public async create(): Promise<AssistantCloudAuthTokensCreateResponse> {
    return this.cloud.makeRequest("/auth/tokens", { method: "POST" });
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudRuns.tsx
================================================
import { CoreMessage } from "../types";
import { AssistantCloudAPI } from "./AssistantCloudAPI";
import { AssistantStream, PlainTextDecoder } from "assistant-stream";

type AssistantCloudRunsStreamBody = {
  thread_id: string;
  assistant_id: "system/thread_title";
  messages: CoreMessage[];
};

export class AssistantCloudRuns {
  constructor(private cloud: AssistantCloudAPI) {}

  public async stream(
    body: AssistantCloudRunsStreamBody,
  ): Promise<AssistantStream> {
    const response = await this.cloud.makeRawRequest("/runs/stream", {
      method: "POST",
      headers: {
        Accept: "text/plain",
      },
      body,
    });
    return AssistantStream.fromResponse(response, new PlainTextDecoder());
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudThreadHistoryAdapter.tsx
================================================
import { RefObject, useState } from "react";
import { useThreadListItemRuntime } from "../context";
import { ThreadHistoryAdapter } from "../runtimes/adapters/thread-history/ThreadHistoryAdapter";
import { ExportedMessageRepositoryItem } from "../runtimes/utils/MessageRepository";
import { AssistantCloud } from "./AssistantCloud";
import { auiV0Decode, auiV0Encode } from "./auiV0";
import { ThreadListItemRuntime } from "../api";

class AssistantCloudThreadHistoryAdapter implements ThreadHistoryAdapter {
  constructor(
    private cloudRef: RefObject<AssistantCloud>,
    private threadListItemRuntime: ThreadListItemRuntime,
  ) {}

  private _getIdForLocalId: Record<string, string | Promise<string>> = {};

  async append({ parentId, message }: ExportedMessageRepositoryItem) {
    const { remoteId } = await this.threadListItemRuntime.initialize();
    const task = this.cloudRef.current.threads.messages
      .create(remoteId, {
        parent_id: parentId
          ? ((await this._getIdForLocalId[parentId]) ?? parentId)
          : null,
        format: "aui/v0",
        content: auiV0Encode(message),
      })
      .then(({ message_id }) => {
        this._getIdForLocalId[message.id] = message_id;
        return message_id;
      });

    this._getIdForLocalId[message.id] = task;

    return task.then(() => {});
  }

  async load() {
    const remoteId = this.threadListItemRuntime.getState().remoteId;
    if (!remoteId) return { messages: [] };
    const { messages } =
      await this.cloudRef.current.threads.messages.list(remoteId);
    const payload = {
      messages: messages
        .filter(
          (m): m is typeof m & { format: "aui/v0" } => m.format === "aui/v0",
        )
        .map(auiV0Decode)
        .reverse(),
    };
    return payload;
  }
}

export const useAssistantCloudThreadHistoryAdapter = (
  cloudRef: RefObject<AssistantCloud>,
): ThreadHistoryAdapter => {
  const threadListItemRuntime = useThreadListItemRuntime();
  const [adapter] = useState(
    () =>
      new AssistantCloudThreadHistoryAdapter(cloudRef, threadListItemRuntime),
  );

  return adapter;
};



================================================
File: packages/react/src/cloud/AssistantCloudThreadMessages.tsx
================================================
import { ReadonlyJSONObject } from "../utils/json/json-value";
import { AssistantCloudAPI } from "./AssistantCloudAPI";

export type CloudMessage = {
  id: string;
  parent_id: string | null;
  height: number;
  created_at: Date;
  updated_at: Date;
  format: "aui/v0" | string;
  content: ReadonlyJSONObject;
};

type AssistantCloudThreadMessageListResponse = {
  messages: CloudMessage[];
};

type AssistantCloudThreadMessageCreateBody = {
  parent_id: string | null;
  format: "aui/v0" | string;
  content: ReadonlyJSONObject;
};

type AssistantCloudMessageCreateResponse = {
  message_id: string;
};

export class AssistantCloudThreadMessages {
  constructor(private cloud: AssistantCloudAPI) {}

  public async list(
    threadId: string,
  ): Promise<AssistantCloudThreadMessageListResponse> {
    return this.cloud.makeRequest(
      `/threads/${encodeURIComponent(threadId)}/messages`,
    );
  }

  public async create(
    threadId: string,
    body: AssistantCloudThreadMessageCreateBody,
  ): Promise<AssistantCloudMessageCreateResponse> {
    return this.cloud.makeRequest(
      `/threads/${encodeURIComponent(threadId)}/messages`,
      { method: "POST", body },
    );
  }
}



================================================
File: packages/react/src/cloud/AssistantCloudThreads.tsx
================================================
import { AssistantCloudAPI } from "./AssistantCloudAPI";
import { AssistantCloudThreadMessages } from "./AssistantCloudThreadMessages";

type AssistantCloudThreadsListQuery = {
  is_archived?: boolean;
  limit?: number;
  after?: string;
};

type CloudThread = {
  title: string;
  last_message_at: Date;
  metadata: unknown;
  external_id: string | null;
  id: string;
  project_id: string;
  created_at: Date;
  updated_at: Date;
  workspace_id: string;
  is_archived: boolean;
};

type AssistantCloudThreadsListResponse = {
  threads: CloudThread[];
};

type AssistantCloudThreadsCreateBody = {
  title?: string | undefined;
  last_message_at: Date;
  metadata?: unknown | undefined;
  external_id?: string | undefined;
};

type AssistantCloudThreadsCreateResponse = {
  thread_id: string;
};

type AssistantCloudThreadsUpdateBody = {
  title?: string | undefined;
  last_message_at?: Date | undefined;
  metadata?: unknown | undefined;
  is_archived?: boolean | undefined;
};

export class AssistantCloudThreads {
  public readonly messages: AssistantCloudThreadMessages;

  constructor(private cloud: AssistantCloudAPI) {
    this.messages = new AssistantCloudThreadMessages(cloud);
  }

  public async list(
    query?: AssistantCloudThreadsListQuery,
  ): Promise<AssistantCloudThreadsListResponse> {
    return this.cloud.makeRequest("/threads", { query });
  }

  public async create(
    body: AssistantCloudThreadsCreateBody,
  ): Promise<AssistantCloudThreadsCreateResponse> {
    return this.cloud.makeRequest("/threads", { method: "POST", body });
  }

  public async update(
    threadId: string,
    body: AssistantCloudThreadsUpdateBody,
  ): Promise<void> {
    return this.cloud.makeRequest(`/threads/${encodeURIComponent(threadId)}`, {
      method: "PUT",
      body,
    });
  }

  public async delete(threadId: string): Promise<void> {
    return this.cloud.makeRequest(`/threads/${encodeURIComponent(threadId)}`, {
      method: "DELETE",
    });
  }
}



================================================
File: packages/react/src/cloud/auiV0.ts
================================================
import { JSONObject } from "@ai-sdk/provider";
import { ThreadMessage } from "../types";
import { MessageStatus } from "../types/AssistantTypes";
import { fromThreadMessageLike } from "../runtimes/external-store/ThreadMessageLike";
import { CloudMessage } from "./AssistantCloudThreadMessages";
import { isJSONValue } from "../utils/json/is-json";
import {
  ReadonlyJSONObject,
  ReadonlyJSONValue,
} from "../utils/json/json-value";
import { ExportedMessageRepositoryItem } from "../runtimes/utils/MessageRepository";

type AuiV0MessageContentPart =
  | {
      readonly type: "text";
      readonly text: string;
    }
  | {
      readonly type: "reasoning";
      readonly text: string;
    }
  | {
      readonly type: "source";
      readonly sourceType: "url";
      readonly id: string;
      readonly url: string;
      readonly title?: string;
    }
  | {
      readonly type: "tool-call";
      readonly toolCallId: string;
      readonly toolName: string;
      readonly args: ReadonlyJSONObject;
      readonly result?: ReadonlyJSONValue;
      readonly isError?: true;
    }
  | {
      readonly type: "tool-call";
      readonly toolCallId: string;
      readonly toolName: string;
      readonly argsText: string;
      readonly result?: ReadonlyJSONValue;
      readonly isError?: true;
    };

type AuiV0Message = {
  readonly role: "assistant" | "user" | "system";
  readonly status?: MessageStatus;
  readonly content: readonly AuiV0MessageContentPart[];
  readonly metadata: {
    readonly unstable_annotations: readonly ReadonlyJSONValue[];
    readonly unstable_data: readonly ReadonlyJSONValue[];
    readonly steps: readonly {
      readonly usage?: {
        readonly promptTokens: number;
        readonly completionTokens: number;
      };
    }[];
    readonly custom: Readonly<JSONObject>;
  };
};

export const auiV0Encode = (message: ThreadMessage): AuiV0Message => {
  // TODO attachments are currently intentionally ignored
  // info: ID and createdAt are ignored (we use the server value instead)
  return {
    role: message.role,
    content: message.content.map((part) => {
      const type = part.type;
      switch (type) {
        case "text": {
          return {
            type: "text",
            text: part.text,
          };
        }

        case "reasoning": {
          return {
            type: "reasoning",
            text: part.text,
          };
        }

        case "source":
          return part;

        case "tool-call": {
          if (!isJSONValue(part.result)) {
            console.warn(
              "tool-call result is not JSON! " + JSON.stringify(part),
            );
          }
          return {
            type: "tool-call",
            toolCallId: part.toolCallId,
            toolName: part.toolName,
            ...(JSON.stringify(part.args) === part.argsText
              ? {
                  args: part.args,
                }
              : { argsText: part.argsText }),
            ...(part.result
              ? { result: part.result as ReadonlyJSONValue }
              : {}),
            ...(part.isError ? { isError: true } : {}),
          };
        }

        default: {
          const unhandledType: "image" | "file" | "audio" = type;
          throw new Error(
            `Content part type not supported by aui/v0: ${unhandledType}`,
          );
        }
      }
    }),
    metadata: message.metadata as AuiV0Message["metadata"],
    ...(message.status
      ? {
          status:
            message.status?.type === "running"
              ? {
                  type: "incomplete",
                  reason: "cancelled",
                }
              : message.status,
        }
      : undefined),
  };
};

export const auiV0Decode = (
  cloudMessage: CloudMessage & { format: "aui/v0" },
): ExportedMessageRepositoryItem => {
  const payload = cloudMessage.content as unknown as AuiV0Message;
  const message = fromThreadMessageLike(
    {
      id: cloudMessage.id,
      createdAt: cloudMessage.created_at,
      ...payload,
    },
    cloudMessage.id,
    {
      type: "complete",
      reason: "unknown",
    },
  );

  return {
    parentId: cloudMessage.parent_id,
    message,
  };
};



================================================
File: packages/react/src/cloud/index.ts
================================================
export { useCloudThreadListRuntime } from "./useCloudThreadListRuntime";
export { AssistantCloud } from "./AssistantCloud";



================================================
File: packages/react/src/cloud/useCloudThreadListRuntime.tsx
================================================
"use client";

import { AssistantCloud } from "./AssistantCloud";
import { AssistantRuntime } from "../api";
import { useRemoteThreadListRuntime } from "../runtimes/remote-thread-list/useRemoteThreadListRuntime";
import { useCloudThreadListAdapter } from "../runtimes/remote-thread-list/adapter/cloud";

type ThreadData = {
  externalId: string;
};

type CloudThreadListAdapter = {
  cloud: AssistantCloud;

  runtimeHook: () => AssistantRuntime;

  create?(): Promise<ThreadData>;
  delete?(threadId: string): Promise<void>;
};

export const useCloudThreadListRuntime = ({
  runtimeHook,
  ...adapterOptions
}: CloudThreadListAdapter) => {
  const adapter = useCloudThreadListAdapter(adapterOptions);
  const runtime = useRemoteThreadListRuntime({
    runtimeHook: runtimeHook,
    adapter,
  });

  return runtime;
};



================================================
File: packages/react/src/context/ReadonlyStore.ts
================================================
import type { StoreApi } from "zustand";

export type ReadonlyStore<T> = Omit<StoreApi<T>, "setState" | "destroy">;

export const writableStore = <T>(store: ReadonlyStore<T> | undefined) => {
  return store as unknown as StoreApi<T>;
};



================================================
File: packages/react/src/context/index.ts
================================================
export * from "./providers";
export * from "./stores";
export * from "./react";



================================================
File: packages/react/src/context/providers/AssistantRuntimeProvider.tsx
================================================
"use client";

import {
  FC,
  PropsWithChildren,
  memo,
  useEffect,
  useMemo,
  useState,
} from "react";
import { AssistantContext } from "../react/AssistantContext";
import { makeAssistantToolUIsStore } from "../stores/AssistantToolUIs";
import { ThreadRuntimeProvider } from "./ThreadRuntimeProvider";
import { AssistantRuntime } from "../../api/AssistantRuntime";
import { create } from "zustand";
import { writableStore } from "../ReadonlyStore";
import { AssistantRuntimeCore } from "../../runtimes/core/AssistantRuntimeCore";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace AssistantRuntimeProvider {
  export type Props = PropsWithChildren<{
    /**
     * The runtime to provide to the rest of your app.
     */
    runtime: AssistantRuntime;
  }>;
}

const useAssistantRuntimeStore = (runtime: AssistantRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);
    ensureBinding(runtime.threads);

    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

const useAssistantToolUIsStore = () => {
  return useMemo(() => makeAssistantToolUIsStore(), []);
};

const getRenderComponent = (runtime: AssistantRuntime) => {
  return (runtime as { _core?: AssistantRuntimeCore })._core?.RenderComponent;
};

export const AssistantRuntimeProviderImpl: FC<
  AssistantRuntimeProvider.Props
> = ({ children, runtime }) => {
  const useAssistantRuntime = useAssistantRuntimeStore(runtime);
  const useToolUIs = useAssistantToolUIsStore();
  const [context] = useState(() => {
    return {
      useToolUIs,
      useAssistantRuntime,
    };
  });

  const RenderComponent = getRenderComponent(runtime);

  return (
    <AssistantContext.Provider value={context}>
      {RenderComponent && <RenderComponent />}
      <ThreadRuntimeProvider
        runtime={runtime.thread}
        listItemRuntime={runtime.threads.mainItem}
      >
        {children}
      </ThreadRuntimeProvider>
    </AssistantContext.Provider>
  );
};

export const AssistantRuntimeProvider = memo(AssistantRuntimeProviderImpl);



================================================
File: packages/react/src/context/providers/AttachmentRuntimeProvider.tsx
================================================
"use client";

import { type FC, type PropsWithChildren, useEffect, useState } from "react";
import { create } from "zustand";
import { AttachmentContext } from "../react/AttachmentContext";
import { writableStore } from "../ReadonlyStore";
import { AttachmentRuntime } from "../../api/AttachmentRuntime";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace AttachmentRuntimeProvider {
  export type Props = PropsWithChildren<{
    runtime: AttachmentRuntime;
  }>;
}

const useAttachmentRuntimeStore = (runtime: AttachmentRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);

    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

export const AttachmentRuntimeProvider: FC<AttachmentRuntimeProvider.Props> = ({
  runtime,
  children,
}) => {
  const useAttachmentRuntime = useAttachmentRuntimeStore(runtime);
  const [context] = useState(() => {
    return {
      useAttachmentRuntime,
    };
  });

  return (
    <AttachmentContext.Provider value={context}>
      {children}
    </AttachmentContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/ContentPartRuntimeProvider.tsx
================================================
"use client";

import { type FC, type PropsWithChildren, useEffect, useState } from "react";
import { create } from "zustand";
import { ContentPartContext } from "../react/ContentPartContext";
import type { ContentPartContextValue } from "../react/ContentPartContext";
import { writableStore } from "../ReadonlyStore";
import { ContentPartRuntime } from "../../api/ContentPartRuntime";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace ContentPartRuntimeProvider {
  export type Props = PropsWithChildren<{
    runtime: ContentPartRuntime;
  }>;
}

const useContentPartRuntimeStore = (runtime: ContentPartRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);

    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

export const ContentPartRuntimeProvider: FC<
  ContentPartRuntimeProvider.Props
> = ({ runtime, children }) => {
  const useContentPartRuntime = useContentPartRuntimeStore(runtime);
  const [context] = useState<ContentPartContextValue>(() => {
    return { useContentPartRuntime };
  });

  return (
    <ContentPartContext.Provider value={context}>
      {children}
    </ContentPartContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/MessageRuntimeProvider.tsx
================================================
"use client";

import { type FC, type PropsWithChildren, useEffect, useState } from "react";
import { create } from "zustand";
import { MessageContext } from "../react/MessageContext";
import type { MessageContextValue } from "../react/MessageContext";
import { makeMessageUtilsStore } from "../stores/MessageUtils";
import { writableStore } from "../ReadonlyStore";
import { MessageRuntime } from "../../api/MessageRuntime";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace MessageRuntimeProvider {
  export type Props = PropsWithChildren<{
    runtime: MessageRuntime;
  }>;
}

const useMessageRuntimeStore = (runtime: MessageRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);

    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

const useMessageUtilsStore = () => {
  const [store] = useState(() => makeMessageUtilsStore());
  return store;
};

export const MessageRuntimeProvider: FC<MessageRuntimeProvider.Props> = ({
  runtime,
  children,
}) => {
  const useMessageRuntime = useMessageRuntimeStore(runtime);
  const useMessageUtils = useMessageUtilsStore();
  const [context] = useState<MessageContextValue>(() => {
    return { useMessageRuntime, useMessageUtils };
  });

  return (
    <MessageContext.Provider value={context}>
      {children}
    </MessageContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/TextContentPartProvider.tsx
================================================
"use client";

import { FC, PropsWithChildren, useEffect, useState } from "react";
import { create, StoreApi, UseBoundStore } from "zustand";
import {
  ContentPartContext,
  ContentPartContextValue,
} from "../react/ContentPartContext";
import { ContentPartStatus } from "../../types/AssistantTypes";
import { writableStore } from "../ReadonlyStore";
import {
  ContentPartRuntimeImpl,
  ContentPartState,
} from "../../api/ContentPartRuntime";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace TextContentPartProvider {
  export type Props = PropsWithChildren<{
    text: string;
    isRunning?: boolean | undefined;
  }>;
}

const COMPLETE_STATUS: ContentPartStatus = {
  type: "complete",
};

const RUNNING_STATUS: ContentPartStatus = {
  type: "running",
};

export const TextContentPartProvider: FC<TextContentPartProvider.Props> = ({
  children,
  text,
  isRunning,
}) => {
  const [context] = useState<
    ContentPartContextValue & {
      useContentPart: UseBoundStore<
        StoreApi<ContentPartState & { type: "text" }>
      >;
    }
  >(() => {
    const useContentPart = create<ContentPartState & { type: "text" }>(() => ({
      status: isRunning ? RUNNING_STATUS : COMPLETE_STATUS,
      type: "text",
      text,
    }));

    const contentPartRuntime = new ContentPartRuntimeImpl({
      path: {
        ref: "text",
        threadSelector: { type: "main" },
        messageSelector: { type: "messageId", messageId: "" },
        contentPartSelector: { type: "index", index: 0 },
      },
      getState: useContentPart.getState,
      subscribe: useContentPart.subscribe,
    });
    ensureBinding(contentPartRuntime);

    const useContentPartRuntime = create(() => contentPartRuntime);

    return { useContentPartRuntime, useContentPart };
  });

  useEffect(() => {
    const state = context.useContentPart.getState();
    const textUpdated = state.text !== text;
    const targetStatus = isRunning ? RUNNING_STATUS : COMPLETE_STATUS;
    const statusUpdated = state.status !== targetStatus;

    if (!textUpdated && !statusUpdated) return;

    writableStore(context.useContentPart).setState(
      {
        type: "text",
        text,
        status: targetStatus,
      } satisfies ContentPartState,
      true,
    );
  }, [context, isRunning, text]);

  return (
    <ContentPartContext.Provider value={context}>
      {children}
    </ContentPartContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/ThreadListItemRuntimeProvider.tsx
================================================
"use client";

import { type FC, type PropsWithChildren, useEffect, useState } from "react";
import { create } from "zustand";
import {
  ThreadListItemContext,
  type ThreadListItemContextValue,
} from "../react/ThreadListItemContext";
import { writableStore } from "../ReadonlyStore";
import { ThreadListItemRuntime } from "../../api/ThreadListItemRuntime";
import { ensureBinding } from "../react/utils/ensureBinding";

export namespace ThreadListItemRuntimeProvider {
  export type Props = PropsWithChildren<{
    runtime: ThreadListItemRuntime;
  }>;
}

const useThreadListItemRuntimeStore = (runtime: ThreadListItemRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);
    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

export const ThreadListItemRuntimeProvider: FC<
  ThreadListItemRuntimeProvider.Props
> = ({ runtime, children }) => {
  const useThreadListItemRuntime = useThreadListItemRuntimeStore(runtime);
  const [context] = useState<ThreadListItemContextValue>(() => {
    return { useThreadListItemRuntime };
  });

  return (
    <ThreadListItemContext.Provider value={context}>
      {children}
    </ThreadListItemContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/ThreadRuntimeProvider.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import { useEffect, useState } from "react";
import type { ThreadContextValue } from "../react/ThreadContext";
import { ThreadContext } from "../react/ThreadContext";
import { writableStore } from "../ReadonlyStore";
import { ThreadRuntime } from "../../api/ThreadRuntime";
import { create } from "zustand";
import { ThreadListItemRuntime } from "../../api/ThreadListItemRuntime";
import { ThreadListItemRuntimeProvider } from "./ThreadListItemRuntimeProvider";
import { ensureBinding } from "../react/utils/ensureBinding";
import { ThreadViewportProvider } from "./ThreadViewportProvider";

type ThreadProviderProps = {
  listItemRuntime: ThreadListItemRuntime;
  runtime: ThreadRuntime;
};

const useThreadRuntimeStore = (runtime: ThreadRuntime) => {
  const [store] = useState(() => create(() => runtime));

  useEffect(() => {
    ensureBinding(runtime);
    ensureBinding(runtime.composer);

    writableStore(store).setState(runtime, true);
  }, [runtime, store]);

  return store;
};

export const ThreadRuntimeProvider: FC<
  PropsWithChildren<ThreadProviderProps>
> = ({ children, listItemRuntime: threadListItemRuntime, runtime }) => {
  const useThreadRuntime = useThreadRuntimeStore(runtime);

  const [context] = useState<ThreadContextValue>(() => {
    return {
      useThreadRuntime,
    };
  });

  return (
    <ThreadListItemRuntimeProvider runtime={threadListItemRuntime}>
      <ThreadContext.Provider value={context}>
        {/* TODO temporarily allow accessing viewport state from outside the viewport */}
        {/* TODO figure out if this behavior should be deprecated, since it is quite hacky */}
        <ThreadViewportProvider>{children}</ThreadViewportProvider>
      </ThreadContext.Provider>
    </ThreadListItemRuntimeProvider>
  );
};



================================================
File: packages/react/src/context/providers/ThreadViewportProvider.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import { useEffect, useState } from "react";
import { makeThreadViewportStore } from "../stores/ThreadViewport";
import {
  ThreadViewportContext,
  ThreadViewportContextValue,
  useThreadViewportStore,
} from "../react/ThreadViewportContext";
import { writableStore } from "../ReadonlyStore";

const useThreadViewportStoreValue = () => {
  const outerViewport = useThreadViewportStore({ optional: true });
  const [store] = useState(() => makeThreadViewportStore());

  useEffect(() => {
    return outerViewport?.getState().onScrollToBottom(() => {
      store.getState().scrollToBottom();
    });
  }, [outerViewport, store]);

  useEffect(() => {
    if (!outerViewport) return;
    return store.subscribe((state) => {
      if (outerViewport.getState().isAtBottom !== state.isAtBottom) {
        writableStore(outerViewport).setState({ isAtBottom: state.isAtBottom });
      }
    });
  }, [store, outerViewport]);

  return store;
};

export const ThreadViewportProvider: FC<PropsWithChildren> = ({ children }) => {
  const useThreadViewport = useThreadViewportStoreValue();

  const [context] = useState<ThreadViewportContextValue>(() => {
    return {
      useThreadViewport,
    };
  });

  return (
    <ThreadViewportContext.Provider value={context}>
      {children}
    </ThreadViewportContext.Provider>
  );
};



================================================
File: packages/react/src/context/providers/index.ts
================================================
export { AssistantRuntimeProvider } from "./AssistantRuntimeProvider";
export { TextContentPartProvider } from "./TextContentPartProvider";



================================================
File: packages/react/src/context/react/AssistantContext.ts
================================================
"use client";

import { createContext } from "react";
import type { AssistantToolUIsState } from "../stores/AssistantToolUIs";
import { ReadonlyStore } from "../ReadonlyStore";
import { createContextHook } from "./utils/createContextHook";
import { createContextStoreHook } from "./utils/createContextStoreHook";
import { UseBoundStore } from "zustand";
import { AssistantRuntime } from "../../api/AssistantRuntime";
import { ThreadListRuntime } from "../../api/ThreadListRuntime";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";

export type AssistantContextValue = {
  useAssistantRuntime: UseBoundStore<ReadonlyStore<AssistantRuntime>>;
  useToolUIs: UseBoundStore<ReadonlyStore<AssistantToolUIsState>>;
};

export const AssistantContext = createContext<AssistantContextValue | null>(
  null,
);

export const useAssistantContext = createContextHook(
  AssistantContext,
  "AssistantRuntimeProvider",
);

export function useAssistantRuntime(options?: {
  optional?: false | undefined;
}): AssistantRuntime;
export function useAssistantRuntime(options?: {
  optional?: boolean | undefined;
}): AssistantRuntime | null;
export function useAssistantRuntime(options?: {
  optional?: boolean | undefined;
}) {
  const context = useAssistantContext(options);
  if (!context) return null;
  return context.useAssistantRuntime();
}

export const { useToolUIs, useToolUIsStore } = createContextStoreHook(
  useAssistantContext,
  "useToolUIs",
);

const useThreadListRuntime = (opt: {
  optional: boolean | undefined;
}): ThreadListRuntime | null => useAssistantRuntime(opt)?.threads ?? null;
export const useThreadList = createStateHookForRuntime(useThreadListRuntime);



================================================
File: packages/react/src/context/react/AttachmentContext.ts
================================================
"use client";

import { createContext } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { AttachmentRuntime } from "../../api/AttachmentRuntime";
import { UseBoundStore } from "zustand";
import { createContextHook } from "./utils/createContextHook";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";

export type AttachmentContextValue = {
  useAttachmentRuntime: UseBoundStore<ReadonlyStore<AttachmentRuntime>>;
};

export const AttachmentContext = createContext<AttachmentContextValue | null>(
  null,
);

const useAttachmentContext = createContextHook(
  AttachmentContext,
  "a ComposerPrimitive.Attachments or MessagePrimitive.Attachments component",
);

export function useAttachmentRuntime(options?: {
  optional?: false | undefined;
}): AttachmentRuntime;
export function useAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime | null;
export function useAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime | null {
  const attachmentRuntime = useAttachmentContext(options);
  if (!attachmentRuntime) return null;
  return attachmentRuntime.useAttachmentRuntime();
}

export function useThreadComposerAttachmentRuntime(options?: {
  optional?: false | undefined;
}): AttachmentRuntime<"thread-composer">;
export function useThreadComposerAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"thread-composer"> | null;
export function useThreadComposerAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"thread-composer"> | null {
  const attachmentRuntime = useAttachmentRuntime(options);
  if (!attachmentRuntime) return null;
  if (attachmentRuntime.source !== "thread-composer")
    throw new Error(
      "This component must be used within a thread's ComposerPrimitive.Attachments component.",
    );
  return attachmentRuntime as AttachmentRuntime<"thread-composer">;
}

export function useEditComposerAttachmentRuntime(options?: {
  optional?: false | undefined;
}): AttachmentRuntime<"edit-composer">;
export function useEditComposerAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"edit-composer"> | null;
export function useEditComposerAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"edit-composer"> | null {
  const attachmentRuntime = useAttachmentRuntime(options);
  if (!attachmentRuntime) return null;
  if (attachmentRuntime.source !== "edit-composer")
    throw new Error(
      "This component must be used within a message's ComposerPrimitive.Attachments component.",
    );

  return attachmentRuntime as AttachmentRuntime<"edit-composer">;
}

export function useMessageAttachmentRuntime(options?: {
  optional?: false | undefined;
}): AttachmentRuntime<"message">;
export function useMessageAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"message"> | null;
export function useMessageAttachmentRuntime(options?: {
  optional?: boolean | undefined;
}): AttachmentRuntime<"message"> | null {
  const attachmentRuntime = useAttachmentRuntime(options);
  if (!attachmentRuntime) return null;
  if (attachmentRuntime.source !== "message")
    throw new Error(
      "This component must be used within a MessagePrimitive.Attachments component.",
    );
  return attachmentRuntime as AttachmentRuntime<"message">;
}

export const useAttachment = createStateHookForRuntime(useAttachmentRuntime);

export const useThreadComposerAttachment = createStateHookForRuntime(
  useThreadComposerAttachmentRuntime,
);
export const useEditComposerAttachment = createStateHookForRuntime(
  useEditComposerAttachmentRuntime,
);
export const useMessageAttachment = createStateHookForRuntime(
  useMessageAttachmentRuntime,
);



================================================
File: packages/react/src/context/react/ComposerContext.ts
================================================
"use client";

import { useMessageRuntime } from "./MessageContext";
import { useThreadRuntime } from "./ThreadContext";
import { ComposerRuntime } from "../../api/ComposerRuntime";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";

export function useComposerRuntime(options?: {
  optional?: false | undefined;
}): ComposerRuntime;
export function useComposerRuntime(options?: {
  optional?: boolean | undefined;
}): ComposerRuntime | null;
export function useComposerRuntime(options?: {
  optional?: boolean | undefined;
}): ComposerRuntime | null {
  const messageRuntime = useMessageRuntime({ optional: true });
  const threadRuntime = useThreadRuntime(options);
  return messageRuntime
    ? messageRuntime.composer
    : (threadRuntime?.composer ?? null);
}

export const useComposer = createStateHookForRuntime(useComposerRuntime);



================================================
File: packages/react/src/context/react/ContentPartContext.ts
================================================
"use client";

import { createContext } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { createContextHook } from "./utils/createContextHook";
import { UseBoundStore } from "zustand";
import { ContentPartRuntime } from "../../api/ContentPartRuntime";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";

export type ContentPartContextValue = {
  useContentPartRuntime: UseBoundStore<ReadonlyStore<ContentPartRuntime>>;
};

export const ContentPartContext = createContext<ContentPartContextValue | null>(
  null,
);

const useContentPartContext = createContextHook(
  ContentPartContext,
  "a component passed to <MessagePrimitive.Content components={...}>",
);

export function useContentPartRuntime(options?: {
  optional?: false | undefined;
}): ContentPartRuntime;
export function useContentPartRuntime(options?: {
  optional?: boolean | undefined;
}): ContentPartRuntime | null;
export function useContentPartRuntime(options?: {
  optional?: boolean | undefined;
}) {
  const context = useContentPartContext(options);
  if (!context) return null;
  return context.useContentPartRuntime();
}

export const useContentPart = createStateHookForRuntime(useContentPartRuntime);



================================================
File: packages/react/src/context/react/MessageContext.ts
================================================
"use client";

import { createContext } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { MessageUtilsState } from "../stores/MessageUtils";
import { createContextHook } from "./utils/createContextHook";
import { createContextStoreHook } from "./utils/createContextStoreHook";
import { UseBoundStore } from "zustand";
import { MessageRuntime } from "../../api/MessageRuntime";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";
import { EditComposerRuntime } from "../../api";

export type MessageContextValue = {
  useMessageRuntime: UseBoundStore<ReadonlyStore<MessageRuntime>>;
  useMessageUtils: UseBoundStore<ReadonlyStore<MessageUtilsState>>;
};

export const MessageContext = createContext<MessageContextValue | null>(null);

const useMessageContext = createContextHook(
  MessageContext,
  "a component passed to <ThreadPrimitive.Messages components={...} />",
);

export function useMessageRuntime(options?: {
  optional?: false | undefined;
}): MessageRuntime;
export function useMessageRuntime(options?: {
  optional?: boolean | undefined;
}): MessageRuntime | null;
export function useMessageRuntime(options?: {
  optional?: boolean | undefined;
}) {
  const context = useMessageContext(options);
  if (!context) return null;
  return context.useMessageRuntime();
}

export const useMessage = createStateHookForRuntime(useMessageRuntime);

const useEditComposerRuntime = (opt: {
  optional: boolean | undefined;
}): EditComposerRuntime | null => useMessageRuntime(opt)?.composer ?? null;
export const useEditComposer = createStateHookForRuntime(
  useEditComposerRuntime,
);

export const { useMessageUtils, useMessageUtilsStore } = createContextStoreHook(
  useMessageContext,
  "useMessageUtils",
);



================================================
File: packages/react/src/context/react/ThreadContext.ts
================================================
"use client";

import { createContext, useEffect, useState } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { UseBoundStore } from "zustand";
import { createContextHook } from "./utils/createContextHook";
import { ThreadRuntime } from "../../api/ThreadRuntime";
import { ModelContext } from "../../model-context";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";
import { ThreadComposerRuntime } from "../../api";

export type ThreadContextValue = {
  useThreadRuntime: UseBoundStore<ReadonlyStore<ThreadRuntime>>;
};

export const ThreadContext = createContext<ThreadContextValue | null>(null);

const useThreadContext = createContextHook(
  ThreadContext,
  "AssistantRuntimeProvider",
);

export function useThreadRuntime(options?: {
  optional?: false | undefined;
}): ThreadRuntime;
export function useThreadRuntime(options?: {
  optional?: boolean | undefined;
}): ThreadRuntime | null;
export function useThreadRuntime(options?: { optional?: boolean | undefined }) {
  const context = useThreadContext(options);
  if (!context) return null;
  return context.useThreadRuntime();
}

export const useThread = createStateHookForRuntime(useThreadRuntime);

const useThreadComposerRuntime = (opt: {
  optional: boolean | undefined;
}): ThreadComposerRuntime | null => useThreadRuntime(opt)?.composer ?? null;
export const useThreadComposer = createStateHookForRuntime(
  useThreadComposerRuntime,
);

export function useThreadModelContext(options?: {
  optional?: false | undefined;
}): ModelContext;
export function useThreadModelContext(options?: {
  optional?: boolean | undefined;
}): ModelContext | null;
export function useThreadModelContext(options?: {
  optional?: boolean | undefined;
}): ModelContext | null {
  const [, rerender] = useState({});

  const runtime = useThreadRuntime(options);
  useEffect(() => {
    return runtime?.unstable_on("model-context-update", () => rerender({}));
  }, [runtime]);

  if (!runtime) return null;
  return runtime?.getModelContext();
}



================================================
File: packages/react/src/context/react/ThreadListItemContext.ts
================================================
"use client";

import { createContext } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { createContextHook } from "./utils/createContextHook";
import { UseBoundStore } from "zustand";
import { ThreadListItemRuntime } from "../../api/ThreadListItemRuntime";
import { createStateHookForRuntime } from "./utils/createStateHookForRuntime";

export type ThreadListItemContextValue = {
  useThreadListItemRuntime: UseBoundStore<ReadonlyStore<ThreadListItemRuntime>>;
};

export const ThreadListItemContext =
  createContext<ThreadListItemContextValue | null>(null);

const useThreadListItemContext = createContextHook(
  ThreadListItemContext,
  "a component passed to <ThreadListPrimitive.Items components={...}>",
);

export function useThreadListItemRuntime(options?: {
  optional?: false | undefined;
}): ThreadListItemRuntime;
export function useThreadListItemRuntime(options?: {
  optional?: boolean | undefined;
}): ThreadListItemRuntime | null;
export function useThreadListItemRuntime(options?: {
  optional?: boolean | undefined;
}) {
  const context = useThreadListItemContext(options);
  if (!context) return null;
  return context.useThreadListItemRuntime();
}

export const useThreadListItem = createStateHookForRuntime(
  useThreadListItemRuntime,
);



================================================
File: packages/react/src/context/react/ThreadViewportContext.ts
================================================
"use client";

import { createContext } from "react";
import { ReadonlyStore } from "../ReadonlyStore";
import { UseBoundStore } from "zustand";
import { createContextHook } from "./utils/createContextHook";
import { createContextStoreHook } from "./utils/createContextStoreHook";
import { ThreadViewportState } from "../stores";

export type ThreadViewportContextValue = {
  useThreadViewport: UseBoundStore<ReadonlyStore<ThreadViewportState>>;
};

export const ThreadViewportContext =
  createContext<ThreadViewportContextValue | null>(null);

const useThreadViewportContext = createContextHook(
  ThreadViewportContext,
  "ThreadPrimitive.Viewport",
);

export const { useThreadViewport, useThreadViewportStore } =
  createContextStoreHook(useThreadViewportContext, "useThreadViewport");



================================================
File: packages/react/src/context/react/index.ts
================================================
"use client";
// TODO createContextStoreHook does not work well with server-side nextjs bundler
// use client necessary here for now

export {
  useAssistantRuntime,
  useThreadList,
  useToolUIs,
  useToolUIsStore,
} from "./AssistantContext";

export {
  useThreadRuntime,
  useThread,
  useThreadComposer,
  useThreadModelContext,
  /**
   * @deprecated This method was renamed to `useThreadModelContext`.
   */
  useThreadModelContext as useThreadModelConfig,
} from "./ThreadContext";

export {
  useThreadViewport,
  useThreadViewportStore,
} from "./ThreadViewportContext";

export {
  useThreadListItemRuntime,
  useThreadListItem,
} from "./ThreadListItemContext";

export {
  useMessageRuntime,
  useMessage,
  useEditComposer,
  useMessageUtils,
  useMessageUtilsStore,
} from "./MessageContext";
export { useContentPartRuntime, useContentPart } from "./ContentPartContext";
export { useComposerRuntime, useComposer } from "./ComposerContext";

export {
  useAttachment,
  useAttachmentRuntime,

  // TODO decide if we want to export/drop these?
  // useEditComposerAttachment,
  // useEditComposerAttachmentRuntime,
  // useMessageAttachment,
  // useMessageAttachmentRuntime,
  // useThreadComposerAttachment,
  // useThreadComposerAttachmentRuntime,
} from "./AttachmentContext";

export { useRuntimeState } from "./utils/useRuntimeState";



================================================
File: packages/react/src/context/react/utils/createContextHook.ts
================================================
"use client";

import { useContext, Context } from "react";

/**
 * Creates a context hook with optional support.
 * @param context - The React context to consume.
 * @param providerName - The name of the provider for error messages.
 * @returns A hook function that provides the context value.
 */
export function createContextHook<T>(
  context: Context<T | null>,
  providerName: string,
) {
  function useContextHook(options?: {
    optional?: boolean | undefined;
  }): T | null {
    const contextValue = useContext(context);
    if (!options?.optional && !contextValue) {
      throw new Error(`This component must be used within ${providerName}.`);
    }
    return contextValue;
  }

  return useContextHook;
}



================================================
File: packages/react/src/context/react/utils/createContextStoreHook.ts
================================================
import { UseBoundStore } from "zustand";
import { ReadonlyStore } from "../../ReadonlyStore";

/**
 * Creates hooks for accessing a store within a context.
 * @param contextHook - The hook to access the context.
 * @param contextKey - The key of the store in the context.
 * @returns An object containing the hooks: `use...` and `use...Store`.
 */
export function createContextStoreHook<T, K extends keyof T & string>(
  contextHook: (options?: { optional?: boolean }) => T | null,
  contextKey: K,
) {
  type StoreType = T[K];
  type StateType = StoreType extends ReadonlyStore<infer S> ? S : never;

  // Define useStoreStoreHook with overloads
  function useStoreStoreHook(): ReadonlyStore<StateType>;
  function useStoreStoreHook(options: {
    optional: true;
  }): ReadonlyStore<StateType> | null;
  function useStoreStoreHook(options?: {
    optional?: boolean;
  }): ReadonlyStore<StateType> | null {
    const context = contextHook(options);
    if (!context) return null;
    return context[contextKey] as ReadonlyStore<StateType>;
  }

  // Define useStoreHook with overloads
  function useStoreHook(): StateType;
  function useStoreHook<TSelected>(
    selector: (state: StateType) => TSelected,
  ): TSelected;
  function useStoreHook(options: { optional: true }): StateType | null;
  function useStoreHook<TSelected>(options: {
    optional: true;
    selector?: (state: StateType) => TSelected;
  }): TSelected | null;
  function useStoreHook<TSelected>(
    param?:
      | ((state: StateType) => TSelected)
      | {
          optional?: boolean;
          selector?: (state: StateType) => TSelected;
        },
  ): TSelected | StateType | null {
    let optional = false;
    let selector: ((state: StateType) => TSelected) | undefined;

    if (typeof param === "function") {
      selector = param;
    } else if (param && typeof param === "object") {
      optional = !!param.optional;
      selector = param.selector;
    }

    const store = useStoreStoreHook({
      optional,
    } as any) as UseBoundStore<ReadonlyStore<StateType>>;
    if (!store) return null;
    return selector ? store(selector) : store();
  }

  // Return an object with keys based on contextKey
  return {
    [contextKey]: useStoreHook,
    [`${contextKey}Store`]: useStoreStoreHook,
  } as {
    [P in K]: typeof useStoreHook;
  } & {
    [P in `${K}Store`]: typeof useStoreStoreHook;
  };
}



================================================
File: packages/react/src/context/react/utils/createStateHookForRuntime.ts
================================================
import {
  SubscribableRuntime,
  useRuntimeStateInternal,
} from "./useRuntimeState";

export function createStateHookForRuntime<TState>(
  useRuntime: (options: {
    optional: boolean | undefined;
  }) => SubscribableRuntime<TState> | null,
) {
  // empty
  function useStoreHook(): TState;

  // selector
  function useStoreHook<TSelected>(
    selector: (state: TState) => TSelected,
  ): TSelected;

  // selector?
  function useStoreHook<TSelected>(
    selector: ((state: TState) => TSelected) | undefined,
  ): TSelected | TState;

  // optional=false
  function useStoreHook(options: { optional?: false | undefined }): TState;

  // optional?
  function useStoreHook(options: {
    optional?: boolean | undefined;
  }): TState | null;

  // optional=false, selector
  function useStoreHook<TSelected>(options: {
    optional?: false | undefined;
    selector: (state: TState) => TSelected;
  }): TSelected;

  // optional=false, selector?
  function useStoreHook<TSelected>(options: {
    optional?: false | undefined;
    selector: ((state: TState) => TSelected) | undefined;
  }): TSelected | TState;

  // optional?, selector
  function useStoreHook<TSelected>(options: {
    optional?: boolean | undefined;
    selector: (state: TState) => TSelected;
  }): TSelected | null;

  // optional?, selector?
  function useStoreHook<TSelected>(options: {
    optional?: boolean | undefined;
    selector: ((state: TState) => TSelected) | undefined;
  }): TSelected | TState | null;

  function useStoreHook<TSelected>(
    param?:
      | ((state: TState) => TSelected)
      | {
          optional?: boolean | undefined;
          selector?: ((state: TState) => TSelected) | undefined;
        },
  ): TSelected | TState | null {
    let optional = false;
    let selector: ((state: TState) => TSelected) | undefined;

    if (typeof param === "function") {
      selector = param;
    } else if (param) {
      optional = !!param.optional;
      selector = param.selector;
    }

    const store = useRuntime({ optional });
    if (!store) return null;

    // it is ok to call useRuntimeStateInternal conditionally because it will never become null if its available
    // eslint-ignore-next-line react-hooks/rules-of-hooks
    return useRuntimeStateInternal(store, selector);
  }

  return useStoreHook;
}



================================================
File: packages/react/src/context/react/utils/ensureBinding.ts
================================================
type Bindable = {
  __internal_bindMethods?: () => void;
  __isBound?: boolean;
};
const debugVerifyPrototype = (
  runtime: Record<string, unknown>,
  prototype: any,
) => {
  const unboundMethods = Object.getOwnPropertyNames(prototype).filter(
    (methodStr) => {
      const descriptor = Object.getOwnPropertyDescriptor(prototype, methodStr);
      const isMethod = descriptor && typeof descriptor.value === "function";
      if (!isMethod) return false;

      const methodName = methodStr as keyof typeof runtime | "constructor";
      return (
        isMethod &&
        !methodName.startsWith("_") &&
        methodName !== "constructor" &&
        prototype[methodName] === runtime[methodName]
      );
    },
  );

  if (unboundMethods.length > 0) {
    throw new Error(
      "The following methods are not bound: " + JSON.stringify(unboundMethods),
    );
  }

  const prototypePrototype = Object.getPrototypeOf(prototype);
  if (prototypePrototype && prototypePrototype !== Object.prototype) {
    debugVerifyPrototype(runtime, prototypePrototype);
  }
};
export const ensureBinding = (r: unknown) => {
  const runtime = r as Bindable;
  if (runtime.__isBound) return;

  runtime.__internal_bindMethods?.();
  runtime.__isBound = true;

  // @ts-expect-error - strip this out in production build
  DEV: debugVerifyPrototype(runtime, Object.getPrototypeOf(runtime));
};



================================================
File: packages/react/src/context/react/utils/useRuntimeState.ts
================================================
import { useDebugValue, useSyncExternalStore } from "react";
import { Unsubscribe } from "../../../types";
import { ensureBinding } from "./ensureBinding";

export type SubscribableRuntime<TState> = {
  getState: () => TState;
  subscribe: (callback: () => void) => Unsubscribe;
};

export function useRuntimeStateInternal<TState, TSelected>(
  runtime: SubscribableRuntime<TState>,
  selector: ((state: TState) => TSelected | TState) | undefined = identity,
): TSelected | TState {
  // TODO move to useRuntimeState
  ensureBinding(runtime);

  const slice = useSyncExternalStore(
    runtime.subscribe,
    () => selector(runtime.getState()),
    () => selector(runtime.getState()),
  );
  useDebugValue(slice);
  return slice;
}

const identity = <T>(arg: T): T => arg;
export function useRuntimeState<TState>(
  runtime: SubscribableRuntime<TState>,
): TState;
export function useRuntimeState<TState, TSelected>(
  runtime: SubscribableRuntime<TState>,
  selector: (state: TState) => TSelected,
): TSelected;
export function useRuntimeState<TState, TSelected>(
  runtime: SubscribableRuntime<TState>,
  selector: ((state: TState) => TSelected) | undefined,
): TSelected | TState;
export function useRuntimeState<TState, TSelected>(
  runtime: SubscribableRuntime<TState>,
  selector?: ((state: TState) => TSelected) | undefined,
): TSelected | TState {
  // ensure that the runtime is bound
  // ensureBinding(runtime);

  return useRuntimeStateInternal(runtime, selector);
}



================================================
File: packages/react/src/context/stores/AssistantToolUIs.ts
================================================
import { create } from "zustand";
import type { ToolCallContentPartComponent } from "../../types/ContentPartComponentTypes";
import { Unsubscribe } from "../../types";

export type AssistantToolUIsState = {
  /**
   * Get the tool UI configured for a given tool name.
   */
  getToolUI: (toolName: string) => ToolCallContentPartComponent | null;

  /**
   * Registers a tool UI for a given tool name. Returns an unsubscribe function to remove the tool UI.
   */
  setToolUI: (
    toolName: string,
    render: ToolCallContentPartComponent,
  ) => Unsubscribe;
};

export const makeAssistantToolUIsStore = () =>
  create<AssistantToolUIsState>((set) => {
    const renderers = new Map<string, ToolCallContentPartComponent[]>();

    return Object.freeze({
      getToolUI: (name) => {
        const arr = renderers.get(name);
        const last = arr?.at(-1);
        if (last) return last;
        return null;
      },
      setToolUI: (name, render) => {
        let arr = renderers.get(name);
        if (!arr) {
          arr = [];
          renderers.set(name, arr);
        }
        arr.push(render);
        set({}); // notify the store listeners

        return () => {
          const index = arr.indexOf(render);
          if (index !== -1) {
            arr.splice(index, 1);
          }
          if (index === arr.length) {
            set({}); // notify the store listeners
          }
        };
      },
    }) satisfies AssistantToolUIsState;
  });



================================================
File: packages/react/src/context/stores/MessageUtils.ts
================================================
import { create } from "zustand";

export type MessageUtilsState = {
  readonly isCopied: boolean;
  readonly setIsCopied: (value: boolean) => void;

  readonly isHovering: boolean;
  readonly setIsHovering: (value: boolean) => void;
};

export const makeMessageUtilsStore = () =>
  create<MessageUtilsState>((set) => {
    return {
      isCopied: false,
      setIsCopied: (value) => {
        set({ isCopied: value });
      },
      isHovering: false,
      setIsHovering: (value) => {
        set({ isHovering: value });
      },
    };
  });



================================================
File: packages/react/src/context/stores/ThreadViewport.tsx
================================================
"use client";

import { create } from "zustand";
import type { Unsubscribe } from "../../types/Unsubscribe";

export type ThreadViewportState = {
  readonly isAtBottom: boolean;
  readonly scrollToBottom: () => void;
  readonly onScrollToBottom: (callback: () => void) => Unsubscribe;
};

export const makeThreadViewportStore = () => {
  const scrollToBottomListeners = new Set<() => void>();

  return create<ThreadViewportState>(() => ({
    isAtBottom: true,
    scrollToBottom: () => {
      for (const listener of scrollToBottomListeners) {
        listener();
      }
    },
    onScrollToBottom: (callback) => {
      scrollToBottomListeners.add(callback);
      return () => {
        scrollToBottomListeners.delete(callback);
      };
    },
  }));
};



================================================
File: packages/react/src/context/stores/index.ts
================================================
export type { AssistantToolUIsState } from "./AssistantToolUIs";
export type { MessageUtilsState } from "./MessageUtils";
export type { ThreadViewportState } from "./ThreadViewport";



================================================
File: packages/react/src/model-context/ModelContextTypes.ts
================================================
import { z } from "zod";
import type { JSONSchema7 } from "json-schema";
import { Unsubscribe } from "../types/Unsubscribe";

export const LanguageModelV1CallSettingsSchema = z.object({
  maxTokens: z.number().int().positive().optional(),
  temperature: z.number().optional(),
  topP: z.number().optional(),
  presencePenalty: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  seed: z.number().int().optional(),
  headers: z.record(z.string().optional()).optional(),
});

export type LanguageModelV1CallSettings = z.infer<
  typeof LanguageModelV1CallSettingsSchema
>;

export const LanguageModelConfigSchema = z.object({
  apiKey: z.string().optional(),
  baseUrl: z.string().optional(),
  modelName: z.string().optional(),
});

export type LanguageModelConfig = z.infer<typeof LanguageModelConfigSchema>;

export type ToolExecuteFunction<TArgs, TResult> = (
  args: TArgs,
  context: {
    toolCallId: string;
    abortSignal: AbortSignal;
  },
) => TResult | Promise<TResult>;

export type ToolStreamCallFunction<TArgs, TResult> = (
  iterator: AsyncGenerator<
    {
      args: TArgs;
      argsTextDelta: string;
    },
    void,
    unknown
  >,
  context: {
    toolCallId: string;
    abortSignal: AbortSignal;
  },
) => TResult | Promise<TResult>;

type OnSchemaValidationErrorFunction<TResult> = ToolExecuteFunction<
  unknown,
  TResult
>;

export type Tool<TArgs = unknown, TResult = unknown> = {
  description?: string | undefined;
  parameters: z.ZodSchema<TArgs> | JSONSchema7;
  execute?: ToolExecuteFunction<TArgs, TResult>;
  /**
   * @deprecated TODO not yet implemented
   */
  experimental_streamCall?: ToolStreamCallFunction<TArgs, TResult>;
  experimental_onSchemaValidationError?: OnSchemaValidationErrorFunction<TResult>;
};

export type ModelContext = {
  priority?: number | undefined;
  system?: string | undefined;
  tools?: Record<string, Tool<any, any>> | undefined;
  callSettings?: LanguageModelV1CallSettings | undefined;
  config?: LanguageModelConfig | undefined;
};

export type ModelContextProvider = {
  getModelContext: () => ModelContext;
  subscribe?: (callback: () => void) => Unsubscribe;
};

export const mergeModelContexts = (
  configSet: Set<ModelContextProvider>,
): ModelContext => {
  const configs = Array.from(configSet)
    .map((c) => c.getModelContext())
    .sort((a, b) => (b.priority ?? 0) - (a.priority ?? 0));

  return configs.reduce((acc, config) => {
    if (config.system) {
      if (acc.system) {
        // TODO should the separator be configurable?
        acc.system += `\n\n${config.system}`;
      } else {
        acc.system = config.system;
      }
    }
    if (config.tools) {
      for (const [name, tool] of Object.entries(config.tools)) {
        const existing = acc.tools?.[name];
        if (existing && existing !== tool) {
          throw new Error(
            `You tried to define a tool with the name ${name}, but it already exists.`,
          );
        }

        if (!acc.tools) acc.tools = {};
        acc.tools[name] = tool;
      }
    }
    if (config.config) {
      acc.config = {
        ...acc.config,
        ...config.config,
      };
    }
    if (config.callSettings) {
      acc.callSettings = {
        ...acc.callSettings,
        ...config.callSettings,
      };
    }
    return acc;
  }, {} as ModelContext);
};



================================================
File: packages/react/src/model-context/index.ts
================================================
export { makeAssistantTool, type AssistantTool } from "./makeAssistantTool";
export {
  type AssistantToolUI,
  makeAssistantToolUI,
} from "./makeAssistantToolUI";
export { useAssistantInstructions } from "./useAssistantInstructions";
export { useAssistantTool, type AssistantToolProps } from "./useAssistantTool";
export {
  useAssistantToolUI,
  type AssistantToolUIProps,
} from "./useAssistantToolUI";
export { useInlineRender } from "./useInlineRender";

export type {
  /**
   * @deprecated This type was renamed to `ModelContext`.
   */
  ModelContext as AssistantConfig,
  /**
   * @deprecated This type was renamed to `ModelContextProvider`.
   */
  ModelContextProvider as AssistantConfigProvider,
  ModelContext,
  ModelContextProvider,
  Tool,
} from "./ModelContextTypes";

export { tool } from "./tool";

/**
 * @deprecated This function was renamed to `makeAssistantVisible`.
 */
export { makeAssistantVisible as makeAssistantReadable } from "./makeAssistantVisible";
export { makeAssistantVisible } from "./makeAssistantVisible";



================================================
File: packages/react/src/model-context/makeAssistantTool.tsx
================================================
"use client";

import { FC } from "react";
import { type AssistantToolProps, useAssistantTool } from "./useAssistantTool";

export type AssistantTool = FC & {
  unstable_tool: AssistantToolProps<any, any>;
};

export const makeAssistantTool = <TArgs, TResult>(
  tool: AssistantToolProps<TArgs, TResult>,
) => {
  const Tool: AssistantTool = () => {
    useAssistantTool(tool);
    return null;
  };
  Tool.unstable_tool = tool;
  return Tool;
};



================================================
File: packages/react/src/model-context/makeAssistantToolUI.tsx
================================================
"use client";

import { FC } from "react";
import {
  type AssistantToolUIProps,
  useAssistantToolUI,
} from "./useAssistantToolUI";

export type AssistantToolUI = FC & {
  unstable_tool: AssistantToolUIProps<any, any>;
};

export const makeAssistantToolUI = <TArgs, TResult>(
  tool: AssistantToolUIProps<TArgs, TResult>,
) => {
  const ToolUI: AssistantToolUI = () => {
    useAssistantToolUI(tool);
    return null;
  };
  ToolUI.unstable_tool = tool;
  return ToolUI;
};



================================================
File: packages/react/src/model-context/makeAssistantVisible.tsx
================================================
"use client";

import {
  useEffect,
  useRef,
  forwardRef,
  ComponentType,
  ForwardedRef,
  PropsWithoutRef,
  useId,
  createContext,
  useContext,
} from "react";
import { z } from "zod";
import { useAssistantRuntime } from "../context";
import { useComposedRefs } from "@radix-ui/react-compose-refs";
import { tool } from "./tool";

const click = tool({
  parameters: z.object({
    clickId: z.string(),
  }),
  execute: async ({ clickId }) => {
    const escapedClickId = CSS.escape(clickId);
    const el = document.querySelector(`[data-click-id='${escapedClickId}']`);
    if (el instanceof HTMLElement) {
      el.click();

      // todo make adjustable
      await new Promise((resolve) => setTimeout(resolve, 2000));
      return {};
    } else {
      return "Element not found";
    }
  },
});

const edit = tool({
  parameters: z.object({
    editId: z.string(),
    value: z.string(),
  }),
  execute: async ({ editId, value }) => {
    const escapedEditId = CSS.escape(editId);
    const el = document.querySelector(`[data-edit-id='${escapedEditId}']`);
    if (el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement) {
      el.value = value;
      el.dispatchEvent(new Event("input", { bubbles: true }));
      el.dispatchEvent(new Event("change", { bubbles: true }));

      // todo make adjustable
      await new Promise((resolve) => setTimeout(resolve, 2000));
      return {};
    } else {
      return "Element not found";
    }
  },
});

const ReadableContext = createContext<boolean>(false);

export const makeAssistantVisible = <T extends ComponentType<any>>(
  Component: T,
  config?: { clickable?: boolean | undefined; editable?: boolean | undefined },
) => {
  const ReadableComponent = forwardRef(
    (props: PropsWithoutRef<T>, outerRef: ForwardedRef<any>) => {
      const isNestedReadable = useContext(ReadableContext);

      const clickId = useId();
      const componentRef = useRef<HTMLElement>(null);

      const assistant = useAssistantRuntime();
      useEffect(() => {
        return assistant.registerModelContextProvider({
          getModelContext: () => {
            return {
              tools: {
                ...(config?.clickable ? { click } : {}),
                ...(config?.editable ? { edit } : {}),
              },
              system: !isNestedReadable // only pass content if this readable isn't nested in another readable
                ? componentRef.current?.outerHTML
                : undefined,
            };
          },
        });
      }, [config?.clickable, config?.editable, isNestedReadable, assistant]);

      const ref = useComposedRefs(componentRef, outerRef);

      return (
        <ReadableContext.Provider value={true}>
          <Component
            {...(props as any)}
            {...(config?.clickable ? { "data-click-id": clickId } : {})}
            {...(config?.editable ? { "data-edit-id": clickId } : {})}
            ref={ref}
          />
        </ReadableContext.Provider>
      );
    },
  );

  ReadableComponent.displayName = Component.displayName;

  return ReadableComponent as unknown as T;
};

export default makeAssistantVisible;



================================================
File: packages/react/src/model-context/tool.ts
================================================
import { Schema, z } from "zod";
import { Tool } from "./ModelContextTypes";

export type inferParameters<PARAMETERS extends Tool<any, any>["parameters"]> =
  PARAMETERS extends Schema<any>
    ? PARAMETERS["_type"]
    : PARAMETERS extends z.ZodTypeAny
      ? z.infer<PARAMETERS>
      : never;

export function tool<
  TArgs extends Tool<any, any>["parameters"],
  TResult = any,
>(tool: {
  description?: string | undefined;
  parameters: TArgs;
  execute?: (
    args: inferParameters<TArgs>,
    context: {
      toolCallId: string;
      abortSignal: AbortSignal;
    },
  ) => TResult | Promise<TResult>;
}): Tool<inferParameters<TArgs>, TResult> {
  return tool;
}



================================================
File: packages/react/src/model-context/useAssistantInstructions.tsx
================================================
"use client";

import { useEffect } from "react";
import { useAssistantRuntime } from "../context";

type AssistantInstructionsConfig = {
  disabled?: boolean | undefined;
  instruction: string;
};

const getInstructions = (
  instruction: string | AssistantInstructionsConfig,
): AssistantInstructionsConfig => {
  if (typeof instruction === "string") return { instruction };
  return instruction;
};

export const useAssistantInstructions = (
  config: string | AssistantInstructionsConfig,
) => {
  const { instruction, disabled = false } = getInstructions(config);
  const assistantRuntime = useAssistantRuntime();

  useEffect(() => {
    if (disabled) return;

    const config = {
      system: instruction,
    };
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => config,
    });
  }, [assistantRuntime, instruction, disabled]);
};



================================================
File: packages/react/src/model-context/useAssistantTool.tsx
================================================
"use client";

import { useEffect } from "react";
import {
  useAssistantRuntime,
  useToolUIsStore,
} from "../context/react/AssistantContext";
import type { ToolCallContentPartComponent } from "../types/ContentPartComponentTypes";
import type { Tool } from "./ModelContextTypes";

export type AssistantToolProps<TArgs, TResult> = Tool<TArgs, TResult> & {
  toolName: string;
  render?: ToolCallContentPartComponent<TArgs, TResult> | undefined;
  disabled?: boolean | undefined;
};

export const useAssistantTool = <TArgs, TResult>(
  tool: AssistantToolProps<TArgs, TResult>,
) => {
  const assistantRuntime = useAssistantRuntime();
  const toolUIsStore = useToolUIsStore();

  useEffect(() => {
    return tool.render
      ? toolUIsStore.getState().setToolUI(tool.toolName, tool.render)
      : undefined;
  }, [toolUIsStore, tool.toolName, tool.render]);

  useEffect(() => {
    const { toolName, render, disabled, ...rest } = tool;
    if (disabled) return;

    const context = {
      tools: {
        [toolName]: rest,
      },
    };
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => context,
    });
  }, [assistantRuntime, tool]);
};



================================================
File: packages/react/src/model-context/useAssistantToolUI.tsx
================================================
"use client";

import { useEffect } from "react";
import { useToolUIsStore } from "../context/react/AssistantContext";
import type { ToolCallContentPartComponent } from "../types/ContentPartComponentTypes";

export type AssistantToolUIProps<TArgs, TResult> = {
  toolName: string;
  render: ToolCallContentPartComponent<TArgs, TResult>;
};

export const useAssistantToolUI = (
  tool: AssistantToolUIProps<any, any> | null,
) => {
  const toolUIsStore = useToolUIsStore();
  useEffect(() => {
    if (!tool) return;
    return toolUIsStore.getState().setToolUI(tool.toolName, tool.render);
  }, [toolUIsStore, tool?.toolName, tool?.render, !tool]);
};



================================================
File: packages/react/src/model-context/useInlineRender.tsx
================================================
"use client";

import { FC, useCallback, useEffect, useState } from "react";
import { ToolCallContentPartProps } from "../types";
import { create } from "zustand";

export const useInlineRender = <TArgs, TResult>(
  toolUI: FC<ToolCallContentPartProps<TArgs, TResult>>,
): FC<ToolCallContentPartProps<TArgs, TResult>> => {
  const [useToolUI] = useState(() => create(() => toolUI));

  useEffect(() => {
    useToolUI.setState(toolUI);
  }, [toolUI, useToolUI]);

  return useCallback(
    function ToolUI(args) {
      const toolUI = useToolUI();
      return toolUI(args);
    },
    [useToolUI],
  );
};



================================================
File: packages/react/src/primitives/index.ts
================================================
export * as ActionBarPrimitive from "./actionBar";
export * as AssistantModalPrimitive from "./assistantModal";
export * as AttachmentPrimitive from "./attachment";
export * as BranchPickerPrimitive from "./branchPicker";
export * as ComposerPrimitive from "./composer";
export * as ContentPartPrimitive from "./contentPart";
export * as MessagePrimitive from "./message";
export * as ThreadPrimitive from "./thread";
export * as ThreadListPrimitive from "./threadList";
export * as ThreadListItemPrimitive from "./threadListItem";

export { useContentPartImage } from "./contentPart/useContentPartImage";
export { useContentPartText } from "./contentPart/useContentPartText";
export { useContentPartReasoning } from "./contentPart/useContentPartReasoning";
export { useThreadViewportAutoScroll } from "./thread/useThreadViewportAutoScroll";



================================================
File: packages/react/src/primitives/actionBar/ActionBarCopy.tsx
================================================
"use client";

import { forwardRef } from "react";
import { ActionButtonProps } from "../../utils/createActionButton";
import { composeEventHandlers } from "@radix-ui/primitive";
import { Primitive } from "@radix-ui/react-primitive";
import { useMessageUtils } from "../../context";
import { useCallback } from "react";
import {
  useMessage,
  useMessageRuntime,
} from "../../context/react/MessageContext";
import { useComposerRuntime } from "../../context";

const useActionBarPrimitiveCopy = ({
  copiedDuration = 3000,
}: { copiedDuration?: number | undefined } = {}) => {
  const messageRuntime = useMessageRuntime();
  const composerRuntime = useComposerRuntime();
  const setIsCopied = useMessageUtils((s) => s.setIsCopied);
  const hasCopyableContent = useMessage((message) => {
    return (
      (message.role !== "assistant" || message.status.type !== "running") &&
      message.content.some((c) => c.type === "text" && c.text.length > 0)
    );
  });

  const callback = useCallback(() => {
    const { isEditing, text: composerValue } = composerRuntime.getState();

    const valueToCopy = isEditing
      ? composerValue
      : messageRuntime.unstable_getCopyText();

    navigator.clipboard.writeText(valueToCopy).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  }, [messageRuntime, setIsCopied, composerRuntime, copiedDuration]);

  if (!hasCopyableContent) return null;
  return callback;
};

export namespace ActionBarPrimitiveCopy {
  export type Element = HTMLButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarPrimitiveCopy>;
}

export const ActionBarPrimitiveCopy = forwardRef<
  ActionBarPrimitiveCopy.Element,
  ActionBarPrimitiveCopy.Props
>(({ copiedDuration, onClick, disabled, ...props }, forwardedRef) => {
  const isCopied = useMessageUtils((u) => u.isCopied);
  const callback = useActionBarPrimitiveCopy({ copiedDuration });
  return (
    <Primitive.button
      type="button"
      {...(isCopied ? { "data-copied": "true" } : {})}
      {...props}
      ref={forwardedRef}
      disabled={disabled || !callback}
      onClick={composeEventHandlers(onClick, () => {
        callback?.();
      })}
    />
  );
});

ActionBarPrimitiveCopy.displayName = "ActionBarPrimitive.Copy";



================================================
File: packages/react/src/primitives/actionBar/ActionBarEdit.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useEditComposer, useMessageRuntime } from "../../context";

const useActionBarEdit = () => {
  const messageRuntime = useMessageRuntime();
  const disabled = useEditComposer((c) => c.isEditing);

  const callback = useCallback(() => {
    messageRuntime.composer.beginEdit();
  }, [messageRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace ActionBarPrimitiveEdit {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarEdit>;
}

export const ActionBarPrimitiveEdit = createActionButton(
  "ActionBarPrimitive.Edit",
  useActionBarEdit,
);



================================================
File: packages/react/src/primitives/actionBar/ActionBarFeedbackNegative.tsx
================================================
"use client";

import { forwardRef } from "react";
import { ActionButtonProps } from "../../utils/createActionButton";
import { composeEventHandlers } from "@radix-ui/primitive";
import { useMessage } from "../../context";
import { Primitive } from "@radix-ui/react-primitive";
import { useCallback } from "react";
import { useMessageRuntime } from "../../context";

const useActionBarFeedbackNegative = () => {
  const messageRuntime = useMessageRuntime();

  const callback = useCallback(() => {
    messageRuntime.submitFeedback({ type: "negative" });
  }, [messageRuntime]);

  return callback;
};

export namespace ActionBarPrimitiveFeedbackNegative {
  export type Element = HTMLButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarFeedbackNegative>;
}

export const ActionBarPrimitiveFeedbackNegative = forwardRef<
  ActionBarPrimitiveFeedbackNegative.Element,
  ActionBarPrimitiveFeedbackNegative.Props
>(({ onClick, disabled, ...props }, forwardedRef) => {
  const isSubmitted = useMessage(
    (u) => u.submittedFeedback?.type === "negative",
  );
  const callback = useActionBarFeedbackNegative();
  return (
    <Primitive.button
      type="button"
      {...(isSubmitted ? { "data-submitted": "true" } : {})}
      {...props}
      ref={forwardedRef}
      disabled={disabled || !callback}
      onClick={composeEventHandlers(onClick, () => {
        callback?.();
      })}
    />
  );
});

ActionBarPrimitiveFeedbackNegative.displayName =
  "ActionBarPrimitive.FeedbackNegative";



================================================
File: packages/react/src/primitives/actionBar/ActionBarFeedbackPositive.tsx
================================================
"use client";

import { forwardRef, useCallback } from "react";
import { ActionButtonProps } from "../../utils/createActionButton";
import { composeEventHandlers } from "@radix-ui/primitive";
import { useMessage, useMessageRuntime } from "../../context";
import { Primitive } from "@radix-ui/react-primitive";

const useActionBarFeedbackPositive = () => {
  const messageRuntime = useMessageRuntime();

  const callback = useCallback(() => {
    messageRuntime.submitFeedback({ type: "positive" });
  }, [messageRuntime]);

  return callback;
};

export namespace ActionBarPrimitiveFeedbackPositive {
  export type Element = HTMLButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarFeedbackPositive>;
}

export const ActionBarPrimitiveFeedbackPositive = forwardRef<
  ActionBarPrimitiveFeedbackPositive.Element,
  ActionBarPrimitiveFeedbackPositive.Props
>(({ onClick, disabled, ...props }, forwardedRef) => {
  const isSubmitted = useMessage(
    (u) => u.submittedFeedback?.type === "positive",
  );
  const callback = useActionBarFeedbackPositive();
  return (
    <Primitive.button
      type="button"
      {...(isSubmitted ? { "data-submitted": "true" } : {})}
      {...props}
      ref={forwardedRef}
      disabled={disabled || !callback}
      onClick={composeEventHandlers(onClick, () => {
        callback?.();
      })}
    />
  );
});

ActionBarPrimitiveFeedbackPositive.displayName =
  "ActionBarPrimitive.FeedbackPositive";



================================================
File: packages/react/src/primitives/actionBar/ActionBarReload.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useMessageRuntime } from "../../context";
import { useThreadRuntime } from "../../context/react/ThreadContext";
import { useCombinedStore } from "../../utils/combined/useCombinedStore";

const useActionBarReload = () => {
  const messageRuntime = useMessageRuntime();
  const threadRuntime = useThreadRuntime();

  const disabled = useCombinedStore(
    [threadRuntime, messageRuntime],
    (t, m) => t.isRunning || t.isDisabled || m.role !== "assistant",
  );

  const callback = useCallback(() => {
    messageRuntime.reload();
  }, [messageRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace ActionBarPrimitiveReload {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarReload>;
}

export const ActionBarPrimitiveReload = createActionButton(
  "ActionBarPrimitive.Reload",
  useActionBarReload,
);



================================================
File: packages/react/src/primitives/actionBar/ActionBarRoot.tsx
================================================
"use client";

import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";
import {
  useActionBarFloatStatus,
  HideAndFloatStatus,
} from "./useActionBarFloatStatus";

type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export namespace ActionBarPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = PrimitiveDivProps & {
    hideWhenRunning?: boolean | undefined;
    autohide?: "always" | "not-last" | "never" | undefined;
    autohideFloat?: "always" | "single-branch" | "never" | undefined;
  };
}

export const ActionBarPrimitiveRoot = forwardRef<
  ActionBarPrimitiveRoot.Element,
  ActionBarPrimitiveRoot.Props
>(({ hideWhenRunning, autohide, autohideFloat, ...rest }, ref) => {
  const hideAndfloatStatus = useActionBarFloatStatus({
    hideWhenRunning,
    autohide,
    autohideFloat,
  });

  if (hideAndfloatStatus === HideAndFloatStatus.Hidden) return null;

  return (
    <Primitive.div
      {...(hideAndfloatStatus === HideAndFloatStatus.Floating
        ? { "data-floating": "true" }
        : null)}
      {...rest}
      ref={ref}
    />
  );
});

ActionBarPrimitiveRoot.displayName = "ActionBarPrimitive.Root";



================================================
File: packages/react/src/primitives/actionBar/ActionBarSpeak.tsx
================================================
"use client";

import { useCallback } from "react";
import { useMessage, useMessageRuntime } from "../../context";
import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";

const useActionBarSpeak = () => {
  const messageRuntime = useMessageRuntime();
  const callback = useCallback(async () => {
    messageRuntime.speak();
  }, [messageRuntime]);

  const hasSpeakableContent = useMessage((m) => {
    return (
      (m.role !== "assistant" || m.status.type !== "running") &&
      m.content.some((c) => c.type === "text" && c.text.length > 0)
    );
  });

  if (!hasSpeakableContent) return null;
  return callback;
};

export namespace ActionBarPrimitiveSpeak {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarSpeak>;
}

export const ActionBarPrimitiveSpeak = createActionButton(
  "ActionBarPrimitive.Speak",
  useActionBarSpeak,
);



================================================
File: packages/react/src/primitives/actionBar/ActionBarStopSpeaking.tsx
================================================
"use client";

import { forwardRef } from "react";
import { ActionButtonProps } from "../../utils/createActionButton";
import { useEscapeKeydown } from "@radix-ui/react-use-escape-keydown";
import { Primitive } from "@radix-ui/react-primitive";
import { composeEventHandlers } from "@radix-ui/primitive";
import { useCallback } from "react";
import {
  useMessage,
  useMessageRuntime,
} from "../../context/react/MessageContext";

const useActionBarStopSpeaking = () => {
  const messageRuntime = useMessageRuntime();
  const isSpeaking = useMessage((u) => u.speech != null);

  const callback = useCallback(() => {
    messageRuntime.stopSpeaking();
  }, [messageRuntime]);

  if (!isSpeaking) return null;

  return callback;
};

export namespace ActionBarPrimitiveStopSpeaking {
  export type Element = HTMLButtonElement;
  export type Props = ActionButtonProps<typeof useActionBarStopSpeaking>;
}

export const ActionBarPrimitiveStopSpeaking = forwardRef<
  ActionBarPrimitiveStopSpeaking.Element,
  ActionBarPrimitiveStopSpeaking.Props
>((props, ref) => {
  const callback = useActionBarStopSpeaking();

  // TODO this stops working if the user is not hovering over an older message
  useEscapeKeydown((e) => {
    if (callback) {
      e.preventDefault();
      callback();
    }
  });

  return (
    <Primitive.button
      type="button"
      disabled={!callback}
      {...props}
      ref={ref}
      onClick={composeEventHandlers(props.onClick, () => {
        callback?.();
      })}
    />
  );
});

ActionBarPrimitiveStopSpeaking.displayName = "ActionBarPrimitive.StopSpeaking";



================================================
File: packages/react/src/primitives/actionBar/index.ts
================================================
export { ActionBarPrimitiveRoot as Root } from "./ActionBarRoot";
export { ActionBarPrimitiveCopy as Copy } from "./ActionBarCopy";
export { ActionBarPrimitiveReload as Reload } from "./ActionBarReload";
export { ActionBarPrimitiveEdit as Edit } from "./ActionBarEdit";
export { ActionBarPrimitiveSpeak as Speak } from "./ActionBarSpeak";
export { ActionBarPrimitiveStopSpeaking as StopSpeaking } from "./ActionBarStopSpeaking";
export { ActionBarPrimitiveFeedbackPositive as FeedbackPositive } from "./ActionBarFeedbackPositive";
export { ActionBarPrimitiveFeedbackNegative as FeedbackNegative } from "./ActionBarFeedbackNegative";



================================================
File: packages/react/src/primitives/actionBar/useActionBarFloatStatus.tsx
================================================
"use client";

import {
  useMessageRuntime,
  useMessageUtilsStore,
} from "../../context/react/MessageContext";
import { useThreadRuntime } from "../../context/react/ThreadContext";
import { useCombinedStore } from "../../utils/combined/useCombinedStore";

export enum HideAndFloatStatus {
  Hidden = "hidden",
  Floating = "floating",
  Normal = "normal",
}

export type UseActionBarFloatStatusProps = {
  hideWhenRunning?: boolean | undefined;
  autohide?: "always" | "not-last" | "never" | undefined;
  autohideFloat?: "always" | "single-branch" | "never" | undefined;
};

export const useActionBarFloatStatus = ({
  hideWhenRunning,
  autohide,
  autohideFloat,
}: UseActionBarFloatStatusProps) => {
  const threadRuntime = useThreadRuntime();
  const messageRuntime = useMessageRuntime();
  const messageUtilsStore = useMessageUtilsStore();

  return useCombinedStore(
    [threadRuntime, messageRuntime, messageUtilsStore],
    (t, m, mu) => {
      if (hideWhenRunning && t.isRunning) return HideAndFloatStatus.Hidden;

      const autohideEnabled =
        autohide === "always" || (autohide === "not-last" && !m.isLast);

      // normal status
      if (!autohideEnabled) return HideAndFloatStatus.Normal;

      // hidden status
      if (!mu.isHovering) return HideAndFloatStatus.Hidden;

      // floating status
      if (
        autohideFloat === "always" ||
        (autohideFloat === "single-branch" && m.branchCount <= 1)
      )
        return HideAndFloatStatus.Floating;

      return HideAndFloatStatus.Normal;
    },
  );
};



================================================
File: packages/react/src/primitives/assistantModal/AssistantModalAnchor.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { ScopedProps, usePopoverScope } from "./scope";

export namespace AssistantModalPrimitiveAnchor {
  export type Element = ComponentRef<typeof PopoverPrimitive.Anchor>;
  export type Props = ComponentPropsWithoutRef<typeof PopoverPrimitive.Anchor>;
}

export const AssistantModalPrimitiveAnchor = forwardRef<
  AssistantModalPrimitiveAnchor.Element,
  AssistantModalPrimitiveAnchor.Props
>(
  (
    {
      __scopeAssistantModal,
      ...rest
    }: ScopedProps<AssistantModalPrimitiveAnchor.Props>,
    ref,
  ) => {
    const scope = usePopoverScope(__scopeAssistantModal);

    return <PopoverPrimitive.Anchor {...scope} {...rest} ref={ref} />;
  },
);
AssistantModalPrimitiveAnchor.displayName = "AssistantModalPrimitive.Anchor";



================================================
File: packages/react/src/primitives/assistantModal/AssistantModalContent.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { ScopedProps, usePopoverScope } from "./scope";
import { composeEventHandlers } from "@radix-ui/primitive";

export namespace AssistantModalPrimitiveContent {
  export type Element = ComponentRef<typeof PopoverPrimitive.Content>;
  export type Props = ComponentPropsWithoutRef<
    typeof PopoverPrimitive.Content
  > & {
    dissmissOnInteractOutside?: boolean | undefined;
  };
}

export const AssistantModalPrimitiveContent = forwardRef<
  AssistantModalPrimitiveContent.Element,
  AssistantModalPrimitiveContent.Props
>(
  (
    {
      __scopeAssistantModal,
      side,
      align,
      onInteractOutside,
      dissmissOnInteractOutside = false,
      ...props
    }: ScopedProps<AssistantModalPrimitiveContent.Props>,
    forwardedRef,
  ) => {
    const scope = usePopoverScope(__scopeAssistantModal);

    return (
      <PopoverPrimitive.Portal {...scope}>
        <PopoverPrimitive.Content
          {...scope}
          {...props}
          ref={forwardedRef}
          side={side ?? "top"}
          align={align ?? "end"}
          onInteractOutside={composeEventHandlers(
            onInteractOutside,
            dissmissOnInteractOutside ? undefined : (e) => e.preventDefault(),
          )}
        />
      </PopoverPrimitive.Portal>
    );
  },
);

AssistantModalPrimitiveContent.displayName = "AssistantModalPrimitive.Content";



================================================
File: packages/react/src/primitives/assistantModal/AssistantModalRoot.tsx
================================================
"use client";

import { FC, useEffect, useState } from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { composeEventHandlers } from "@radix-ui/primitive";
import { ScopedProps, usePopoverScope } from "./scope";
import { useThreadRuntime } from "../../context";

export namespace AssistantModalPrimitiveRoot {
  export type Props = PopoverPrimitive.PopoverProps & {
    unstable_openOnRunStart?: boolean | undefined;
  };
}

const useAssistantModalOpenState = ({
  defaultOpen = false,
  unstable_openOnRunStart = true,
}: {
  defaultOpen?: boolean | undefined;
  unstable_openOnRunStart?: boolean | undefined;
}) => {
  const state = useState(defaultOpen);

  const [, setOpen] = state;
  const threadRuntime = useThreadRuntime();
  useEffect(() => {
    if (!unstable_openOnRunStart) return undefined;

    return threadRuntime.unstable_on("run-start", () => {
      setOpen(true);
    });
  }, [
    unstable_openOnRunStart,
    setOpen,
    threadRuntime,
    !unstable_openOnRunStart,
  ]);

  return state;
};

export const AssistantModalPrimitiveRoot: FC<
  AssistantModalPrimitiveRoot.Props
> = ({
  __scopeAssistantModal,
  defaultOpen,
  unstable_openOnRunStart,
  open,
  onOpenChange,
  ...rest
}: ScopedProps<AssistantModalPrimitiveRoot.Props>) => {
  const scope = usePopoverScope(__scopeAssistantModal);

  const [modalOpen, setOpen] = useAssistantModalOpenState({
    defaultOpen,
    unstable_openOnRunStart,
  });

  return (
    <PopoverPrimitive.Root
      {...scope}
      open={open === undefined ? modalOpen : open}
      onOpenChange={composeEventHandlers(onOpenChange, setOpen)}
      {...rest}
    />
  );
};

AssistantModalPrimitiveRoot.displayName = "AssistantModalPrimitive.Root";



================================================
File: packages/react/src/primitives/assistantModal/AssistantModalTrigger.tsx
================================================
import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { ScopedProps, usePopoverScope } from "./scope";

export namespace AssistantModalPrimitiveTrigger {
  export type Element = ComponentRef<typeof PopoverPrimitive.Trigger>;
  export type Props = ComponentPropsWithoutRef<typeof PopoverPrimitive.Trigger>;
}

export const AssistantModalPrimitiveTrigger = forwardRef<
  AssistantModalPrimitiveTrigger.Element,
  AssistantModalPrimitiveTrigger.Props
>(
  (
    {
      __scopeAssistantModal,
      ...rest
    }: ScopedProps<AssistantModalPrimitiveTrigger.Props>,
    ref,
  ) => {
    const scope = usePopoverScope(__scopeAssistantModal);

    return <PopoverPrimitive.Trigger {...scope} {...rest} ref={ref} />;
  },
);

AssistantModalPrimitiveTrigger.displayName = "AssistantModalPrimitive.Trigger";



================================================
File: packages/react/src/primitives/assistantModal/index.ts
================================================
export { AssistantModalPrimitiveRoot as Root } from "./AssistantModalRoot";
export { AssistantModalPrimitiveTrigger as Trigger } from "./AssistantModalTrigger";
export { AssistantModalPrimitiveContent as Content } from "./AssistantModalContent";
export { AssistantModalPrimitiveAnchor as Anchor } from "./AssistantModalAnchor";



================================================
File: packages/react/src/primitives/assistantModal/scope.tsx
================================================
import * as PopoverPrimitive from "@radix-ui/react-popover";
import type { Scope } from "@radix-ui/react-context";

export const usePopoverScope = PopoverPrimitive.createPopoverScope();
export type ScopedProps<P> = P & { __scopeAssistantModal?: Scope };



================================================
File: packages/react/src/primitives/attachment/AttachmentName.tsx
================================================
"use client";

import type { FC } from "react";
import { useAttachment } from "../../context/react/AttachmentContext";

export namespace AttachmentPrimitiveName {
  export type Props = Record<string, never>;
}

export const AttachmentPrimitiveName: FC<
  AttachmentPrimitiveName.Props
> = () => {
  const name = useAttachment((a) => a.name);
  return <>{name}</>;
};

AttachmentPrimitiveName.displayName = "AttachmentPrimitive.Name";



================================================
File: packages/react/src/primitives/attachment/AttachmentRemove.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useAttachmentRuntime } from "../../context/react/AttachmentContext";

const useAttachmentRemove = () => {
  const attachmentRuntime = useAttachmentRuntime();

  const handleRemoveAttachment = useCallback(() => {
    attachmentRuntime.remove();
  }, [attachmentRuntime]);

  return handleRemoveAttachment;
};

export namespace AttachmentPrimitiveRemove {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useAttachmentRemove>;
}

export const AttachmentPrimitiveRemove = createActionButton(
  "AttachmentPrimitive.Remove",
  useAttachmentRemove,
);



================================================
File: packages/react/src/primitives/attachment/AttachmentRoot.tsx
================================================
import { Primitive } from "@radix-ui/react-primitive";
import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";

type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export namespace AttachmentPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = PrimitiveDivProps;
}

export const AttachmentPrimitiveRoot = forwardRef<
  AttachmentPrimitiveRoot.Element,
  AttachmentPrimitiveRoot.Props
>((props, ref) => {
  return <Primitive.div {...props} ref={ref} />;
});

AttachmentPrimitiveRoot.displayName = "AttachmentPrimitive.Root";



================================================
File: packages/react/src/primitives/attachment/AttachmentThumb.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, type ComponentRef } from "react";
import { useAttachment } from "../../context/react/AttachmentContext";
import { Primitive } from "@radix-ui/react-primitive";

type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export namespace AttachmentPrimitiveThumb {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = PrimitiveDivProps;
}

export const AttachmentPrimitiveThumb = forwardRef<
  AttachmentPrimitiveThumb.Element,
  AttachmentPrimitiveThumb.Props
>((props, ref) => {
  const ext = useAttachment((a) => a.name.split(".").pop());
  return (
    <Primitive.div {...props} ref={ref}>
      .{ext}
    </Primitive.div>
  );
});

AttachmentPrimitiveThumb.displayName = "AttachmentPrimitive.Thumb";



================================================
File: packages/react/src/primitives/attachment/index.ts
================================================
export { AttachmentPrimitiveRoot as Root } from "./AttachmentRoot";
export { AttachmentPrimitiveThumb as unstable_Thumb } from "./AttachmentThumb";
export { AttachmentPrimitiveName as Name } from "./AttachmentName";
export { AttachmentPrimitiveRemove as Remove } from "./AttachmentRemove";



================================================
File: packages/react/src/primitives/branchPicker/BranchPickerCount.tsx
================================================
"use client";

import type { FC } from "react";
import { useMessage } from "../../context/react/MessageContext";

const useBranchPickerCount = () => {
  const branchCount = useMessage((s) => s.branchCount);
  return branchCount;
};

export namespace BranchPickerPrimitiveCount {
  export type Props = Record<string, never>;
}

export const BranchPickerPrimitiveCount: FC<
  BranchPickerPrimitiveCount.Props
> = () => {
  const branchCount = useBranchPickerCount();
  return <>{branchCount}</>;
};

BranchPickerPrimitiveCount.displayName = "BranchPickerPrimitive.Count";



================================================
File: packages/react/src/primitives/branchPicker/BranchPickerNext.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import {
  useMessage,
  useMessageRuntime,
} from "../../context/react/MessageContext";

const useBranchPickerNext = () => {
  const messageRuntime = useMessageRuntime();
  const disabled = useMessage((m) => m.branchNumber >= m.branchCount);

  const callback = useCallback(() => {
    messageRuntime.switchToBranch({ position: "next" });
  }, [messageRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace BranchPickerPrimitiveNext {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useBranchPickerNext>;
}

export const BranchPickerPrimitiveNext = createActionButton(
  "BranchPickerPrimitive.Next",
  useBranchPickerNext,
);



================================================
File: packages/react/src/primitives/branchPicker/BranchPickerNumber.tsx
================================================
"use client";

import type { FC } from "react";
import { useMessage } from "../../context/react/MessageContext";

const useBranchPickerNumber = () => {
  const branchNumber = useMessage((s) => s.branchNumber);
  return branchNumber;
};

export namespace BranchPickerPrimitiveNumber {
  export type Props = Record<string, never>;
}

export const BranchPickerPrimitiveNumber: FC<
  BranchPickerPrimitiveNumber.Props
> = () => {
  const branchNumber = useBranchPickerNumber();
  return <>{branchNumber}</>;
};

BranchPickerPrimitiveNumber.displayName = "BranchPickerPrimitive.Number";



================================================
File: packages/react/src/primitives/branchPicker/BranchPickerPrevious.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import {
  useMessage,
  useMessageRuntime,
} from "../../context/react/MessageContext";

const useBranchPickerPrevious = () => {
  const messageRuntime = useMessageRuntime();
  const disabled = useMessage((m) => m.branchNumber <= 1);

  const callback = useCallback(() => {
    messageRuntime.switchToBranch({ position: "previous" });
  }, [messageRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace BranchPickerPrimitivePrevious {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useBranchPickerPrevious>;
}

export const BranchPickerPrimitivePrevious = createActionButton(
  "BranchPickerPrimitive.Previous",
  useBranchPickerPrevious,
);



================================================
File: packages/react/src/primitives/branchPicker/BranchPickerRoot.tsx
================================================
import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";
import { If } from "../message";

export namespace BranchPickerPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.div> & {
    hideWhenSingleBranch?: boolean | undefined;
  };
}

export const BranchPickerPrimitiveRoot = forwardRef<
  BranchPickerPrimitiveRoot.Element,
  BranchPickerPrimitiveRoot.Props
>(({ hideWhenSingleBranch, ...rest }, ref) => {
  return (
    <If hasBranches={hideWhenSingleBranch ? true : undefined}>
      <Primitive.div {...rest} ref={ref} />
    </If>
  );
});

BranchPickerPrimitiveRoot.displayName = "BranchPickerPrimitive.Root";



================================================
File: packages/react/src/primitives/branchPicker/index.ts
================================================
export { BranchPickerPrimitiveNext as Next } from "./BranchPickerNext";
export { BranchPickerPrimitivePrevious as Previous } from "./BranchPickerPrevious";
export { BranchPickerPrimitiveCount as Count } from "./BranchPickerCount";
export { BranchPickerPrimitiveNumber as Number } from "./BranchPickerNumber";
export { BranchPickerPrimitiveRoot as Root } from "./BranchPickerRoot";



================================================
File: packages/react/src/primitives/composer/ComposerAddAttachment.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useComposer, useComposerRuntime } from "../../context";

const useComposerAddAttachment = ({
  multiple = true,
}: {
  /** allow selecting multiple files */
  multiple?: boolean | undefined;
} = {}) => {
  const disabled = useComposer((c) => !c.isEditing);

  const composerRuntime = useComposerRuntime();
  const callback = useCallback(() => {
    const input = document.createElement("input");
    input.type = "file";
    input.multiple = multiple;

    const attachmentAccept = composerRuntime.getAttachmentAccept();
    if (attachmentAccept !== "*") {
      input.accept = attachmentAccept;
    }

    input.onchange = (e) => {
      const fileList = (e.target as HTMLInputElement).files;
      if (!fileList) return;
      for (const file of fileList) {
        composerRuntime.addAttachment(file);
      }
    };

    input.click();
  }, [composerRuntime, multiple]);

  if (disabled) return null;
  return callback;
};

export namespace ComposerPrimitiveAddAttachment {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useComposerAddAttachment>;
}

export const ComposerPrimitiveAddAttachment = createActionButton(
  "ComposerPrimitive.AddAttachment",
  useComposerAddAttachment,
  ["multiple"],
);



================================================
File: packages/react/src/primitives/composer/ComposerAttachments.tsx
================================================
"use client";

import { ComponentType, type FC, memo, useMemo } from "react";
import { Attachment } from "../../types";
import { useComposer, useComposerRuntime } from "../../context";
import { useThreadComposerAttachment } from "../../context/react/AttachmentContext";
import { AttachmentRuntimeProvider } from "../../context/providers/AttachmentRuntimeProvider";

export namespace ComposerPrimitiveAttachments {
  export type Props = {
    components:
      | {
          Image?: ComponentType | undefined;
          Document?: ComponentType | undefined;
          File?: ComponentType | undefined;
          Attachment?: ComponentType | undefined;
        }
      | undefined;
  };
}

const getComponent = (
  components: ComposerPrimitiveAttachments.Props["components"],
  attachment: Attachment,
) => {
  const type = attachment.type;
  switch (type) {
    case "image":
      return components?.Image ?? components?.Attachment;
    case "document":
      return components?.Document ?? components?.Attachment;
    case "file":
      return components?.File ?? components?.Attachment;
    default:
      const _exhaustiveCheck: never = type;
      throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
  }
};

const AttachmentComponent: FC<{
  components: ComposerPrimitiveAttachments.Props["components"];
}> = ({ components }) => {
  const Component = useThreadComposerAttachment((a) =>
    getComponent(components, a),
  );

  if (!Component) return null;
  return <Component />;
};

const ComposerAttachmentImpl: FC<
  ComposerPrimitiveAttachments.Props & { attachmentIndex: number }
> = ({ components, attachmentIndex }) => {
  const composerRuntime = useComposerRuntime();
  const runtime = useMemo(
    () => composerRuntime.getAttachmentByIndex(attachmentIndex),
    [composerRuntime, attachmentIndex],
  );

  return (
    <AttachmentRuntimeProvider runtime={runtime}>
      <AttachmentComponent components={components} />
    </AttachmentRuntimeProvider>
  );
};

const ComposerAttachment = memo(
  ComposerAttachmentImpl,
  (prev, next) =>
    prev.attachmentIndex === next.attachmentIndex &&
    prev.components?.Image === next.components?.Image &&
    prev.components?.Document === next.components?.Document &&
    prev.components?.File === next.components?.File &&
    prev.components?.Attachment === next.components?.Attachment,
);

export const ComposerPrimitiveAttachments: FC<
  ComposerPrimitiveAttachments.Props
> = ({ components }) => {
  const attachmentsCount = useComposer((s) => s.attachments.length);

  return Array.from({ length: attachmentsCount }, (_, index) => (
    <ComposerAttachment
      key={index}
      attachmentIndex={index}
      components={components}
    />
  ));
};

ComposerPrimitiveAttachments.displayName = "ComposerPrimitive.Attachments";



================================================
File: packages/react/src/primitives/composer/ComposerCancel.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useComposer, useComposerRuntime } from "../../context";

const useComposerCancel = () => {
  const composerRuntime = useComposerRuntime();
  const disabled = useComposer((c) => !c.canCancel);

  const callback = useCallback(() => {
    composerRuntime.cancel();
  }, [composerRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace ComposerPrimitiveCancel {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useComposerCancel>;
}

export const ComposerPrimitiveCancel = createActionButton(
  "ComposerPrimitive.Cancel",
  useComposerCancel,
);



================================================
File: packages/react/src/primitives/composer/ComposerIf.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import { useComposer } from "../../context/react/ComposerContext";
import type { RequireAtLeastOne } from "../../utils/RequireAtLeastOne";

type ComposerIfFilters = {
  editing: boolean | undefined;
};

export type UseComposerIfProps = RequireAtLeastOne<ComposerIfFilters>;

const useComposerIf = (props: UseComposerIfProps) => {
  return useComposer((composer) => {
    if (props.editing === true && !composer.isEditing) return false;
    if (props.editing === false && composer.isEditing) return false;

    return true;
  });
};

export namespace ComposerPrimitiveIf {
  export type Props = PropsWithChildren<UseComposerIfProps>;
}

export const ComposerPrimitiveIf: FC<ComposerPrimitiveIf.Props> = ({
  children,
  ...query
}) => {
  const result = useComposerIf(query);
  return result ? children : null;
};

ComposerPrimitiveIf.displayName = "ComposerPrimitive.If";



================================================
File: packages/react/src/primitives/composer/ComposerInput.tsx
================================================
"use client";

import { composeEventHandlers } from "@radix-ui/primitive";
import { useComposedRefs } from "@radix-ui/react-compose-refs";
import { Slot } from "@radix-ui/react-slot";
import {
  type KeyboardEvent,
  forwardRef,
  useCallback,
  useEffect,
  useRef,
} from "react";
import TextareaAutosize, {
  type TextareaAutosizeProps,
} from "react-textarea-autosize";
import {
  useComposer,
  useComposerRuntime,
} from "../../context/react/ComposerContext";
import { useThread, useThreadRuntime } from "../../context/react/ThreadContext";
import { useEscapeKeydown } from "@radix-ui/react-use-escape-keydown";
import { useOnScrollToBottom } from "../../utils/hooks/useOnScrollToBottom";
import { useThreadListItemRuntime } from "../../context/react/ThreadListItemContext";

export namespace ComposerPrimitiveInput {
  export type Element = HTMLTextAreaElement;
  export type Props = TextareaAutosizeProps & {
    asChild?: boolean | undefined;
    submitOnEnter?: boolean | undefined;
    cancelOnEscape?: boolean | undefined;
    unstable_focusOnRunStart?: boolean | undefined;
    unstable_focusOnScrollToBottom?: boolean | undefined;
    unstable_focusOnThreadSwitched?: boolean | undefined;
  };
}

export const ComposerPrimitiveInput = forwardRef<
  ComposerPrimitiveInput.Element,
  ComposerPrimitiveInput.Props
>(
  (
    {
      autoFocus = false,
      asChild,
      disabled: disabledProp,
      onChange,
      onKeyDown,
      submitOnEnter = true,
      cancelOnEscape = true,
      unstable_focusOnRunStart = true,
      unstable_focusOnScrollToBottom = true,
      unstable_focusOnThreadSwitched = true,
      ...rest
    },
    forwardedRef,
  ) => {
    const threadListItemRuntime = useThreadListItemRuntime();
    const threadRuntime = useThreadRuntime();
    const composerRuntime = useComposerRuntime();

    const value = useComposer((c) => {
      if (!c.isEditing) return "";
      return c.text;
    });

    const Component = asChild ? Slot : TextareaAutosize;

    const isDisabled = useThread((t) => t.isDisabled) ?? disabledProp ?? false;
    const textareaRef = useRef<HTMLTextAreaElement>(null);
    const ref = useComposedRefs(forwardedRef, textareaRef);

    useEscapeKeydown((e) => {
      if (!cancelOnEscape) return;

      if (composerRuntime.getState().canCancel) {
        composerRuntime.cancel();
        e.preventDefault();
      }
    });

    const handleKeyPress = (e: KeyboardEvent) => {
      if (isDisabled || !submitOnEnter) return;

      // ignore IME composition events
      if (e.nativeEvent.isComposing) return;

      if (e.key === "Enter" && e.shiftKey === false) {
        const { isRunning } = threadRuntime.getState();

        if (!isRunning) {
          e.preventDefault();

          textareaRef.current?.closest("form")?.requestSubmit();
        }
      }
    };

    const autoFocusEnabled = autoFocus && !isDisabled;
    const focus = useCallback(() => {
      const textarea = textareaRef.current;
      if (!textarea || !autoFocusEnabled) return;

      textarea.focus({ preventScroll: true });
      textarea.setSelectionRange(textarea.value.length, textarea.value.length);
    }, [autoFocusEnabled]);

    useEffect(() => focus(), [focus]);

    useOnScrollToBottom(() => {
      if (composerRuntime.type === "thread" && unstable_focusOnScrollToBottom) {
        focus();
      }
    });

    useEffect(() => {
      if (composerRuntime.type !== "thread" || !unstable_focusOnRunStart)
        return undefined;

      return threadRuntime.unstable_on("run-start", focus);
    }, [unstable_focusOnRunStart, focus, composerRuntime, threadRuntime]);

    useEffect(() => {
      if (composerRuntime.type !== "thread" || !unstable_focusOnThreadSwitched)
        return undefined;

      return threadListItemRuntime.unstable_on("switched-to", focus);
    }, [
      unstable_focusOnThreadSwitched,
      focus,
      composerRuntime,
      threadListItemRuntime,
    ]);

    return (
      <Component
        name="input"
        value={value}
        {...rest}
        ref={ref}
        disabled={isDisabled}
        onChange={composeEventHandlers(onChange, (e) => {
          if (!composerRuntime.getState().isEditing) return;
          return composerRuntime.setText(e.target.value);
        })}
        onKeyDown={composeEventHandlers(onKeyDown, handleKeyPress)}
      />
    );
  },
);

ComposerPrimitiveInput.displayName = "ComposerPrimitive.Input";



================================================
File: packages/react/src/primitives/composer/ComposerRoot.tsx
================================================
"use client";

import { composeEventHandlers } from "@radix-ui/primitive";
import { Primitive } from "@radix-ui/react-primitive";
import {
  type ComponentRef,
  type FormEvent,
  forwardRef,
  ComponentPropsWithoutRef,
} from "react";
import { useComposerSend } from "./ComposerSend";

export namespace ComposerPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.form>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.form>;
}

export const ComposerPrimitiveRoot = forwardRef<
  ComposerPrimitiveRoot.Element,
  ComposerPrimitiveRoot.Props
>(({ onSubmit, ...rest }, forwardedRef) => {
  const send = useComposerSend();

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();

    if (!send) return;
    send();
  };

  return (
    <Primitive.form
      {...rest}
      ref={forwardedRef}
      onSubmit={composeEventHandlers(onSubmit, handleSubmit)}
    />
  );
});

ComposerPrimitiveRoot.displayName = "ComposerPrimitive.Root";



================================================
File: packages/react/src/primitives/composer/ComposerSend.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useCombinedStore } from "../../utils/combined/useCombinedStore";
import { useThreadRuntime } from "../../context/react/ThreadContext";
import { useComposerRuntime } from "../../context";

export const useComposerSend = () => {
  const composerRuntime = useComposerRuntime();
  const threadRuntime = useThreadRuntime();

  const disabled = useCombinedStore(
    [threadRuntime, composerRuntime],
    (t, c) => t.isRunning || !c.isEditing || c.isEmpty,
  );

  const callback = useCallback(() => {
    composerRuntime.send();
  }, [composerRuntime]);

  if (disabled) return null;
  return callback;
};

export namespace ComposerPrimitiveSend {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useComposerSend>;
}

export const ComposerPrimitiveSend = createActionButton(
  "ComposerPrimitive.Send",
  useComposerSend,
);



================================================
File: packages/react/src/primitives/composer/index.ts
================================================
export { ComposerPrimitiveRoot as Root } from "./ComposerRoot";
export { ComposerPrimitiveInput as Input } from "./ComposerInput";
export { ComposerPrimitiveSend as Send } from "./ComposerSend";
export { ComposerPrimitiveCancel as Cancel } from "./ComposerCancel";
export { ComposerPrimitiveAddAttachment as AddAttachment } from "./ComposerAddAttachment";
export { ComposerPrimitiveAttachments as Attachments } from "./ComposerAttachments";
export { ComposerPrimitiveIf as If } from "./ComposerIf";



================================================
File: packages/react/src/primitives/contentPart/ContentPartImage.tsx
================================================
"use client";

import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";
import { useContentPartImage } from "./useContentPartImage";

export namespace ContentPartPrimitiveImage {
  export type Element = ComponentRef<typeof Primitive.img>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.img>;
}

export const ContentPartPrimitiveImage = forwardRef<
  ContentPartPrimitiveImage.Element,
  ContentPartPrimitiveImage.Props
>((props, forwardedRef) => {
  const { image } = useContentPartImage();
  return <Primitive.img src={image} {...props} ref={forwardedRef} />;
});

ContentPartPrimitiveImage.displayName = "ContentPartPrimitive.Image";



================================================
File: packages/react/src/primitives/contentPart/ContentPartInProgress.tsx
================================================
"use client";

import { FC, PropsWithChildren } from "react";
import { useContentPart } from "../../context";

export namespace ContentPartPrimitiveInProgress {
  export type Props = PropsWithChildren;
}

// TODO should this be renamed to IsRunning?
export const ContentPartPrimitiveInProgress: FC<
  ContentPartPrimitiveInProgress.Props
> = ({ children }) => {
  const isInProgress = useContentPart((c) => c.status.type === "running");

  return isInProgress ? children : null;
};

ContentPartPrimitiveInProgress.displayName = "ContentPartPrimitive.InProgress";



================================================
File: packages/react/src/primitives/contentPart/ContentPartText.tsx
================================================
"use client";

import { Primitive } from "@radix-ui/react-primitive";
import {
  type ComponentRef,
  forwardRef,
  ComponentPropsWithoutRef,
  ElementType,
} from "react";
import { useContentPartText } from "./useContentPartText";
import { useSmooth } from "../../utils/smooth/useSmooth";

export namespace ContentPartPrimitiveText {
  export type Element = ComponentRef<typeof Primitive.span>;
  export type Props = Omit<
    ComponentPropsWithoutRef<typeof Primitive.span>,
    "children" | "asChild"
  > & {
    smooth?: boolean;
    component?: ElementType;
  };
}

export const ContentPartPrimitiveText = forwardRef<
  ContentPartPrimitiveText.Element,
  ContentPartPrimitiveText.Props
>(({ smooth = true, component: Component = "span", ...rest }, forwardedRef) => {
  const { text, status } = useSmooth(useContentPartText(), smooth);

  return (
    <Component data-status={status.type} {...rest} ref={forwardedRef}>
      {text}
    </Component>
  );
});

ContentPartPrimitiveText.displayName = "ContentPartPrimitive.Text";



================================================
File: packages/react/src/primitives/contentPart/index.ts
================================================
export { ContentPartPrimitiveText as Text } from "./ContentPartText";
export { ContentPartPrimitiveImage as Image } from "./ContentPartImage";
export { ContentPartPrimitiveInProgress as InProgress } from "./ContentPartInProgress";



================================================
File: packages/react/src/primitives/contentPart/useContentPartImage.tsx
================================================
"use client";

import { ContentPartState } from "../../api/ContentPartRuntime";
import { useContentPart } from "../../context/react/ContentPartContext";
import { ImageContentPart } from "../../types";

export const useContentPartImage = () => {
  const image = useContentPart((c) => {
    if (c.type !== "image")
      throw new Error(
        "ContentPartImage can only be used inside image content parts.",
      );

    return c as ContentPartState & ImageContentPart;
  });

  return image;
};



================================================
File: packages/react/src/primitives/contentPart/useContentPartReasoning.tsx
================================================
"use client";

import { ContentPartState } from "../../api/ContentPartRuntime";
import { useContentPart } from "../../context/react/ContentPartContext";
import { ReasoningContentPart } from "../../types";

export const useContentPartReasoning = () => {
  const text = useContentPart((c) => {
    if (c.type !== "reasoning")
      throw new Error(
        "ContentPartReasoning can only be used inside reasoning content parts.",
      );

    return c as ContentPartState & ReasoningContentPart;
  });

  return text;
};



================================================
File: packages/react/src/primitives/contentPart/useContentPartText.tsx
================================================
"use client";

import { ContentPartState } from "../../api/ContentPartRuntime";
import { useContentPart } from "../../context/react/ContentPartContext";
import { TextContentPart } from "../../types";

export const useContentPartText = () => {
  const text = useContentPart((c) => {
    if (c.type !== "text")
      throw new Error(
        "ContentPartText can only be used inside text content parts.",
      );

    return c as ContentPartState & TextContentPart;
  });

  return text;
};



================================================
File: packages/react/src/primitives/message/MessageAttachments.tsx
================================================
"use client";

import { ComponentType, type FC, memo, useMemo } from "react";
import { useMessage, useMessageRuntime } from "../../context";
import { useMessageAttachment } from "../../context/react/AttachmentContext";
import { AttachmentRuntimeProvider } from "../../context/providers/AttachmentRuntimeProvider";
import { CompleteAttachment } from "../../types";

export namespace MessagePrimitiveAttachments {
  export type Props = {
    components:
      | {
          Image?: ComponentType | undefined;
          Document?: ComponentType | undefined;
          File?: ComponentType | undefined;
          Attachment?: ComponentType | undefined;
        }
      | undefined;
  };
}

const getComponent = (
  components: MessagePrimitiveAttachments.Props["components"],
  attachment: CompleteAttachment,
) => {
  const type = attachment.type;
  switch (type) {
    case "image":
      return components?.Image ?? components?.Attachment;
    case "document":
      return components?.Document ?? components?.Attachment;
    case "file":
      return components?.File ?? components?.Attachment;
    default:
      const _exhaustiveCheck: never = type;
      throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
  }
};

const AttachmentComponent: FC<{
  components: MessagePrimitiveAttachments.Props["components"];
}> = ({ components }) => {
  const Component = useMessageAttachment((a) => getComponent(components, a));

  if (!Component) return null;
  return <Component />;
};

const MessageAttachmentImpl: FC<
  MessagePrimitiveAttachments.Props & { attachmentIndex: number }
> = ({ components, attachmentIndex }) => {
  const messageRuntime = useMessageRuntime();
  const runtime = useMemo(
    () => messageRuntime.getAttachmentByIndex(attachmentIndex),
    [messageRuntime, attachmentIndex],
  );

  return (
    <AttachmentRuntimeProvider runtime={runtime}>
      <AttachmentComponent components={components} />
    </AttachmentRuntimeProvider>
  );
};

const MessageAttachment = memo(
  MessageAttachmentImpl,
  (prev, next) =>
    prev.attachmentIndex === next.attachmentIndex &&
    prev.components?.Image === next.components?.Image &&
    prev.components?.Document === next.components?.Document &&
    prev.components?.File === next.components?.File &&
    prev.components?.Attachment === next.components?.Attachment,
);

export const MessagePrimitiveAttachments: FC<
  MessagePrimitiveAttachments.Props
> = ({ components }) => {
  const attachmentsCount = useMessage((message) => {
    if (message.role !== "user") return 0;
    return message.attachments.length;
  });

  return Array.from({ length: attachmentsCount }, (_, index) => (
    <MessageAttachment
      key={index}
      attachmentIndex={index}
      components={components}
    />
  ));
};

MessagePrimitiveAttachments.displayName = "MessagePrimitive.Attachments";



================================================
File: packages/react/src/primitives/message/MessageContent.tsx
================================================
"use client";

import { type ComponentType, type FC, memo, useMemo } from "react";
import {
  TextContentPartProvider,
  useContentPart,
  useContentPartRuntime,
  useToolUIs,
} from "../../context";
import {
  useMessage,
  useMessageRuntime,
} from "../../context/react/MessageContext";
import { ContentPartRuntimeProvider } from "../../context/providers/ContentPartRuntimeProvider";
import { ContentPartPrimitiveText } from "../contentPart/ContentPartText";
import { ContentPartPrimitiveImage } from "../contentPart/ContentPartImage";
import type {
  Unstable_AudioContentPartComponent,
  EmptyContentPartComponent,
  TextContentPartComponent,
  ImageContentPartComponent,
  SourceContentPartComponent,
  ToolCallContentPartComponent,
  ToolCallContentPartProps,
  FileContentPartComponent,
  ReasoningContentPartComponent,
} from "../../types/ContentPartComponentTypes";
import { ContentPartPrimitiveInProgress } from "../contentPart/ContentPartInProgress";
import { ContentPartStatus } from "../../types/AssistantTypes";

export namespace MessagePrimitiveContent {
  export type Props = {
    components?:
      | {
          Empty?: EmptyContentPartComponent | undefined;
          Text?: TextContentPartComponent | undefined;
          Reasoning?: ReasoningContentPartComponent | undefined;
          Source?: SourceContentPartComponent | undefined;
          Image?: ImageContentPartComponent | undefined;
          File?: FileContentPartComponent | undefined;
          Unstable_Audio?: Unstable_AudioContentPartComponent | undefined;
          tools?:
            | {
                by_name?:
                  | Record<string, ToolCallContentPartComponent | undefined>
                  | undefined;
                Fallback?: ComponentType<ToolCallContentPartProps> | undefined;
              }
            | {
                Override: ComponentType<ToolCallContentPartProps>;
              }
            | undefined;
        }
      | undefined;
  };
}

const ToolUIDisplay = ({
  Fallback,
  ...props
}: {
  Fallback: ToolCallContentPartComponent | undefined;
} & ToolCallContentPartProps) => {
  const Render = useToolUIs((s) => s.getToolUI(props.toolName)) ?? Fallback;
  if (!Render) return null;
  return <Render {...props} />;
};

const defaultComponents = {
  Text: () => (
    <p style={{ whiteSpace: "pre-line" }}>
      <ContentPartPrimitiveText />
      <ContentPartPrimitiveInProgress>
        <span style={{ fontFamily: "revert" }}>{" \u25CF"}</span>
      </ContentPartPrimitiveInProgress>
    </p>
  ),
  Reasoning: () => null,
  Source: () => null,
  Image: () => <ContentPartPrimitiveImage />,
  File: () => null,
  Unstable_Audio: () => null,
} satisfies MessagePrimitiveContent.Props["components"];

type MessageContentPartComponentProps = {
  components: MessagePrimitiveContent.Props["components"];
};

const MessageContentPartComponent: FC<MessageContentPartComponentProps> = ({
  components: {
    Text = defaultComponents.Text,
    Reasoning = defaultComponents.Reasoning,
    Image = defaultComponents.Image,
    Source = defaultComponents.Source,
    File = defaultComponents.File,
    Unstable_Audio: Audio = defaultComponents.Unstable_Audio,
    tools = {},
  } = {},
}) => {
  const contentPartRuntime = useContentPartRuntime();

  const part = useContentPart();

  const type = part.type;
  if (type === "tool-call") {
    const addResult = (result: any) => contentPartRuntime.addToolResult(result);
    if ("Override" in tools)
      return <tools.Override {...part} addResult={addResult} />;
    const Tool = tools.by_name?.[part.toolName] ?? tools.Fallback;
    return <ToolUIDisplay {...part} Fallback={Tool} addResult={addResult} />;
  }

  if (part.status.type === "requires-action")
    throw new Error("Encountered unexpected requires-action status");

  switch (type) {
    case "text":
      return <Text {...part} />;

    case "reasoning":
      return <Reasoning {...part} />;

    case "source":
      return <Source {...part} />;

    case "image":
      // eslint-disable-next-line jsx-a11y/alt-text
      return <Image {...part} />;

    case "file":
      return <File {...part} />;

    case "audio":
      return <Audio {...part} />;

    default:
      const unhandledType: never = type;
      throw new Error(`Unknown content part type: ${unhandledType}`);
  }
};

type MessageContentPartProps = {
  partIndex: number;
  components: MessagePrimitiveContent.Props["components"];
};

const MessageContentPartImpl: FC<MessageContentPartProps> = ({
  partIndex,
  components,
}) => {
  const messageRuntime = useMessageRuntime();
  const runtime = useMemo(
    () => messageRuntime.getContentPartByIndex(partIndex),
    [messageRuntime, partIndex],
  );

  return (
    <ContentPartRuntimeProvider runtime={runtime}>
      <MessageContentPartComponent components={components} />
    </ContentPartRuntimeProvider>
  );
};

const MessageContentPart = memo(
  MessageContentPartImpl,
  (prev, next) =>
    prev.partIndex === next.partIndex &&
    prev.components?.Text === next.components?.Text &&
    prev.components?.Reasoning === next.components?.Reasoning &&
    prev.components?.Source === next.components?.Source &&
    prev.components?.Image === next.components?.Image &&
    prev.components?.File === next.components?.File &&
    prev.components?.Unstable_Audio === next.components?.Unstable_Audio &&
    prev.components?.tools === next.components?.tools,
);

const COMPLETE_STATUS: ContentPartStatus = Object.freeze({
  type: "complete",
});

const EmptyContentFallback: FC<{
  status: ContentPartStatus;
  component: TextContentPartComponent;
}> = ({ status, component: Component }) => {
  return (
    <TextContentPartProvider text="" isRunning={status.type === "running"}>
      <Component type="text" text="" status={status} />
    </TextContentPartProvider>
  );
};

const EmptyContentImpl: FC<MessageContentPartComponentProps> = ({
  components,
}) => {
  const status =
    useMessage((s) => s.status as ContentPartStatus) ?? COMPLETE_STATUS;

  if (components?.Empty) return <components.Empty status={status} />;

  return (
    <EmptyContentFallback
      status={status}
      component={components?.Text ?? defaultComponents.Text}
    />
  );
};

const EmptyContent = memo(
  EmptyContentImpl,
  (prev, next) =>
    prev.components?.Empty === next.components?.Empty &&
    prev.components?.Text === next.components?.Text,
);

export const MessagePrimitiveContent: FC<MessagePrimitiveContent.Props> = ({
  components,
}) => {
  const contentLength = useMessage((s) => s.content.length);

  if (contentLength === 0) {
    return <EmptyContent components={components} />;
  }

  return Array.from({ length: contentLength }, (_, index) => (
    <MessageContentPart key={index} partIndex={index} components={components} />
  ));
};

MessagePrimitiveContent.displayName = "MessagePrimitive.Content";



================================================
File: packages/react/src/primitives/message/MessageIf.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import {
  useMessageRuntime,
  useMessageUtilsStore,
} from "../../context/react/MessageContext";
import type { RequireAtLeastOne } from "../../utils/RequireAtLeastOne";
import { useCombinedStore } from "../../utils/combined/useCombinedStore";

type MessageIfFilters = {
  user: boolean | undefined;
  assistant: boolean | undefined;
  system: boolean | undefined;
  hasBranches: boolean | undefined;
  copied: boolean | undefined;
  lastOrHover: boolean | undefined;
  speaking: boolean | undefined;
  hasAttachments: boolean | undefined;
  hasContent: boolean | undefined;
  submittedFeedback: "positive" | "negative" | null | undefined;
};
type UseMessageIfProps = RequireAtLeastOne<MessageIfFilters>;

const useMessageIf = (props: UseMessageIfProps) => {
  const messageRuntime = useMessageRuntime();
  const messageUtilsStore = useMessageUtilsStore();

  return useCombinedStore(
    [messageRuntime, messageUtilsStore],
    (
      {
        role,
        attachments,
        content,
        branchCount,
        isLast,
        speech,
        submittedFeedback,
      },
      { isCopied, isHovering },
    ) => {
      if (props.hasBranches === true && branchCount < 2) return false;

      if (props.user && role !== "user") return false;
      if (props.assistant && role !== "assistant") return false;
      if (props.system && role !== "system") return false;

      if (props.lastOrHover === true && !isHovering && !isLast) return false;

      if (props.copied === true && !isCopied) return false;
      if (props.copied === false && isCopied) return false;

      if (props.speaking === true && speech == null) return false;
      if (props.speaking === false && speech != null) return false;

      if (
        props.hasAttachments === true &&
        (role !== "user" || !attachments.length)
      )
        return false;
      if (
        props.hasAttachments === false &&
        role === "user" &&
        !!attachments.length
      )
        return false;

      if (props.hasContent === true && content.length === 0) return false;
      if (props.hasContent === false && content.length > 0) return false;

      if (
        props.submittedFeedback !== undefined &&
        (submittedFeedback?.type ?? null) !== props.submittedFeedback
      )
        return false;

      return true;
    },
  );
};

export namespace MessagePrimitiveIf {
  export type Props = PropsWithChildren<UseMessageIfProps>;
}

export const MessagePrimitiveIf: FC<MessagePrimitiveIf.Props> = ({
  children,
  ...query
}) => {
  const result = useMessageIf(query);
  return result ? children : null;
};

MessagePrimitiveIf.displayName = "MessagePrimitive.If";



================================================
File: packages/react/src/primitives/message/MessageRoot.tsx
================================================
"use client";

import { Primitive } from "@radix-ui/react-primitive";
import {
  type ComponentRef,
  forwardRef,
  ComponentPropsWithoutRef,
  useCallback,
} from "react";
import { useMessageUtilsStore } from "../../context/react/MessageContext";
import { useManagedRef } from "../../utils/hooks/useManagedRef";
import { useComposedRefs } from "@radix-ui/react-compose-refs";

const useIsHoveringRef = () => {
  const messageUtilsStore = useMessageUtilsStore();
  const callbackRef = useCallback(
    (el: HTMLElement) => {
      const setIsHovering = messageUtilsStore.getState().setIsHovering;

      const handleMouseEnter = () => {
        setIsHovering(true);
      };
      const handleMouseLeave = () => {
        setIsHovering(false);
      };

      el.addEventListener("mouseenter", handleMouseEnter);
      el.addEventListener("mouseleave", handleMouseLeave);

      return () => {
        el.removeEventListener("mouseenter", handleMouseEnter);
        el.removeEventListener("mouseleave", handleMouseLeave);
        setIsHovering(false);
      };
    },
    [messageUtilsStore],
  );

  return useManagedRef(callbackRef);
};

export namespace MessagePrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.div>;
}

export const MessagePrimitiveRoot = forwardRef<
  MessagePrimitiveRoot.Element,
  MessagePrimitiveRoot.Props
>((props, forwardRef) => {
  const isHoveringRef = useIsHoveringRef();
  const ref = useComposedRefs<HTMLDivElement>(forwardRef, isHoveringRef);

  return <Primitive.div {...props} ref={ref} />;
});

MessagePrimitiveRoot.displayName = "MessagePrimitive.Root";



================================================
File: packages/react/src/primitives/message/index.ts
================================================
export { MessagePrimitiveRoot as Root } from "./MessageRoot";
export { MessagePrimitiveIf as If } from "./MessageIf";
export { MessagePrimitiveContent as Content } from "./MessageContent";
export { MessagePrimitiveAttachments as Attachments } from "./MessageAttachments";



================================================
File: packages/react/src/primitives/thread/ThreadEmpty.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import { useThread } from "../../context";

export namespace ThreadPrimitiveEmpty {
  export type Props = PropsWithChildren;
}

export const ThreadPrimitiveEmpty: FC<ThreadPrimitiveEmpty.Props> = ({
  children,
}) => {
  const empty = useThread((u) => u.messages.length === 0);
  return empty ? children : null;
};

ThreadPrimitiveEmpty.displayName = "ThreadPrimitive.Empty";



================================================
File: packages/react/src/primitives/thread/ThreadIf.tsx
================================================
"use client";

import type { FC, PropsWithChildren } from "react";
import { useThread } from "../../context";
import type { RequireAtLeastOne } from "../../utils/RequireAtLeastOne";

type ThreadIfFilters = {
  empty: boolean | undefined;
  running: boolean | undefined;
  disabled: boolean | undefined;
};

type UseThreadIfProps = RequireAtLeastOne<ThreadIfFilters>;

const useThreadIf = (props: UseThreadIfProps) => {
  return useThread((thread) => {
    if (props.empty === true && thread.messages.length !== 0) return false;
    if (props.empty === false && thread.messages.length === 0) return false;
    if (props.running === true && !thread.isRunning) return false;
    if (props.running === false && thread.isRunning) return false;
    if (props.disabled === true && !thread.isDisabled) return false;
    if (props.disabled === false && thread.isDisabled) return false;

    return true;
  });
};

export namespace ThreadPrimitiveIf {
  export type Props = PropsWithChildren<UseThreadIfProps>;
}

export const ThreadPrimitiveIf: FC<ThreadPrimitiveIf.Props> = ({
  children,
  ...query
}) => {
  const result = useThreadIf(query);
  return result ? children : null;
};

ThreadPrimitiveIf.displayName = "ThreadPrimitive.If";



================================================
File: packages/react/src/primitives/thread/ThreadMessages.tsx
================================================
"use client";

import { type ComponentType, type FC, memo, useMemo } from "react";
import { useThread, useThreadRuntime } from "../../context/react/ThreadContext";
import { MessageRuntimeProvider } from "../../context/providers/MessageRuntimeProvider";
import { useEditComposer, useMessage } from "../../context";
import { ThreadMessage as ThreadMessageType } from "../../types";

export namespace ThreadPrimitiveMessages {
  export type Props = {
    components:
      | {
          Message: ComponentType;
          EditComposer?: ComponentType | undefined;
          UserEditComposer?: ComponentType | undefined;
          AssistantEditComposer?: ComponentType | undefined;
          SystemEditComposer?: ComponentType | undefined;
          UserMessage?: ComponentType | undefined;
          AssistantMessage?: ComponentType | undefined;
          SystemMessage?: ComponentType | undefined;
        }
      | {
          Message?: ComponentType | undefined;
          EditComposer?: ComponentType | undefined;
          UserEditComposer?: ComponentType | undefined;
          AssistantEditComposer?: ComponentType | undefined;
          SystemEditComposer?: ComponentType | undefined;
          UserMessage: ComponentType;
          AssistantMessage: ComponentType;
          SystemMessage?: ComponentType | undefined;
        };
  };
}

const isComponentsSame = (
  prev: ThreadPrimitiveMessages.Props["components"],
  next: ThreadPrimitiveMessages.Props["components"],
) => {
  return (
    prev.Message === next.Message &&
    prev.EditComposer === next.EditComposer &&
    prev.UserEditComposer === next.UserEditComposer &&
    prev.AssistantEditComposer === next.AssistantEditComposer &&
    prev.SystemEditComposer === next.SystemEditComposer &&
    prev.UserMessage === next.UserMessage &&
    prev.AssistantMessage === next.AssistantMessage &&
    prev.SystemMessage === next.SystemMessage
  );
};

const DEFAULT_SYSTEM_MESSAGE = () => null;

const getComponent = (
  components: ThreadPrimitiveMessages.Props["components"],
  role: ThreadMessageType["role"],
  isEditing: boolean,
) => {
  switch (role) {
    case "user":
      if (isEditing) {
        return (
          components.UserEditComposer ??
          components.EditComposer ??
          components.UserMessage ??
          (components.Message as ComponentType)
        );
      } else {
        return components.UserMessage ?? (components.Message as ComponentType);
      }
    case "assistant":
      if (isEditing) {
        return (
          components.AssistantEditComposer ??
          components.EditComposer ??
          components.AssistantMessage ??
          (components.Message as ComponentType)
        );
      } else {
        return (
          components.AssistantMessage ?? (components.Message as ComponentType)
        );
      }
    case "system":
      if (isEditing) {
        return (
          components.SystemEditComposer ??
          components.EditComposer ??
          components.SystemMessage ??
          (components.Message as ComponentType)
        );
      } else {
        return components.SystemMessage ?? DEFAULT_SYSTEM_MESSAGE;
      }
    default:
      const _exhaustiveCheck: never = role;
      throw new Error(`Unknown message role: ${_exhaustiveCheck}`);
  }
};

type ThreadMessageComponentProps = {
  components: ThreadPrimitiveMessages.Props["components"];
};

const ThreadMessageComponent: FC<ThreadMessageComponentProps> = ({
  components,
}) => {
  const role = useMessage((m) => m.role);
  const isEditing = useEditComposer((c) => c.isEditing);
  const Component = getComponent(components, role, isEditing);

  return <Component />;
};

type ThreadMessageProps = {
  messageIndex: number;
  components: ThreadPrimitiveMessages.Props["components"];
};

const ThreadMessageImpl: FC<ThreadMessageProps> = ({
  messageIndex,
  components,
}) => {
  const threadRuntime = useThreadRuntime();
  const runtime = useMemo(
    () => threadRuntime.getMesssageByIndex(messageIndex),
    [threadRuntime, messageIndex],
  );

  return (
    <MessageRuntimeProvider runtime={runtime}>
      <ThreadMessageComponent components={components} />
    </MessageRuntimeProvider>
  );
};

const ThreadMessage = memo(
  ThreadMessageImpl,
  (prev, next) =>
    prev.messageIndex === next.messageIndex &&
    isComponentsSame(prev.components, next.components),
);

export const ThreadPrimitiveMessagesImpl: FC<ThreadPrimitiveMessages.Props> = ({
  components,
}) => {
  const messagesLength = useThread((t) => t.messages.length);
  if (messagesLength === 0) return null;

  return Array.from({ length: messagesLength }, (_, index) => (
    <ThreadMessage key={index} messageIndex={index} components={components} />
  ));
};

ThreadPrimitiveMessagesImpl.displayName = "ThreadPrimitive.Messages";

export const ThreadPrimitiveMessages = memo(
  ThreadPrimitiveMessagesImpl,
  (prev, next) => isComponentsSame(prev.components, next.components),
);



================================================
File: packages/react/src/primitives/thread/ThreadRoot.tsx
================================================
import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";

export namespace ThreadPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.div>;
}

export const ThreadPrimitiveRoot = forwardRef<
  ThreadPrimitiveRoot.Element,
  ThreadPrimitiveRoot.Props
>((props, ref) => {
  return <Primitive.div {...props} ref={ref} />;
});

ThreadPrimitiveRoot.displayName = "ThreadPrimitive.Root";



================================================
File: packages/react/src/primitives/thread/ThreadScrollToBottom.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import {
  useThreadViewport,
  useThreadViewportStore,
} from "../../context/react/ThreadViewportContext";

const useThreadScrollToBottom = () => {
  const isAtBottom = useThreadViewport((s) => s.isAtBottom);

  const threadViewportStore = useThreadViewportStore();

  const handleScrollToBottom = useCallback(() => {
    threadViewportStore.getState().scrollToBottom();
  }, [threadViewportStore]);

  if (isAtBottom) return null;
  return handleScrollToBottom;
};

export namespace ThreadPrimitiveScrollToBottom {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadScrollToBottom>;
}

export const ThreadPrimitiveScrollToBottom = createActionButton(
  "ThreadPrimitive.ScrollToBottom",
  useThreadScrollToBottom,
);



================================================
File: packages/react/src/primitives/thread/ThreadSuggestion.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useCallback } from "react";
import { useThread } from "../../context";
import { useThreadRuntime } from "../../context/react/ThreadContext";

const useThreadSuggestion = ({
  prompt,
  autoSend,
}: {
  prompt: string;
  method?: "replace";
  autoSend?: boolean | undefined;
}) => {
  const threadRuntime = useThreadRuntime();

  const disabled = useThread((t) => t.isDisabled);
  const callback = useCallback(() => {
    if (autoSend && !threadRuntime.getState().isRunning) {
      threadRuntime.append(prompt);
    } else {
      threadRuntime.composer.setText(prompt);
    }
  }, [threadRuntime, autoSend, prompt]);

  if (disabled) return null;
  return callback;
};

export namespace ThreadPrimitiveSuggestion {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadSuggestion>;
}

export const ThreadPrimitiveSuggestion = createActionButton(
  "ThreadPrimitive.Suggestion",
  useThreadSuggestion,
  ["prompt", "autoSend", "method"],
);



================================================
File: packages/react/src/primitives/thread/ThreadViewport.tsx
================================================
"use client";

import { useComposedRefs } from "@radix-ui/react-compose-refs";
import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";
import { useThreadViewportAutoScroll } from "./useThreadViewportAutoScroll";
import { ThreadViewportProvider } from "../../context/providers/ThreadViewportProvider";

export namespace ThreadPrimitiveViewport {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = ComponentPropsWithoutRef<typeof Primitive.div> & {
    autoScroll?: boolean | undefined;
  };
}

const ThreadPrimitiveViewportScrollable = forwardRef<
  ThreadPrimitiveViewport.Element,
  ThreadPrimitiveViewport.Props
>(({ autoScroll, children, ...rest }, forwardedRef) => {
  const autoScrollRef = useThreadViewportAutoScroll<HTMLDivElement>({
    autoScroll,
  });

  const ref = useComposedRefs(forwardedRef, autoScrollRef);

  return (
    <Primitive.div {...rest} ref={ref}>
      {children}
    </Primitive.div>
  );
});

ThreadPrimitiveViewportScrollable.displayName =
  "ThreadPrimitive.ViewportScrollable";

export const ThreadPrimitiveViewport = forwardRef<
  ThreadPrimitiveViewport.Element,
  ThreadPrimitiveViewport.Props
>((props, ref) => {
  return (
    <ThreadViewportProvider>
      <ThreadPrimitiveViewportScrollable {...props} ref={ref} />
    </ThreadViewportProvider>
  );
});

ThreadPrimitiveViewport.displayName = "ThreadPrimitive.Viewport";



================================================
File: packages/react/src/primitives/thread/index.ts
================================================
export { ThreadPrimitiveRoot as Root } from "./ThreadRoot";
export { ThreadPrimitiveEmpty as Empty } from "./ThreadEmpty";
export { ThreadPrimitiveIf as If } from "./ThreadIf";
export { ThreadPrimitiveViewport as Viewport } from "./ThreadViewport";
export { ThreadPrimitiveMessages as Messages } from "./ThreadMessages";
export { ThreadPrimitiveScrollToBottom as ScrollToBottom } from "./ThreadScrollToBottom";
export { ThreadPrimitiveSuggestion as Suggestion } from "./ThreadSuggestion";



================================================
File: packages/react/src/primitives/thread/useThreadViewportAutoScroll.tsx
================================================
"use client";

import { useComposedRefs } from "@radix-ui/react-compose-refs";
import { RefCallback, useEffect, useRef } from "react";
import { useThreadRuntime } from "../../context/react/ThreadContext";
import { useOnResizeContent } from "../../utils/hooks/useOnResizeContent";
import { useOnScrollToBottom } from "../../utils/hooks/useOnScrollToBottom";
import { useManagedRef } from "../../utils/hooks/useManagedRef";
import { writableStore } from "../../context/ReadonlyStore";
import { useThreadViewportStore } from "../../context/react/ThreadViewportContext";

export namespace useThreadViewportAutoScroll {
  export type Options = {
    autoScroll?: boolean | undefined;
  };
}

export const useThreadViewportAutoScroll = <TElement extends HTMLElement>({
  autoScroll = true,
}: useThreadViewportAutoScroll.Options): RefCallback<TElement> => {
  const divRef = useRef<TElement>(null);

  const threadViewportStore = useThreadViewportStore();

  const lastScrollTop = useRef<number>(0);

  // bug: when ScrollToBottom's button changes its disabled state, the scroll stops
  // fix: delay the state change until the scroll is done
  const isScrollingToBottomRef = useRef(false);

  const scrollToBottom = (behavior: ScrollBehavior) => {
    const div = divRef.current;
    if (!div || !autoScroll) return;

    isScrollingToBottomRef.current = true;
    div.scrollTo({ top: div.scrollHeight, behavior });
  };

  const handleScroll = () => {
    const div = divRef.current;
    if (!div) return;

    const isAtBottom = threadViewportStore.getState().isAtBottom;
    const newIsAtBottom =
      div.scrollHeight - div.scrollTop <= div.clientHeight + 1; // TODO figure out why +1 is needed

    if (!newIsAtBottom && lastScrollTop.current < div.scrollTop) {
      // ignore scroll down
    } else {
      if (newIsAtBottom) {
        isScrollingToBottomRef.current = false;
      }

      if (newIsAtBottom !== isAtBottom) {
        writableStore(threadViewportStore).setState({
          isAtBottom: newIsAtBottom,
        });
      }
    }

    lastScrollTop.current = div.scrollTop;
  };

  const resizeRef = useOnResizeContent(() => {
    if (
      isScrollingToBottomRef.current ||
      threadViewportStore.getState().isAtBottom
    ) {
      scrollToBottom("instant");
    }

    handleScroll();
  });

  const scrollRef = useManagedRef<HTMLElement>((el) => {
    el.addEventListener("scroll", handleScroll);
    return () => {
      el.removeEventListener("scroll", handleScroll);
    };
  });

  useOnScrollToBottom(() => {
    scrollToBottom("auto");
  });

  // autoscroll on run start
  const threadRuntime = useThreadRuntime();
  useEffect(() => {
    return threadRuntime.unstable_on("run-start", () => scrollToBottom("auto"));
  }, [scrollToBottom, threadRuntime]);

  const autoScrollRef = useComposedRefs<TElement>(resizeRef, scrollRef, divRef);
  return autoScrollRef;
};



================================================
File: packages/react/src/primitives/threadList/ThreadListItems.tsx
================================================
"use client";

import { ComponentType, FC, memo, useMemo } from "react";
import { ThreadListItemRuntimeProvider } from "../../context/providers/ThreadListItemRuntimeProvider";
import { useAssistantRuntime, useThreadList } from "../../context";

export namespace ThreadListPrimitiveItems {
  export type Props = {
    archived?: boolean | undefined;
    components: {
      ThreadListItem: ComponentType;
    };
  };
}

type ThreadListItemProps = {
  partIndex: number;
  archived: boolean;
  components: ThreadListPrimitiveItems.Props["components"];
};

const ThreadListItemImpl: FC<ThreadListItemProps> = ({
  partIndex,
  archived,
  components,
}) => {
  const assistantRuntime = useAssistantRuntime();
  const runtime = useMemo(
    () =>
      archived
        ? assistantRuntime.threads.getArchivedItemByIndex(partIndex)
        : assistantRuntime.threads.getItemByIndex(partIndex),
    [assistantRuntime, partIndex, archived],
  );

  const ThreadListItemComponent = components.ThreadListItem;

  return (
    <ThreadListItemRuntimeProvider runtime={runtime}>
      <ThreadListItemComponent />
    </ThreadListItemRuntimeProvider>
  );
};

const ThreadListItem = memo(
  ThreadListItemImpl,
  (prev, next) =>
    prev.partIndex === next.partIndex &&
    prev.archived === next.archived &&
    prev.components.ThreadListItem === next.components.ThreadListItem,
);

export const ThreadListPrimitiveItems: FC<ThreadListPrimitiveItems.Props> = ({
  archived = false,
  components,
}) => {
  const contentLength = useThreadList((s) =>
    archived ? s.archivedThreads.length : s.threads.length,
  );

  return Array.from({ length: contentLength }, (_, index) => (
    <ThreadListItem
      key={index}
      partIndex={index}
      archived={archived}
      components={components}
    />
  ));
};

ThreadListPrimitiveItems.displayName = "ThreadListPrimitive.Items";



================================================
File: packages/react/src/primitives/threadList/ThreadListNew.tsx
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
} from "../../utils/createActionButton";
import { useAssistantRuntime, useThreadList } from "../../context";
import { forwardRef } from "react";
import { Primitive } from "@radix-ui/react-primitive";
import { composeEventHandlers } from "@radix-ui/primitive";

const useThreadListNew = () => {
  const runtime = useAssistantRuntime();
  return () => {
    runtime.switchToNewThread();
  };
};

export namespace ThreadListPrimitiveNew {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadListNew>;
}

export const ThreadListPrimitiveNew = forwardRef<
  ThreadListPrimitiveNew.Element,
  ThreadListPrimitiveNew.Props
>(({ onClick, disabled, ...props }, forwardedRef) => {
  const isMain = useThreadList((t) => t.newThread === t.mainThreadId);
  const callback = useThreadListNew();

  return (
    <Primitive.button
      type="button"
      {...(isMain ? { "data-active": "true", "aria-current": "true" } : null)}
      {...props}
      ref={forwardedRef}
      disabled={disabled || !callback}
      onClick={composeEventHandlers(onClick, () => {
        callback?.();
      })}
    />
  );
});

ThreadListPrimitiveNew.displayName = "ThreadListPrimitive.New";



================================================
File: packages/react/src/primitives/threadList/ThreadListRoot.tsx
================================================
import { Primitive } from "@radix-ui/react-primitive";
import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";

type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export namespace ThreadListPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = PrimitiveDivProps;
}

export const ThreadListPrimitiveRoot = forwardRef<
  ThreadListPrimitiveRoot.Element,
  ThreadListPrimitiveRoot.Props
>((props, ref) => {
  return <Primitive.div {...props} ref={ref} />;
});

ThreadListPrimitiveRoot.displayName = "ThreadListPrimitive.Root";



================================================
File: packages/react/src/primitives/threadList/index.ts
================================================
export { ThreadListPrimitiveNew as New } from "./ThreadListNew";
export { ThreadListPrimitiveItems as Items } from "./ThreadListItems";
export { ThreadListPrimitiveRoot as Root } from "./ThreadListRoot";



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemArchive.ts
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useThreadListItemRuntime } from "../../context/react/ThreadListItemContext";
import { useCallback } from "react";

const useThreadListItemArchive = () => {
  const runtime = useThreadListItemRuntime();
  return useCallback(() => {
    runtime.archive();
  }, [runtime]);
};

export namespace ThreadListItemPrimitiveArchive {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadListItemArchive>;
}

export const ThreadListItemPrimitiveArchive = createActionButton(
  "ThreadListItemPrimitive.Archive",
  useThreadListItemArchive,
);



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemDelete.ts
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useThreadListItemRuntime } from "../../context/react/ThreadListItemContext";

const useThreadListItemDelete = () => {
  const runtime = useThreadListItemRuntime();
  return () => {
    runtime.delete();
  };
};

export namespace ThreadListItemPrimitiveDelete {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadListItemDelete>;
}

export const ThreadListItemPrimitiveDelete = createActionButton(
  "ThreadListItemPrimitive.Delete",
  useThreadListItemDelete,
);



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemRoot.tsx
================================================
"use client";

import { Primitive } from "@radix-ui/react-primitive";
import { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from "react";
import { useThreadListItem } from "../../context/react/ThreadListItemContext";

type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export namespace ThreadListItemPrimitiveRoot {
  export type Element = ComponentRef<typeof Primitive.div>;
  export type Props = PrimitiveDivProps;
}

export const ThreadListItemPrimitiveRoot = forwardRef<
  ThreadListItemPrimitiveRoot.Element,
  ThreadListItemPrimitiveRoot.Props
>((props, ref) => {
  const isMain = useThreadListItem((t) => t.isMain);

  return (
    <Primitive.div
      {...(isMain ? { "data-active": "true", "aria-current": "true" } : null)}
      {...props}
      ref={ref}
    />
  );
});

ThreadListItemPrimitiveRoot.displayName = "ThreadListItemPrimitive.Root";



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemTitle.tsx
================================================
"use client";

import type { FC, ReactNode } from "react";
import { useThreadListItem } from "../../context/react/ThreadListItemContext";

export namespace ThreadListItemPrimitiveTitle {
  export type Props = {
    fallback?: ReactNode;
  };
}

export const ThreadListItemPrimitiveTitle: FC<
  ThreadListItemPrimitiveTitle.Props
> = ({ fallback }) => {
  const title = useThreadListItem((t) => t.title);
  return <>{title || fallback}</>;
};

ThreadListItemPrimitiveTitle.displayName = "ThreadListItemPrimitive.Title";



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemTrigger.ts
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useThreadListItemRuntime } from "../../context/react/ThreadListItemContext";

const useThreadListItemTrigger = () => {
  const runtime = useThreadListItemRuntime();
  return () => {
    runtime.switchTo();
  };
};

export namespace ThreadListItemPrimitiveTrigger {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadListItemTrigger>;
}

export const ThreadListItemPrimitiveTrigger = createActionButton(
  "ThreadListItemPrimitive.Trigger",
  useThreadListItemTrigger,
);



================================================
File: packages/react/src/primitives/threadListItem/ThreadListItemUnarchive.ts
================================================
"use client";

import {
  ActionButtonElement,
  ActionButtonProps,
  createActionButton,
} from "../../utils/createActionButton";
import { useThreadListItemRuntime } from "../../context/react/ThreadListItemContext";

const useThreadListItemUnarchive = () => {
  const runtime = useThreadListItemRuntime();
  return () => {
    runtime.unarchive();
  };
};

export namespace ThreadListItemPrimitiveUnarchive {
  export type Element = ActionButtonElement;
  export type Props = ActionButtonProps<typeof useThreadListItemUnarchive>;
}

export const ThreadListItemPrimitiveUnarchive = createActionButton(
  "ThreadListItemPrimitive.Unarchive",
  useThreadListItemUnarchive,
);



================================================
File: packages/react/src/primitives/threadListItem/index.ts
================================================
export { ThreadListItemPrimitiveRoot as Root } from "./ThreadListItemRoot";
export { ThreadListItemPrimitiveArchive as Archive } from "./ThreadListItemArchive";
export { ThreadListItemPrimitiveUnarchive as Unarchive } from "./ThreadListItemUnarchive";
export { ThreadListItemPrimitiveDelete as Delete } from "./ThreadListItemDelete";
export { ThreadListItemPrimitiveTrigger as Trigger } from "./ThreadListItemTrigger";
export { ThreadListItemPrimitiveTitle as Title } from "./ThreadListItemTitle";



================================================
File: packages/react/src/runtimes/index.ts
================================================
export * from "./adapters";
export * from "./core";
export * from "./dangerous-in-browser";
export * from "./edge";
export * from "./external-store";
export * from "./local";
export * from "./remote-thread-list";

export { ExportedMessageRepository } from "./utils/MessageRepository";



================================================
File: packages/react/src/runtimes/adapters/RuntimeAdapterProvider.tsx
================================================
import { createContext, FC, ReactNode, useContext } from "react";
import { ThreadHistoryAdapter } from "./thread-history/ThreadHistoryAdapter";
import { ModelContextProvider } from "../../model-context";

export type RuntimeAdapters = {
  modelContext?: ModelContextProvider;
  history?: ThreadHistoryAdapter;
};

const RuntimeAdaptersContext = createContext<RuntimeAdapters | null>(null);

namespace RuntimeAdapterProvider {
  export type Props = {
    adapters: RuntimeAdapters;
    children: ReactNode;
  };
}

export const RuntimeAdapterProvider: FC<RuntimeAdapterProvider.Props> = ({
  adapters,
  children,
}) => {
  const context = useContext(RuntimeAdaptersContext);
  return (
    <RuntimeAdaptersContext.Provider
      value={{
        ...context,
        ...adapters,
      }}
    >
      {children}
    </RuntimeAdaptersContext.Provider>
  );
};

export const useRuntimeAdapters = () => {
  const adapters = useContext(RuntimeAdaptersContext);
  return adapters;
};



================================================
File: packages/react/src/runtimes/adapters/index.ts
================================================
export * from "./attachment";
export * from "./feedback";
export * from "./speech";
export * from "./suggestion";



================================================
File: packages/react/src/runtimes/adapters/attachment/AttachmentAdapter.ts
================================================
import {
  Attachment,
  PendingAttachment,
  CompleteAttachment,
} from "../../../types/AttachmentTypes";

export type AttachmentAdapter = {
  accept: string;

  add(state: {
    file: File;
  }): Promise<PendingAttachment> | AsyncGenerator<PendingAttachment, void>;
  remove(attachment: Attachment): Promise<void>;
  send(attachment: PendingAttachment): Promise<CompleteAttachment>;
};



================================================
File: packages/react/src/runtimes/adapters/attachment/CompositeAttachmentAdapter.ts
================================================
import { Attachment, PendingAttachment } from "../../../types/AttachmentTypes";
import { AttachmentAdapter } from "./AttachmentAdapter";

function fileMatchesAccept(
  file: { name: string; type: string },
  acceptString: string,
) {
  // Check if the accept string is "*", which allows any file
  if (acceptString === "*") {
    return true;
  }

  // Split the accept string into an array of allowed types
  const allowedTypes = acceptString
    .split(",")
    .map((type) => type.trim().toLowerCase());

  // Get the file's extension and MIME type
  const fileExtension = "." + file.name.split(".").pop()!.toLowerCase();
  const fileMimeType = file.type.toLowerCase();

  for (const type of allowedTypes) {
    // Check for file extension match
    if (type.startsWith(".") && type === fileExtension) {
      return true;
    }

    // Check for exact MIME type match
    if (type.includes("/") && type === fileMimeType) {
      return true;
    }

    if (type === "image/*" || type === "video/*" || type === "audio/*") {
      // Check for wildcard MIME type match
      if (type.endsWith("/*")) {
        const generalType = type.split("/")[0]!;
        if (fileMimeType.startsWith(generalType + "/")) {
          return true;
        }
      }
    }
  }

  return false;
}

export class CompositeAttachmentAdapter implements AttachmentAdapter {
  private _adapters: AttachmentAdapter[];

  public accept: string;

  constructor(adapters: AttachmentAdapter[]) {
    this._adapters = adapters;

    const wildcardIdx = adapters.findIndex((a) => a.accept === "*");
    if (wildcardIdx !== -1) {
      if (wildcardIdx !== adapters.length - 1)
        throw new Error(
          "A wildcard adapter (handling all files) can only be specified as the last adapter.",
        );

      this.accept = "*";
    } else {
      this.accept = adapters.map((a) => a.accept).join(",");
    }
  }

  public add(state: { file: File }) {
    for (const adapter of this._adapters) {
      if (fileMatchesAccept(state.file, adapter.accept)) {
        return adapter.add(state);
      }
    }
    throw new Error("No matching adapter found for file");
  }

  public async send(attachment: PendingAttachment) {
    const adapters = this._adapters.slice();
    for (const adapter of adapters) {
      if (fileMatchesAccept(attachment.file, adapter.accept)) {
        return adapter.send(attachment);
      }
    }
    throw new Error("No matching adapter found for attachment");
  }

  public async remove(attachment: Attachment) {
    const adapters = this._adapters.slice();
    for (const adapter of adapters) {
      if (
        fileMatchesAccept(
          {
            name: attachment.name,
            type: attachment.contentType,
          },
          adapter.accept,
        )
      ) {
        return adapter.remove(attachment);
      }
    }
    throw new Error("No matching adapter found for attachment");
  }
}



================================================
File: packages/react/src/runtimes/adapters/attachment/SimpleImageAttachmentAdapter.ts
================================================
import {
  PendingAttachment,
  CompleteAttachment,
} from "../../../types/AttachmentTypes";
import { AttachmentAdapter } from "./AttachmentAdapter";

export class SimpleImageAttachmentAdapter implements AttachmentAdapter {
  public accept = "image/*";

  public async add(state: { file: File }): Promise<PendingAttachment> {
    return {
      id: state.file.name,
      type: "image",
      name: state.file.name,
      contentType: state.file.type,
      file: state.file,
      status: { type: "requires-action", reason: "composer-send" },
    };
  }

  public async send(
    attachment: PendingAttachment,
  ): Promise<CompleteAttachment> {
    return {
      ...attachment,
      status: { type: "complete" },
      content: [
        {
          type: "image",
          image: await getFileDataURL(attachment.file),
        },
      ],
    };
  }

  public async remove() {
    // noop
  }
}

const getFileDataURL = (file: File) =>
  new Promise<string>((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);

    reader.readAsDataURL(file);
  });



================================================
File: packages/react/src/runtimes/adapters/attachment/SimpleTextAttachmentAdapter.ts
================================================
import {
  CompleteAttachment,
  PendingAttachment,
} from "../../../types/AttachmentTypes";
import { AttachmentAdapter } from "./AttachmentAdapter";

export class SimpleTextAttachmentAdapter implements AttachmentAdapter {
  public accept =
    "text/plain,text/html,text/markdown,text/csv,text/xml,text/json,text/css";

  public async add(state: { file: File }): Promise<PendingAttachment> {
    return {
      id: state.file.name,
      type: "document",
      name: state.file.name,
      contentType: state.file.type,
      file: state.file,
      status: { type: "requires-action", reason: "composer-send" },
    };
  }

  public async send(
    attachment: PendingAttachment,
  ): Promise<CompleteAttachment> {
    return {
      ...attachment,
      status: { type: "complete" },
      content: [
        {
          type: "text",
          text: `<attachment name=${attachment.name}>\n${await getFileText(attachment.file)}\n</attachment>`,
        },
      ],
    };
  }

  public async remove() {
    // noop
  }
}

const getFileText = (file: File) =>
  new Promise<string>((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);

    reader.readAsText(file);
  });



================================================
File: packages/react/src/runtimes/adapters/attachment/index.ts
================================================
export type { AttachmentAdapter } from "./AttachmentAdapter";
export { SimpleImageAttachmentAdapter } from "./SimpleImageAttachmentAdapter";
export { SimpleTextAttachmentAdapter } from "./SimpleTextAttachmentAdapter";
export { CompositeAttachmentAdapter } from "./CompositeAttachmentAdapter";



================================================
File: packages/react/src/runtimes/adapters/feedback/FeedbackAdapter.ts
================================================
import { ThreadMessage } from "../../../types/AssistantTypes";

type FeedbackAdapterFeedback = {
  message: ThreadMessage;
  type: "positive" | "negative";
};

export type FeedbackAdapter = {
  submit: (feedback: FeedbackAdapterFeedback) => void;
};



================================================
File: packages/react/src/runtimes/adapters/feedback/index.ts
================================================
export { type FeedbackAdapter } from "./FeedbackAdapter";



================================================
File: packages/react/src/runtimes/adapters/speech/SpeechAdapterTypes.ts
================================================
import { Unsubscribe } from "../../../types";

export namespace SpeechSynthesisAdapter {
  export type Status =
    | {
        type: "starting" | "running";
      }
    | {
        type: "ended";
        reason: "finished" | "cancelled" | "error";
        error?: unknown;
      };

  export type Utterance = {
    status: Status;
    cancel: () => void;
    subscribe: (callback: () => void) => Unsubscribe;
  };
}

export type SpeechSynthesisAdapter = {
  speak: (text: string) => SpeechSynthesisAdapter.Utterance;
};

export namespace SpeechRecognitionAdapter {
  export type Status =
    | {
        type: "starting" | "running";
      }
    | {
        type: "ended";
        reason: "stopped" | "cancelled" | "error";
      };

  export type Result = {
    transcript: string;
  };

  export type Session = {
    status: Status;
    stop: () => Promise<void>;
    cancel: () => void;
    onSpeechStart: (callback: () => void) => Unsubscribe;
    onSpeechEnd: (callback: (result: Result) => void) => Unsubscribe;
    onSpeech: (callback: (result: Result) => void) => Unsubscribe;
  };
}

export type SpeechRecognitionAdapter = {
  listen: () => SpeechRecognitionAdapter.Session;
};



================================================
File: packages/react/src/runtimes/adapters/speech/WebSpeechSynthesisAdapter.ts
================================================
import { SpeechSynthesisAdapter } from "./SpeechAdapterTypes";

export class WebSpeechSynthesisAdapter implements SpeechSynthesisAdapter {
  speak(text: string): SpeechSynthesisAdapter.Utterance {
    const utterance = new SpeechSynthesisUtterance(text);

    const subscribers = new Set<() => void>();
    const handleEnd = (
      reason: "finished" | "error" | "cancelled",
      error?: unknown,
    ) => {
      if (res.status.type === "ended") return;

      res.status = { type: "ended", reason, error };
      subscribers.forEach((handler) => handler());
    };

    utterance.addEventListener("end", () => handleEnd("finished"));
    utterance.addEventListener("error", (e) => handleEnd("error", e.error));

    window.speechSynthesis.speak(utterance);

    const res: SpeechSynthesisAdapter.Utterance = {
      status: { type: "running" },
      cancel: () => {
        window.speechSynthesis.cancel();
        handleEnd("cancelled");
      },
      subscribe: (callback) => {
        if (res.status.type === "ended") {
          let cancelled = false;
          queueMicrotask(() => {
            if (!cancelled) callback();
          });
          return () => {
            cancelled = true;
          };
        } else {
          subscribers.add(callback);
          return () => {
            subscribers.delete(callback);
          };
        }
      },
    };
    return res;
  }
}



================================================
File: packages/react/src/runtimes/adapters/speech/index.ts
================================================
export type { SpeechSynthesisAdapter } from "./SpeechAdapterTypes";
export { WebSpeechSynthesisAdapter } from "./WebSpeechSynthesisAdapter";



================================================
File: packages/react/src/runtimes/adapters/suggestion/SuggestionAdapter.ts
================================================
import { ThreadMessage } from "../../../types/AssistantTypes";
import { ThreadSuggestion } from "../../core";

type SuggestionAdapterGenerateOptions = {
  messages: readonly ThreadMessage[];
};

export type SuggestionAdapter = {
  generate: (
    options: SuggestionAdapterGenerateOptions,
  ) =>
    | Promise<readonly ThreadSuggestion[]>
    | AsyncGenerator<readonly ThreadSuggestion[], void>;
};



================================================
File: packages/react/src/runtimes/adapters/suggestion/index.ts
================================================
export { type SuggestionAdapter } from "./SuggestionAdapter";



================================================
File: packages/react/src/runtimes/adapters/thread-history/ThreadHistoryAdapter.ts
================================================
import {
  ExportedMessageRepository,
  ExportedMessageRepositoryItem,
} from "../../utils/MessageRepository";

export type ThreadHistoryAdapter = {
  load(): Promise<ExportedMessageRepository>;
  append(item: ExportedMessageRepositoryItem): Promise<void>;
};



================================================
File: packages/react/src/runtimes/composer/BaseComposerRuntimeCore.tsx
================================================
import {
  Attachment,
  CompleteAttachment,
  PendingAttachment,
} from "../../types/AttachmentTypes";
import { AppendMessage } from "../../types";
import { AttachmentAdapter } from "../adapters/attachment";
import {
  ComposerRuntimeCore,
  ComposerRuntimeEventType,
} from "../core/ComposerRuntimeCore";
import { MessageRole, RunConfig } from "../../types/AssistantTypes";
import { BaseSubscribable } from "../remote-thread-list/BaseSubscribable";

const isAttachmentComplete = (a: Attachment): a is CompleteAttachment =>
  a.status.type === "complete";

export abstract class BaseComposerRuntimeCore
  extends BaseSubscribable
  implements ComposerRuntimeCore
{
  public readonly isEditing = true;

  protected abstract getAttachmentAdapter(): AttachmentAdapter | undefined;

  public getAttachmentAccept(): string {
    return this.getAttachmentAdapter()?.accept ?? "*";
  }

  private _attachments: readonly Attachment[] = [];
  public get attachments() {
    return this._attachments;
  }

  protected setAttachments(value: readonly Attachment[]) {
    this._attachments = value;
    this._notifySubscribers();
  }

  public abstract get canCancel(): boolean;

  public get isEmpty() {
    return !this.text.trim() && !this.attachments.length;
  }

  private _text = "";

  get text() {
    return this._text;
  }

  private _role: MessageRole = "user";

  get role() {
    return this._role;
  }

  private _runConfig: RunConfig = {};

  get runConfig() {
    return this._runConfig;
  }

  public setText(value: string) {
    if (this._text === value) return;

    this._text = value;
    this._notifySubscribers();
  }

  public setRole(role: MessageRole) {
    if (this._role === role) return;

    this._role = role;
    this._notifySubscribers();
  }

  public setRunConfig(runConfig: RunConfig) {
    if (this._runConfig === runConfig) return;

    this._runConfig = runConfig;
    this._notifySubscribers();
  }

  private _emptyTextAndAttachments() {
    this._attachments = [];
    this._text = "";
    this._notifySubscribers();
  }

  private async _onClearAttachments() {
    const adapter = this.getAttachmentAdapter();
    if (adapter) {
      await Promise.all(this._attachments.map((a) => adapter.remove(a)));
    }
  }

  public async reset() {
    if (
      this._attachments.length === 0 &&
      this._text === "" &&
      this._role === "user" &&
      Object.keys(this._runConfig).length === 0
    ) {
      return;
    }

    this._role = "user";
    this._runConfig = {};

    const task = this._onClearAttachments();
    this._emptyTextAndAttachments();
    await task;
  }

  public async clearAttachments() {
    const task = this._onClearAttachments();
    this.setAttachments([]);

    await task;
  }

  public async send() {
    const adapter = this.getAttachmentAdapter();
    const attachments =
      adapter && this.attachments.length > 0
        ? await Promise.all(
            this.attachments.map(async (a) => {
              if (isAttachmentComplete(a)) return a;
              const result = await adapter.send(a);
              return result as CompleteAttachment;
            }),
          )
        : [];

    const message: Omit<AppendMessage, "parentId" | "sourceId"> = {
      role: this.role,
      content: this.text ? [{ type: "text", text: this.text }] : [],
      attachments,
      runConfig: this.runConfig,
    };
    this._emptyTextAndAttachments();

    this.handleSend(message);
    this._notifyEventSubscribers("send");
  }

  public cancel() {
    this.handleCancel();
  }

  protected abstract handleSend(
    message: Omit<AppendMessage, "parentId" | "sourceId">,
  ): void;
  protected abstract handleCancel(): void;

  async addAttachment(file: File) {
    const adapter = this.getAttachmentAdapter();
    if (!adapter) throw new Error("Attachments are not supported");

    const upsertAttachment = (a: PendingAttachment) => {
      const idx = this._attachments.findIndex(
        (attachment) => attachment.id === a.id,
      );
      if (idx !== -1)
        this._attachments = [
          ...this._attachments.slice(0, idx),
          a,
          ...this._attachments.slice(idx + 1),
        ];
      else {
        this._attachments = [...this._attachments, a];
        this._notifyEventSubscribers("attachment_add");
      }

      this._notifySubscribers();
    };

    const promiseOrGenerator = adapter.add({ file });
    if (Symbol.asyncIterator in promiseOrGenerator) {
      for await (const r of promiseOrGenerator) {
        upsertAttachment(r);
      }
    } else {
      upsertAttachment(await promiseOrGenerator);
    }

    this._notifyEventSubscribers("attachment_add");
    this._notifySubscribers();
  }

  async removeAttachment(attachmentId: string) {
    const adapter = this.getAttachmentAdapter();
    if (!adapter) throw new Error("Attachments are not supported");

    const index = this._attachments.findIndex((a) => a.id === attachmentId);
    if (index === -1) throw new Error("Attachment not found");
    const attachment = this._attachments[index]!;

    await adapter.remove(attachment);

    // this._attachments.toSpliced(index, 1); - not yet widely supported
    this._attachments = [
      ...this._attachments.slice(0, index),
      ...this._attachments.slice(index + 1),
    ];
    this._notifySubscribers();
  }

  private _eventSubscribers = new Map<
    ComposerRuntimeEventType,
    Set<() => void>
  >();

  protected _notifyEventSubscribers(event: ComposerRuntimeEventType) {
    const subscribers = this._eventSubscribers.get(event);
    if (!subscribers) return;

    for (const callback of subscribers) callback();
  }

  public unstable_on(event: ComposerRuntimeEventType, callback: () => void) {
    const subscribers = this._eventSubscribers.get(event);
    if (!subscribers) {
      this._eventSubscribers.set(event, new Set([callback]));
    } else {
      subscribers.add(callback);
    }

    return () => {
      const subscribers = this._eventSubscribers.get(event);
      if (!subscribers) return;
      subscribers.delete(callback);
    };
  }
}



================================================
File: packages/react/src/runtimes/composer/DefaultEditComposerRuntimeCore.tsx
================================================
import { AppendMessage, ThreadMessage } from "../../types";
import { getThreadMessageText } from "../../utils/getThreadMessageText";
import { AttachmentAdapter } from "../adapters/attachment";
import { ThreadRuntimeCore } from "../core/ThreadRuntimeCore";
import { BaseComposerRuntimeCore } from "./BaseComposerRuntimeCore";

export class DefaultEditComposerRuntimeCore extends BaseComposerRuntimeCore {
  public get canCancel() {
    return true;
  }

  protected getAttachmentAdapter() {
    return this.runtime.adapters?.attachments;
  }

  private _nonTextParts;
  private _previousText;
  private _parentId;
  private _sourceId;
  constructor(
    private runtime: ThreadRuntimeCore & {
      adapters?: { attachments?: AttachmentAdapter | undefined } | undefined;
    },
    private endEditCallback: () => void,
    { parentId, message }: { parentId: string | null; message: ThreadMessage },
  ) {
    super();
    this._parentId = parentId;
    this._sourceId = message.id;
    this._previousText = getThreadMessageText(message);
    this.setText(this._previousText);

    this.setRole(message.role);
    this.setAttachments(message.attachments ?? []);

    this._nonTextParts = message.content.filter((part) => part.type !== "text");

    // Use the runConfig from the regular (non-edit) composer as the initial runConfig for the edit composer
    this.setRunConfig({ ...runtime.composer.runConfig });
  }

  public async handleSend(
    message: Omit<AppendMessage, "parentId" | "sourceId">,
  ) {
    const text = getThreadMessageText(message as AppendMessage);
    if (text !== this._previousText) {
      this.runtime.append({
        ...message,
        content: [...message.content, ...this._nonTextParts] as any,
        parentId: this._parentId,
        sourceId: this._sourceId,
      });
    }

    this.handleCancel();
  }

  public handleCancel() {
    this.endEditCallback();
    this._notifySubscribers();
  }
}



================================================
File: packages/react/src/runtimes/composer/DefaultThreadComposerRuntimeCore.tsx
================================================
import { AppendMessage, PendingAttachment } from "../../types";
import { AttachmentAdapter } from "../adapters/attachment";
import { ThreadComposerRuntimeCore } from "../core/ComposerRuntimeCore";
import { ThreadRuntimeCore } from "../core/ThreadRuntimeCore";
import { BaseComposerRuntimeCore } from "./BaseComposerRuntimeCore";

export class DefaultThreadComposerRuntimeCore
  extends BaseComposerRuntimeCore
  implements ThreadComposerRuntimeCore
{
  private _canCancel = false;
  public get canCancel() {
    return this._canCancel;
  }

  public override get attachments(): readonly PendingAttachment[] {
    return super.attachments as readonly PendingAttachment[];
  }

  protected getAttachmentAdapter() {
    return this.runtime.adapters?.attachments;
  }

  constructor(
    private runtime: Omit<ThreadRuntimeCore, "composer"> & {
      adapters?: { attachments?: AttachmentAdapter | undefined } | undefined;
    },
  ) {
    super();
    this.connect();
  }

  public connect() {
    return this.runtime.subscribe(() => {
      if (this.canCancel !== this.runtime.capabilities.cancel) {
        this._canCancel = this.runtime.capabilities.cancel;
        this._notifySubscribers();
      }
    });
  }

  public async handleSend(
    message: Omit<AppendMessage, "parentId" | "sourceId">,
  ) {
    this.runtime.append({
      ...(message as AppendMessage),
      parentId: this.runtime.messages.at(-1)?.id ?? null,
      sourceId: null,
    });
  }

  public async handleCancel() {
    this.runtime.cancelRun();
  }
}



================================================
File: packages/react/src/runtimes/core/AssistantRuntimeCore.tsx
================================================
import { ComponentType } from "react";
import type { ModelContextProvider } from "../../model-context/ModelContextTypes";
import type { Unsubscribe } from "../../types/Unsubscribe";
import { ThreadListRuntimeCore } from "./ThreadListRuntimeCore";

export type AssistantRuntimeCore = {
  readonly threads: ThreadListRuntimeCore;

  registerModelContextProvider: (provider: ModelContextProvider) => Unsubscribe;

  /**
   * EXPERIMENTAL: A component that is rendered inside the AssistantRuntimeProvider.
   *
   * Note: This field is expected to never change.
   * To update the component, use a zustand store.
   */
  readonly RenderComponent?: ComponentType | undefined;
};



================================================
File: packages/react/src/runtimes/core/BaseAssistantRuntimeCore.tsx
================================================
import { type ModelContextProvider } from "../../model-context/ModelContextTypes";
import type { Unsubscribe } from "../../types/Unsubscribe";
import type { AssistantRuntimeCore } from "./AssistantRuntimeCore";
import { CompositeContextProvider } from "../../utils/CompositeContextProvider";
import { ThreadListRuntimeCore } from "./ThreadListRuntimeCore";

export abstract class BaseAssistantRuntimeCore implements AssistantRuntimeCore {
  protected readonly _contextProvider = new CompositeContextProvider();
  public abstract get threads(): ThreadListRuntimeCore;

  public registerModelContextProvider(
    provider: ModelContextProvider,
  ): Unsubscribe {
    return this._contextProvider.registerModelContextProvider(provider);
  }
}



================================================
File: packages/react/src/runtimes/core/BaseThreadRuntimeCore.tsx
================================================
import type { AppendMessage, Unsubscribe } from "../../types";
import {
  ExportedMessageRepository,
  MessageRepository,
} from "../utils/MessageRepository";
import { DefaultThreadComposerRuntimeCore } from "../composer/DefaultThreadComposerRuntimeCore";
import {
  AddToolResultOptions,
  ThreadSuggestion,
  SubmitFeedbackOptions,
  ThreadRuntimeCore,
  SpeechState,
  RuntimeCapabilities,
  SubmittedFeedback,
  ThreadRuntimeEventType,
  StartRunConfig,
} from "../core/ThreadRuntimeCore";
import { DefaultEditComposerRuntimeCore } from "../composer/DefaultEditComposerRuntimeCore";
import { SpeechSynthesisAdapter } from "../adapters/speech/SpeechAdapterTypes";
import { FeedbackAdapter } from "../adapters/feedback/FeedbackAdapter";
import { AttachmentAdapter } from "../adapters/attachment";
import { getThreadMessageText } from "../../utils/getThreadMessageText";
import { ModelContextProvider } from "../../model-context";

type BaseThreadAdapters = {
  speech?: SpeechSynthesisAdapter | undefined;
  feedback?: FeedbackAdapter | undefined;
  attachments?: AttachmentAdapter | undefined;
};

export abstract class BaseThreadRuntimeCore implements ThreadRuntimeCore {
  private _subscriptions = new Set<() => void>();
  private _isInitialized = false;

  protected readonly repository = new MessageRepository();
  public abstract get adapters(): BaseThreadAdapters | undefined;
  public abstract get isDisabled(): boolean;
  public abstract get suggestions(): readonly ThreadSuggestion[];
  public abstract get extras(): unknown;

  public abstract get capabilities(): RuntimeCapabilities;
  public abstract append(message: AppendMessage): void;
  public abstract startRun(config: StartRunConfig): void;
  public abstract addToolResult(options: AddToolResultOptions): void;
  public abstract cancelRun(): void;

  public get messages() {
    return this.repository.getMessages();
  }

  public readonly composer = new DefaultThreadComposerRuntimeCore(this);

  constructor(private readonly _contextProvider: ModelContextProvider) {}

  public getModelContext() {
    return this._contextProvider.getModelContext();
  }

  private _editComposers = new Map<string, DefaultEditComposerRuntimeCore>();
  public getEditComposer(messageId: string) {
    return this._editComposers.get(messageId);
  }
  public beginEdit(messageId: string) {
    if (this._editComposers.has(messageId))
      throw new Error("Edit already in progress");

    this._editComposers.set(
      messageId,
      new DefaultEditComposerRuntimeCore(
        this,
        () => this._editComposers.delete(messageId),
        this.repository.getMessage(messageId),
      ),
    );
    this._notifySubscribers();
  }

  public getMessageById(messageId: string) {
    return this.repository.getMessage(messageId);
  }

  public getBranches(messageId: string): string[] {
    return this.repository.getBranches(messageId);
  }

  public switchToBranch(branchId: string): void {
    this.repository.switchToBranch(branchId);
    this._notifySubscribers();
  }

  protected _notifySubscribers() {
    for (const callback of this._subscriptions) callback();
  }

  public _notifyEventSubscribers(event: ThreadRuntimeEventType) {
    const subscribers = this._eventSubscribers.get(event);
    if (!subscribers) return;

    for (const callback of subscribers) callback();
  }

  public subscribe(callback: () => void): Unsubscribe {
    this._subscriptions.add(callback);
    return () => this._subscriptions.delete(callback);
  }

  private _submittedFeedback: Record<string, SubmittedFeedback> = {};

  public getSubmittedFeedback(messageId: string) {
    return this._submittedFeedback[messageId];
  }

  public submitFeedback({ messageId, type }: SubmitFeedbackOptions) {
    const adapter = this.adapters?.feedback;
    if (!adapter) throw new Error("Feedback adapter not configured");

    const { message } = this.repository.getMessage(messageId);
    adapter.submit({ message, type });

    this._submittedFeedback[messageId] = { type };
    this._notifySubscribers();
  }

  private _stopSpeaking: Unsubscribe | undefined;
  public speech: SpeechState | undefined;

  public speak(messageId: string) {
    const adapter = this.adapters?.speech;
    if (!adapter) throw new Error("Speech adapter not configured");

    const { message } = this.repository.getMessage(messageId);

    this._stopSpeaking?.();

    const utterance = adapter.speak(getThreadMessageText(message));
    const unsub = utterance.subscribe(() => {
      if (utterance.status.type === "ended") {
        this._stopSpeaking = undefined;
        this.speech = undefined;
      } else {
        this.speech = { messageId, status: utterance.status };
      }
      this._notifySubscribers();
    });

    this.speech = { messageId, status: utterance.status };
    this._notifySubscribers();

    this._stopSpeaking = () => {
      utterance.cancel();
      unsub();
      this.speech = undefined;
      this._stopSpeaking = undefined;
    };
  }

  public stopSpeaking() {
    if (!this._stopSpeaking) throw new Error("No message is being spoken");
    this._stopSpeaking();
    this._notifySubscribers();
  }

  protected ensureInitialized() {
    if (!this._isInitialized) {
      this._isInitialized = true;
      this._notifyEventSubscribers("initialize");
    }
  }

  // TODO import()/export() on external store doesn't make much sense
  public export() {
    return this.repository.export();
  }

  public import(data: ExportedMessageRepository) {
    this.ensureInitialized();
    this.repository.clear();
    this.repository.import(data);
    this._notifySubscribers();
  }

  private _eventSubscribers = new Map<
    ThreadRuntimeEventType,
    Set<() => void>
  >();

  public unstable_on(event: ThreadRuntimeEventType, callback: () => void) {
    if (event === "model-context-update") {
      return this._contextProvider.subscribe?.(callback) ?? (() => {});
    }

    const subscribers = this._eventSubscribers.get(event);
    if (!subscribers) {
      this._eventSubscribers.set(event, new Set([callback]));
    } else {
      subscribers.add(callback);
    }

    return () => {
      const subscribers = this._eventSubscribers.get(event)!;
      subscribers.delete(callback);
    };
  }
}



================================================
File: packages/react/src/runtimes/core/ComposerRuntimeCore.tsx
================================================
import type { Attachment, PendingAttachment, Unsubscribe } from "../../types";
import { MessageRole, RunConfig } from "../../types/AssistantTypes";

export type ComposerRuntimeEventType = "send" | "attachment_add";

export type ComposerRuntimeCore = Readonly<{
  isEditing: boolean;

  canCancel: boolean;
  isEmpty: boolean;

  attachments: readonly Attachment[];

  getAttachmentAccept(): string;
  addAttachment: (file: File) => Promise<void>;
  removeAttachment: (attachmentId: string) => Promise<void>;

  text: string;
  setText: (value: string) => void;

  role: MessageRole;
  setRole: (role: MessageRole) => void;

  runConfig: RunConfig;
  setRunConfig: (runConfig: RunConfig) => void;

  reset: () => Promise<void>;
  clearAttachments: () => Promise<void>;

  send: () => void;
  cancel: () => void;

  subscribe: (callback: () => void) => Unsubscribe;

  unstable_on: (
    event: ComposerRuntimeEventType,
    callback: () => void,
  ) => Unsubscribe;
}>;

export type ThreadComposerRuntimeCore = ComposerRuntimeCore &
  Readonly<{
    attachments: readonly PendingAttachment[];
  }>;



================================================
File: packages/react/src/runtimes/core/ThreadListRuntimeCore.tsx
================================================
import { Unsubscribe } from "../../types";
import { ThreadRuntimeCore } from "./ThreadRuntimeCore";

type ThreadListItemCoreState = {
  readonly threadId: string;
  readonly remoteId?: string | undefined;
  readonly externalId?: string | undefined;

  readonly status: "archived" | "regular" | "new" | "deleted";
  readonly title?: string | undefined;

  readonly runtime?: ThreadRuntimeCore | undefined;
};

export type ThreadListRuntimeCore = {
  mainThreadId: string;
  newThreadId: string | undefined;

  threadIds: readonly string[];
  archivedThreadIds: readonly string[];

  getMainThreadRuntimeCore(): ThreadRuntimeCore;
  getThreadRuntimeCore(threadId: string): ThreadRuntimeCore;

  getItemById(threadId: string): ThreadListItemCoreState | undefined;

  switchToThread(threadId: string): Promise<void>;
  switchToNewThread(): Promise<void>;

  getLoadThreadsPromise(): Promise<void>;
  // getLoadArchivedThreadsPromise(): Promise<void>;

  rename(threadId: string, newTitle: string): Promise<void>;
  archive(threadId: string): Promise<void>;
  unarchive(threadId: string): Promise<void>;
  delete(threadId: string): Promise<void>;

  initialize(
    threadId: string,
  ): Promise<{ remoteId: string; externalId: string | undefined }>;
  generateTitle(threadId: string): Promise<void>;

  subscribe(callback: () => void): Unsubscribe;
};



================================================
File: packages/react/src/runtimes/core/ThreadRuntimeCore.tsx
================================================
import { ModelContext } from "../../model-context";
import { AppendMessage, ThreadMessage } from "../../types";
import { RunConfig } from "../../types/AssistantTypes";
import type { Unsubscribe } from "../../types/Unsubscribe";
import { SpeechSynthesisAdapter } from "../adapters/speech/SpeechAdapterTypes";
import { ExportedMessageRepository } from "../utils/MessageRepository";
import {
  ComposerRuntimeCore,
  ThreadComposerRuntimeCore,
} from "./ComposerRuntimeCore";

export type RuntimeCapabilities = {
  readonly switchToBranch: boolean;
  readonly edit: boolean;
  readonly reload: boolean;
  readonly cancel: boolean;
  readonly unstable_copy: boolean;
  readonly speech: boolean;
  readonly attachments: boolean;
  readonly feedback: boolean;
};

export type AddToolResultOptions = {
  messageId: string;
  toolName: string;
  toolCallId: string;
  result: any;
};

export type SubmitFeedbackOptions = {
  messageId: string;
  type: "negative" | "positive";
};

export type ThreadSuggestion = {
  prompt: string;
};

export type SpeechState = {
  readonly messageId: string;
  readonly status: SpeechSynthesisAdapter.Status;
};

export type SubmittedFeedback = {
  readonly type: "negative" | "positive";
};

export type ThreadRuntimeEventType =
  | "run-start"
  | "run-end"
  | "initialize"
  | "model-context-update";

export type StartRunConfig = {
  parentId: string | null;
  sourceId: string | null;
  runConfig: RunConfig;
};

export type ThreadRuntimeCore = Readonly<{
  getMessageById: (messageId: string) =>
    | {
        parentId: string | null;
        message: ThreadMessage;
      }
    | undefined;

  getBranches: (messageId: string) => readonly string[];
  switchToBranch: (branchId: string) => void;

  append: (message: AppendMessage) => void;
  startRun: (config: StartRunConfig) => void;
  cancelRun: () => void;

  addToolResult: (options: AddToolResultOptions) => void;

  speak: (messageId: string) => void;
  stopSpeaking: () => void;

  getSubmittedFeedback: (messageId: string) => SubmittedFeedback | undefined;
  submitFeedback: (feedback: SubmitFeedbackOptions) => void;

  getModelContext: () => ModelContext;

  composer: ThreadComposerRuntimeCore;
  getEditComposer: (messageId: string) => ComposerRuntimeCore | undefined;
  beginEdit: (messageId: string) => void;

  speech: SpeechState | undefined;

  capabilities: Readonly<RuntimeCapabilities>;
  isDisabled: boolean;
  messages: readonly ThreadMessage[];
  suggestions: readonly ThreadSuggestion[];

  // TODO deprecate for a more elegant solution
  // /**
  //  * @deprecated This field is deprecated and will be removed in 0.8.0.
  //  * Please migrate to using `AssistantRuntimeCore.Provider` instead.
  //  */
  extras: unknown;

  subscribe: (callback: () => void) => Unsubscribe;

  import(repository: ExportedMessageRepository): void;
  export(): ExportedMessageRepository;

  unstable_on(event: ThreadRuntimeEventType, callback: () => void): Unsubscribe;
}>;



================================================
File: packages/react/src/runtimes/core/index.ts
================================================
export type {
  AddToolResultOptions,
  SubmitFeedbackOptions,
  ThreadSuggestion,
} from "./ThreadRuntimeCore";



================================================
File: packages/react/src/runtimes/dangerous-in-browser/DangerousInBrowserAdapter.ts
================================================
import {
  ChatModelAdapter,
  ChatModelRunOptions,
} from "../local/ChatModelAdapter";
import { toCoreMessages } from "../edge/converters/toCoreMessages";
import { toLanguageModelTools } from "../edge/converters/toLanguageModelTools";
import { EdgeRuntimeRequestOptions } from "../edge/EdgeRuntimeRequestOptions";
import { runResultStream } from "../edge/streams/runResultStream";
import { toolResultStream } from "../edge/streams/toolResultStream";
import { asAsyncIterable } from "../edge/EdgeChatAdapter";
import {
  CreateEdgeRuntimeAPIOptions,
  getEdgeRuntimeStream,
} from "../edge/createEdgeRuntimeAPI";

export type DangerousInBrowserAdapterOptions = CreateEdgeRuntimeAPIOptions;

export class DangerousInBrowserAdapter implements ChatModelAdapter {
  constructor(private options: DangerousInBrowserAdapterOptions) {}

  async *run({ messages, abortSignal, context }: ChatModelRunOptions) {
    const res = await getEdgeRuntimeStream({
      options: this.options,
      abortSignal,
      requestData: {
        system: context.system,
        messages: toCoreMessages(messages),
        tools: context.tools ? toLanguageModelTools(context.tools) : [],
        ...context.callSettings,
        ...context.config,
      } satisfies EdgeRuntimeRequestOptions,
    });

    const stream = res
      .pipeThrough(toolResultStream(context.tools, abortSignal))
      .pipeThrough(runResultStream());

    for await (const update of asAsyncIterable(stream)) {
      yield update;
    }
  }
}



================================================
File: packages/react/src/runtimes/dangerous-in-browser/index.ts
================================================
export {
  useDangerousInBrowserRuntime,
  type DangerousInBrowserRuntimeOptions,
} from "./useDangerousInBrowserRuntime";



================================================
File: packages/react/src/runtimes/dangerous-in-browser/useDangerousInBrowserRuntime.ts
================================================
"use client";

import { LocalRuntimeOptions, useLocalRuntime } from "..";
import { useState } from "react";
import {
  DangerousInBrowserAdapter,
  DangerousInBrowserAdapterOptions,
} from "./DangerousInBrowserAdapter";
import { splitLocalRuntimeOptions } from "../local/LocalRuntimeOptions";

export type DangerousInBrowserRuntimeOptions =
  DangerousInBrowserAdapterOptions & LocalRuntimeOptions;

export const useDangerousInBrowserRuntime = (
  options: DangerousInBrowserRuntimeOptions,
) => {
  const { localRuntimeOptions, otherOptions } =
    splitLocalRuntimeOptions(options);
  const [adapter] = useState(() => new DangerousInBrowserAdapter(otherOptions));
  return useLocalRuntime(adapter, localRuntimeOptions);
};



================================================
File: packages/react/src/runtimes/edge/EdgeChatAdapter.ts
================================================
import {
  ChatModelAdapter,
  ChatModelRunOptions,
} from "../local/ChatModelAdapter";
import { ChatModelRunResult } from "../local/ChatModelAdapter";
import { toCoreMessages } from "./converters/toCoreMessages";
import { toLanguageModelTools } from "./converters/toLanguageModelTools";
import { EdgeRuntimeRequestOptions } from "./EdgeRuntimeRequestOptions";
import { assistantDecoderStream } from "./streams/assistantDecoderStream";
import { streamPartDecoderStream } from "./streams/utils/streamPartDecoderStream";
import { runResultStream } from "./streams/runResultStream";
import { toolResultStream } from "./streams/toolResultStream";
import { toLanguageModelMessages } from "./converters";
import { ThreadMessage } from "../../types";
import { Tool } from "../../model-context";
import { z } from "zod";
import zodToJsonSchema from "zod-to-json-schema";
import { JSONSchema7 } from "json-schema";

export function asAsyncIterable<T>(
  source: ReadableStream<T>,
): AsyncIterable<T> {
  return {
    [Symbol.asyncIterator]: () => {
      const reader = source.getReader();
      return {
        async next(): Promise<IteratorResult<T, undefined>> {
          const { done, value } = await reader.read();
          return done
            ? { done: true, value: undefined }
            : { done: false, value };
        },
      };
    },
  };
}

export type EdgeChatAdapterOptions = {
  api: string;

  // experimental_prepareRequestBody?: (options: {
  //   id: string;
  //   messages: UIMessage[];
  //   requestData?: JSONValue;
  //   requestBody?: object;
  // }) => unknown;

  // onToolCall?: ({
  //   toolCall,
  // }: {
  //   toolCall: UIMessageToolInvocation;
  // }) => void | Promise<unknown> | unknown;

  /**
   * Callback function to be called when the API response is received.
   */
  onResponse?: (response: Response) => void | Promise<void>;
  /**
   * Optional callback function that is called when the assistant message is finished streaming.
   */
  onFinish?: (message: ThreadMessage) => void;
  /**
   * Callback function to be called when an error is encountered.
   */
  onError?: (error: Error) => void;

  credentials?: RequestCredentials;
  headers?: Record<string, string> | Headers;
  body?: object;

  /**
   * @deprecated Renamed to `sendExtraMessageFields`.
   */
  unstable_sendMessageIds?: boolean;

  /**
   * When enabled, the adapter will not strip `id` from messages in the messages array.
   */
  sendExtraMessageFields?: boolean;

  /**
   * When enabled, the adapter will send messages in the format expected by the Vercel AI SDK Core.
   * This feature will be removed in the future in favor of a better solution.
   *
   * `v2` sends frontend tools in a format that can be directly passed to `stremaText`
   */
  unstable_AISDKInterop?: boolean | "v2" | undefined;
};

const toAISDKTools = (tools: Record<string, Tool<any, any>>) => {
  return Object.fromEntries(
    Object.entries(tools).map(([name, tool]) => [
      name,
      {
        ...(tool.description ? { description: tool.description } : undefined),
        parameters: (tool.parameters instanceof z.ZodType
          ? zodToJsonSchema(tool.parameters)
          : tool.parameters) as JSONSchema7,
      },
    ]),
  );
};

export class EdgeChatAdapter implements ChatModelAdapter {
  constructor(private options: EdgeChatAdapterOptions) {}

  async *run({
    messages,
    runConfig,
    abortSignal,
    context,
    unstable_assistantMessageId,
    unstable_getMessage,
  }: ChatModelRunOptions) {
    const headers = new Headers(this.options.headers);
    headers.set("Content-Type", "application/json");

    const result = await fetch(this.options.api, {
      method: "POST",
      headers,
      credentials: this.options.credentials ?? "same-origin",
      body: JSON.stringify({
        system: context.system,
        messages: this.options.unstable_AISDKInterop
          ? (toLanguageModelMessages(messages, {
              unstable_includeId:
                this.options.unstable_sendMessageIds ||
                this.options.sendExtraMessageFields,
            }) as EdgeRuntimeRequestOptions["messages"]) // TODO figure out a better way to do this
          : toCoreMessages(messages, {
              unstable_includeId:
                this.options.unstable_sendMessageIds ||
                this.options.sendExtraMessageFields,
            }),
        tools: context.tools
          ? this.options.unstable_AISDKInterop === "v2"
            ? (toAISDKTools(context.tools) as any)
            : toLanguageModelTools(context.tools)
          : [],
        unstable_assistantMessageId,
        runConfig,
        ...context.callSettings,
        ...context.config,

        ...this.options.body,
      } satisfies EdgeRuntimeRequestOptions),
      signal: abortSignal,
    });

    await this.options.onResponse?.(result);

    try {
      if (!result.ok) {
        throw new Error(`Status ${result.status}: ${await result.text()}`);
      }

      const stream = result
        .body!.pipeThrough(streamPartDecoderStream())
        .pipeThrough(assistantDecoderStream())
        .pipeThrough(toolResultStream(context.tools, abortSignal))
        .pipeThrough(runResultStream());

      let update: ChatModelRunResult | undefined;
      for await (update of asAsyncIterable(stream)) {
        yield update;
      }

      if (update === undefined)
        throw new Error("No data received from Edge Runtime");

      this.options.onFinish?.(unstable_getMessage());
    } catch (error: unknown) {
      this.options.onError?.(error as Error);
      throw error;
    }
  }
}



================================================
File: packages/react/src/runtimes/edge/EdgeRuntimeRequestOptions.ts
================================================
import { JSONSchema7 } from "json-schema";
import {
  LanguageModelConfigSchema,
  LanguageModelV1CallSettingsSchema,
} from "../../model-context/ModelContextTypes";
import { z } from "zod";
import { ReadonlyJSONObject } from "../../utils/json/json-value";

const LanguageModelV1FunctionToolSchema = z.object({
  type: z.literal("function"),
  name: z.string(),
  description: z.string().optional(),
  parameters: z.custom<JSONSchema7>(
    (val) => typeof val === "object" && val !== null,
  ),
});

const TextContentPartSchema = z.object({
  type: z.literal("text"),
  text: z.string(),
});

const ImageContentPartSchema = z.object({
  type: z.literal("image"),
  image: z.string(),
});

const FileContentPartSchema = z.object({
  type: z.literal("file"),
  data: z.string(),
  mimeType: z.string(),
});

const Unstable_AudioContentPart = z.object({
  type: z.literal("audio"),
  audio: z.object({
    data: z.string(),
    format: z.union([z.literal("mp3"), z.literal("wav")]),
  }),
});

const CoreToolCallContentPartSchema = z.object({
  type: z.literal("tool-call"),
  toolCallId: z.string(),
  toolName: z.string(),
  args: z
    .record(z.unknown())
    .refine((c): c is ReadonlyJSONObject => c !== undefined),
  result: z.unknown().optional(),
  isError: z.boolean().optional(),
});

const CoreUserMessageSchema = z.object({
  role: z.literal("user"),
  content: z
    .array(
      z.discriminatedUnion("type", [
        TextContentPartSchema,
        ImageContentPartSchema,
        FileContentPartSchema,
        Unstable_AudioContentPart,
      ]),
    )
    .min(1)
    .readonly(),
});

const CoreAssistantMessageSchema = z.object({
  role: z.literal("assistant"),
  content: z
    .array(
      z.discriminatedUnion("type", [
        TextContentPartSchema,
        CoreToolCallContentPartSchema,
      ]),
    )
    .min(1)
    .readonly(),
});

const CoreSystemMessageSchema = z.object({
  role: z.literal("system"),
  content: z.tuple([TextContentPartSchema]).readonly(),
});

const CoreMessageSchema = z.discriminatedUnion("role", [
  CoreSystemMessageSchema,
  CoreUserMessageSchema,
  CoreAssistantMessageSchema,
]);

export const EdgeRuntimeRequestOptionsSchema = z
  .object({
    system: z.string().optional(),
    messages: z.array(CoreMessageSchema).min(1).readonly(),
    runConfig: z
      .object({
        custom: z.record(z.unknown()).optional(),
      })
      .optional(),
    tools: z.array(LanguageModelV1FunctionToolSchema).readonly().optional(),
    unstable_assistantMessageId: z.string().optional(),
  })
  .merge(LanguageModelV1CallSettingsSchema)
  .merge(LanguageModelConfigSchema);

export type EdgeRuntimeRequestOptions = z.infer<
  typeof EdgeRuntimeRequestOptionsSchema
>;



================================================
File: packages/react/src/runtimes/edge/createEdgeRuntimeAPI.ts
================================================
import {
  LanguageModelV1,
  LanguageModelV1ToolChoice,
  LanguageModelV1FunctionTool,
  LanguageModelV1Prompt,
  LanguageModelV1CallOptions,
} from "@ai-sdk/provider";
import {
  CoreMessage,
  ThreadMessage,
  ThreadStep,
} from "../../types/AssistantTypes";
import { assistantEncoderStream } from "./streams/assistantEncoderStream";
import { EdgeRuntimeRequestOptionsSchema } from "./EdgeRuntimeRequestOptions";
import { toLanguageModelMessages } from "./converters/toLanguageModelMessages";
import { toLanguageModelTools } from "./converters/toLanguageModelTools";
import {
  toolResultStream,
  ToolResultStreamPart,
} from "./streams/toolResultStream";
import { runResultStream } from "./streams/runResultStream";
import {
  LanguageModelConfig,
  LanguageModelV1CallSettings,
  LanguageModelV1CallSettingsSchema,
  Tool,
} from "../../model-context/ModelContextTypes";
import { CoreChatModelRunResult } from "../local/ChatModelAdapter";
import { streamPartEncoderStream } from "./streams/utils/streamPartEncoderStream";
import { z } from "zod";

type FinishResult = {
  messages: readonly (CoreMessage | ThreadMessage)[];
  metadata: {
    steps: readonly ThreadStep[];
  };
};

type LanguageModelCreator = (
  config: LanguageModelConfig,
) => Promise<LanguageModelV1> | LanguageModelV1;

export type CreateEdgeRuntimeAPIOptions = LanguageModelV1CallSettings & {
  model: LanguageModelV1 | LanguageModelCreator;
  system?: string;
  tools?: Record<string, Tool<any, any>>;
  toolChoice?: LanguageModelV1ToolChoice;
  onFinish?: (result: FinishResult) => void;
};

const voidStream = () => {
  return new WritableStream({
    abort(reason) {
      console.error("Server stream processing aborted:", reason);
    },
  });
};

type GetEdgeRuntimeStreamOptions = {
  abortSignal: AbortSignal;
  requestData: z.infer<typeof EdgeRuntimeRequestOptionsSchema>;
  options: CreateEdgeRuntimeAPIOptions;
};

export const getEdgeRuntimeStream = async ({
  abortSignal,
  requestData: unsafeRequest,
  options: {
    model: modelOrCreator,
    system: serverSystem,
    tools: serverTools = {},
    toolChoice,
    onFinish,
    ...unsafeSettings
  },
}: GetEdgeRuntimeStreamOptions) => {
  const settings = LanguageModelV1CallSettingsSchema.parse(unsafeSettings);
  const lmServerTools = toLanguageModelTools(serverTools);
  const hasServerTools = Object.values(serverTools).some((v) => !!v.execute);

  const {
    system: clientSystem,
    tools: clientTools = [],
    messages,
    apiKey,
    baseUrl,
    modelName,
    ...callSettings
  } = EdgeRuntimeRequestOptionsSchema.parse(unsafeRequest);

  const systemMessages = [];
  if (serverSystem) systemMessages.push(serverSystem);
  if (clientSystem) systemMessages.push(clientSystem);
  const system = systemMessages.join("\n\n");

  for (const clientTool of clientTools) {
    if (serverTools?.[clientTool.name]) {
      throw new Error(
        `Tool ${clientTool.name} was defined in both the client and server tools. This is not allowed.`,
      );
    }
  }

  const model =
    typeof modelOrCreator === "function"
      ? await modelOrCreator({ apiKey, baseUrl, modelName })
      : modelOrCreator;

  let stream: ReadableStream<ToolResultStreamPart>;
  const streamResult = await streamMessage({
    ...(settings as Partial<StreamMessageOptions>),
    ...callSettings,

    model,
    abortSignal,

    ...(!!system ? { system } : undefined),
    messages,
    tools: lmServerTools.concat(clientTools as LanguageModelV1FunctionTool[]),
    ...(toolChoice ? { toolChoice } : undefined),
  });
  stream = streamResult.stream;

  // add tool results if we have server tools
  const canExecuteTools = hasServerTools && toolChoice?.type !== "none";
  if (canExecuteTools) {
    stream = stream.pipeThrough(toolResultStream(serverTools, abortSignal));
  }

  if (canExecuteTools || onFinish) {
    // tee the stream to process server tools and onFinish asap
    const tees = stream.tee();
    stream = tees[0];
    let serverStream = tees[1];

    if (onFinish) {
      let lastChunk: CoreChatModelRunResult | undefined;
      serverStream = serverStream.pipeThrough(runResultStream()).pipeThrough(
        new TransformStream({
          transform(chunk) {
            lastChunk = chunk;
          },
          flush() {
            if (!lastChunk?.status || lastChunk.status.type === "running")
              return;

            const resultingMessages = [
              ...messages,
              {
                id: "DEFAULT",
                createdAt: new Date(),
                role: "assistant",
                content: lastChunk.content,
                status: lastChunk.status,
                metadata: {
                  unstable_data: lastChunk.metadata?.unstable_data ?? [],
                  unstable_annotations:
                    lastChunk.metadata?.unstable_annotations ?? [],
                  steps: lastChunk.metadata?.steps ?? [],
                  custom: lastChunk.metadata?.custom ?? {},
                },
              } satisfies ThreadMessage,
            ];
            onFinish({
              messages: resultingMessages,
              metadata: {
                // TODO
                // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
                steps: lastChunk.metadata?.steps!,
              },
            });
          },
        }),
      );
    }

    // drain the server stream
    serverStream.pipeTo(voidStream()).catch((e) => {
      console.error("Server stream processing error:", e);
    });
  }

  return stream;
};

export declare namespace getEdgeRuntimeResponse {
  export type { GetEdgeRuntimeStreamOptions as Options };
}

export const getEdgeRuntimeResponse = async (
  options: getEdgeRuntimeResponse.Options,
) => {
  const stream = await getEdgeRuntimeStream(options);
  return new Response(
    stream
      .pipeThrough(assistantEncoderStream())
      .pipeThrough(streamPartEncoderStream()),
    {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
      },
    },
  );
};

export const createEdgeRuntimeAPI = (options: CreateEdgeRuntimeAPIOptions) => ({
  POST: async (request: Request) =>
    getEdgeRuntimeResponse({
      abortSignal: request.signal,
      requestData: await request.json(),
      options,
    }),
});

type StreamMessageOptions = LanguageModelV1CallSettings & {
  model: LanguageModelV1;
  system?: string;
  messages: readonly CoreMessage[];
  tools?: LanguageModelV1FunctionTool[];
  toolChoice?: LanguageModelV1ToolChoice;
  abortSignal: AbortSignal;
};

async function streamMessage({
  model,
  system,
  messages,
  tools,
  toolChoice,
  ...options
}: StreamMessageOptions) {
  return model.doStream({
    inputFormat: "messages",
    mode: {
      type: "regular",
      ...(tools ? { tools } : undefined),
      ...(toolChoice ? { toolChoice } : undefined),
    },
    prompt: convertToLanguageModelPrompt(system, messages),
    ...(options as Partial<LanguageModelV1CallOptions>),
  });
}

export function convertToLanguageModelPrompt(
  system: string | undefined,
  messages: readonly CoreMessage[],
): LanguageModelV1Prompt {
  const languageModelMessages: LanguageModelV1Prompt = [];

  if (system != null) {
    languageModelMessages.push({ role: "system", content: system });
  }
  languageModelMessages.push(...toLanguageModelMessages(messages));

  return languageModelMessages;
}



================================================
File: packages/react/src/runtimes/edge/index.ts
================================================
export * from "./converters";

export * from "./streams/utils";

export { useEdgeRuntime, type EdgeRuntimeOptions } from "./useEdgeRuntime";
export { EdgeChatAdapter } from "./EdgeChatAdapter";
export type { EdgeRuntimeRequestOptions } from "./EdgeRuntimeRequestOptions";



================================================
File: packages/react/src/runtimes/edge/useEdgeRuntime.ts
================================================
"use client";

import { LocalRuntimeOptions, useLocalRuntime } from "..";
import { EdgeChatAdapterOptions, EdgeChatAdapter } from "./EdgeChatAdapter";
import { splitLocalRuntimeOptions } from "../local/LocalRuntimeOptions";

export type EdgeRuntimeOptions = EdgeChatAdapterOptions & LocalRuntimeOptions;

export const useEdgeRuntime = (options: EdgeRuntimeOptions) => {
  const { localRuntimeOptions, otherOptions } =
    splitLocalRuntimeOptions(options);

  return useLocalRuntime(
    new EdgeChatAdapter(otherOptions),
    localRuntimeOptions,
  );
};



================================================
File: packages/react/src/runtimes/edge/converters/fromCoreMessage.ts
================================================
import { generateId } from "../../../internal";
import {
  ThreadMessage,
  CoreMessage,
  ToolCallContentPart,
  MessageStatus,
  CompleteAttachment,
} from "../../../types";

export const fromCoreMessages = (
  message: readonly CoreMessage[],
): ThreadMessage[] => {
  return message.map((message) => fromCoreMessage(message));
};

export const fromCoreMessage = (
  message: CoreMessage,
  {
    id = generateId(),
    status = { type: "complete", reason: "unknown" } as MessageStatus,
    attachments = [] as readonly CompleteAttachment[],
  } = {},
): ThreadMessage => {
  const commonProps = {
    id,
    createdAt: new Date(),
  };

  const role = message.role;
  switch (role) {
    case "assistant":
      return {
        ...commonProps,
        role,
        content: message.content.map((part) => {
          if (part.type === "tool-call") {
            return {
              ...part,
              argsText: JSON.stringify(part.args),
            } satisfies ToolCallContentPart;
          }
          return part;
        }),
        status,

        metadata: {
          unstable_annotations: [],
          unstable_data: [],
          steps: [],
          custom: {},
        },
      } satisfies ThreadMessage;

    case "user":
      return {
        ...commonProps,
        role,
        content: message.content,
        attachments,
        metadata: { custom: {} },
      } satisfies ThreadMessage;

    case "system":
      return {
        ...commonProps,
        role,
        content: message.content,
        metadata: { custom: {} },
      } satisfies ThreadMessage;

    default: {
      const unsupportedRole: never = role;
      throw new Error(`Unknown message role: ${unsupportedRole}`);
    }
  }
};



================================================
File: packages/react/src/runtimes/edge/converters/fromLanguageModelMessages.ts
================================================
import { LanguageModelV1Message } from "@ai-sdk/provider";
import { CoreMessage, ToolCallContentPart } from "../../../types";
import { Writable } from "stream";
import { ReadonlyJSONObject } from "../../../utils/json/json-value";

type fromLanguageModelMessagesOptions = {
  mergeSteps: boolean;
};

export const fromLanguageModelMessages = (
  lm: LanguageModelV1Message[],
  { mergeSteps }: fromLanguageModelMessagesOptions,
): CoreMessage[] => {
  const messages: CoreMessage[] = [];

  for (const lmMessage of lm) {
    const role = lmMessage.role;
    switch (role) {
      case "system": {
        messages.push({
          role: "system",
          content: [
            {
              type: "text",
              text: lmMessage.content,
            },
          ],
        });
        break;
      }
      case "user": {
        messages.push({
          role: "user",
          content: lmMessage.content.map((part) => {
            const type = part.type;
            switch (type) {
              case "text": {
                return {
                  type: "text",
                  text: part.text,
                };
              }
              case "image": {
                if (part.image instanceof URL) {
                  return {
                    type: "image",
                    image: part.image.href,
                  };
                }
                throw new Error("Only images with URL data are supported");
              }
              case "file": {
                if (part.data instanceof URL) {
                  return {
                    type: "file",
                    data: part.data.href,
                    mimeType: part.mimeType,
                  };
                }
                throw new Error("Only files with URL data are supported");
              }

              default: {
                const unhandledType: never = type;
                throw new Error(`Unknown content part type: ${unhandledType}`);
              }
            }
          }),
        });
        break;
      }
      case "assistant": {
        const newContent = lmMessage.content.map((part) => {
          if (part.type === "tool-call") {
            return {
              type: "tool-call",
              toolCallId: part.toolCallId,
              toolName: part.toolName,
              argsText: JSON.stringify(part.args),
              args: part.args as ReadonlyJSONObject,
            } satisfies ToolCallContentPart;
          }
          return part;
        });

        if (mergeSteps) {
          const previousMessage = messages[messages.length - 1];
          if (previousMessage?.role === "assistant") {
            previousMessage.content = [
              ...previousMessage.content,
              ...newContent,
            ];
            break;
          }
        }

        messages.push({
          role: "assistant",
          content: newContent,
        });
        break;
      }
      case "tool": {
        const previousMessage = messages[messages.length - 1];
        if (previousMessage?.role !== "assistant")
          throw new Error(
            "A tool message must be preceded by an assistant message.",
          );

        for (const tool of lmMessage.content) {
          const toolCall = previousMessage.content.find(
            (c): c is ToolCallContentPart =>
              c.type === "tool-call" && c.toolCallId === tool.toolCallId,
          );
          if (!toolCall)
            throw new Error("Received tool result for an unknown tool call.");
          if (toolCall.toolName !== tool.toolName)
            throw new Error("Tool call name mismatch.");

          type Writable<T> = { -readonly [P in keyof T]: T[P] };
          const writable = toolCall as Writable<ToolCallContentPart>;
          writable.result = tool.result;
          if (tool.isError) {
            writable.isError = true;
          }
        }

        break;
      }

      default: {
        const unhandledRole: never = role;
        throw new Error(`Unknown message role: ${unhandledRole}`);
      }
    }
  }

  return messages;
};



================================================
File: packages/react/src/runtimes/edge/converters/fromLanguageModelTools.ts
================================================
import { LanguageModelV1FunctionTool } from "@ai-sdk/provider";
import { Tool } from "../../../model-context/ModelContextTypes";

export const fromLanguageModelTools = (
  tools: LanguageModelV1FunctionTool[],
): Record<string, Tool<any, any>> => {
  return Object.fromEntries(
    tools.map((tool) => [
      tool.name,
      {
        description: tool.description,
        parameters: tool.parameters,
      },
    ]),
  );
};



================================================
File: packages/react/src/runtimes/edge/converters/index.ts
================================================
/**
 * @deprecated This is an internal API and may change without notice.
 */
export { toLanguageModelMessages } from "./toLanguageModelMessages";

/**
 * @deprecated This is an internal API and may change without notice.
 */
export { fromLanguageModelMessages } from "./fromLanguageModelMessages";

export {
  /**
   * @deprecated This is an internal API and may change without notice.
   */
  fromCoreMessages,
  /**
   * @deprecated This is an internal API and may change without notice.
   */
  fromCoreMessage,
} from "./fromCoreMessage";

export {
  /**
   * @deprecated This is an internal API and may change without notice.
   */
  toCoreMessages,
  /**
   * @deprecated This is an internal API and may change without notice.
   */
  toCoreMessage,
} from "./toCoreMessages";

/**
 * @deprecated This is an internal API and may change without notice.
 */
export { fromLanguageModelTools } from "./fromLanguageModelTools";

/**
 * @deprecated This is an internal API and may change without notice.
 */
export { toLanguageModelTools } from "./toLanguageModelTools";



================================================
File: packages/react/src/runtimes/edge/converters/toCoreMessages.ts
================================================
import { ThreadMessage, CoreMessage } from "../../../types";

type CoreMessageWithConditionalId<T extends boolean> = T extends false
  ? CoreMessage
  : CoreMessage & { unstable_id?: string };

export const toCoreMessages = <T extends boolean = false>(
  messages: readonly ThreadMessage[],
  options: { unstable_includeId?: T | undefined } = {},
): CoreMessageWithConditionalId<T>[] => {
  return messages.map((message) => toCoreMessage(message, options));
};

export const toCoreMessage = <T extends boolean = false>(
  message: ThreadMessage,
  options: { unstable_includeId?: T | undefined } = {},
): CoreMessageWithConditionalId<T> => {
  const includeId = options.unstable_includeId ?? false;
  const role = message.role;
  switch (role) {
    case "assistant":
      return {
        role,
        content: message.content
          .map((part) => {
            if (part.type === "reasoning" || part.type === "source")
              return null; // reasoning and source parts are omitted
            if (part.type === "tool-call") {
              const { argsText, ...rest } = part;
              return rest;
            }
            return part;
          })
          .filter((c) => !!c),
        ...(includeId ? { unstable_id: message.id } : {}),
      };

    case "user":
      return {
        role,
        content: [
          ...message.content,
          ...message.attachments.map((a) => a.content).flat(),
        ],
        ...(includeId ? { unstable_id: message.id } : {}),
      };

    case "system":
      return {
        role,
        content: message.content,
        ...(includeId ? { unstable_id: message.id } : {}),
      };

    default: {
      const unsupportedRole: never = role;
      throw new Error(`Unknown message role: ${unsupportedRole}`);
    }
  }
};



================================================
File: packages/react/src/runtimes/edge/converters/toLanguageModelMessages.ts
================================================
import {
  LanguageModelV1FilePart,
  LanguageModelV1ImagePart,
  LanguageModelV1Message,
  LanguageModelV1TextPart,
  LanguageModelV1ToolCallPart,
  LanguageModelV1ToolResultPart,
} from "@ai-sdk/provider";
import {
  CoreMessage,
  ThreadMessage,
  TextContentPart,
  CoreToolCallContentPart,
} from "../../../types/AssistantTypes";

const assistantMessageSplitter = () => {
  const stash: LanguageModelV1Message[] = [];
  let assistantMessage = {
    role: "assistant" as const,
    content: [] as (LanguageModelV1TextPart | LanguageModelV1ToolCallPart)[],
  };
  let toolMessage = {
    role: "tool" as const,
    content: [] as LanguageModelV1ToolResultPart[],
  };

  return {
    addTextContentPart: (part: TextContentPart) => {
      if (toolMessage.content.length > 0) {
        stash.push(assistantMessage);
        stash.push(toolMessage);

        assistantMessage = {
          role: "assistant" as const,
          content: [] as (
            | LanguageModelV1TextPart
            | LanguageModelV1ToolCallPart
          )[],
        };

        toolMessage = {
          role: "tool" as const,
          content: [] as LanguageModelV1ToolResultPart[],
        };
      }

      assistantMessage.content.push(part);
    },
    addToolCallPart: (part: CoreToolCallContentPart) => {
      assistantMessage.content.push({
        type: "tool-call",
        toolCallId: part.toolCallId,
        toolName: part.toolName,
        args: part.args,
      });

      toolMessage.content.push({
        type: "tool-result",
        toolCallId: part.toolCallId,
        toolName: part.toolName,
        result:
          part.result === undefined
            ? "Error: tool is has no configured code to run"
            : part.result,
        isError: part.isError ?? part.result === undefined,
      });
    },
    getMessages: () => {
      if (toolMessage.content.length > 0) {
        return [...stash, assistantMessage, toolMessage];
      }

      return [...stash, assistantMessage];
    },
  };
};

export function toLanguageModelMessages(
  message: readonly CoreMessage[] | readonly ThreadMessage[],
  options: { unstable_includeId?: boolean | undefined } = {},
): LanguageModelV1Message[] {
  const includeId = options.unstable_includeId ?? false;
  return message.flatMap((message) => {
    const role = message.role;
    switch (role) {
      case "system": {
        return [
          {
            ...(includeId
              ? { unstable_id: (message as ThreadMessage).id }
              : {}),
            role: "system",
            content: message.content[0].text,
          },
        ];
      }

      case "user": {
        const attachments = "attachments" in message ? message.attachments : [];
        const content = [
          ...message.content,
          ...attachments.map((a) => a.content).flat(),
        ];
        const msg: LanguageModelV1Message = {
          ...(includeId ? { unstable_id: (message as ThreadMessage).id } : {}),
          role: "user",
          content: content.map(
            (
              part,
            ):
              | LanguageModelV1TextPart
              | LanguageModelV1ImagePart
              | LanguageModelV1FilePart => {
              const type = part.type;
              switch (type) {
                case "text": {
                  return part;
                }

                case "image": {
                  return {
                    type: "image",
                    image: new URL(part.image),
                  };
                }

                case "file": {
                  return {
                    type: "file",
                    data: new URL(part.data),
                    mimeType: part.mimeType,
                  };
                }

                default: {
                  const unhandledType: "audio" = type;
                  throw new Error(
                    `Unspported content part type: ${unhandledType}`,
                  );
                }
              }
            },
          ),
        };
        return [msg];
      }

      case "assistant": {
        const splitter = assistantMessageSplitter();
        for (const part of message.content) {
          const type = part.type;
          switch (type) {
            case "reasoning":
            case "source": {
              break; // reasoning and source parts are omitted
            }

            case "text": {
              splitter.addTextContentPart(part);
              break;
            }
            case "tool-call": {
              splitter.addToolCallPart(part);
              break;
            }
            default: {
              const unhandledType: never = type;
              throw new Error(`Unhandled content part type: ${unhandledType}`);
            }
          }
        }
        return splitter.getMessages();
      }

      default: {
        const unhandledRole: never = role;
        throw new Error(`Unknown message role: ${unhandledRole}`);
      }
    }
  });
}



================================================
File: packages/react/src/runtimes/edge/converters/toLanguageModelTools.ts
================================================
import { LanguageModelV1FunctionTool } from "@ai-sdk/provider";
import { JSONSchema7 } from "json-schema";
import { z } from "zod";
import zodToJsonSchema from "zod-to-json-schema";
import { Tool } from "../../../model-context/ModelContextTypes";

export const toLanguageModelTools = (
  tools: Record<string, Tool<any, any>>,
): LanguageModelV1FunctionTool[] => {
  return Object.entries(tools).map(([name, tool]) => ({
    type: "function",
    name,
    ...(tool.description ? { description: tool.description } : undefined),
    parameters: (tool.parameters instanceof z.ZodType
      ? zodToJsonSchema(tool.parameters)
      : tool.parameters) as JSONSchema7,
  }));
};



================================================
File: packages/react/src/runtimes/edge/streams/AssistantStreamChunkType.ts
================================================
import { LanguageModelV1StreamPart } from "@ai-sdk/provider";
import { ReadonlyJSONValue } from "../../../utils/json/json-value";

export enum AssistantStreamChunkType {
  TextDelta = "0",
  Data = "2",
  Error = "3",
  Annotation = "8",
  ToolCall = "9",
  ToolCallResult = "a",
  ToolCallBegin = "b",
  ToolCallDelta = "c",
  FinishMessage = "d",
  FinishStep = "e",
  StartStep = "f",
  ReasoningDelta = "g",
  Source = "h",
}

export type AssistantStreamChunk = {
  [AssistantStreamChunkType.TextDelta]: string;
  [AssistantStreamChunkType.Data]: ReadonlyJSONValue[];
  [AssistantStreamChunkType.Annotation]: ReadonlyJSONValue[];
  [AssistantStreamChunkType.ToolCall]: {
    toolCallId: string;
    toolName: string;
    args: unknown;
  };
  [AssistantStreamChunkType.ToolCallBegin]: {
    toolCallId: string;
    toolName: string;
  };
  [AssistantStreamChunkType.ToolCallDelta]: {
    toolCallId: string;
    argsTextDelta: string;
  };
  [AssistantStreamChunkType.ToolCallResult]: {
    toolCallId: string;
    result: any;
  };
  [AssistantStreamChunkType.Error]: unknown;
  [AssistantStreamChunkType.FinishStep]: {
    finishReason:
      | "stop"
      | "length"
      | "content-filter"
      | "tool-calls"
      | "error"
      | "other"
      | "unknown";
    usage: {
      promptTokens: number;
      completionTokens: number;
    };
    isContinued: boolean;
  };
  [AssistantStreamChunkType.FinishMessage]: Omit<
    LanguageModelV1StreamPart & {
      type: "finish";
    },
    "type"
  >;
  [AssistantStreamChunkType.StartStep]: {
    id: string;
  };
  [AssistantStreamChunkType.ReasoningDelta]: string;
  [AssistantStreamChunkType.Source]: {
    readonly sourceType: "url";
    readonly id: string;
    readonly url: string;
    readonly title?: string;
  };
};



================================================
File: packages/react/src/runtimes/edge/streams/assistantDecoderStream.ts
================================================
import {
  AssistantStreamChunk,
  AssistantStreamChunkType,
} from "./AssistantStreamChunkType";
import { StreamPart } from "./utils/StreamPart";
import { ToolResultStreamPart } from "./toolResultStream";

export function assistantDecoderStream() {
  const toolCallNames = new Map<string, string>();
  let currentToolCall:
    | { id: string; name: string; argsText: string }
    | undefined;

  const endCurrentToolCall = (
    controller: TransformStreamDefaultController<ToolResultStreamPart>,
  ) => {
    if (!currentToolCall) return;
    controller.enqueue({
      type: "tool-call",
      toolCallType: "function",
      toolCallId: currentToolCall.id,
      toolName: currentToolCall.name,
      args: currentToolCall.argsText,
    });
    currentToolCall = undefined;
  };

  return new TransformStream<
    StreamPart<AssistantStreamChunk>,
    ToolResultStreamPart
  >({
    transform({ type, value }, controller) {
      if (
        type !== AssistantStreamChunkType.ToolCallDelta &&
        type !== AssistantStreamChunkType.Error
      ) {
        endCurrentToolCall(controller);
      }

      switch (type) {
        case AssistantStreamChunkType.TextDelta: {
          controller.enqueue({
            type: "text-delta",
            textDelta: value,
          });
          break;
        }
        case AssistantStreamChunkType.ToolCallBegin: {
          const { toolCallId: id, toolName: name } = value;
          toolCallNames.set(id, name);

          currentToolCall = { id, name, argsText: "" };

          controller.enqueue({
            type: "tool-call-delta",
            toolCallType: "function",
            toolCallId: id,
            toolName: name,
            argsTextDelta: "",
          });
          break;
        }
        case AssistantStreamChunkType.ToolCallDelta: {
          const { toolCallId, argsTextDelta } = value;

          const toolName = toolCallNames.get(toolCallId)!;
          if (currentToolCall?.id === toolCallId) {
            currentToolCall.argsText += argsTextDelta;
          }
          controller.enqueue({
            type: "tool-call-delta",
            toolCallType: "function",
            toolCallId,
            toolName,
            argsTextDelta: argsTextDelta,
          });
          break;
        }
        case AssistantStreamChunkType.ToolCallResult: {
          controller.enqueue({
            type: "tool-result",
            toolCallType: "function",
            toolCallId: value.toolCallId,
            toolName: toolCallNames.get(value.toolCallId)!,
            result: value.result,
          });
          break;
        }
        case AssistantStreamChunkType.FinishMessage: {
          controller.enqueue({
            type: "finish",
            ...value,
          });
          break;
        }
        case AssistantStreamChunkType.Error: {
          controller.enqueue({
            type: "error",
            error: value,
          });
          break;
        }

        case AssistantStreamChunkType.ToolCall: {
          const { toolCallId, toolName, args } = value;
          toolCallNames.set(toolCallId, toolName);

          const argsText = JSON.stringify(args);
          controller.enqueue({
            type: "tool-call-delta",
            toolCallType: "function",
            toolCallId,
            toolName,
            argsTextDelta: argsText,
          });
          controller.enqueue({
            type: "tool-call",
            toolCallType: "function",
            toolCallId: toolCallId,
            toolName: toolName,
            args: argsText,
          });
          break;
        }

        case AssistantStreamChunkType.FinishStep: {
          controller.enqueue({
            type: "step-finish",
            ...value,
          });
          break;
        }

        case AssistantStreamChunkType.Annotation:
          controller.enqueue({
            type: "annotations",
            annotations: value,
          });
          break;

        case AssistantStreamChunkType.Data:
          controller.enqueue({
            type: "data",
            data: value,
          });
          break;

        case AssistantStreamChunkType.Source:
          controller.enqueue({
            type: "source",
            source: value,
          });
          break;

        // TODO
        case AssistantStreamChunkType.ReasoningDelta:
        case AssistantStreamChunkType.StartStep:
          break;

        default: {
          const unhandledType: never = type;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },
    flush(controller) {
      endCurrentToolCall(controller);
    },
  });
}



================================================
File: packages/react/src/runtimes/edge/streams/assistantEncoderStream.ts
================================================
import {
  AssistantStreamChunk,
  AssistantStreamChunkType,
} from "./AssistantStreamChunkType";
import { StreamPart } from "./utils/StreamPart";
import { ToolResultStreamPart } from "./toolResultStream";

export function assistantEncoderStream() {
  const toolCalls = new Set<string>();
  return new TransformStream<
    ToolResultStreamPart,
    StreamPart<AssistantStreamChunk>
  >({
    transform(chunk, controller) {
      const chunkType = chunk.type;
      switch (chunkType) {
        case "reasoning": {
          controller.enqueue({
            type: AssistantStreamChunkType.ReasoningDelta,
            value: chunk.textDelta,
          });
          break;
        }

        case "source":
          controller.enqueue({
            type: AssistantStreamChunkType.Source,
            value: chunk.source,
          });
          break;

        case "text-delta": {
          if (!chunk.textDelta) break; // ignore empty text deltas
          controller.enqueue({
            type: AssistantStreamChunkType.TextDelta,
            value: chunk.textDelta,
          });
          break;
        }
        case "tool-call-delta": {
          if (!toolCalls.has(chunk.toolCallId)) {
            toolCalls.add(chunk.toolCallId);
            controller.enqueue({
              type: AssistantStreamChunkType.ToolCallBegin,
              value: {
                toolCallId: chunk.toolCallId,
                toolName: chunk.toolName,
              },
            });
          }

          controller.enqueue({
            type: AssistantStreamChunkType.ToolCallDelta,
            value: {
              toolCallId: chunk.toolCallId,
              argsTextDelta: chunk.argsTextDelta,
            },
          });
          break;
        }

        case "annotations": {
          controller.enqueue({
            type: AssistantStreamChunkType.Annotation,
            value: chunk.annotations,
          });
          break;
        }

        case "data": {
          controller.enqueue({
            type: AssistantStreamChunkType.Data,
            value: chunk.data,
          });
          break;
        }

        // ignore
        case "tool-call":
        case "response-metadata":
          break;

        case "tool-result": {
          controller.enqueue({
            type: AssistantStreamChunkType.ToolCallResult,
            value: {
              toolCallId: chunk.toolCallId,
              result: chunk.result,
            },
          });
          break;
        }

        case "step-finish": {
          const { type, ...rest } = chunk;
          controller.enqueue({
            type: AssistantStreamChunkType.FinishStep,
            value: rest,
          });
          break;
        }

        case "finish": {
          const { type, ...rest } = chunk;
          controller.enqueue({
            type: AssistantStreamChunkType.FinishMessage,
            value: rest,
          });
          break;
        }

        case "error": {
          controller.enqueue({
            type: AssistantStreamChunkType.Error,
            value: chunk.error,
          });
          break;
        }
        default: {
          const unhandledType: never = chunkType;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },
  });
}



================================================
File: packages/react/src/runtimes/edge/streams/runResultStream.ts
================================================
import { CoreChatModelRunResult } from "../../local/ChatModelAdapter";
import { parsePartialJson } from "../../../utils/json/parse-partial-json";
import { LanguageModelV1StreamPart } from "@ai-sdk/provider";
import { ToolResultStreamPart } from "./toolResultStream";
import { MessageStatus, ToolCallContentPart } from "../../../types";

export function runResultStream() {
  let message: CoreChatModelRunResult = {
    content: [],
    status: { type: "running" },
  };

  return new TransformStream<ToolResultStreamPart, CoreChatModelRunResult>({
    transform(chunk, controller) {
      const chunkType = chunk.type;
      switch (chunkType) {
        case "reasoning": {
          message = appendOrUpdateReasoning(message, chunk.textDelta);
          controller.enqueue(message);
          break;
        }

        case "text-delta": {
          message = appendOrUpdateText(message, chunk.textDelta);
          controller.enqueue(message);
          break;
        }

        case "tool-call-delta": {
          const { toolCallId, toolName, argsTextDelta } = chunk;

          message = appendOrUpdateToolCall(
            message,
            toolCallId,
            toolName,
            argsTextDelta,
          );
          controller.enqueue(message);
          break;
        }

        case "tool-call":
        // ignoring tool call events because they are converted to tool-call-delta as well
        case "response-metadata":
          break;

        case "annotations": {
          message = appendAnnotations(message, chunk);
          controller.enqueue(message);
          break;
        }

        case "data": {
          message = appendData(message, chunk);
          controller.enqueue(message);
          break;
        }

        case "source": {
          message = appendSource(message, chunk);
          controller.enqueue(message);
          break;
        }

        case "tool-result": {
          message = appendOrUpdateToolResult(
            message,
            chunk.toolCallId,
            chunk.toolName,
            chunk.result,
          );
          controller.enqueue(message);
          break;
        }
        case "step-finish": {
          message = appendStepFinish(message, chunk);
          controller.enqueue(message);
          break;
        }
        case "finish": {
          message = appendOrUpdateFinish(message, chunk);
          controller.enqueue(message);
          break;
        }
        case "error": {
          if (
            chunk.error instanceof Error &&
            chunk.error.name === "AbortError"
          ) {
            message = appendOrUpdateCancel(message);
            controller.enqueue(message);
            break;
          } else {
            throw chunk.error;
          }
        }
        default: {
          const unhandledType: never = chunkType;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },
    flush(controller) {
      if (message.status?.type === "running") {
        const requiresAction = message.content?.at(-1)?.type === "tool-call";
        message = appendOrUpdateFinish(message, {
          type: "finish",
          finishReason: requiresAction ? "tool-calls" : "unknown",
          usage: {
            promptTokens: 0,
            completionTokens: 0,
          },
        });
        controller.enqueue(message);
      }
    },
  });
}

const appendOrUpdateReasoning = (
  message: CoreChatModelRunResult,
  textDelta: string,
) => {
  let contentParts = message.content ?? [];
  let contentPart = message.content?.at(-1);
  if (contentPart?.type !== "reasoning") {
    contentPart = { type: "reasoning", text: textDelta };
  } else {
    contentParts = contentParts.slice(0, -1);
    contentPart = { type: "reasoning", text: contentPart.text + textDelta };
  }
  return {
    ...message,
    content: contentParts.concat([contentPart]),
  };
};

const appendOrUpdateText = (
  message: CoreChatModelRunResult,
  textDelta: string,
) => {
  let contentParts = message.content ?? [];
  let contentPart = message.content?.at(-1);
  if (contentPart?.type !== "text") {
    contentPart = { type: "text", text: textDelta };
  } else {
    contentParts = contentParts.slice(0, -1);
    contentPart = { type: "text", text: contentPart.text + textDelta };
  }
  return {
    ...message,
    content: contentParts.concat([contentPart]),
  };
};

const appendOrUpdateToolCall = (
  message: CoreChatModelRunResult,
  toolCallId: string,
  toolName: string,
  argsTextDelta: string,
): CoreChatModelRunResult => {
  let contentParts = message.content ?? [];
  const contentPartIdx = contentParts.findIndex(
    (c) => c.type === "tool-call" && c.toolCallId === toolCallId,
  );
  let contentPart =
    contentPartIdx === -1
      ? null
      : (contentParts[contentPartIdx] as ToolCallContentPart);

  if (contentPart == null) {
    contentPart = {
      type: "tool-call",
      toolCallId,
      toolName,
      argsText: argsTextDelta,
      args: argsTextDelta ? parsePartialJson(argsTextDelta) : {},
    };
    contentParts = [...contentParts, contentPart];
  } else {
    const argsText = contentPart.argsText + argsTextDelta;
    contentPart = {
      ...contentPart,
      argsText,
      args: argsTextDelta ? parsePartialJson(argsText) : {},
    };
    contentParts = [
      ...contentParts.slice(0, contentPartIdx),
      contentPart,
      ...contentParts.slice(contentPartIdx + 1),
    ];
  }

  return {
    ...message,
    content: contentParts,
  };
};

const appendOrUpdateToolResult = (
  message: CoreChatModelRunResult,
  toolCallId: string,
  toolName: string,
  result: any,
) => {
  let found = false;
  const newContentParts = message.content?.map((part) => {
    if (part.type !== "tool-call" || part.toolCallId !== toolCallId)
      return part;
    found = true;

    if (part.toolName !== toolName)
      throw new Error(
        `Tool call ${toolCallId} found with tool name ${part.toolName}, but expected ${toolName}`,
      );

    return {
      ...part,
      result,
    };
  });
  if (!found)
    throw new Error(
      `Received tool result for unknown tool call "${toolName}" / "${toolCallId}". This is likely an internal bug in assistant-ui.`,
    );

  return {
    ...message,
    content: newContentParts!,
  };
};

const appendAnnotations = (
  message: CoreChatModelRunResult,
  chunk: ToolResultStreamPart & { type: "annotations" },
): CoreChatModelRunResult => {
  return {
    ...message,
    metadata: {
      ...message.metadata,
      unstable_annotations: [
        ...(message.metadata?.unstable_annotations ?? []),
        ...chunk.annotations,
      ],
    },
  };
};

const appendData = (
  message: CoreChatModelRunResult,
  chunk: ToolResultStreamPart & { type: "data" },
): CoreChatModelRunResult => {
  return {
    ...message,
    metadata: {
      ...message.metadata,
      unstable_data: [
        ...(message.metadata?.unstable_data ?? []),
        ...chunk.data,
      ],
    },
  };
};

const appendStepFinish = (
  message: CoreChatModelRunResult,
  chunk: ToolResultStreamPart & { type: "step-finish" },
): CoreChatModelRunResult => {
  const { type, ...rest } = chunk;
  const steps = [
    ...(message.metadata?.steps ?? []),
    {
      usage: rest.usage,
    },
  ];
  return {
    ...message,
    metadata: {
      ...message.metadata,
      steps,
    },
  };
};

const appendOrUpdateFinish = (
  message: CoreChatModelRunResult,
  chunk: LanguageModelV1StreamPart & { type: "finish" },
): CoreChatModelRunResult => {
  const { type, ...rest } = chunk;

  const steps = [
    ...(message.metadata?.steps ?? []),
    {
      logprobs: rest.logprobs,
      usage: rest.usage,
    },
  ];
  return {
    ...message,
    status: getStatus(chunk),
    metadata: {
      ...message.metadata,
      steps,
    },
  };
};

const appendSource = (
  message: CoreChatModelRunResult,
  chunk: ToolResultStreamPart & { type: "source" },
): CoreChatModelRunResult => {
  return {
    ...message,
    content: [
      ...message.content,
      {
        type: "source",
        ...chunk.source,
      },
    ],
  };
};

const getStatus = (
  chunk:
    | (LanguageModelV1StreamPart & { type: "finish" })
    | (ToolResultStreamPart & { type: "step-finish" }),
): MessageStatus => {
  if (chunk.finishReason === "tool-calls") {
    return {
      type: "requires-action",
      reason: "tool-calls",
    };
  } else if (
    chunk.finishReason === "stop" ||
    chunk.finishReason === "unknown"
  ) {
    return {
      type: "complete",
      reason: chunk.finishReason,
    };
  } else {
    return {
      type: "incomplete",
      reason: chunk.finishReason,
    };
  }
};

const appendOrUpdateCancel = (
  message: CoreChatModelRunResult,
): CoreChatModelRunResult => {
  return {
    ...message,
    status: {
      type: "incomplete",
      reason: "cancelled",
    },
  };
};



================================================
File: packages/react/src/runtimes/edge/streams/toolResultStream.ts
================================================
import { Tool } from "../../../model-context/ModelContextTypes";
import { LanguageModelV1StreamPart } from "@ai-sdk/provider";
import { z } from "zod";
import sjson from "secure-json-parse";
import { ReadonlyJSONValue } from "../../../utils/json/json-value";

export type ToolResultStreamPart =
  | LanguageModelV1StreamPart
  | {
      type: "annotations";
      annotations: ReadonlyJSONValue[];
    }
  | {
      type: "data";
      data: ReadonlyJSONValue[];
    }
  | {
      type: "source";
      source: {
        readonly sourceType: "url";
        readonly id: string;
        readonly url: string;
        readonly title?: string;
      };
    }
  | {
      type: "tool-result";
      toolCallType: "function";
      toolCallId: string;
      toolName: string;
      result: unknown;
      isError?: boolean;
    }
  | {
      type: "step-finish";
      finishReason:
        | "stop"
        | "length"
        | "content-filter"
        | "tool-calls"
        | "error"
        | "other"
        | "unknown";
      usage: {
        promptTokens: number;
        completionTokens: number;
      };
      isContinued: boolean;
    };

export function toolResultStream(
  tools: Record<string, Tool<any, any>> | undefined,
  abortSignal: AbortSignal,
) {
  const toolCallExecutions = new Map<string, Promise<any>>();

  return new TransformStream<ToolResultStreamPart, ToolResultStreamPart>({
    transform(chunk, controller) {
      // forward everything
      controller.enqueue(chunk);

      // handle tool calls
      const chunkType = chunk.type;
      switch (chunkType) {
        case "tool-call": {
          const { toolCallId, toolCallType, toolName, args: argsText } = chunk;
          const tool = tools?.[toolName];
          if (!tool || !tool.execute) return;

          let args;
          try {
            args = sjson.parse(argsText);
          } catch (e) {
            controller.enqueue({
              type: "tool-result",
              toolCallType,
              toolCallId,
              toolName,
              result:
                "Function parameter parsing failed. " +
                JSON.stringify((e as Error).message),
              isError: true,
            });
            return;
          }

          toolCallExecutions.set(
            toolCallId,
            (async () => {
              if (!tool.execute) return;

              let executeFn = tool.execute;

              if (tool.parameters instanceof z.ZodType) {
                const result = tool.parameters.safeParse(args);
                if (!result.success) {
                  executeFn =
                    tool.experimental_onSchemaValidationError ??
                    (() => {
                      throw (
                        "Function parameter validation failed. " +
                        JSON.stringify(result.error.issues)
                      );
                    });
                }
              }

              try {
                const result = await executeFn(args, {
                  toolCallId,
                  abortSignal,
                });

                controller.enqueue({
                  type: "tool-result",
                  toolCallType,
                  toolCallId,
                  toolName,
                  result: result === undefined ? "<no result>" : result,
                });
              } catch (error) {
                controller.enqueue({
                  type: "tool-result",
                  toolCallType,
                  toolCallId,
                  toolName,
                  result: "Error: " + error,
                  isError: true,
                });
              } finally {
                toolCallExecutions.delete(toolCallId);
              }
            })(),
          );
          break;
        }

        // ignore other parts
        case "text-delta":
        case "reasoning":
        case "source":
        case "tool-call-delta":
        case "tool-result":
        case "step-finish":
        case "finish":
        case "error":
        case "response-metadata":
        case "annotations":
        case "data":
          break;

        default: {
          const unhandledType: never = chunkType;
          throw new Error(`Unhandled chunk type: ${unhandledType}`);
        }
      }
    },

    async flush() {
      await Promise.all(toolCallExecutions.values());
    },
  });
}



================================================
File: packages/react/src/runtimes/edge/streams/utils/PipeableTransformStream.ts
================================================
export class PipeableTransformStream<I, O> extends TransformStream<I, O> {
  constructor(transform: (readable: ReadableStream<I>) => ReadableStream<O>) {
    super();
    const readable = transform(super.readable as any);
    Object.defineProperty(this, "readable", {
      value: readable,
      writable: false,
    });
  }
}



================================================
File: packages/react/src/runtimes/edge/streams/utils/StreamPart.ts
================================================
export type StreamPart<T extends Record<string, unknown>> = {
  [K in keyof T]: { type: K; value: T[K] };
}[keyof T];



================================================
File: packages/react/src/runtimes/edge/streams/utils/chunkByLineStream.ts
================================================
export function chunkByLineStream() {
  let buffer = "";

  return new TransformStream({
    transform(chunk, controller) {
      buffer += chunk;
      const lines = buffer.split("\n");

      // Process all complete lines
      for (let i = 0; i < lines.length - 1; i++) {
        controller.enqueue(lines[i]);
      }

      // Keep the last incomplete line in the buffer
      buffer = lines[lines.length - 1]!;
    },
    flush(controller) {
      // flush any remaining content in the buffer
      if (buffer) {
        controller.enqueue(buffer);
      }
    },
  });
}



================================================
File: packages/react/src/runtimes/edge/streams/utils/index.ts
================================================
import { streamPartDecoderStream } from "./streamPartDecoderStream";
import { streamPartEncoderStream } from "./streamPartEncoderStream";
import { StreamPart } from "./StreamPart";

export declare namespace StreamUtils {
  export { StreamPart };
}

/**
 * @deprecated `streamUtils` will be replaced with `assistant-stream` once it is ready.
 */
export const streamUtils = {
  streamPartEncoderStream,
  streamPartDecoderStream,
};



================================================
File: packages/react/src/runtimes/edge/streams/utils/streamPartDecoderStream.ts
================================================
import { chunkByLineStream } from "./chunkByLineStream";
import { PipeableTransformStream } from "./PipeableTransformStream";
import { StreamPart } from "./StreamPart";

const decodeStreamPart = <T extends Record<string, unknown>>(
  part: string,
): StreamPart<T> => {
  const index = part.indexOf(":");
  if (index === -1) throw new Error("Invalid stream part");
  return {
    type: part.slice(0, index),
    value: JSON.parse(part.slice(index + 1)),
  };
};

export function streamPartDecoderStream<T extends Record<string, unknown>>() {
  const decodeStream = new TransformStream<string, StreamPart<T>>({
    transform(chunk, controller) {
      controller.enqueue(decodeStreamPart<T>(chunk));
    },
  });

  return new PipeableTransformStream((readable) => {
    return readable
      .pipeThrough(new TextDecoderStream())
      .pipeThrough(chunkByLineStream())
      .pipeThrough(decodeStream);
  });
}



================================================
File: packages/react/src/runtimes/edge/streams/utils/streamPartEncoderStream.ts
================================================
import { PipeableTransformStream } from "./PipeableTransformStream";
import { StreamPart } from "./StreamPart";

function encodeStreamPart<T extends Record<string, unknown>>({
  type,
  value,
}: StreamPart<T>): string {
  return `${type as string}:${JSON.stringify(value)}\n`;
}

export function streamPartEncoderStream<T extends Record<string, unknown>>() {
  const encodeStream = new TransformStream<StreamPart<T>, string>({
    transform(chunk, controller) {
      controller.enqueue(encodeStreamPart<T>(chunk));
    },
  });

  return new PipeableTransformStream((readable) => {
    return readable
      .pipeThrough(encodeStream)
      .pipeThrough(new TextEncoderStream());
  });
}



================================================
File: packages/react/src/runtimes/external-store/ExternalStoreAdapter.tsx
================================================
import { AppendMessage, ThreadMessage } from "../../types";
import { AttachmentAdapter } from "../adapters/attachment";
import {
  AddToolResultOptions,
  StartRunConfig,
  ThreadSuggestion,
} from "../core/ThreadRuntimeCore";
import { FeedbackAdapter } from "../adapters/feedback/FeedbackAdapter";
import { SpeechSynthesisAdapter } from "../adapters/speech/SpeechAdapterTypes";
import { ThreadMessageLike } from "./ThreadMessageLike";

export type ExternalStoreThreadData<TState extends "regular" | "archived"> = {
  status: TState;
  threadId: string;
  title?: string | undefined;
};

export type ExternalStoreThreadListAdapter = {
  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  threadId?: string | undefined;
  threads?: readonly ExternalStoreThreadData<"regular">[] | undefined;
  archivedThreads?: readonly ExternalStoreThreadData<"archived">[] | undefined;
  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  onSwitchToNewThread?: (() => Promise<void> | void) | undefined;
  /**
   * @deprecated This API is still under active development and might change without notice.
   */
  onSwitchToThread?: ((threadId: string) => Promise<void> | void) | undefined;
  onRename?: (
    threadId: string,
    newTitle: string,
  ) => (Promise<void> | void) | undefined;
  onArchive?: ((threadId: string) => Promise<void> | void) | undefined;
  onUnarchive?: ((threadId: string) => Promise<void> | void) | undefined;
  onDelete?: ((threadId: string) => Promise<void> | void) | undefined;
};

export type ExternalStoreMessageConverter<T> = (
  message: T,
  idx: number,
) => ThreadMessageLike;

type ExternalStoreMessageConverterAdapter<T> = {
  convertMessage: ExternalStoreMessageConverter<T>;
};

type ExternalStoreAdapterBase<T> = {
  isDisabled?: boolean | undefined;
  isRunning?: boolean | undefined;
  messages: readonly T[];
  suggestions?: readonly ThreadSuggestion[] | undefined;
  extras?: unknown;

  setMessages?: ((messages: T[]) => void) | undefined;
  onNew: (message: AppendMessage) => Promise<void>;
  onEdit?: ((message: AppendMessage) => Promise<void>) | undefined;
  onReload?: // TODO: remove parentId in 0.8.0
  | ((parentId: string | null, config: StartRunConfig) => Promise<void>)
    | undefined;
  onCancel?: (() => Promise<void>) | undefined;
  onAddToolResult?:
    | ((options: AddToolResultOptions) => Promise<void> | void)
    | undefined;
  convertMessage?: ExternalStoreMessageConverter<T> | undefined;
  adapters?:
    | {
        attachments?: AttachmentAdapter | undefined;
        speech?: SpeechSynthesisAdapter | undefined;
        feedback?: FeedbackAdapter | undefined;
        /**
         * @deprecated This API is still under active development and might change without notice.
         */
        threadList?: ExternalStoreThreadListAdapter | undefined;
      }
    | undefined;
  unstable_capabilities?:
    | {
        copy?: boolean | undefined;
      }
    | undefined;
};

export type ExternalStoreAdapter<T = ThreadMessage> =
  ExternalStoreAdapterBase<T> &
    (T extends ThreadMessage
      ? object
      : ExternalStoreMessageConverterAdapter<T>);



================================================
File: packages/react/src/runtimes/external-store/ExternalStoreRuntimeCore.tsx
================================================
import { BaseAssistantRuntimeCore } from "../../internal";
import { ExternalStoreThreadListRuntimeCore } from "./ExternalStoreThreadListRuntimeCore";
import { ExternalStoreAdapter } from "./ExternalStoreAdapter";
import { ExternalStoreThreadRuntimeCore } from "./ExternalStoreThreadRuntimeCore";

const getThreadListAdapter = (store: ExternalStoreAdapter<any>) => {
  return store.adapters?.threadList ?? {};
};

export class ExternalStoreRuntimeCore extends BaseAssistantRuntimeCore {
  public readonly threads;

  constructor(adapter: ExternalStoreAdapter<any>) {
    super();
    this.threads = new ExternalStoreThreadListRuntimeCore(
      getThreadListAdapter(adapter),
      () => new ExternalStoreThreadRuntimeCore(this._contextProvider, adapter),
    );
  }

  public setAdapter(adapter: ExternalStoreAdapter<any>) {
    // Update the thread list adapter and propagate store changes to the main thread
    this.threads.__internal_setAdapter(getThreadListAdapter(adapter));
    this.threads.getMainThreadRuntimeCore().__internal_setAdapter(adapter);
  }
}



================================================
File: packages/react/src/runtimes/external-store/ExternalStoreThreadListRuntimeCore.tsx
================================================
import type { Unsubscribe } from "../../types";
import { ExternalStoreThreadRuntimeCore } from "./ExternalStoreThreadRuntimeCore";
import { ThreadListRuntimeCore } from "../core/ThreadListRuntimeCore";
import {
  ExternalStoreThreadData,
  ExternalStoreThreadListAdapter,
} from "./ExternalStoreAdapter";

export type ExternalStoreThreadFactory = () => ExternalStoreThreadRuntimeCore;

const EMPTY_ARRAY = Object.freeze([]);
const DEFAULT_THREAD_ID = "DEFAULT_THREAD_ID";
const DEFAULT_THREADS = Object.freeze([DEFAULT_THREAD_ID]);
const DEFAULT_THREAD: ExternalStoreThreadData<"regular"> = Object.freeze({
  threadId: DEFAULT_THREAD_ID,
  status: "regular",
});
const RESOLVED_PROMISE = Promise.resolve();

export class ExternalStoreThreadListRuntimeCore
  implements ThreadListRuntimeCore
{
  private _mainThreadId: string = DEFAULT_THREAD_ID;
  private _threads: readonly string[] = DEFAULT_THREADS;
  private _archivedThreads: readonly string[] = EMPTY_ARRAY;

  public get newThreadId() {
    return undefined;
  }

  public get threadIds() {
    return this._threads;
  }

  public get archivedThreadIds() {
    return this._archivedThreads;
  }

  public getLoadThreadsPromise() {
    return RESOLVED_PROMISE;
  }

  private _mainThread: ExternalStoreThreadRuntimeCore;

  public get mainThreadId() {
    return this._mainThreadId;
  }

  constructor(
    private adapter: ExternalStoreThreadListAdapter = {},
    private threadFactory: ExternalStoreThreadFactory,
  ) {
    this._mainThread = this.threadFactory();
  }

  public getMainThreadRuntimeCore() {
    return this._mainThread;
  }

  public getThreadRuntimeCore(): never {
    throw new Error("Method not implemented.");
  }

  public getItemById(threadId: string) {
    for (const thread of this.adapter.threads ?? []) {
      if (thread.threadId === threadId) return thread;
    }
    for (const thread of this.adapter.archivedThreads ?? []) {
      if (thread.threadId === threadId) return thread;
    }
    if (threadId === DEFAULT_THREAD_ID) return DEFAULT_THREAD;
    return undefined;
  }

  public __internal_setAdapter(adapter: ExternalStoreThreadListAdapter) {
    const previousAdapter = this.adapter;
    this.adapter = adapter;

    const newThreadId = adapter.threadId ?? DEFAULT_THREAD_ID;
    const newThreads = adapter.threads ?? EMPTY_ARRAY;
    const newArchivedThreads = adapter.archivedThreads ?? EMPTY_ARRAY;

    const previousThreadId = previousAdapter.threadId ?? DEFAULT_THREAD_ID;
    const previousThreads = previousAdapter.threads ?? EMPTY_ARRAY;
    const previousArchivedThreads =
      previousAdapter.archivedThreads ?? EMPTY_ARRAY;

    if (
      previousThreadId === newThreadId &&
      previousThreads === newThreads &&
      previousArchivedThreads === newArchivedThreads
    ) {
      return;
    }

    if (previousThreads !== newThreads) {
      this._threads =
        this.adapter.threads?.map((t) => t.threadId) ?? EMPTY_ARRAY;
    }

    if (previousArchivedThreads !== newArchivedThreads) {
      this._archivedThreads =
        this.adapter.archivedThreads?.map((t) => t.threadId) ?? EMPTY_ARRAY;
    }

    if (previousThreadId !== newThreadId) {
      this._mainThreadId = newThreadId;
      this._mainThread = this.threadFactory();
    }

    this._notifySubscribers();
  }

  public async switchToThread(threadId: string): Promise<void> {
    if (this._mainThreadId === threadId) return;
    const onSwitchToThread = this.adapter.onSwitchToThread;
    if (!onSwitchToThread)
      throw new Error(
        "External store adapter does not support switching to thread",
      );
    onSwitchToThread(threadId);
  }

  public async switchToNewThread(): Promise<void> {
    const onSwitchToNewThread = this.adapter.onSwitchToNewThread;
    if (!onSwitchToNewThread)
      throw new Error(
        "External store adapter does not support switching to new thread",
      );

    onSwitchToNewThread();
  }

  public async rename(threadId: string, newTitle: string): Promise<void> {
    const onRename = this.adapter.onRename;
    if (!onRename)
      throw new Error("External store adapter does not support renaming");

    onRename(threadId, newTitle);
  }

  public async archive(threadId: string): Promise<void> {
    const onArchive = this.adapter.onArchive;
    if (!onArchive)
      throw new Error("External store adapter does not support archiving");

    onArchive(threadId);
  }

  public async unarchive(threadId: string): Promise<void> {
    const onUnarchive = this.adapter.onUnarchive;
    if (!onUnarchive)
      throw new Error("External store adapter does not support unarchiving");

    onUnarchive(threadId);
  }

  public async delete(threadId: string): Promise<void> {
    const onDelete = this.adapter.onDelete;
    if (!onDelete)
      throw new Error("External store adapter does not support deleting");

    onDelete(threadId);
  }

  public initialize(): never {
    throw new Error("Method not implemented.");
  }

  public generateTitle(): never {
    throw new Error("Method not implemented.");
  }

  private _subscriptions = new Set<() => void>();

  public subscribe(callback: () => void): Unsubscribe {
    this._subscriptions.add(callback);
    return () => this._subscriptions.delete(callback);
  }

  private _notifySubscribers() {
    for (const callback of this._subscriptions) callback();
  }
}



================================================
File: packages/react/src/runtimes/external-store/ExternalStoreThreadRuntimeCore.tsx
================================================
import {
  AddToolResultOptions,
  StartRunConfig,
  ThreadSuggestion,
} from "../core/ThreadRuntimeCore";

import { AppendMessage, ThreadMessage } from "../../types";
import { ExternalStoreAdapter } from "./ExternalStoreAdapter";
import {
  getExternalStoreMessage,
  symbolInnerMessage,
} from "./getExternalStoreMessage";
import { ThreadMessageConverter } from "./ThreadMessageConverter";
import { getAutoStatus, isAutoStatus } from "./auto-status";
import { fromThreadMessageLike } from "./ThreadMessageLike";
import { getThreadMessageText } from "../../utils/getThreadMessageText";
import {
  RuntimeCapabilities,
  ThreadRuntimeCore,
} from "../core/ThreadRuntimeCore";
import { BaseThreadRuntimeCore } from "../core/BaseThreadRuntimeCore";
import { ModelContextProvider } from "../../model-context";

const EMPTY_ARRAY = Object.freeze([]);

export const hasUpcomingMessage = (
  isRunning: boolean,
  messages: readonly ThreadMessage[],
) => {
  return isRunning && messages[messages.length - 1]?.role !== "assistant";
};

export class ExternalStoreThreadRuntimeCore
  extends BaseThreadRuntimeCore
  implements ThreadRuntimeCore
{
  private assistantOptimisticId: string | null = null;

  private _capabilities: RuntimeCapabilities = {
    switchToBranch: false,
    edit: false,
    reload: false,
    cancel: false,
    unstable_copy: false,
    speech: false,
    attachments: false,
    feedback: false,
  };

  public get capabilities() {
    return this._capabilities;
  }

  private _messages!: readonly ThreadMessage[];
  public isDisabled!: boolean;

  public override get messages() {
    return this._messages;
  }

  public get adapters() {
    return this._store.adapters;
  }

  public suggestions: readonly ThreadSuggestion[] = [];
  public extras: unknown = undefined;

  private _converter = new ThreadMessageConverter();

  private _store!: ExternalStoreAdapter<any>;

  public override beginEdit(messageId: string) {
    if (!this._store.onEdit)
      throw new Error("Runtime does not support editing.");

    super.beginEdit(messageId);
  }

  constructor(
    contextProvider: ModelContextProvider,
    store: ExternalStoreAdapter<any>,
  ) {
    super(contextProvider);
    this.__internal_setAdapter(store);
  }

  public __internal_setAdapter(store: ExternalStoreAdapter<any>) {
    if (this._store === store) return;

    const isRunning = store.isRunning ?? false;
    this.isDisabled = store.isDisabled ?? false;

    const oldStore = this._store as ExternalStoreAdapter<any> | undefined;
    this._store = store;
    this.extras = store.extras;
    this.suggestions = store.suggestions ?? EMPTY_ARRAY;
    this._capabilities = {
      switchToBranch: this._store.setMessages !== undefined,
      edit: this._store.onEdit !== undefined,
      reload: this._store.onReload !== undefined,
      cancel: this._store.onCancel !== undefined,
      speech: this._store.adapters?.speech !== undefined,
      unstable_copy: this._store.unstable_capabilities?.copy !== false, // default true
      attachments: !!this._store.adapters?.attachments,
      feedback: !!this._store.adapters?.feedback,
    };

    if (oldStore) {
      // flush the converter cache when the convertMessage prop changes
      if (oldStore.convertMessage !== store.convertMessage) {
        this._converter = new ThreadMessageConverter();
      } else if (
        oldStore.isRunning === store.isRunning &&
        oldStore.messages === store.messages
      ) {
        this._notifySubscribers();
        // no conversion update
        return;
      }
    }

    const messages = !store.convertMessage
      ? store.messages
      : this._converter.convertMessages(store.messages, (cache, m, idx) => {
          if (!store.convertMessage) return m;

          const isLast = idx === store.messages.length - 1;
          const autoStatus = getAutoStatus(isLast, isRunning);

          if (
            cache &&
            (cache.role !== "assistant" ||
              !isAutoStatus(cache.status) ||
              cache.status === autoStatus)
          )
            return cache;

          const messageLike = store.convertMessage(m, idx);
          const newMessage = fromThreadMessageLike(
            messageLike,
            idx.toString(),
            autoStatus,
          );
          (newMessage as any)[symbolInnerMessage] = m;
          return newMessage;
        });

    if (messages.length > 0) this.ensureInitialized();

    if (oldStore?.isRunning ?? false !== store.isRunning ?? false) {
      if (store.isRunning) {
        this._notifyEventSubscribers("run-start");
      } else {
        this._notifyEventSubscribers("run-end");
      }
    }

    for (let i = 0; i < messages.length; i++) {
      const message = messages[i]!;
      const parent = messages[i - 1];
      this.repository.addOrUpdateMessage(parent?.id ?? null, message);
    }

    if (this.assistantOptimisticId) {
      this.repository.deleteMessage(this.assistantOptimisticId);
      this.assistantOptimisticId = null;
    }

    if (hasUpcomingMessage(isRunning, messages)) {
      this.assistantOptimisticId = this.repository.appendOptimisticMessage(
        messages.at(-1)?.id ?? null,
        {
          role: "assistant",
          content: [],
        },
      );
    }

    this.repository.resetHead(
      this.assistantOptimisticId ?? messages.at(-1)?.id ?? null,
    );

    this._messages = this.repository.getMessages();
    this._notifySubscribers();
  }

  public override switchToBranch(branchId: string): void {
    if (!this._store.setMessages)
      throw new Error("Runtime does not support switching branches.");

    this.repository.switchToBranch(branchId);
    this.updateMessages(this.repository.getMessages());
  }

  public async append(message: AppendMessage): Promise<void> {
    if (message.parentId !== (this.messages.at(-1)?.id ?? null)) {
      if (!this._store.onEdit)
        throw new Error("Runtime does not support editing messages.");
      await this._store.onEdit(message);
    } else {
      await this._store.onNew(message);
    }
  }

  public async startRun(config: StartRunConfig): Promise<void> {
    if (!this._store.onReload)
      throw new Error("Runtime does not support reloading messages.");

    await this._store.onReload(config.parentId, config);
  }

  public cancelRun(): void {
    if (!this._store.onCancel)
      throw new Error("Runtime does not support cancelling runs.");

    this._store.onCancel();

    if (this.assistantOptimisticId) {
      this.repository.deleteMessage(this.assistantOptimisticId);
      this.assistantOptimisticId = null;
    }

    let messages = this.repository.getMessages();
    const previousMessage = messages[messages.length - 1];
    if (
      previousMessage?.role === "user" &&
      previousMessage.id === messages.at(-1)?.id // ensure the previous message is a leaf node
    ) {
      this.repository.deleteMessage(previousMessage.id);
      if (!this.composer.text.trim()) {
        this.composer.setText(getThreadMessageText(previousMessage));
      }

      messages = this.repository.getMessages();
    } else {
      this._notifySubscribers();
    }

    // resync messages (for reloading, to restore the previous branch)
    setTimeout(() => {
      this.updateMessages(messages);
    }, 0);
  }

  public addToolResult(options: AddToolResultOptions) {
    if (!this._store.onAddToolResult)
      throw new Error("Runtime does not support tool results.");
    this._store.onAddToolResult(options);
  }

  private updateMessages = (messages: readonly ThreadMessage[]) => {
    const hasConverter = this._store.convertMessage !== undefined;
    if (hasConverter) {
      this._store.setMessages?.(
        messages.flatMap(getExternalStoreMessage).filter((m) => m != null),
      );
    } else {
      // TODO mark this as readonly in v0.8.0
      this._store.setMessages?.(messages as ThreadMessage[]);
    }
  };
}



================================================
File: packages/react/src/runtimes/external-store/ThreadMessageConverter.ts
================================================
import { ThreadMessage } from "../../types";

export type ConverterCallback<TIn> = (
  cache: ThreadMessage | undefined,
  message: TIn,
  idx: number,
) => ThreadMessage;

export class ThreadMessageConverter {
  private readonly cache = new WeakMap<WeakKey, ThreadMessage>();

  convertMessages<TIn extends WeakKey>(
    messages: readonly TIn[],
    converter: ConverterCallback<TIn>,
  ): ThreadMessage[] {
    return messages.map((m, idx) => {
      const cached = this.cache.get(m);
      const newMessage = converter(cached, m, idx);
      this.cache.set(m, newMessage);
      return newMessage;
    });
  }
}



================================================
File: packages/react/src/runtimes/external-store/ThreadMessageLike.tsx
================================================
import { generateId } from "../../internal";
import {
  MessageStatus,
  TextContentPart,
  ImageContentPart,
  ThreadMessage,
  ThreadAssistantContentPart,
  ThreadAssistantMessage,
  ThreadUserContentPart,
  ThreadUserMessage,
  ThreadSystemMessage,
  CompleteAttachment,
  FileContentPart,
  Unstable_AudioContentPart,
} from "../../types";
import {
  ReasoningContentPart,
  SourceContentPart,
  ThreadStep,
} from "../../types/AssistantTypes";
import {
  ReadonlyJSONObject,
  ReadonlyJSONValue,
} from "../../utils/json/json-value";
import { parsePartialJson } from "../../utils/json/parse-partial-json";

export type ThreadMessageLike = {
  readonly role: "assistant" | "user" | "system";
  readonly content:
    | string
    | readonly (
        | TextContentPart
        | ReasoningContentPart
        | SourceContentPart
        | ImageContentPart
        | FileContentPart
        | Unstable_AudioContentPart
        | {
            readonly type: "tool-call";
            readonly toolCallId?: string;
            readonly toolName: string;
            readonly args?: ReadonlyJSONObject;
            readonly argsText?: string;
            readonly result?: any | undefined;
            readonly isError?: boolean | undefined;
          }
      )[];
  readonly id?: string | undefined;
  readonly createdAt?: Date | undefined;
  readonly status?: MessageStatus | undefined;
  readonly attachments?: readonly CompleteAttachment[] | undefined;
  readonly metadata?:
    | {
        readonly unstable_annotations?:
          | readonly ReadonlyJSONValue[]
          | undefined;
        readonly unstable_data?: readonly ReadonlyJSONValue[] | undefined;
        readonly steps?: readonly ThreadStep[] | undefined;
        readonly custom?: Record<string, unknown> | undefined;
      }
    | undefined;
};

export const fromThreadMessageLike = (
  like: ThreadMessageLike,
  fallbackId: string,
  fallbackStatus: MessageStatus,
): ThreadMessage => {
  const { role, id, createdAt, attachments, status, metadata } = like;
  const common = {
    id: id ?? fallbackId,
    createdAt: createdAt ?? new Date(),
  };

  const content =
    typeof like.content === "string"
      ? [{ type: "text" as const, text: like.content }]
      : like.content;

  if (role !== "user" && attachments)
    throw new Error("attachments are only supported for user messages");

  if (role !== "assistant" && status)
    throw new Error("status is only supported for assistant messages");

  if (role !== "assistant" && metadata?.steps)
    throw new Error("metadata.steps is only supported for assistant messages");

  switch (role) {
    case "assistant":
      return {
        ...common,
        role,
        content: content
          .map((part): ThreadAssistantContentPart | null => {
            const type = part.type;
            switch (type) {
              case "text":
              case "reasoning":
                if (part.text.trim().length === 0) return null;
                return part;

              case "source":
                return part;

              case "tool-call": {
                if (part.args) {
                  return {
                    ...part,
                    toolCallId: part.toolCallId ?? "tool-" + generateId(),
                    args: part.args,
                    argsText: JSON.stringify(part.args),
                  };
                }
                return {
                  ...part,
                  toolCallId: part.toolCallId ?? "tool-" + generateId(),
                  args: part.args ?? parsePartialJson(part.argsText ?? "{}"),
                  argsText: part.argsText ?? "",
                };
              }

              default: {
                const unhandledType: "image" | "audio" | "file" = type;
                throw new Error(
                  `Unsupported assistant content part type: ${unhandledType}`,
                );
              }
            }
          })
          .filter((c) => !!c),
        status: status ?? fallbackStatus,
        metadata: {
          unstable_annotations: metadata?.unstable_annotations ?? [],
          unstable_data: metadata?.unstable_data ?? [],
          custom: metadata?.custom ?? {},
          steps: metadata?.steps ?? [],
        },
      } satisfies ThreadAssistantMessage;

    case "user":
      return {
        ...common,
        role,
        content: content.map((part): ThreadUserContentPart => {
          const type = part.type;
          switch (type) {
            case "text":
            case "image":
            case "audio":
            case "file":
              return part;

            default: {
              const unhandledType: "tool-call" | "reasoning" | "source" = type;
              throw new Error(
                `Unsupported user content part type: ${unhandledType}`,
              );
            }
          }
        }),
        attachments: attachments ?? [],
        metadata: {
          custom: metadata?.custom ?? {},
        },
      } satisfies ThreadUserMessage;

    case "system":
      if (content.length !== 1 || content[0]!.type !== "text")
        throw new Error(
          "System messages must have exactly one text content part.",
        );

      return {
        ...common,
        role,
        content: content as [TextContentPart],
        metadata: {
          custom: metadata?.custom ?? {},
        },
      } satisfies ThreadSystemMessage;

    default: {
      const unsupportedRole: never = role;
      throw new Error(`Unknown message role: ${unsupportedRole}`);
    }
  }
};



================================================
File: packages/react/src/runtimes/external-store/auto-status.tsx
================================================
import { MessageStatus } from "../../types";

const AUTO_STATUS_RUNNING = Object.freeze({ type: "running" });
const AUTO_STATUS_COMPLETE = Object.freeze({
  type: "complete",
  reason: "unknown",
});

export const isAutoStatus = (status: MessageStatus) =>
  status === AUTO_STATUS_RUNNING || status === AUTO_STATUS_COMPLETE;

export const getAutoStatus = (isLast: boolean, isRunning: boolean) =>
  isLast && isRunning ? AUTO_STATUS_RUNNING : AUTO_STATUS_COMPLETE;



================================================
File: packages/react/src/runtimes/external-store/createMessageConverter.tsx
================================================
"use client";
import { ThreadState } from "../../api";
import { useContentPart, useMessage } from "../../context";
import { ThreadMessage } from "../../types";
import {
  useExternalMessageConverter,
  convertExternalMessages,
} from "./external-message-converter";
import { getExternalStoreMessages } from "./getExternalStoreMessage";

export const createMessageConverter = <T extends object>(
  callback: useExternalMessageConverter.Callback<T>,
) => {
  const result = {
    useThreadMessages: (messages: T[], isRunning: boolean) => {
      return useExternalMessageConverter<T>({
        callback,
        messages,
        isRunning,
      });
    },
    toThreadMessages: (messages: T[]) => {
      return convertExternalMessages(messages, callback, false); // TODO figure out isRunning
    },
    toOriginalMessages: (
      input: ThreadState | ThreadMessage | ThreadMessage["content"][number],
    ) => {
      const messages = getExternalStoreMessages(input);
      if (messages.length === 0) throw new Error("No original messages found");
      return messages;
    },
    toOriginalMessage: (
      input: ThreadState | ThreadMessage | ThreadMessage["content"][number],
    ) => {
      const messages = result.toOriginalMessages(input);
      return messages[0]!;
    },
    useOriginalMessage: () => {
      const messageMessages = result.useOriginalMessages();
      const first = messageMessages[0]!;
      return first;
    },
    useOriginalMessages: () => {
      const contentPartMessages = useContentPart<T[]>({
        optional: true,
        selector: getExternalStoreMessages,
      });

      const messageMessages = useMessage<T[]>(getExternalStoreMessages);
      const messages = contentPartMessages ?? messageMessages;
      if (messages.length === 0) throw new Error("No original messages found");
      return messages;
    },
  };

  return result;
};



================================================
File: packages/react/src/runtimes/external-store/external-message-converter.tsx
================================================
"use client";

import { useMemo } from "react";
import { ThreadMessageConverter } from "./ThreadMessageConverter";
import {
  getExternalStoreMessages,
  symbolInnerMessage,
} from "./getExternalStoreMessage";
import { fromThreadMessageLike, ThreadMessageLike } from "./ThreadMessageLike";
import { getAutoStatus, isAutoStatus } from "./auto-status";
import { ToolCallContentPart } from "../../types";

export namespace useExternalMessageConverter {
  export type Message =
    | (ThreadMessageLike & {
        readonly convertConfig?: {
          readonly joinStrategy?: "concat-content" | "none";
        };
      })
    | {
        role: "tool";
        toolCallId: string;
        toolName?: string | undefined;
        result: any;
      };

  export type Callback<T> = (message: T) => Message | Message[];
}

type CallbackResult<T> = {
  input: T;
  outputs: useExternalMessageConverter.Message[];
};

type ChunkResult<T> = {
  inputs: T[];
  outputs: useExternalMessageConverter.Message[];
};

type Mutable<T> = {
  -readonly [P in keyof T]: T[P];
};

const joinExternalMessages = (
  messages: readonly useExternalMessageConverter.Message[],
): ThreadMessageLike => {
  const assistantMessage: Mutable<Omit<ThreadMessageLike, "metadata">> & {
    content: Exclude<ThreadMessageLike["content"][0], string>[];
    metadata?: Mutable<ThreadMessageLike["metadata"]>;
  } = {
    role: "assistant",
    content: [],
  };
  for (const output of messages) {
    if (output.role === "tool") {
      const toolCallIdx = assistantMessage.content.findIndex(
        (c) => c.type === "tool-call" && c.toolCallId === output.toolCallId,
      );
      if (toolCallIdx !== -1) {
        const toolCall = assistantMessage.content[
          toolCallIdx
        ]! as ToolCallContentPart;
        if (output.toolName) {
          if (toolCall.toolName !== output.toolName)
            throw new Error(
              `Tool call name ${output.toolCallId} ${output.toolName} does not match existing tool call ${toolCall.toolName}`,
            );
        }
        assistantMessage.content[toolCallIdx] = {
          ...toolCall,
          ...{
            [symbolInnerMessage]: [
              ...((toolCall as any)[symbolInnerMessage] ?? []),
              output,
            ],
          },
          result: output.result,
        };
      } else {
        throw new Error(
          `Tool call ${output.toolCallId} ${output.toolName} not found in assistant message`,
        );
      }
    } else {
      const role = output.role;
      const content = (
        typeof output.content === "string"
          ? [{ type: "text" as const, text: output.content }]
          : output.content
      ).map((c) => ({
        ...c,
        ...{ [symbolInnerMessage]: [output] },
      }));
      switch (role) {
        case "system":
        case "user":
          return {
            ...output,
            content,
          };
        case "assistant":
          if (assistantMessage.content.length === 0) {
            assistantMessage.id = output.id;
            assistantMessage.createdAt ??= output.createdAt;
            assistantMessage.status ??= output.status;

            if (output.attachments) {
              assistantMessage.attachments = [
                ...(assistantMessage.attachments ?? []),
                ...output.attachments,
              ];
            }

            if (output.metadata) {
              assistantMessage.metadata ??= {};
              if (output.metadata.unstable_annotations) {
                assistantMessage.metadata.unstable_annotations = [
                  ...(assistantMessage.metadata.unstable_annotations ?? []),
                  ...output.metadata.unstable_annotations,
                ];
              }
              if (output.metadata.unstable_data) {
                assistantMessage.metadata.unstable_data = [
                  ...(assistantMessage.metadata.unstable_data ?? []),
                  ...output.metadata.unstable_data,
                ];
              }
              if (output.metadata.steps) {
                assistantMessage.metadata.steps = [
                  ...(assistantMessage.metadata.steps ?? []),
                  ...output.metadata.steps,
                ];
              }
              if (output.metadata.custom) {
                assistantMessage.metadata.custom = {
                  ...(assistantMessage.metadata.custom ?? {}),
                  ...output.metadata.custom,
                };
              }
            }
            // TODO keep this in sync
          }

          assistantMessage.content.push(...content);
          break;
        default: {
          const unsupportedRole: never = role;
          throw new Error(`Unknown message role: ${unsupportedRole}`);
        }
      }
    }
  }
  return assistantMessage;
};

const chunkExternalMessages = <T,>(
  callbackResults: CallbackResult<T>[],
  joinStrategy?: "concat-content" | "none",
) => {
  const results: ChunkResult<T>[] = [];
  let isAssistant = false;
  let pendingNone = false; // true if the previous assistant message had joinStrategy "none"
  let inputs: T[] = [];
  let outputs: useExternalMessageConverter.Message[] = [];

  const flush = () => {
    if (outputs.length) {
      results.push({
        inputs,
        outputs,
      });
    }
    inputs = [];
    outputs = [];
    isAssistant = false;
    pendingNone = false;
  };

  for (const callbackResult of callbackResults) {
    for (const output of callbackResult.outputs) {
      if (
        (pendingNone && output.role !== "tool") ||
        !isAssistant ||
        output.role === "user" ||
        output.role === "system"
      ) {
        flush();
      }
      isAssistant = output.role === "assistant" || output.role === "tool";

      if (inputs.at(-1) !== callbackResult.input) {
        inputs.push(callbackResult.input);
      }
      outputs.push(output);

      if (
        output.role === "assistant" &&
        (output.convertConfig?.joinStrategy === "none" ||
          joinStrategy === "none")
      ) {
        pendingNone = true;
      }
    }
  }
  flush();
  return results;
};

export const convertExternalMessages = <T extends WeakKey>(
  messages: T[],
  callback: useExternalMessageConverter.Callback<T>,
  isRunning: boolean,
) => {
  const callbackResults: CallbackResult<T>[] = [];
  for (const message of messages) {
    const output = callback(message);
    const outputs = Array.isArray(output) ? output : [output];
    const result = { input: message, outputs };
    callbackResults.push(result);
  }

  const chunks = chunkExternalMessages(callbackResults);

  return chunks.map((message, idx) => {
    const isLast = idx === chunks.length - 1;
    const autoStatus = getAutoStatus(isLast, isRunning);
    const newMessage = fromThreadMessageLike(
      joinExternalMessages(message.outputs),
      idx.toString(),
      autoStatus,
    );
    (newMessage as any)[symbolInnerMessage] = message.inputs;
    return newMessage;
  });
};

export const useExternalMessageConverter = <T extends WeakKey>({
  callback,
  messages,
  isRunning,
  joinStrategy,
}: {
  callback: useExternalMessageConverter.Callback<T>;
  messages: T[];
  isRunning: boolean;
  joinStrategy?: "concat-content" | "none" | undefined;
}) => {
  const state = useMemo(
    () => ({
      callback,
      callbackCache: new WeakMap<T, CallbackResult<T>>(),
      chunkCache: new WeakMap<
        useExternalMessageConverter.Message,
        ChunkResult<T>
      >(),
      converterCache: new ThreadMessageConverter(),
    }),
    [callback],
  );

  return useMemo(() => {
    const callbackResults: CallbackResult<T>[] = [];
    for (const message of messages) {
      let result = state.callbackCache.get(message);
      if (!result) {
        const output = state.callback(message);
        const outputs = Array.isArray(output) ? output : [output];
        result = { input: message, outputs };
        state.callbackCache.set(message, result);
      }
      callbackResults.push(result);
    }

    const chunks = chunkExternalMessages(callbackResults, joinStrategy).map(
      (m) => {
        const key = m.outputs[0];
        if (!key) return m;

        const cached = state.chunkCache.get(key);
        if (cached && shallowArrayEqual(cached.outputs, m.outputs))
          return cached;
        state.chunkCache.set(key, m);
        return m;
      },
    );

    const threadMessages = state.converterCache.convertMessages(
      chunks,
      (cache, message, idx) => {
        const isLast = idx === chunks.length - 1;
        const autoStatus = getAutoStatus(isLast, isRunning);

        if (
          cache &&
          (cache.role !== "assistant" ||
            !isAutoStatus(cache.status) ||
            cache.status === autoStatus)
        ) {
          const inputs = getExternalStoreMessages<T>(cache);
          if (shallowArrayEqual(inputs, message.inputs)) {
            return cache;
          }
        }

        const newMessage = fromThreadMessageLike(
          joinExternalMessages(message.outputs),
          idx.toString(),
          autoStatus,
        );
        (newMessage as any)[symbolInnerMessage] = message.inputs;
        return newMessage;
      },
    );

    (threadMessages as unknown as { [symbolInnerMessage]: T[] })[
      symbolInnerMessage
    ] = messages;

    return threadMessages;
  }, [state, messages, isRunning, joinStrategy]);
};

const shallowArrayEqual = (a: unknown[], b: unknown[]) => {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};



================================================
File: packages/react/src/runtimes/external-store/getExternalStoreMessage.tsx
================================================
import { ThreadState } from "../../api";
import { ThreadMessage } from "../../types";

export const symbolInnerMessage = Symbol("innerMessage");
const symbolInnerMessages = Symbol("innerMessages");

type WithInnerMessages<T> = {
  [symbolInnerMessage]?: T | T[];
  [symbolInnerMessages]?: T[];
};

/**
 * @deprecated Use `getExternalStoreMessages` (plural) instead. This function will be removed in 0.8.0.
 */
export const getExternalStoreMessage = <T,>(input: ThreadMessage) => {
  const withInnerMessages = input as WithInnerMessages<T>;
  return withInnerMessages[symbolInnerMessage];
};

const EMPTY_ARRAY: never[] = [];

export const getExternalStoreMessages = <T,>(
  input: ThreadState | ThreadMessage | ThreadMessage["content"][number],
) => {
  // TODO temp until 0.8.0 (migrate useExternalStoreRuntime to always set an array)

  const container = (
    "messages" in input ? input.messages : input
  ) as WithInnerMessages<T>;
  const value = container[symbolInnerMessages] || container[symbolInnerMessage];
  if (!value) return EMPTY_ARRAY;
  if (Array.isArray(value)) {
    return value;
  }
  container[symbolInnerMessages] = [value];
  return container[symbolInnerMessages];
};



================================================
File: packages/react/src/runtimes/external-store/index.ts
================================================
export type {
  ExternalStoreAdapter,
  ExternalStoreMessageConverter,
} from "./ExternalStoreAdapter";
export type { ThreadMessageLike } from "./ThreadMessageLike";
export { useExternalStoreRuntime } from "./useExternalStoreRuntime";
export {
  getExternalStoreMessage,
  getExternalStoreMessages,
} from "./getExternalStoreMessage";
export {
  useExternalMessageConverter,
  convertExternalMessages as unstable_convertExternalMessages,
} from "./external-message-converter";
export { createMessageConverter as unstable_createMessageConverter } from "./createMessageConverter";



================================================
File: packages/react/src/runtimes/external-store/useExternalStoreRuntime.tsx
================================================
"use client";

import { useEffect, useMemo, useState } from "react";
import { ExternalStoreRuntimeCore } from "./ExternalStoreRuntimeCore";
import { ExternalStoreAdapter } from "./ExternalStoreAdapter";
import { AssistantRuntimeImpl } from "../../api/AssistantRuntime";
import { useRuntimeAdapters } from "../adapters/RuntimeAdapterProvider";

export const useExternalStoreRuntime = <T,>(store: ExternalStoreAdapter<T>) => {
  const [runtime] = useState(() => new ExternalStoreRuntimeCore(store));

  useEffect(() => {
    runtime.setAdapter(store);
  });

  const { modelContext } = useRuntimeAdapters() ?? {};

  useEffect(() => {
    if (!modelContext) return undefined;
    return runtime.registerModelContextProvider(modelContext);
  }, [modelContext, runtime]);

  return useMemo(() => new AssistantRuntimeImpl(runtime), [runtime]);
};



================================================
File: packages/react/src/runtimes/local/ChatModelAdapter.tsx
================================================
import type {
  MessageStatus,
  ReasoningContentPart,
  RunConfig,
  SourceContentPart,
  TextContentPart,
  ThreadAssistantContentPart,
  ThreadMessage,
  ThreadStep,
  ToolCallContentPart,
} from "../../types/AssistantTypes";
import type { ModelContext } from "../../model-context/ModelContextTypes";
import { ReadonlyJSONValue } from "../../utils/json/json-value";

export type ChatModelRunUpdate = {
  readonly content: readonly ThreadAssistantContentPart[];
  readonly metadata?: Record<string, unknown>;
};

export type ChatModelRunResult = {
  readonly content?: readonly ThreadAssistantContentPart[] | undefined;
  readonly status?: MessageStatus | undefined;
  readonly metadata?: {
    readonly unstable_annotations?: readonly ReadonlyJSONValue[] | undefined;
    readonly unstable_data?: readonly ReadonlyJSONValue[] | undefined;
    readonly steps?: readonly ThreadStep[] | undefined;
    readonly custom?: Record<string, unknown> | undefined;
  };
};

export type CoreChatModelRunResult = Omit<ChatModelRunResult, "content"> & {
  readonly content: readonly (
    | TextContentPart
    | ReasoningContentPart
    | ToolCallContentPart
    | SourceContentPart
  )[];
};

export type ChatModelRunOptions = {
  readonly messages: readonly ThreadMessage[];
  readonly runConfig: RunConfig;
  readonly abortSignal: AbortSignal;
  readonly context: ModelContext;

  /**
   * @deprecated This field was renamed to `context`.
   */
  readonly config: ModelContext;

  readonly unstable_assistantMessageId?: string;
  unstable_getMessage(): ThreadMessage;
};

export type ChatModelAdapter = {
  run(
    options: ChatModelRunOptions,
  ): Promise<ChatModelRunResult> | AsyncGenerator<ChatModelRunResult, void>;
};



================================================
File: packages/react/src/runtimes/local/LocalRuntimeCore.tsx
================================================
import { BaseAssistantRuntimeCore } from "../core/BaseAssistantRuntimeCore";
import { LocalThreadRuntimeCore } from "./LocalThreadRuntimeCore";
import { LocalRuntimeOptionsBase } from "./LocalRuntimeOptions";
import { LocalThreadListRuntimeCore } from "./LocalThreadListRuntimeCore";
import { ExportedMessageRepository } from "../utils/MessageRepository";
import { ThreadMessageLike } from "../external-store";

export class LocalRuntimeCore extends BaseAssistantRuntimeCore {
  public readonly threads;
  public readonly Provider = undefined;

  private _options: LocalRuntimeOptionsBase;

  constructor(
    options: LocalRuntimeOptionsBase,
    initialMessages: readonly ThreadMessageLike[] | undefined,
  ) {
    super();

    this._options = options;

    this.threads = new LocalThreadListRuntimeCore(() => {
      return new LocalThreadRuntimeCore(this._contextProvider, this._options);
    });

    if (initialMessages) {
      this.threads
        .getMainThreadRuntimeCore()
        .import(ExportedMessageRepository.fromArray(initialMessages));
    }
  }
}



================================================
File: packages/react/src/runtimes/local/LocalRuntimeOptions.tsx
================================================
import { ThreadHistoryAdapter } from "../adapters/thread-history/ThreadHistoryAdapter";
import { AttachmentAdapter } from "../adapters/attachment/AttachmentAdapter";
import { ThreadMessageLike } from "../external-store";
import { FeedbackAdapter } from "../adapters/feedback/FeedbackAdapter";
import { SpeechSynthesisAdapter } from "../adapters/speech/SpeechAdapterTypes";
import { ChatModelAdapter } from "./ChatModelAdapter";
import { AssistantCloud } from "../../cloud";
import { SuggestionAdapter } from "../adapters";

export type LocalRuntimeOptionsBase = {
  maxSteps?: number | undefined;
  adapters: {
    chatModel: ChatModelAdapter;
    history?: ThreadHistoryAdapter | undefined;
    attachments?: AttachmentAdapter | undefined;
    speech?: SpeechSynthesisAdapter | undefined;
    feedback?: FeedbackAdapter | undefined;
    suggestion?: SuggestionAdapter | undefined;
  };

  /**
   * Names of tools that are allowed to interrupt the run in order to wait for human/external approval.
   */
  unstable_humanToolNames?: string[] | undefined;
};

// TODO align LocalRuntimeOptions with LocalRuntimeOptionsBase
export type LocalRuntimeOptions = Omit<LocalRuntimeOptionsBase, "adapters"> & {
  cloud?: AssistantCloud | undefined;
  initialMessages?: readonly ThreadMessageLike[] | undefined;
  adapters?: Omit<LocalRuntimeOptionsBase["adapters"], "chatModel"> | undefined;
};

export const splitLocalRuntimeOptions = <T extends LocalRuntimeOptions>(
  options: T,
) => {
  const {
    cloud,
    initialMessages,
    maxSteps,
    adapters,
    unstable_humanToolNames,
    ...rest
  } = options;

  return {
    localRuntimeOptions: {
      cloud,
      initialMessages,
      maxSteps,
      adapters,
      unstable_humanToolNames,
    },
    otherOptions: rest,
  };
};



================================================
File: packages/react/src/runtimes/local/LocalThreadListRuntimeCore.tsx
================================================
import { ThreadListRuntimeCore } from "../core/ThreadListRuntimeCore";
import { BaseSubscribable } from "../remote-thread-list/BaseSubscribable";
import { LocalThreadRuntimeCore } from "./LocalThreadRuntimeCore";

export type LocalThreadFactory = () => LocalThreadRuntimeCore;

const EMPTY_ARRAY = Object.freeze([]);
export class LocalThreadListRuntimeCore
  extends BaseSubscribable
  implements ThreadListRuntimeCore
{
  private _mainThread: LocalThreadRuntimeCore;
  constructor(_threadFactory: LocalThreadFactory) {
    super();

    this._mainThread = _threadFactory();
  }

  public getMainThreadRuntimeCore() {
    return this._mainThread;
  }

  public get newThreadId(): string {
    throw new Error("Method not implemented.");
  }

  public get threadIds(): readonly string[] {
    throw EMPTY_ARRAY;
  }

  public get archivedThreadIds(): readonly string[] {
    throw EMPTY_ARRAY;
  }

  public get mainThreadId(): string {
    return "__DEFAULT_ID__";
  }

  public getThreadRuntimeCore(): never {
    throw new Error("Method not implemented.");
  }

  public getLoadThreadsPromise(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public getItemById(threadId: string) {
    if (threadId === this.mainThreadId) {
      return {
        status: "regular" as const,
        threadId: this.mainThreadId,
        remoteId: this.mainThreadId,
        externalId: undefined,
        title: undefined,
        isMain: true,
      };
    }
    throw new Error("Method not implemented");
  }

  public async switchToThread(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public switchToNewThread(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public rename(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public archive(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public unarchive(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public delete(): Promise<void> {
    throw new Error("Method not implemented.");
  }

  public initialize(): never {
    throw new Error("Method not implemented.");
  }

  public generateTitle(): never {
    throw new Error("Method not implemented.");
  }
}



================================================
File: packages/react/src/runtimes/local/LocalThreadRuntimeCore.tsx
================================================
import { generateId } from "../../internal";
import type { AppendMessage, ThreadAssistantMessage } from "../../types";
import { fromCoreMessage } from "../edge";
import type { ChatModelRunResult } from "./ChatModelAdapter";
import { shouldContinue } from "./shouldContinue";
import { LocalRuntimeOptionsBase } from "./LocalRuntimeOptions";
import {
  AddToolResultOptions,
  ThreadSuggestion,
  ThreadRuntimeCore,
  StartRunConfig,
} from "../core/ThreadRuntimeCore";
import { BaseThreadRuntimeCore } from "../core/BaseThreadRuntimeCore";
import { RunConfig } from "../../types/AssistantTypes";
import { ModelContextProvider } from "../../model-context";

export class LocalThreadRuntimeCore
  extends BaseThreadRuntimeCore
  implements ThreadRuntimeCore
{
  public readonly capabilities = {
    switchToBranch: true,
    edit: true,
    reload: true,
    cancel: true,
    unstable_copy: true,
    speech: false,
    attachments: false,
    feedback: false,
  };

  private abortController: AbortController | null = null;

  public readonly isDisabled = false;

  private _suggestions: readonly ThreadSuggestion[] = [];
  private _suggestionsController: AbortController | null = null;
  public get suggestions(): readonly ThreadSuggestion[] {
    return this._suggestions;
  }

  public get adapters() {
    return this._options.adapters;
  }

  constructor(
    contextProvider: ModelContextProvider,
    options: LocalRuntimeOptionsBase,
  ) {
    super(contextProvider);
    this.__internal_setOptions(options);
  }

  private _options!: LocalRuntimeOptionsBase;

  private _lastRunConfig: RunConfig = {};

  public get extras() {
    return undefined;
  }

  public __internal_setOptions(options: LocalRuntimeOptionsBase) {
    if (this._options === options) return;

    this._options = options;

    let hasUpdates = false;

    const canSpeak = options.adapters?.speech !== undefined;
    if (this.capabilities.speech !== canSpeak) {
      this.capabilities.speech = canSpeak;
      hasUpdates = true;
    }

    const canAttach = options.adapters?.attachments !== undefined;
    if (this.capabilities.attachments !== canAttach) {
      this.capabilities.attachments = canAttach;
      hasUpdates = true;
    }

    const canFeedback = options.adapters?.feedback !== undefined;
    if (this.capabilities.feedback !== canFeedback) {
      this.capabilities.feedback = canFeedback;
      hasUpdates = true;
    }

    if (hasUpdates) this._notifySubscribers();
  }

  private _loadPromise: Promise<void> | undefined;
  public __internal_load() {
    if (this._loadPromise) return this._loadPromise;

    const promise = this.adapters.history?.load() ?? Promise.resolve(null);

    this._loadPromise = promise.then((repo) => {
      if (!repo) return;
      this.repository.import(repo);
      this._notifySubscribers();
    });

    return this._loadPromise;
  }

  public async append(message: AppendMessage): Promise<void> {
    this.ensureInitialized();

    const newMessage = fromCoreMessage(message, {
      attachments: message.attachments,
    });
    this.repository.addOrUpdateMessage(message.parentId, newMessage);
    this._options.adapters.history?.append({
      parentId: message.parentId,
      message: newMessage,
    });

    const startRun = message.startRun ?? message.role === "user";
    if (startRun) {
      await this.startRun({
        parentId: newMessage.id,
        sourceId: message.sourceId,
        runConfig: message.runConfig ?? {},
      });
    } else {
      this.repository.resetHead(newMessage.id);
      this._notifySubscribers();
    }
  }

  public async startRun({
    parentId,
    runConfig,
  }: StartRunConfig): Promise<void> {
    this.ensureInitialized();

    this.repository.resetHead(parentId);

    // add assistant message
    const id = generateId();
    let message: ThreadAssistantMessage = {
      id,
      role: "assistant",
      status: { type: "running" },
      content: [],
      metadata: {
        unstable_annotations: [],
        unstable_data: [],
        steps: [],
        custom: {},
      },
      createdAt: new Date(),
    };

    this._notifyEventSubscribers("run-start");

    try {
      this._suggestions = [];
      this._suggestionsController?.abort();
      this._suggestionsController = null;

      do {
        message = await this.performRoundtrip(parentId, message, runConfig);
      } while (shouldContinue(message, this._options.unstable_humanToolNames));
    } finally {
      this._notifyEventSubscribers("run-end");
    }

    this._suggestionsController = new AbortController();
    const signal = this._suggestionsController.signal;
    if (
      this.adapters.suggestion &&
      message.status?.type !== "requires-action"
    ) {
      const promiseOrGenerator = this.adapters.suggestion?.generate({
        messages: this.messages,
      });

      if (Symbol.asyncIterator in promiseOrGenerator) {
        for await (const r of promiseOrGenerator) {
          if (signal.aborted) break;
          this._suggestions = r;
        }
      } else {
        const result = await promiseOrGenerator;
        if (signal.aborted) return;
        this._suggestions = result;
      }
    }
  }

  private async performRoundtrip(
    parentId: string | null,
    message: ThreadAssistantMessage,
    runConfig: RunConfig | undefined,
  ) {
    const messages = this.repository.getMessages();

    // abort existing run
    this.abortController?.abort();
    this.abortController = new AbortController();

    const initialContent = message.content;
    const initialAnnotations = message.metadata?.unstable_annotations;
    const initialData = message.metadata?.unstable_data;
    const initialSteps = message.metadata?.steps;
    const initalCustom = message.metadata?.custom;
    const updateMessage = (m: Partial<ChatModelRunResult>) => {
      const newSteps = m.metadata?.steps;
      const steps = newSteps
        ? [...(initialSteps ?? []), ...newSteps]
        : undefined;

      const newAnnotations = m.metadata?.unstable_annotations;
      const newData = m.metadata?.unstable_data;
      const annotations = newAnnotations
        ? [...(initialAnnotations ?? []), ...newAnnotations]
        : undefined;
      const data = newData ? [...(initialData ?? []), ...newData] : undefined;

      message = {
        ...message,
        ...(m.content
          ? { content: [...initialContent, ...(m.content ?? [])] }
          : undefined),
        status: m.status ?? message.status,
        ...(m.metadata
          ? {
              metadata: {
                ...message.metadata,
                ...(annotations
                  ? { unstable_annotations: annotations }
                  : undefined),
                ...(data ? { unstable_data: data } : undefined),
                ...(steps ? { steps } : undefined),
                ...(m.metadata?.custom
                  ? {
                      custom: { ...(initalCustom ?? {}), ...m.metadata.custom },
                    }
                  : undefined),
              },
            }
          : undefined),
      };
      this.repository.addOrUpdateMessage(parentId, message);
      this._notifySubscribers();
    };

    const maxSteps = this._options.maxSteps ?? 2;

    const steps = message.metadata?.steps?.length ?? 0;
    if (steps >= maxSteps) {
      // reached max tool steps
      updateMessage({
        status: {
          type: "incomplete",
          reason: "tool-calls",
        },
      });
      return message;
    } else {
      updateMessage({
        status: {
          type: "running",
        },
      });
    }

    try {
      this._lastRunConfig = runConfig ?? {};
      const context = this.getModelContext();
      const promiseOrGenerator = this.adapters.chatModel.run({
        messages,
        runConfig: this._lastRunConfig,
        abortSignal: this.abortController.signal,
        context,
        config: context,
        unstable_assistantMessageId: message.id,
        unstable_getMessage() {
          return message;
        },
      });

      // handle async iterator for streaming results
      if (Symbol.asyncIterator in promiseOrGenerator) {
        for await (const r of promiseOrGenerator) {
          updateMessage(r);
        }
      } else {
        updateMessage(await promiseOrGenerator);
      }

      this.abortController = null;

      if (message.status.type === "running") {
        updateMessage({
          status: { type: "complete", reason: "unknown" },
        });
      }
    } catch (e) {
      this.abortController = null;

      // TODO this should be handled by the run result stream
      if (e instanceof Error && e.name === "AbortError") {
        updateMessage({
          status: { type: "incomplete", reason: "cancelled" },
        });
      } else {
        updateMessage({
          status: {
            type: "incomplete",
            reason: "error",
            error:
              e instanceof Error
                ? e.message
                : `[${typeof e}] ${new String(e).toString()}`,
          },
        });

        throw e;
      }
    } finally {
      if (
        message.status.type === "complete" ||
        message.status.type === "incomplete"
      ) {
        await this._options.adapters.history?.append({
          parentId,
          message: message,
        });
      }
    }
    return message;
  }

  public cancelRun() {
    this.abortController?.abort();
    this.abortController = null;
  }

  public addToolResult({
    messageId,
    toolCallId,
    result,
  }: AddToolResultOptions) {
    const messageData = this.repository.getMessage(messageId);
    const { parentId } = messageData;
    let { message } = messageData;

    if (message.role !== "assistant")
      throw new Error("Tried to add tool result to non-assistant message");

    let added = false;
    let found = false;
    const newContent = message.content.map((c) => {
      if (c.type !== "tool-call") return c;
      if (c.toolCallId !== toolCallId) return c;
      found = true;
      if (!c.result) added = true;
      return {
        ...c,
        result,
      };
    });

    if (!found)
      throw new Error("Tried to add tool result to non-existing tool call");

    message = {
      ...message,
      content: newContent,
    };
    this.repository.addOrUpdateMessage(parentId, message);

    if (
      added &&
      shouldContinue(message, this._options.unstable_humanToolNames)
    ) {
      this.performRoundtrip(parentId, message, this._lastRunConfig);
    }
  }
}



================================================
File: packages/react/src/runtimes/local/index.ts
================================================
export { useLocalRuntime } from "./useLocalRuntime";
export type { LocalRuntimeOptions } from "./LocalRuntimeOptions";
export type {
  ChatModelAdapter,
  ChatModelRunOptions,
  ChatModelRunResult,
  ChatModelRunUpdate,
} from "./ChatModelAdapter";



================================================
File: packages/react/src/runtimes/local/shouldContinue.tsx
================================================
import type { ThreadAssistantMessage } from "../../types";

export const shouldContinue = (
  result: ThreadAssistantMessage,
  humanToolNames: string[] | undefined,
) => {
  // TODO legacy behavior -- make specifying human tool names required
  if (humanToolNames === undefined) {
    return (
      result.status?.type === "requires-action" &&
      result.status.reason === "tool-calls" &&
      result.content.every((c) => c.type !== "tool-call" || !!c.result)
    );
  }

  return (
    result.status?.type === "requires-action" &&
    result.status.reason === "tool-calls" &&
    result.content.every(
      (c) =>
        c.type !== "tool-call" ||
        !!c.result ||
        !humanToolNames.includes(c.toolName),
    )
  );
};



================================================
File: packages/react/src/runtimes/local/useLocalRuntime.tsx
================================================
"use client";

import { useEffect, useMemo, useState } from "react";
import type { ChatModelAdapter } from "./ChatModelAdapter";
import { LocalRuntimeCore } from "./LocalRuntimeCore";
import { LocalRuntimeOptions } from "./LocalRuntimeOptions";
import { useRuntimeAdapters } from "../adapters/RuntimeAdapterProvider";
import { useRemoteThreadListRuntime } from "../remote-thread-list/useRemoteThreadListRuntime";
import { useCloudThreadListAdapter } from "../remote-thread-list/adapter/cloud";
import { AssistantRuntimeImpl } from "../../internal";

const useLocalThreadRuntime = (
  adapter: ChatModelAdapter,
  { initialMessages, ...options }: LocalRuntimeOptions,
) => {
  const { modelContext, ...threadListAdapters } = useRuntimeAdapters() ?? {};
  const opt = useMemo(
    () => ({
      ...options,
      adapters: {
        ...threadListAdapters,
        ...options.adapters,
        chatModel: adapter,
      },
    }),
    [adapter, options, threadListAdapters],
  );

  const [runtime] = useState(() => new LocalRuntimeCore(opt, initialMessages));

  useEffect(() => {
    runtime.threads.getMainThreadRuntimeCore().__internal_setOptions(opt);
    runtime.threads.getMainThreadRuntimeCore().__internal_load();
  }, [runtime, opt]);

  useEffect(() => {
    if (!modelContext) return undefined;
    return runtime.registerModelContextProvider(modelContext);
  }, [modelContext, runtime]);

  return useMemo(() => new AssistantRuntimeImpl(runtime), [runtime]);
};

export const useLocalRuntime = (
  adapter: ChatModelAdapter,
  { cloud, ...options }: LocalRuntimeOptions = {},
) => {
  const cloudAdapter = useCloudThreadListAdapter({ cloud });
  return useRemoteThreadListRuntime({
    runtimeHook: function RuntimeHook() {
      return useLocalThreadRuntime(adapter, options);
    },
    adapter: cloudAdapter,
  });
};



================================================
File: packages/react/src/runtimes/remote-thread-list/BaseSubscribable.tsx
================================================
import { Unsubscribe } from "../../types";

export class BaseSubscribable {
  private _subscribers = new Set<() => void>();

  public subscribe(callback: () => void): Unsubscribe {
    this._subscribers.add(callback);
    return () => this._subscribers.delete(callback);
  }

  public waitForUpdate() {
    return new Promise<void>((resolve) => {
      const unsubscribe = this.subscribe(() => {
        unsubscribe();
        resolve();
      });
    });
  }

  protected _notifySubscribers() {
    const errors = [];
    for (const callback of this._subscribers) {
      try {
        callback();
      } catch (error) {
        errors.push(error);
      }
    }

    if (errors.length > 0) {
      if (errors.length === 1) {
        throw errors[0];
      } else {
        throw new AggregateError(errors);
      }
    }
  }
}



================================================
File: packages/react/src/runtimes/remote-thread-list/EMPTY_THREAD_CORE.tsx
================================================
import { ThreadRuntimeCore } from "../../internal";

const EMPTY_THREAD_ERROR = new Error(
  "This is the empty thread, a placeholder for the main thread. You cannot perform any actions on this thread instance. This error is probably because you tried to call a thread method in your render function. Call the method inside a `useEffect` hook instead.",
);
export const EMPTY_THREAD_CORE: ThreadRuntimeCore = {
  getMessageById() {
    return undefined;
  },

  getBranches() {
    return [];
  },

  switchToBranch() {
    throw EMPTY_THREAD_ERROR;
  },

  append() {
    throw EMPTY_THREAD_ERROR;
  },

  startRun() {
    throw EMPTY_THREAD_ERROR;
  },

  cancelRun() {
    throw EMPTY_THREAD_ERROR;
  },

  addToolResult() {
    throw EMPTY_THREAD_ERROR;
  },

  speak() {
    throw EMPTY_THREAD_ERROR;
  },

  stopSpeaking() {
    throw EMPTY_THREAD_ERROR;
  },

  getSubmittedFeedback() {
    return undefined;
  },

  submitFeedback() {
    throw EMPTY_THREAD_ERROR;
  },

  getModelContext() {
    return {};
  },

  composer: {
    attachments: [],

    getAttachmentAccept() {
      return "*";
    },

    async addAttachment() {
      throw EMPTY_THREAD_ERROR;
    },

    async removeAttachment() {
      throw EMPTY_THREAD_ERROR;
    },

    isEditing: false,

    canCancel: false,
    isEmpty: true,

    text: "",

    setText() {
      throw EMPTY_THREAD_ERROR;
    },

    role: "user",

    setRole() {
      throw EMPTY_THREAD_ERROR;
    },

    runConfig: {},

    setRunConfig() {
      throw EMPTY_THREAD_ERROR;
    },

    async reset() {
      // noop
    },

    async clearAttachments() {
      // noop
    },

    send() {
      throw EMPTY_THREAD_ERROR;
    },

    cancel() {
      // noop
    },

    subscribe() {
      return () => {};
    },

    unstable_on() {
      return () => {};
    },
  },

  getEditComposer() {
    return undefined;
  },

  beginEdit() {
    throw EMPTY_THREAD_ERROR;
  },

  speech: undefined,

  capabilities: {
    switchToBranch: false,
    edit: false,
    reload: false,
    cancel: false,
    unstable_copy: false,
    speech: false,
    attachments: false,
    feedback: false,
  },

  isDisabled: true,

  messages: [],

  suggestions: [],

  extras: undefined,

  subscribe() {
    return () => {};
  },

  import() {
    throw EMPTY_THREAD_ERROR;
  },

  export() {
    return { messages: [] };
  },

  unstable_on() {
    return () => {};
  },
};



================================================
File: packages/react/src/runtimes/remote-thread-list/OptimisticState.ts
================================================
import { BaseSubscribable } from "./BaseSubscribable";

type Transform<TState, TResult> = {
  execute: () => Promise<TResult>;

  /** transform the state after the promise resolves */
  then?: (state: TState, result: TResult) => TState;

  /** transform the state during resolution and afterwards */
  optimistic?: (state: TState) => TState;

  /** transform the state only while loading */
  loading?: (state: TState, task: Promise<TResult>) => TState;
};

type PendingTransform<TState, TResult> = Transform<TState, TResult> & {
  task: Promise<TResult>;
};

const pipeTransforms = <TState, TExtra>(
  initialState: TState,
  extraParam: TExtra,
  transforms: (((state: TState, extra: TExtra) => TState) | undefined)[],
): TState => {
  return transforms.reduce((state, transform) => {
    return transform?.(state, extraParam) ?? state;
  }, initialState);
};

export class OptimisticState<TState> extends BaseSubscribable {
  private readonly _pendingTransforms: Array<PendingTransform<TState, any>> =
    [];
  private _baseValue: TState;
  private _cachedValue: TState;

  public constructor(initialState: TState) {
    super();
    this._baseValue = initialState;
    this._cachedValue = initialState;
  }

  private _updateState(): void {
    this._cachedValue = this._pendingTransforms.reduce((state, transform) => {
      return pipeTransforms(state, transform.task, [
        transform.loading,
        transform.optimistic,
      ]);
    }, this._baseValue);

    this._notifySubscribers();
  }

  public get baseValue(): TState {
    return this._baseValue;
  }

  public get value(): TState {
    return this._cachedValue;
  }

  public update(state: TState): void {
    this._baseValue = state;
    this._updateState();
  }

  public async optimisticUpdate<TResult>(
    transform: Transform<TState, TResult>,
  ): Promise<TResult> {
    const task = transform.execute();
    const pendingTransform = { ...transform, task };
    try {
      this._pendingTransforms.push(pendingTransform);
      this._updateState();

      const result = await task;
      this._baseValue = pipeTransforms(this._baseValue, result, [
        transform.optimistic,
        transform.then,
      ]);
      return result;
    } finally {
      const index = this._pendingTransforms.indexOf(pendingTransform);
      if (index > -1) {
        this._pendingTransforms.splice(index, 1);
      }
      this._updateState();
    }
  }
}



================================================
File: packages/react/src/runtimes/remote-thread-list/RemoteThreadListHookInstanceManager.tsx
================================================
"use client";

import {
  FC,
  useCallback,
  useRef,
  useEffect,
  memo,
  useMemo,
  PropsWithChildren,
  ComponentType,
} from "react";
import { UseBoundStore, StoreApi, create } from "zustand";
import { useAssistantRuntime } from "../../context";
import { ThreadListItemRuntimeProvider } from "../../context/providers/ThreadListItemRuntimeProvider";
import {
  useThreadListItem,
  useThreadListItemRuntime,
} from "../../context/react/ThreadListItemContext";
import { ThreadRuntimeCore, ThreadRuntimeImpl } from "../../internal";
import { BaseSubscribable } from "./BaseSubscribable";
import { AssistantRuntime } from "../../api";

type RemoteThreadListHook = () => AssistantRuntime;

type RemoteThreadListHookInstance = {
  runtime?: ThreadRuntimeCore;
};
export class RemoteThreadListHookInstanceManager extends BaseSubscribable {
  private useRuntimeHook: UseBoundStore<
    StoreApi<{ useRuntime: RemoteThreadListHook }>
  >;
  private instances = new Map<string, RemoteThreadListHookInstance>();
  private useAliveThreadsKeysChanged = create(() => ({}));

  constructor(runtimeHook: RemoteThreadListHook) {
    super();
    this.useRuntimeHook = create(() => ({ useRuntime: runtimeHook }));
  }

  public startThreadRuntime(threadId: string) {
    if (!this.instances.has(threadId)) {
      this.instances.set(threadId, {});
      this.useAliveThreadsKeysChanged.setState({}, true);
    }

    return new Promise<ThreadRuntimeCore>((resolve, reject) => {
      const callback = () => {
        const instance = this.instances.get(threadId);
        if (!instance) {
          dispose();
          reject(new Error("Thread was deleted before runtime was started"));
        } else if (!instance.runtime) {
          return; // misc update
        } else {
          dispose();
          resolve(instance.runtime);
        }
      };
      const dispose = this.subscribe(callback);
      callback();
    });
  }

  public getThreadRuntimeCore(threadId: string) {
    const instance = this.instances.get(threadId);
    if (!instance)
      throw new Error(
        "getThreadRuntimeCore not found. This is a bug in assistant-ui.",
      );
    return instance.runtime;
  }

  public stopThreadRuntime(threadId: string) {
    this.instances.delete(threadId);
    this.useAliveThreadsKeysChanged.setState({}, true);
  }

  public setRuntimeHook(newRuntimeHook: RemoteThreadListHook) {
    const prevRuntimeHook = this.useRuntimeHook.getState().useRuntime;
    if (prevRuntimeHook !== newRuntimeHook) {
      this.useRuntimeHook.setState({ useRuntime: newRuntimeHook }, true);
    }
  }

  private _InnerActiveThreadProvider: FC = () => {
    const { id } = useThreadListItem();

    const { useRuntime } = this.useRuntimeHook();
    const runtime = useRuntime();

    const threadBinding = (runtime.thread as ThreadRuntimeImpl)
      .__internal_threadBinding;

    const updateRuntime = useCallback(() => {
      const aliveThread = this.instances.get(id);
      if (!aliveThread)
        throw new Error("Thread not found. This is a bug in assistant-ui.");

      aliveThread.runtime = threadBinding.getState();

      if (isMounted) {
        this._notifySubscribers();
      }
    }, [id, threadBinding]);

    const isMounted = useRef(false);
    if (!isMounted.current) {
      updateRuntime();
    }

    useEffect(() => {
      isMounted.current = true;
      updateRuntime();
      return threadBinding.outerSubscribe(updateRuntime);
    }, [threadBinding, updateRuntime]);

    // auto initialize thread
    const threadListItemRuntime = useThreadListItemRuntime();
    useEffect(() => {
      return runtime.threads.main.unstable_on("initialize", () => {
        if (threadListItemRuntime.getState().status === "new") {
          threadListItemRuntime.initialize();

          // auto generate a title after first run
          const dispose = runtime.thread.unstable_on("run-end", () => {
            dispose();

            threadListItemRuntime.generateTitle();
          });
        }
      });
    }, [runtime, threadListItemRuntime]);

    return null;
  };

  private _OuterActiveThreadProvider: FC<{
    threadId: string;
    provider: ComponentType<PropsWithChildren>;
  }> = memo(({ threadId, provider: Provider }) => {
    const assistantRuntime = useAssistantRuntime();
    const threadListItemRuntime = useMemo(
      () => assistantRuntime.threads.getItemById(threadId),
      [assistantRuntime, threadId],
    );

    return (
      <ThreadListItemRuntimeProvider runtime={threadListItemRuntime}>
        <Provider>
          <this._InnerActiveThreadProvider />
        </Provider>
      </ThreadListItemRuntimeProvider>
    );
  });

  public __internal_RenderThreadRuntimes: FC<{
    provider: ComponentType<PropsWithChildren>;
  }> = ({ provider }) => {
    this.useAliveThreadsKeysChanged(); // trigger re-render on alive threads change

    return Array.from(this.instances.keys()).map((threadId) => (
      <this._OuterActiveThreadProvider
        key={threadId}
        threadId={threadId}
        provider={provider}
      />
    ));
  };
}



================================================
File: packages/react/src/runtimes/remote-thread-list/RemoteThreadListThreadListRuntimeCore.tsx
================================================
"use client";

import { ThreadListRuntimeCore } from "../core/ThreadListRuntimeCore";
import { generateId } from "../../internal";
import {
  RemoteThreadInitializeResponse,
  RemoteThreadListOptions,
} from "./types";
import { RemoteThreadListHookInstanceManager } from "./RemoteThreadListHookInstanceManager";
import { BaseSubscribable } from "./BaseSubscribable";
import { EMPTY_THREAD_CORE } from "./EMPTY_THREAD_CORE";
import { OptimisticState } from "./OptimisticState";
import { FC, Fragment, useEffect, useId } from "react";
import { create } from "zustand";
import { AssistantMessageStream } from "assistant-stream";
import { ModelContextProvider } from "../../model-context";
import { RuntimeAdapterProvider } from "../adapters/RuntimeAdapterProvider";

type RemoteThreadData =
  | {
      readonly threadId: string;
      readonly remoteId?: undefined;
      readonly externalId?: undefined;
      readonly status: "new";
      readonly title: undefined;
    }
  | {
      readonly threadId: string;
      readonly initializeTask: Promise<RemoteThreadInitializeResponse>;
      readonly remoteId?: undefined;
      readonly externalId?: undefined;
      readonly status: "regular" | "archived";
      readonly title?: string | undefined;
    }
  | {
      readonly threadId: string;
      readonly initializeTask: Promise<RemoteThreadInitializeResponse>;
      readonly remoteId: string;
      readonly externalId: string | undefined;
      readonly status: "regular" | "archived";
      readonly title?: string | undefined;
    };

type THREAD_MAPPING_ID = string & { __brand: "THREAD_MAPPING_ID" };
function createThreadMappingId(id: string): THREAD_MAPPING_ID {
  return id as THREAD_MAPPING_ID;
}

type RemoteThreadState = {
  readonly isLoading: boolean;
  readonly newThreadId: string | undefined;
  readonly threadIds: readonly string[];
  readonly archivedThreadIds: readonly string[];
  readonly threadIdMap: Readonly<Record<string, THREAD_MAPPING_ID>>;
  readonly threadData: Readonly<Record<THREAD_MAPPING_ID, RemoteThreadData>>;
};

const getThreadData = (
  state: RemoteThreadState,
  threadIdOrRemoteId: string,
) => {
  const idx = state.threadIdMap[threadIdOrRemoteId];
  if (idx === undefined) return undefined;
  return state.threadData[idx];
};

const updateStatusReducer = (
  state: RemoteThreadState,
  threadIdOrRemoteId: string,
  newStatus: "regular" | "archived" | "deleted",
) => {
  const data = getThreadData(state, threadIdOrRemoteId);
  if (!data) return state;

  const { threadId, remoteId, status: lastStatus } = data;
  if (lastStatus === newStatus) return state;

  const newState = { ...state };

  // lastStatus
  switch (lastStatus) {
    case "new":
      newState.newThreadId = undefined;
      break;
    case "regular":
      newState.threadIds = newState.threadIds.filter((t) => t !== threadId);
      break;
    case "archived":
      newState.archivedThreadIds = newState.archivedThreadIds.filter(
        (t) => t !== threadId,
      );
      break;

    default: {
      const _exhaustiveCheck: never = lastStatus;
      throw new Error(`Unsupported state: ${_exhaustiveCheck}`);
    }
  }

  // newStatus
  switch (newStatus) {
    case "regular":
      newState.threadIds = [threadId, ...newState.threadIds];
      break;

    case "archived":
      newState.archivedThreadIds = [threadId, ...newState.archivedThreadIds];
      break;

    case "deleted":
      newState.threadData = Object.fromEntries(
        Object.entries(newState.threadData).filter(([key]) => key !== threadId),
      );
      newState.threadIdMap = Object.fromEntries(
        Object.entries(newState.threadIdMap).filter(
          ([key]) => key !== threadId && key !== remoteId,
        ),
      );
      break;

    default: {
      const _exhaustiveCheck: never = newStatus;
      throw new Error(`Unsupported state: ${_exhaustiveCheck}`);
    }
  }

  if (newStatus !== "deleted") {
    newState.threadData = {
      ...newState.threadData,
      [threadId]: {
        ...data,
        status: newStatus,
      },
    };
  }

  return newState;
};

export class RemoteThreadListThreadListRuntimeCore
  extends BaseSubscribable
  implements ThreadListRuntimeCore
{
  private _options!: RemoteThreadListOptions;
  private readonly _hookManager: RemoteThreadListHookInstanceManager;

  private _loadThreadsPromise: Promise<void> | undefined;

  private _mainThreadId!: string;
  private readonly _state = new OptimisticState<RemoteThreadState>({
    isLoading: false,
    newThreadId: undefined,
    threadIds: [],
    archivedThreadIds: [],
    threadIdMap: {},
    threadData: {},
  });

  public getLoadThreadsPromise() {
    // TODO this needs to be cached in case this promise is loaded during suspense
    if (!this._loadThreadsPromise) {
      this._loadThreadsPromise = this._state
        .optimisticUpdate({
          execute: () => this._options.adapter.list(),
          loading: (state) => {
            return {
              ...state,
              isLoading: true,
            };
          },
          then: (state, l) => {
            const newThreadIds = [];
            const newArchivedThreadIds = [];
            const newThreadIdMap = {} as Record<string, THREAD_MAPPING_ID>;
            const newThreadData = {} as Record<
              THREAD_MAPPING_ID,
              RemoteThreadData
            >;

            for (const thread of l.threads) {
              switch (thread.status) {
                case "regular":
                  newThreadIds.push(thread.remoteId);
                  break;
                case "archived":
                  newArchivedThreadIds.push(thread.remoteId);
                  break;
                default: {
                  const _exhaustiveCheck: never = thread.status;
                  throw new Error(`Unsupported state: ${_exhaustiveCheck}`);
                }
              }

              const mappingId = createThreadMappingId(thread.remoteId);
              newThreadIdMap[thread.remoteId] = mappingId;
              newThreadData[mappingId] = {
                threadId: thread.remoteId,
                remoteId: thread.remoteId,
                externalId: thread.externalId,
                status: thread.status,
                title: thread.title,
                initializeTask: Promise.resolve({
                  remoteId: thread.remoteId,
                  externalId: thread.externalId,
                }),
              };
            }

            return {
              ...state,
              threadIds: newThreadIds,
              archivedThreadIds: newArchivedThreadIds,
              threadIdMap: {
                ...state.threadIdMap,
                ...newThreadIdMap,
              },
              threadData: {
                ...state.threadData,
                ...newThreadData,
              },
            };
          },
        })
        .then(() => {});
    }

    return this._loadThreadsPromise;
  }

  constructor(
    options: RemoteThreadListOptions,
    private readonly contextProvider: ModelContextProvider,
  ) {
    super();

    this._state.subscribe(() => this._notifySubscribers());
    this._hookManager = new RemoteThreadListHookInstanceManager(
      options.runtimeHook,
    );
    this.useProvider = create(() => ({
      Provider: options.adapter.unstable_Provider ?? Fragment,
    }));
    this.__internal_setOptions(options);

    this.switchToNewThread();
  }

  private useProvider;

  public __internal_setOptions(options: RemoteThreadListOptions) {
    if (this._options === options) return;

    this._options = options;

    const Provider = options.adapter.unstable_Provider ?? Fragment;
    if (Provider !== this.useProvider.getState().Provider) {
      this.useProvider.setState({ Provider }, true);
    }

    this._hookManager.setRuntimeHook(options.runtimeHook);
  }

  public __internal_load() {
    this.getLoadThreadsPromise(); // begin loading on initial bind
  }

  public get threadIds() {
    return this._state.value.threadIds;
  }

  public get archivedThreadIds() {
    return this._state.value.archivedThreadIds;
  }

  public get newThreadId() {
    return this._state.value.newThreadId;
  }

  public get mainThreadId(): string {
    return this._mainThreadId;
  }

  public getMainThreadRuntimeCore() {
    const result = this._hookManager.getThreadRuntimeCore(this._mainThreadId);
    if (!result) return EMPTY_THREAD_CORE;
    return result;
  }

  public getThreadRuntimeCore(threadIdOrRemoteId: string) {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");

    const result = this._hookManager.getThreadRuntimeCore(data.threadId);
    if (!result) throw new Error("Thread not found");
    return result;
  }

  public getItemById(threadIdOrRemoteId: string) {
    return getThreadData(this._state.value, threadIdOrRemoteId);
  }

  public async switchToThread(threadIdOrRemoteId: string): Promise<void> {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");

    if (this._mainThreadId === data.threadId) return;

    const task = this._hookManager.startThreadRuntime(data.threadId);
    if (this.mainThreadId !== undefined) {
      await task;
    } else {
      task.then(() => this._notifySubscribers());
    }

    if (data.status === "archived") await this.unarchive(data.threadId);
    this._mainThreadId = data.threadId;

    this._notifySubscribers();
  }

  public async switchToNewThread(): Promise<void> {
    // an initialization transaction is in progress, wait for it to settle
    while (
      this._state.baseValue.newThreadId !== undefined &&
      this._state.value.newThreadId === undefined
    ) {
      await this._state.waitForUpdate();
    }

    const state = this._state.value;
    let threadId: string | undefined = this._state.value.newThreadId;
    if (threadId === undefined) {
      do {
        threadId = `__LOCALID_${generateId()}`;
      } while (state.threadIdMap[threadId]);

      const mappingId = createThreadMappingId(threadId);
      this._state.update({
        ...state,
        newThreadId: threadId,
        threadIdMap: {
          ...state.threadIdMap,
          [threadId]: mappingId,
        },
        threadData: {
          ...state.threadData,
          [threadId]: {
            status: "new",
            threadId,
          },
        },
      });
    }

    return this.switchToThread(threadId);
  }

  public initialize = async (threadId: string) => {
    if (this._state.value.newThreadId !== threadId) {
      const data = this.getItemById(threadId);
      if (!data) throw new Error("Thread not found");
      if (data.status === "new") throw new Error("Unexpected new state");
      return data.initializeTask;
    }

    return this._state.optimisticUpdate({
      execute: () => {
        return this._options.adapter.initialize(threadId);
      },
      optimistic: (state) => {
        return updateStatusReducer(state, threadId, "regular");
      },
      loading: (state, task) => {
        const mappingId = createThreadMappingId(threadId);
        return {
          ...state,
          threadData: {
            ...state.threadData,
            [mappingId]: {
              ...state.threadData[mappingId],
              initializeTask: task,
            },
          },
        };
      },
      then: (state, { remoteId, externalId }) => {
        const data = getThreadData(state, threadId);
        if (!data) return state;

        const mappingId = createThreadMappingId(threadId);
        return {
          ...state,
          threadIdMap: {
            ...state.threadIdMap,
            [remoteId]: mappingId,
          },
          threadData: {
            ...state.threadData,
            [mappingId]: {
              ...data,
              initializeTask: Promise.resolve({ remoteId, externalId }),
              remoteId,
              externalId,
            },
          },
        };
      },
    });
  };

  public generateTitle = async (threadId: string) => {
    const data = this.getItemById(threadId);
    if (!data) throw new Error("Thread not found");
    if (data.status === "new") throw new Error("Thread is not yet initialized");

    const { remoteId } = await data.initializeTask;
    const messages = this.getThreadRuntimeCore(threadId).messages;
    const stream = await this._options.adapter.generateTitle(
      remoteId,
      messages,
    );
    const messageStream = AssistantMessageStream.fromAssistantStream(stream);
    for await (const result of messageStream) {
      const newTitle =
        result.content.filter((c) => c.type === "text")[0]?.text ??
        "New Thread";
      const state = this._state.baseValue;
      this._state.update({
        ...state,
        threadData: {
          ...state.threadData,
          [data.threadId]: {
            ...data,
            title: newTitle,
          },
        },
      });
    }
  };

  public rename(threadIdOrRemoteId: string, newTitle: string): Promise<void> {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");
    if (data.status === "new") throw new Error("Thread is not yet initialized");

    return this._state.optimisticUpdate({
      execute: async () => {
        const { remoteId } = await data.initializeTask;
        return this._options.adapter.rename(remoteId, newTitle);
      },
      optimistic: (state) => {
        const data = getThreadData(state, threadIdOrRemoteId);
        if (!data) return state;

        return {
          ...state,
          threadData: {
            ...state.threadData,
            [data.threadId]: {
              ...data,
              title: newTitle,
            },
          },
        };
      },
    });
  }

  private async _ensureThreadIsNotMain(threadId: string) {
    // if thread is main thread, switch to another thread
    if (threadId === this._mainThreadId) {
      await this.switchToNewThread();
    }
  }

  public async archive(threadIdOrRemoteId: string) {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "regular")
      throw new Error("Thread is not yet initialized or already archived");

    return this._state.optimisticUpdate({
      execute: async () => {
        await this._ensureThreadIsNotMain(data.threadId);
        const { remoteId } = await data.initializeTask;
        return this._options.adapter.archive(remoteId);
      },
      optimistic: (state) => {
        return updateStatusReducer(state, data.threadId, "archived");
      },
    });
  }

  public unarchive(threadIdOrRemoteId: string): Promise<void> {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "archived") throw new Error("Thread is not archived");

    return this._state.optimisticUpdate({
      execute: async () => {
        try {
          const { remoteId } = await data.initializeTask;
          return await this._options.adapter.unarchive(remoteId);
        } catch (error) {
          await this._ensureThreadIsNotMain(data.threadId);
          throw error;
        }
      },
      optimistic: (state) => {
        return updateStatusReducer(state, data.threadId, "regular");
      },
    });
  }

  public async delete(threadIdOrRemoteId: string) {
    const data = this.getItemById(threadIdOrRemoteId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "regular" && data.status !== "archived")
      throw new Error("Thread is not yet initialized");

    return this._state.optimisticUpdate({
      execute: async () => {
        await this._ensureThreadIsNotMain(data.threadId);
        const { remoteId } = await data.initializeTask;
        return await this._options.adapter.delete(remoteId);
      },
      optimistic: (state) => {
        return updateStatusReducer(state, data.threadId, "deleted");
      },
    });
  }

  private useBoundIds = create<string[]>(() => []);

  public __internal_RenderComponent: FC = () => {
    const id = useId();
    useEffect(() => {
      this.useBoundIds.setState((s) => [...s, id], true);
      return () => {
        this.useBoundIds.setState((s) => s.filter((i) => i !== id), true);
      };
    }, [id]);

    const boundIds = this.useBoundIds();
    const { Provider } = this.useProvider();

    const adapters = {
      modelContext: this.contextProvider,
    };

    return (
      (boundIds.length === 0 || boundIds[0] === id) && (
        // only render if the component is the first one mounted
        <RuntimeAdapterProvider adapters={adapters}>
          <this._hookManager.__internal_RenderThreadRuntimes
            provider={Provider}
          />
        </RuntimeAdapterProvider>
      )
    );
  };
}



================================================
File: packages/react/src/runtimes/remote-thread-list/index.ts
================================================
export { useRemoteThreadListRuntime as unstable_useRemoteThreadListRuntime } from "./useRemoteThreadListRuntime";
export type { RemoteThreadListAdapter as unstable_RemoteThreadListAdapter } from "./types";

export { InMemoryThreadListAdapter as unstable_InMemoryThreadListAdapter } from "./adapter/in-memory";



================================================
File: packages/react/src/runtimes/remote-thread-list/types.tsx
================================================
import { ComponentType, PropsWithChildren } from "react";
import { AssistantRuntime } from "../../api";
import { AssistantStream } from "assistant-stream";
import { ThreadMessage } from "../../types";

export type RemoteThreadInitializeResponse = {
  remoteId: string;
  externalId: string | undefined;
};

export type RemoteThreadMetadata = {
  readonly status: "regular" | "archived";
  readonly remoteId: string;
  readonly externalId?: string | undefined;
  readonly title?: string | undefined;
};

export type RemoteThreadListResponse = {
  threads: RemoteThreadMetadata[];
};

export type RemoteThreadListAdapter = {
  list(): Promise<RemoteThreadListResponse>;

  rename(remoteId: string, newTitle: string): Promise<void>;
  archive(remoteId: string): Promise<void>;
  unarchive(remoteId: string): Promise<void>;
  delete(remoteId: string): Promise<void>;
  initialize(threadId: string): Promise<RemoteThreadInitializeResponse>;
  generateTitle(
    remoteId: string,
    unstable_messages: readonly ThreadMessage[],
  ): Promise<AssistantStream>;

  unstable_Provider?: ComponentType<PropsWithChildren>;
};

export type RemoteThreadListOptions = {
  runtimeHook: () => AssistantRuntime;
  adapter: RemoteThreadListAdapter;
};



================================================
File: packages/react/src/runtimes/remote-thread-list/useRemoteThreadListRuntime.tsx
================================================
"use client";

import { useState, useEffect, useMemo } from "react";
import { BaseAssistantRuntimeCore } from "../core/BaseAssistantRuntimeCore";
import { RemoteThreadListThreadListRuntimeCore } from "./RemoteThreadListThreadListRuntimeCore";
import { RemoteThreadListOptions } from "./types";
import { AssistantRuntimeImpl } from "../../internal";
import { AssistantRuntimeCore } from "../core/AssistantRuntimeCore";

class RemoteThreadListRuntimeCore
  extends BaseAssistantRuntimeCore
  implements AssistantRuntimeCore
{
  public readonly threads;

  constructor(options: RemoteThreadListOptions) {
    super();
    this.threads = new RemoteThreadListThreadListRuntimeCore(
      options,
      this._contextProvider,
    );
  }

  public get RenderComponent() {
    return this.threads.__internal_RenderComponent;
  }
}

export const useRemoteThreadListRuntime = (
  options: RemoteThreadListOptions,
) => {
  const [runtime] = useState(() => new RemoteThreadListRuntimeCore(options));
  useEffect(() => {
    runtime.threads.__internal_setOptions(options);
    runtime.threads.__internal_load();
  }, [runtime, options]);
  return useMemo(() => new AssistantRuntimeImpl(runtime), [runtime]);
};



================================================
File: packages/react/src/runtimes/remote-thread-list/adapter/cloud.tsx
================================================
import {
  FC,
  PropsWithChildren,
  useCallback,
  useEffect,
  useMemo,
  useRef,
} from "react";
import { AssistantCloud } from "../../../cloud";
import { RemoteThreadListAdapter } from "../types";
import { useAssistantCloudThreadHistoryAdapter } from "../../../cloud/AssistantCloudThreadHistoryAdapter";
import { RuntimeAdapterProvider } from "../../adapters/RuntimeAdapterProvider";
import { toCoreMessages } from "../../edge";
import { InMemoryThreadListAdapter } from "./in-memory";

type ThreadData = {
  externalId: string;
};

type CloudThreadListAdapterOptions = {
  cloud?: AssistantCloud | undefined;

  create?(): Promise<ThreadData>;
  delete?(threadId: string): Promise<void>;
};

const baseUrl =
  typeof process !== "undefined" &&
  process?.env?.["NEXT_PUBLIC_ASSISTANT_BASE_URL"];
const autoCloud = baseUrl
  ? new AssistantCloud({ baseUrl, anonymous: true })
  : undefined;

export const useCloudThreadListAdapter = (
  adapter: CloudThreadListAdapterOptions,
): RemoteThreadListAdapter => {
  const adapterRef = useRef(adapter);
  useEffect(() => {
    adapterRef.current = adapter;
  }, [adapter]);

  const unstable_Provider = useCallback<FC<PropsWithChildren>>(
    function Provider({ children }) {
      const history = useAssistantCloudThreadHistoryAdapter({
        get current() {
          return adapterRef.current.cloud ?? autoCloud!;
        },
      });
      const adapters = useMemo(() => ({ history }), [history]);

      return (
        <RuntimeAdapterProvider adapters={adapters}>
          {children}
        </RuntimeAdapterProvider>
      );
    },
    [],
  );

  const cloud = adapter.cloud ?? autoCloud;
  if (!cloud) return new InMemoryThreadListAdapter();

  return {
    list: async () => {
      const { threads } = await cloud.threads.list();
      return {
        threads: threads.map((t) => ({
          status: t.is_archived ? "archived" : "regular",
          remoteId: t.id,
          title: t.title,
          externalId: t.external_id ?? undefined,
        })),
      };
    },

    initialize: async () => {
      const createTask = adapter.create?.() ?? Promise.resolve();
      const t = await createTask;
      const external_id = t ? t.externalId : undefined;
      const { thread_id: remoteId } = await cloud.threads.create({
        last_message_at: new Date(),
        external_id,
      });

      return { externalId: external_id, remoteId: remoteId };
    },

    rename: async (threadId, newTitle) => {
      return cloud.threads.update(threadId, { title: newTitle });
    },
    archive: async (threadId) => {
      return cloud.threads.update(threadId, { is_archived: true });
    },
    unarchive: async (threadId) => {
      return cloud.threads.update(threadId, { is_archived: false });
    },
    delete: async (threadId) => {
      await adapter.delete?.(threadId);
      return cloud.threads.delete(threadId);
    },

    generateTitle: async (threadId, messages) => {
      return cloud.runs.stream({
        thread_id: threadId,
        assistant_id: "system/thread_title",
        messages: toCoreMessages(messages),
      });
    },

    unstable_Provider,
  };
};



================================================
File: packages/react/src/runtimes/remote-thread-list/adapter/in-memory.tsx
================================================
import { AssistantStream, AssistantStreamChunk } from "assistant-stream";
import {
  RemoteThreadInitializeResponse,
  RemoteThreadListAdapter,
  RemoteThreadListResponse,
} from "../types";

export class InMemoryThreadListAdapter implements RemoteThreadListAdapter {
  list(): Promise<RemoteThreadListResponse> {
    return Promise.resolve({
      threads: [],
    });
  }

  rename(): Promise<void> {
    return Promise.resolve();
  }

  archive(): Promise<void> {
    return Promise.resolve();
  }

  unarchive(): Promise<void> {
    return Promise.resolve();
  }

  delete(): Promise<void> {
    return Promise.resolve();
  }

  initialize(threadId: string): Promise<RemoteThreadInitializeResponse> {
    return Promise.resolve({ remoteId: threadId, externalId: undefined });
  }

  generateTitle(): Promise<AssistantStream> {
    return Promise.resolve(new ReadableStream<AssistantStreamChunk>());
  }
}



================================================
File: packages/react/src/runtimes/utils/MessageRepository.tsx
================================================
import type { CoreMessage, ThreadMessage } from "../../types/AssistantTypes";
import { generateId, generateOptimisticId } from "../../utils/idUtils";
import { fromCoreMessage } from "../edge/converters/fromCoreMessage";
import { ThreadMessageLike } from "../external-store";
import { getAutoStatus } from "../external-store/auto-status";
import { fromThreadMessageLike } from "../external-store/ThreadMessageLike";

type RepositoryParent = {
  children: string[];
  next: RepositoryMessage | null;
};

type RepositoryMessage = RepositoryParent & {
  prev: RepositoryMessage | null;
  current: ThreadMessage;
  level: number;
};

export type ExportedMessageRepositoryItem = {
  message: ThreadMessage;
  parentId: string | null;
};

export type ExportedMessageRepository = {
  headId?: string | null;
  messages: Array<{
    message: ThreadMessage;
    parentId: string | null;
  }>;
};

export const ExportedMessageRepository = {
  fromArray: (
    messages: readonly ThreadMessageLike[],
  ): ExportedMessageRepository => {
    const conv = messages.map((m) =>
      fromThreadMessageLike(m, generateId(), getAutoStatus(false, false)),
    );

    return {
      messages: conv.map((m, idx) => ({
        parentId: idx > 0 ? conv[idx - 1]!.id : null,
        message: m,
      })),
    };
  },
};

const findHead = (
  message: RepositoryMessage | RepositoryParent,
): RepositoryMessage | null => {
  if (message.next) return findHead(message.next);
  if ("current" in message) return message;
  return null;
};

class CachedValue<T> {
  private _value: T | null = null;

  constructor(private func: () => T) {}

  get value() {
    if (this._value === null) {
      this._value = this.func();
    }
    return this._value;
  }

  dirty() {
    this._value = null;
  }
}

export class MessageRepository {
  private messages = new Map<string, RepositoryMessage>(); // message_id -> item
  private head: RepositoryMessage | null = null;
  private root: RepositoryParent = {
    children: [],
    next: null,
  };

  private performOp(
    newParent: RepositoryMessage | null,
    child: RepositoryMessage,
    operation: "cut" | "link" | "relink",
  ) {
    const parentOrRoot = child.prev ?? this.root;
    const newParentOrRoot = newParent ?? this.root;

    if (operation === "relink" && parentOrRoot === newParentOrRoot) return;

    // cut
    if (operation !== "link") {
      // remove from parentOrRoot.children
      parentOrRoot.children = parentOrRoot.children.filter(
        (m) => m !== child.current.id,
      );

      // update parentOrRoot.next
      if (parentOrRoot.next === child) {
        const fallbackId = parentOrRoot.children.at(-1);
        const fallback = fallbackId ? this.messages.get(fallbackId) : null;
        if (fallback === undefined) {
          throw new Error(
            "MessageRepository(performOp/cut): Fallback sibling message not found. This is likely an internal bug in assistant-ui.",
          );
        }
        parentOrRoot.next = fallback;
      }
    }

    // link
    if (operation !== "cut") {
      // ensure the child is not part of parent tree
      for (
        let current: RepositoryMessage | null = newParent;
        current;
        current = current.prev
      ) {
        if (current.current.id === child.current.id) {
          throw new Error(
            "MessageRepository(performOp/link): A message with the same id already exists in the parent tree. This error occurs if the same message id is found multiple times. This is likely an internal bug in assistant-ui.",
          );
        }
      }

      // add to parentOrRoot.children
      newParentOrRoot.children = [
        ...newParentOrRoot.children,
        child.current.id,
      ];

      // update parentOrRoot.next
      if (findHead(child) === this.head || newParentOrRoot.next === null) {
        newParentOrRoot.next = child;
      }

      child.prev = newParent;
    }
  }

  private _messages = new CachedValue<readonly ThreadMessage[]>(() => {
    const messages = new Array<ThreadMessage>(this.head?.level ?? 0);
    for (let current = this.head; current; current = current.prev) {
      messages[current.level] = current.current;
    }
    return messages;
  });

  getMessages() {
    return this._messages.value;
  }

  addOrUpdateMessage(parentId: string | null, message: ThreadMessage) {
    const existingItem = this.messages.get(message.id);
    const prev = parentId ? this.messages.get(parentId) : null;
    if (prev === undefined)
      throw new Error(
        "MessageRepository(addOrUpdateMessage): Parent message not found. This is likely an internal bug in assistant-ui.",
      );

    // update existing message
    if (existingItem) {
      existingItem.current = message;
      this.performOp(prev, existingItem, "relink");
      this._messages.dirty();
      return;
    }

    // create a new message
    const newItem: RepositoryMessage = {
      prev,
      current: message,
      next: null,
      children: [],
      level: prev ? prev.level + 1 : 0,
    };

    this.messages.set(message.id, newItem);
    this.performOp(prev, newItem, "link");

    if (this.head === prev) {
      this.head = newItem;
    }

    this._messages.dirty();
  }

  getMessage(messageId: string) {
    const message = this.messages.get(messageId);
    if (!message)
      throw new Error(
        "MessageRepository(updateMessage): Message not found. This is likely an internal bug in assistant-ui.",
      );

    return {
      parentId: message.prev?.current.id ?? null,
      message: message.current,
    };
  }

  appendOptimisticMessage(parentId: string | null, message: CoreMessage) {
    let optimisticId: string;
    do {
      optimisticId = generateOptimisticId();
    } while (this.messages.has(optimisticId));

    this.addOrUpdateMessage(
      parentId,
      fromCoreMessage(message, {
        id: optimisticId,
        status: { type: "running" },
      }),
    );

    return optimisticId;
  }

  deleteMessage(messageId: string, replacementId?: string | null | undefined) {
    const message = this.messages.get(messageId);

    if (!message)
      throw new Error(
        "MessageRepository(deleteMessage): Optimistic message not found. This is likely an internal bug in assistant-ui.",
      );

    const replacement =
      replacementId === undefined
        ? message.prev // if no replacementId is provided, use the parent
        : replacementId === null
          ? null
          : this.messages.get(replacementId);
    if (replacement === undefined)
      throw new Error(
        "MessageRepository(deleteMessage): Replacement not found. This is likely an internal bug in assistant-ui.",
      );

    for (const child of message.children) {
      const childMessage = this.messages.get(child);
      if (!childMessage)
        throw new Error(
          "MessageRepository(deleteMessage): Child message not found. This is likely an internal bug in assistant-ui.",
        );
      this.performOp(replacement, childMessage, "relink");
    }

    this.performOp(null, message, "cut");
    this.messages.delete(messageId);

    if (this.head === message) {
      this.head = findHead(replacement ?? this.root);
    }

    this._messages.dirty();
  }

  getBranches(messageId: string) {
    const message = this.messages.get(messageId);
    if (!message)
      throw new Error(
        "MessageRepository(getBranches): Message not found. This is likely an internal bug in assistant-ui.",
      );

    const { children } = message.prev ?? this.root;
    return children;
  }

  switchToBranch(messageId: string) {
    const message = this.messages.get(messageId);
    if (!message)
      throw new Error(
        "MessageRepository(switchToBranch): Branch not found. This is likely an internal bug in assistant-ui.",
      );

    const prevOrRoot = message.prev ?? this.root;
    prevOrRoot.next = message;

    this.head = findHead(message);

    this._messages.dirty();
  }

  resetHead(messageId: string | null) {
    if (messageId === null) {
      this.head = null;
      this._messages.dirty();
      return;
    }

    const message = this.messages.get(messageId);
    if (!message)
      throw new Error(
        "MessageRepository(resetHead): Branch not found. This is likely an internal bug in assistant-ui.",
      );

    this.head = message;
    for (
      let current: RepositoryMessage | null = message;
      current;
      current = current.prev
    ) {
      if (current.prev) {
        current.prev.next = current;
      }
    }

    this._messages.dirty();
  }

  clear(): void {
    this.messages.clear();
    this.head = null;
    this.root = {
      children: [],
      next: null,
    };
    this._messages.dirty();
  }

  export(): ExportedMessageRepository {
    const exportItems: ExportedMessageRepository["messages"] = [];

    // hint: we are relying on the insertion order of the messages
    // this is important for the import function to properly link the messages
    for (const [, message] of this.messages) {
      exportItems.push({
        message: message.current,
        parentId: message.prev?.current.id ?? null,
      });
    }

    return {
      headId: this.head?.current.id ?? null,
      messages: exportItems,
    };
  }

  import({ headId, messages }: ExportedMessageRepository) {
    for (const { message, parentId } of messages) {
      this.addOrUpdateMessage(parentId, message);
    }

    // switch to the saved head id if it is not the most recent message
    this.resetHead(headId ?? messages.at(-1)?.message.id ?? null);
  }
}



================================================
File: packages/react/src/types/AssistantTypes.ts
================================================
import { CompleteAttachment } from "./AttachmentTypes";
import {
  ReadonlyJSONObject,
  ReadonlyJSONValue,
} from "../utils/json/json-value";

export type MessageRole = "user" | "assistant" | "system";

export type TextContentPart = {
  readonly type: "text";
  readonly text: string;
};

export type ReasoningContentPart = {
  readonly type: "reasoning";
  readonly text: string;
};

export type SourceContentPart = {
  readonly type: "source";
  readonly sourceType: "url";
  readonly id: string;
  readonly url: string;
  readonly title?: string;
};

export type ImageContentPart = {
  readonly type: "image";
  readonly image: string;
};

export type FileContentPart = {
  readonly type: "file";
  readonly data: string;
  readonly mimeType: string;
};

export type Unstable_AudioContentPart = {
  readonly type: "audio";
  readonly audio: {
    readonly data: string;
    readonly format: "mp3" | "wav";
  };
};

/**
 * @deprecated UI content parts are deprecated and will be removed in v0.8.0.
 * Migration guide for external-store users using UI content parts:
 * If you must, store UI elements on your external store messages, update your
 * external store converter:
 * ```ts
 * const UI_PLACEHOLDER = Object.freeze({ type: "text", text: "UI content placeholder" });
 * const convertMessage = (message: TMessage): ThreadMessageLike => ({
 *   content: [
 *     // other content parts,
 *     UI_PLACEHOLDER
 *   ],
 * });
 * ```
 *
 * Then, define a custom `TextContentPartComponent`:
 *
 * ```tsx
 * const MyText: FC = () => {
 *   const isUIPlaceholder = useContentPart(p => p === UI_PLACEHOLDER);
 *
 *   // this assumes that you have a `display` field on your original message objects before conversion.
 *   const ui = useMessage(m => isUIPlaceholder ? getExternalStoreMessage(m).display : undefined);
 *   if (ui) {
 *     return ui;
 *   }
 *
 *   return <MarkdownText />; // your default text component
 * }
 * ```
 *
 *  Pass this component to your Thread:
 *
 * ```tsx
 * <Thread assistantMessage={{ components: { Text: MyText } }} userMessage={{ components: { Text: MyText } }} />
 * ```
 */
export type UIContentPart = never;

export type CoreToolCallContentPart<
  TArgs = ReadonlyJSONObject,
  TResult = unknown,
> = {
  readonly type: "tool-call";
  readonly toolCallId: string;
  readonly toolName: string;
  readonly args: TArgs;
  readonly result?: TResult | undefined;
  readonly isError?: boolean | undefined;
};

export type ToolCallContentPart<
  TArgs = ReadonlyJSONObject,
  TResult = unknown,
> = CoreToolCallContentPart<TArgs, TResult> & {
  readonly argsText: string;
};

export type ThreadUserContentPart =
  | TextContentPart
  | ImageContentPart
  | FileContentPart
  | Unstable_AudioContentPart;

export type ThreadAssistantContentPart =
  | TextContentPart
  | ReasoningContentPart
  | ToolCallContentPart
  | SourceContentPart;

type MessageCommonProps = {
  readonly id: string;
  readonly createdAt: Date;
};

export type ThreadStep = {
  readonly messageId?: string;
  readonly usage?:
    | {
        readonly promptTokens: number;
        readonly completionTokens: number;
      }
    | undefined;
};

export type ContentPartStatus =
  | {
      readonly type: "running";
    }
  | {
      readonly type: "complete";
    }
  | {
      readonly type: "incomplete";
      readonly reason:
        | "cancelled"
        | "length"
        | "content-filter"
        | "other"
        | "error";
      readonly error?: unknown;
    };

export type ToolCallContentPartStatus =
  | {
      readonly type: "requires-action";
      readonly reason: "tool-calls";
    }
  | ContentPartStatus;

export type MessageStatus =
  | {
      readonly type: "running";
    }
  | {
      readonly type: "requires-action";
      readonly reason: "tool-calls";
    }
  | {
      readonly type: "complete";
      readonly reason: "stop" | "unknown";
    }
  | {
      readonly type: "incomplete";
      readonly reason:
        | "cancelled"
        | "tool-calls"
        | "length"
        | "content-filter"
        | "other"
        | "error";
      readonly error?: ReadonlyJSONValue;
    };

export type ThreadSystemMessage = MessageCommonProps & {
  readonly role: "system";
  readonly content: readonly [TextContentPart];
  readonly metadata: {
    readonly custom: Record<string, unknown>;
  };
};

export type ThreadUserMessage = MessageCommonProps & {
  readonly role: "user";
  readonly content: readonly ThreadUserContentPart[];
  readonly attachments: readonly CompleteAttachment[];
  readonly metadata: {
    readonly custom: Record<string, unknown>;
  };
};

export type ThreadAssistantMessage = MessageCommonProps & {
  readonly role: "assistant";
  readonly content: readonly ThreadAssistantContentPart[];
  readonly status: MessageStatus;
  readonly metadata: {
    readonly unstable_annotations: readonly ReadonlyJSONValue[];
    readonly unstable_data: readonly ReadonlyJSONValue[];
    readonly steps: readonly ThreadStep[];
    readonly custom: Record<string, unknown>;
  };
};

export type RunConfig = {
  // TODO allow user customization via global type overrides
  readonly custom?: Record<string, unknown>;
};

export type AppendMessage = CoreMessage & {
  parentId: string | null;

  /** The ID of the message that was edited or undefined. */
  sourceId: string | null;
  runConfig: RunConfig | undefined;

  attachments: readonly CompleteAttachment[];
  startRun?: boolean | undefined;
};

type BaseThreadMessage = {
  readonly status?: ThreadAssistantMessage["status"];
  readonly metadata: {
    readonly unstable_annotations?: readonly ReadonlyJSONValue[];
    readonly unstable_data?: readonly ReadonlyJSONValue[];
    readonly steps?: readonly ThreadStep[];
    readonly custom: Record<string, unknown>;
  };
  readonly attachments?: ThreadUserMessage["attachments"];
};

export type ThreadMessage = BaseThreadMessage &
  (ThreadSystemMessage | ThreadUserMessage | ThreadAssistantMessage);

/** Core Message Types (without UI content parts) */

export type CoreUserContentPart =
  | TextContentPart
  | ImageContentPart
  | FileContentPart
  | Unstable_AudioContentPart;
export type CoreAssistantContentPart =
  | TextContentPart
  | CoreToolCallContentPart;

export type CoreSystemMessage = {
  role: "system";
  content: readonly [TextContentPart];
};

export type CoreUserMessage = {
  role: "user";
  content: readonly CoreUserContentPart[];
};

export type CoreAssistantMessage = {
  role: "assistant";
  content: readonly CoreAssistantContentPart[];
};

export type CoreMessage =
  | CoreSystemMessage
  | CoreUserMessage
  | CoreAssistantMessage;



================================================
File: packages/react/src/types/AttachmentTypes.ts
================================================
import { CoreUserContentPart } from "./AssistantTypes";

export type PendingAttachmentStatus =
  | {
      type: "running";
      reason: "uploading";
      progress: number;
    }
  | {
      type: "requires-action";
      reason: "composer-send";
    }
  | {
      type: "incomplete";
      reason: "error" | "upload-paused";
    };

export type CompleteAttachmentStatus = {
  type: "complete";
};

export type AttachmentStatus =
  | PendingAttachmentStatus
  | CompleteAttachmentStatus;

type BaseAttachment = {
  id: string;
  type: "image" | "document" | "file";
  name: string;
  contentType: string;
  file?: File;
  content?: CoreUserContentPart[];
};

export type PendingAttachment = BaseAttachment & {
  status: PendingAttachmentStatus;
  file: File;
};

export type CompleteAttachment = BaseAttachment & {
  status: CompleteAttachmentStatus;
  content: CoreUserContentPart[];
};

export type Attachment = PendingAttachment | CompleteAttachment;



================================================
File: packages/react/src/types/ContentPartComponentTypes.tsx
================================================
import type { ComponentType } from "react";
import type {
  ContentPartStatus,
  FileContentPart,
  ImageContentPart,
  ReasoningContentPart,
  SourceContentPart,
  TextContentPart,
  ToolCallContentPart,
  Unstable_AudioContentPart,
} from "./AssistantTypes";
import { ContentPartState } from "../api/ContentPartRuntime";

export type EmptyContentPartProps = {
  status: ContentPartStatus;
};
export type EmptyContentPartComponent = ComponentType<EmptyContentPartProps>;

export type TextContentPartProps = ContentPartState & TextContentPart;
export type TextContentPartComponent = ComponentType<TextContentPartProps>;

export type ReasoningContentPartProps = ContentPartState & ReasoningContentPart;
export type ReasoningContentPartComponent =
  ComponentType<ReasoningContentPartProps>;

export type SourceContentPartProps = ContentPartState & SourceContentPart;
export type SourceContentPartComponent = ComponentType<SourceContentPartProps>;

export type ImageContentPartProps = ContentPartState & ImageContentPart;
export type ImageContentPartComponent = ComponentType<ImageContentPartProps>;

export type FileContentPartProps = ContentPartState & FileContentPart;
export type FileContentPartComponent = ComponentType<FileContentPartProps>;

export type Unstable_AudioContentPartProps = ContentPartState &
  Unstable_AudioContentPart;
export type Unstable_AudioContentPartComponent =
  ComponentType<Unstable_AudioContentPartProps>;

export type ToolCallContentPartProps<
  TArgs = any,
  TResult = unknown,
> = ContentPartState &
  ToolCallContentPart<TArgs, TResult> & {
    addResult: (result: any) => void;
  };

export type ToolCallContentPartComponent<
  TArgs = any,
  TResult = any,
> = ComponentType<ToolCallContentPartProps<TArgs, TResult>>;



================================================
File: packages/react/src/types/Unsubscribe.tsx
================================================
export type Unsubscribe = () => void;



================================================
File: packages/react/src/types/index.ts
================================================
export type {
  Attachment,
  PendingAttachment,
  CompleteAttachment,
  AttachmentStatus,
} from "./AttachmentTypes";

export type {
  AppendMessage,
  TextContentPart,
  ReasoningContentPart,
  SourceContentPart,
  ImageContentPart,
  FileContentPart,
  Unstable_AudioContentPart,
  ToolCallContentPart,
  UIContentPart,
  MessageStatus,

  // thread message types
  ThreadUserContentPart,
  ThreadAssistantContentPart,
  ThreadSystemMessage,
  ThreadAssistantMessage,
  ThreadUserMessage,
  ThreadMessage,

  // core message types
  CoreUserContentPart,
  CoreAssistantContentPart,
  CoreSystemMessage,
  CoreUserMessage,
  CoreAssistantMessage,
  CoreMessage,
} from "./AssistantTypes";

export type {
  EmptyContentPartProps,
  EmptyContentPartComponent,
  TextContentPartProps,
  TextContentPartComponent,
  ReasoningContentPartProps,
  ReasoningContentPartComponent,
  SourceContentPartProps,
  SourceContentPartComponent,
  ImageContentPartProps,
  ImageContentPartComponent,
  FileContentPartProps,
  FileContentPartComponent,
  Unstable_AudioContentPartProps,
  Unstable_AudioContentPartComponent,
  ToolCallContentPartProps,
  ToolCallContentPartComponent,
} from "./ContentPartComponentTypes";

export type { Unsubscribe } from "./Unsubscribe";



================================================
File: packages/react/src/utils/CompositeContextProvider.ts
================================================
import {
  type ModelContextProvider,
  mergeModelContexts,
} from "../model-context/ModelContextTypes";

export class CompositeContextProvider implements ModelContextProvider {
  private _providers = new Set<ModelContextProvider>();

  getModelContext() {
    return mergeModelContexts(this._providers);
  }

  registerModelContextProvider(provider: ModelContextProvider) {
    this._providers.add(provider);
    const unsubscribe = provider.subscribe?.(() => {
      this.notifySubscribers();
    });
    this.notifySubscribers();
    return () => {
      this._providers.delete(provider);
      unsubscribe?.();
      this.notifySubscribers();
    };
  }

  private _subscribers = new Set<() => void>();

  notifySubscribers() {
    for (const callback of this._subscribers) callback();
  }

  subscribe(callback: () => void) {
    this._subscribers.add(callback);
    return () => this._subscribers.delete(callback);
  }
}



================================================
File: packages/react/src/utils/RequireAtLeastOne.tsx
================================================
export type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<
  T,
  Exclude<keyof T, Keys>
> &
  {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
  }[Keys];



================================================
File: packages/react/src/utils/createActionButton.tsx
================================================
import {
  ComponentRef,
  forwardRef,
  ComponentPropsWithoutRef,
  MouseEventHandler,
} from "react";
import { Primitive } from "@radix-ui/react-primitive";
import { composeEventHandlers } from "@radix-ui/primitive";

type ActionButtonCallback<TProps> = (
  props: TProps,
) => MouseEventHandler<HTMLButtonElement> | null;

type PrimitiveButtonProps = ComponentPropsWithoutRef<typeof Primitive.button>;

export type ActionButtonProps<THook> = PrimitiveButtonProps &
  (THook extends (props: infer TProps) => unknown ? TProps : never);

export type ActionButtonElement = ComponentRef<typeof Primitive.button>;

export const createActionButton = <TProps,>(
  displayName: string,
  useActionButton: ActionButtonCallback<TProps>,
  forwardProps: (keyof NonNullable<TProps>)[] = [],
) => {
  const ActionButton = forwardRef<
    ActionButtonElement,
    PrimitiveButtonProps & TProps
  >((props, forwardedRef) => {
    const forwardedProps = {} as TProps;
    const primitiveProps = {} as PrimitiveButtonProps;

    (Object.keys(props) as Array<keyof typeof props>).forEach((key) => {
      if (forwardProps.includes(key as keyof TProps)) {
        (forwardedProps as any)[key] = props[key];
      } else {
        (primitiveProps as any)[key] = props[key];
      }
    });

    const callback = useActionButton(forwardedProps as TProps) ?? undefined;
    return (
      <Primitive.button
        type="button"
        {...primitiveProps}
        ref={forwardedRef}
        disabled={primitiveProps.disabled || !callback}
        onClick={composeEventHandlers(primitiveProps.onClick, callback)}
      />
    );
  });

  ActionButton.displayName = displayName;

  return ActionButton;
};



================================================
File: packages/react/src/utils/getThreadMessageText.tsx
================================================
import type {
  AppendMessage,
  TextContentPart,
  ThreadMessage,
} from "../types/AssistantTypes";

export const getThreadMessageText = (
  message: ThreadMessage | AppendMessage,
) => {
  const textParts = message.content.filter(
    (part) => part.type === "text",
  ) as TextContentPart[];

  return textParts.map((part) => part.text).join("\n\n");
};



================================================
File: packages/react/src/utils/idUtils.tsx
================================================
import { customAlphabet } from "nanoid/non-secure";

export const generateId = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7,
);

const optimisticPrefix = "__optimistic__";
export const generateOptimisticId = () => `${optimisticPrefix}${generateId()}`;
export const isOptimisticId = (id: string) => id.startsWith(optimisticPrefix);



================================================
File: packages/react/src/utils/combined/createCombinedStore.ts
================================================
"use client";

import { useSyncExternalStore } from "react";
import type { Unsubscribe } from "../../types/Unsubscribe";

export type StoreOrRuntime<T> = {
  getState: () => T;
  subscribe: (callback: () => void) => Unsubscribe;
};

export type CombinedSelector<T extends Array<unknown>, R> = (...args: T) => R;

export const createCombinedStore = <T extends Array<unknown>, R>(stores: {
  [K in keyof T]: StoreOrRuntime<T[K]>;
}) => {
  const subscribe = (callback: () => void): Unsubscribe => {
    const unsubscribes = stores.map((store) => store.subscribe(callback));
    return () => {
      for (const unsub of unsubscribes) {
        unsub();
      }
    };
  };

  return (selector: CombinedSelector<T, R>): R => {
    const getSnapshot = (): R =>
      selector(...(stores.map((store) => store.getState()) as T));

    return useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
  };
};



================================================
File: packages/react/src/utils/combined/useCombinedStore.ts
================================================
"use client";

import { useMemo } from "react";
import {
  type CombinedSelector,
  createCombinedStore,
  StoreOrRuntime,
} from "./createCombinedStore";

export const useCombinedStore = <T extends Array<unknown>, R>(
  stores: { [K in keyof T]: StoreOrRuntime<T[K]> },
  selector: CombinedSelector<T, R>,
): R => {
  // eslint-disable-next-line react-hooks/exhaustive-deps -- shallow-compare the store array
  const useCombined = useMemo(() => createCombinedStore<T, R>(stores), stores);
  return useCombined(selector);
};



================================================
File: packages/react/src/utils/hooks/useManagedRef.ts
================================================
import { useCallback, useRef } from "react";

export const useManagedRef = <TNode>(
  callback: (node: TNode) => (() => void) | void,
) => {
  const cleanupRef = useRef<(() => void) | void>(undefined);

  const ref = useCallback(
    (el: TNode | null) => {
      // Call the previous cleanup function
      if (cleanupRef.current) {
        cleanupRef.current();
      }

      // Call the new callback and store its cleanup function
      if (el) {
        cleanupRef.current = callback(el);
      }
    },
    [callback],
  );

  return ref;
};



================================================
File: packages/react/src/utils/hooks/useOnResizeContent.tsx
================================================
import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { useCallback } from "react";
import { useManagedRef } from "./useManagedRef";

export const useOnResizeContent = (callback: () => void) => {
  const callbackRef = useCallbackRef(callback);

  const refCallback = useCallback(
    (el: HTMLElement) => {
      const resizeObserver = new ResizeObserver(() => {
        callbackRef();
      });

      const mutationObserver = new MutationObserver(() => {
        callbackRef();
      });

      resizeObserver.observe(el);
      mutationObserver.observe(el, {
        childList: true,
        subtree: true,
        attributes: true,
        characterData: true,
      });

      return () => {
        resizeObserver.disconnect();
        mutationObserver.disconnect();
      };
    },
    [callbackRef],
  );

  return useManagedRef(refCallback);
};



================================================
File: packages/react/src/utils/hooks/useOnScrollToBottom.tsx
================================================
"use client";

import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { useEffect } from "react";
import { useThreadViewport } from "../../context/react/ThreadViewportContext";

export const useOnScrollToBottom = (callback: () => void) => {
  const callbackRef = useCallbackRef(callback);
  const onScrollToBottom = useThreadViewport((vp) => vp.onScrollToBottom);

  useEffect(() => {
    return onScrollToBottom(callbackRef);
  }, [onScrollToBottom, callbackRef]);
};



================================================
File: packages/react/src/utils/json/fix-json.ts
================================================
// LICENSE for this file only

// Copyright 2023 Vercel, Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type State =
  | "ROOT"
  | "FINISH"
  | "INSIDE_STRING"
  | "INSIDE_STRING_ESCAPE"
  | "INSIDE_LITERAL"
  | "INSIDE_NUMBER"
  | "INSIDE_OBJECT_START"
  | "INSIDE_OBJECT_KEY"
  | "INSIDE_OBJECT_AFTER_KEY"
  | "INSIDE_OBJECT_BEFORE_VALUE"
  | "INSIDE_OBJECT_AFTER_VALUE"
  | "INSIDE_OBJECT_AFTER_COMMA"
  | "INSIDE_ARRAY_START"
  | "INSIDE_ARRAY_AFTER_VALUE"
  | "INSIDE_ARRAY_AFTER_COMMA";

// Implemented as a scanner with additional fixing
// that performs a single linear time scan pass over the partial JSON.
//
// The states should ideally match relevant states from the JSON spec:
// https://www.json.org/json-en.html
//
// Please note that invalid JSON is not considered/covered, because it
// is assumed that the resulting JSON will be processed by a standard
// JSON parser that will detect any invalid JSON.
export function fixJson(input: string): [string, number] {
  const stack: State[] = ["ROOT"];
  let lastValidIndex = -1;
  let literalStart: number | null = null;

  function processValueStart(char: string, i: number, swapState: State) {
    {
      switch (char) {
        case '"': {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_STRING");
          break;
        }

        case "f":
        case "t":
        case "n": {
          lastValidIndex = i;
          literalStart = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_LITERAL");
          break;
        }

        case "-": {
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }

        case "{": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_OBJECT_START");
          break;
        }

        case "[": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_ARRAY_START");
          break;
        }
      }
    }
  }

  function processAfterObjectValue(char: string, i: number) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_OBJECT_AFTER_COMMA");
        break;
      }
      case "}": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }

  function processAfterArrayValue(char: string, i: number) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_ARRAY_AFTER_COMMA");
        break;
      }
      case "]": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }

  for (let i = 0; i < input.length; i++) {
    const char = input[i]!;
    const currentState = stack[stack.length - 1];

    switch (currentState) {
      case "ROOT":
        processValueStart(char, i, "FINISH");
        break;

      case "INSIDE_OBJECT_START": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
          case "}": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_AFTER_COMMA": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_KEY": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_AFTER_KEY");
            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_AFTER_KEY": {
        switch (char) {
          case ":": {
            stack.pop();
            stack.push("INSIDE_OBJECT_BEFORE_VALUE");

            break;
          }
        }
        break;
      }

      case "INSIDE_OBJECT_BEFORE_VALUE": {
        processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
        break;
      }

      case "INSIDE_OBJECT_AFTER_VALUE": {
        processAfterObjectValue(char, i);
        break;
      }

      case "INSIDE_STRING": {
        switch (char) {
          case '"': {
            stack.pop();
            lastValidIndex = i;
            break;
          }

          case "\\": {
            stack.push("INSIDE_STRING_ESCAPE");
            break;
          }

          default: {
            lastValidIndex = i;
          }
        }

        break;
      }

      case "INSIDE_ARRAY_START": {
        switch (char) {
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }

          default: {
            lastValidIndex = i;
            processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
            break;
          }
        }
        break;
      }

      case "INSIDE_ARRAY_AFTER_VALUE": {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_ARRAY_AFTER_COMMA");
            break;
          }

          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }

          default: {
            lastValidIndex = i;
            break;
          }
        }

        break;
      }

      case "INSIDE_ARRAY_AFTER_COMMA": {
        processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
        break;
      }

      case "INSIDE_STRING_ESCAPE": {
        stack.pop();
        lastValidIndex = i;

        break;
      }

      case "INSIDE_NUMBER": {
        switch (char) {
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9": {
            lastValidIndex = i;
            break;
          }

          case "e":
          case "E":
          case "-":
          case ".": {
            break;
          }

          case ",": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }

            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }

            break;
          }

          case "}": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }

            break;
          }

          case "]": {
            stack.pop();

            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }

            break;
          }

          default: {
            stack.pop();
            break;
          }
        }

        break;
      }

      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart!, i + 1);

        if (
          !"false".startsWith(partialLiteral) &&
          !"true".startsWith(partialLiteral) &&
          !"null".startsWith(partialLiteral)
        ) {
          stack.pop();

          if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
            processAfterObjectValue(char, i);
          } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
            processAfterArrayValue(char, i);
          }
        } else {
          lastValidIndex = i;
        }

        break;
      }
    }
  }

  let result = input.slice(0, lastValidIndex + 1);
  let partialCount = 0;

  for (let i = stack.length - 1; i >= 0; i--) {
    const state = stack[i];

    switch (state) {
      case "INSIDE_STRING": {
        result += '"';
        partialCount++;
        break;
      }

      case "INSIDE_OBJECT_KEY":
      case "INSIDE_OBJECT_AFTER_KEY":
      case "INSIDE_OBJECT_AFTER_COMMA":
      case "INSIDE_OBJECT_START":
      case "INSIDE_OBJECT_BEFORE_VALUE":
      case "INSIDE_OBJECT_AFTER_VALUE": {
        result += "}";
        partialCount++;
        break;
      }

      case "INSIDE_ARRAY_START":
      case "INSIDE_ARRAY_AFTER_COMMA":
      case "INSIDE_ARRAY_AFTER_VALUE": {
        result += "]";
        partialCount++;
        break;
      }

      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart!, input.length);

        if ("true".startsWith(partialLiteral)) {
          result += "true".slice(partialLiteral.length);
        } else if ("false".startsWith(partialLiteral)) {
          result += "false".slice(partialLiteral.length);
        } else if ("null".startsWith(partialLiteral)) {
          result += "null".slice(partialLiteral.length);
        }
      }
    }
  }

  return [result, partialCount];
}



================================================
File: packages/react/src/utils/json/is-json.ts
================================================
import {
  ReadonlyJSONArray,
  ReadonlyJSONObject,
  ReadonlyJSONValue,
} from "./json-value";

export function isJSONValue(value: unknown): value is ReadonlyJSONValue {
  if (
    value === null ||
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    return true;
  }

  if (Array.isArray(value)) {
    return value.every(isJSONValue);
  }

  if (typeof value === "object") {
    return Object.entries(value).every(
      ([key, val]) => typeof key === "string" && isJSONValue(val),
    );
  }

  return false;
}

export function isJSONArray(value: unknown): value is ReadonlyJSONArray {
  return Array.isArray(value) && value.every(isJSONValue);
}

export function isJSONObject(value: unknown): value is ReadonlyJSONObject {
  return (
    value != null &&
    typeof value === "object" &&
    Object.entries(value).every(
      ([key, val]) => typeof key === "string" && isJSONValue(val),
    )
  );
}



================================================
File: packages/react/src/utils/json/json-value.ts
================================================
export type ReadonlyJSONValue =
  | null
  | string
  | number
  | boolean
  | ReadonlyJSONObject
  | ReadonlyJSONArray;

export type ReadonlyJSONObject = {
  readonly [key: string]: ReadonlyJSONValue;
};

export type ReadonlyJSONArray = readonly ReadonlyJSONValue[];



================================================
File: packages/react/src/utils/json/parse-partial-json.ts
================================================
import sjson from "secure-json-parse";
import { fixJson } from "./fix-json";
import {
  ContentPartStatus,
  ToolCallContentPartStatus,
} from "../../types/AssistantTypes";
import { useContentPart } from "../../context";

const PARTIAL_JSON_COUNT_SYMBOL = Symbol("partial-json-count");
export const parsePartialJson = (json: string) => {
  try {
    return sjson.parse(json);
  } catch {
    try {
      const [fixedJson, partialCount] = fixJson(json);
      const res = sjson.parse(fixedJson);
      res[PARTIAL_JSON_COUNT_SYMBOL] = partialCount;
      return res;
    } catch {
      return undefined;
    }
  }
};

const COMPLETE_STATUS = Object.freeze({ type: "complete" });

const getFieldStatus = (
  lastState: ContentPartStatus,
  args: unknown,
  fieldPath: string[],
  partialCount: number,
): ContentPartStatus => {
  if (fieldPath.length === 0) return lastState;
  if (typeof args !== "object" || args === null) return COMPLETE_STATUS;

  const path = fieldPath.at(-1)!;

  // If the expected property does not exist, mark as incomplete
  if (!Object.prototype.hasOwnProperty.call(args, path)) {
    return lastState;
  }

  const argsKeys = Object.keys(args);
  const isLast = argsKeys[argsKeys.length - 1] === path;
  if (!isLast) return COMPLETE_STATUS;

  return getFieldStatus(
    lastState,
    (args as Record<string, unknown>)[path],
    fieldPath.slice(0, -1),
    partialCount - 1,
  );
};

const getToolArgsFieldStatus = (
  status: ToolCallContentPartStatus,
  args: Record<string, unknown>,
  fieldPath: string[],
): ContentPartStatus => {
  const partialCount = (args as any)[PARTIAL_JSON_COUNT_SYMBOL] ?? 0;
  if (partialCount === 0) return COMPLETE_STATUS;

  const lastState: ContentPartStatus =
    status.type !== "requires-action" ? status : COMPLETE_STATUS;

  return getFieldStatus(lastState, args, fieldPath, partialCount);
};

export const useToolArgsFieldStatus = (fieldPath: string[]) => {
  return useContentPart((p) => {
    if (p.type !== "tool-call") throw new Error("not a tool call");
    return getToolArgsFieldStatus(p.status, p.args, fieldPath);
  });
};



================================================
File: packages/react/src/utils/smooth/SmoothContext.tsx
================================================
"use client";

import {
  ComponentType,
  createContext,
  FC,
  forwardRef,
  PropsWithChildren,
  useContext,
  useState,
} from "react";
import { ReadonlyStore } from "../../context/ReadonlyStore";
import { create, UseBoundStore } from "zustand";
import {
  ContentPartStatus,
  ToolCallContentPartStatus,
} from "../../types/AssistantTypes";
import { useContentPartRuntime } from "../../context/react/ContentPartContext";
import { createContextStoreHook } from "../../context/react/utils/createContextStoreHook";

type SmoothContextValue = {
  useSmoothStatus: UseBoundStore<
    ReadonlyStore<ContentPartStatus | ToolCallContentPartStatus>
  >;
};

const SmoothContext = createContext<SmoothContextValue | null>(null);

const makeSmoothContext = (
  initialState: ContentPartStatus | ToolCallContentPartStatus,
) => {
  const useSmoothStatus = create(() => initialState);
  return { useSmoothStatus };
};

export const SmoothContextProvider: FC<PropsWithChildren> = ({ children }) => {
  const outer = useSmoothContext({ optional: true });
  const contentPartRuntime = useContentPartRuntime();

  const [context] = useState(() =>
    makeSmoothContext(contentPartRuntime.getState().status),
  );

  // do not wrap if there is an outer SmoothContextProvider
  if (outer) return children;

  return (
    <SmoothContext.Provider value={context}>{children}</SmoothContext.Provider>
  );
};

export const withSmoothContextProvider = <C extends ComponentType<any>>(
  Component: C,
): C => {
  const Wrapped = forwardRef((props, ref) => {
    return (
      <SmoothContextProvider>
        <Component {...(props as any)} ref={ref} />
      </SmoothContextProvider>
    );
  });
  Wrapped.displayName = Component.displayName;
  return Wrapped as any;
};

function useSmoothContext(options?: {
  optional?: false | undefined;
}): SmoothContextValue;
function useSmoothContext(options?: {
  optional?: boolean | undefined;
}): SmoothContextValue | null;
function useSmoothContext(options?: { optional?: boolean | undefined }) {
  const context = useContext(SmoothContext);
  if (!options?.optional && !context)
    throw new Error(
      "This component must be used within a SmoothContextProvider.",
    );
  return context;
}

export const { useSmoothStatus, useSmoothStatusStore } = createContextStoreHook(
  useSmoothContext,
  "useSmoothStatus",
);



================================================
File: packages/react/src/utils/smooth/index.ts
================================================
"use client";
// TODO createContextStoreHook does not work well with server-side nextjs bundler
// use client necessary here for now

export { useSmooth } from "./useSmooth";
export { useSmoothStatus, withSmoothContextProvider } from "./SmoothContext";



================================================
File: packages/react/src/utils/smooth/useSmooth.tsx
================================================
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import { useMessage } from "../../context";
import { ContentPartStatus, TextContentPart } from "../../types/AssistantTypes";
import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { useSmoothStatusStore } from "./SmoothContext";
import { writableStore } from "../../context/ReadonlyStore";
import { ContentPartState } from "../../api/ContentPartRuntime";

class TextStreamAnimator {
  private animationFrameId: number | null = null;
  private lastUpdateTime: number = Date.now();

  public targetText: string = "";

  constructor(
    public currentText: string,
    private setText: (newText: string) => void,
  ) {}

  start() {
    if (this.animationFrameId !== null) return;
    this.lastUpdateTime = Date.now();
    this.animate();
  }

  stop() {
    if (this.animationFrameId !== null) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
  }

  private animate = () => {
    const currentTime = Date.now();
    const deltaTime = currentTime - this.lastUpdateTime;
    let timeToConsume = deltaTime;

    const remainingChars = this.targetText.length - this.currentText.length;
    const baseTimePerChar = Math.min(5, 250 / remainingChars);

    let charsToAdd = 0;
    while (timeToConsume >= baseTimePerChar && charsToAdd < remainingChars) {
      charsToAdd++;
      timeToConsume -= baseTimePerChar;
    }

    if (charsToAdd !== remainingChars) {
      this.animationFrameId = requestAnimationFrame(this.animate);
    } else {
      this.animationFrameId = null;
    }
    if (charsToAdd === 0) return;

    this.currentText = this.targetText.slice(
      0,
      this.currentText.length + charsToAdd,
    );
    this.lastUpdateTime = currentTime - timeToConsume;
    this.setText(this.currentText);
  };
}

const SMOOTH_STATUS: ContentPartStatus = Object.freeze({
  type: "running",
});

export const useSmooth = (
  state: ContentPartState & TextContentPart,
  smooth: boolean = false,
): ContentPartState & TextContentPart => {
  const { text } = state;
  const id = useMessage({
    optional: true,
    selector: (m: { id: string }) => m.id,
  });

  const idRef = useRef(id);
  const [displayedText, setDisplayedText] = useState(text);

  const smoothStatusStore = useSmoothStatusStore({ optional: true });
  const setText = useCallbackRef((text: string) => {
    setDisplayedText(text);
    if (smoothStatusStore) {
      const target =
        displayedText !== text || state.status.type === "running"
          ? SMOOTH_STATUS
          : state.status;
      writableStore(smoothStatusStore).setState(target, true);
    }
  });

  // TODO this is hacky
  useEffect(() => {
    if (smoothStatusStore) {
      const target =
        displayedText !== text || state.status.type === "running"
          ? SMOOTH_STATUS
          : state.status;
      writableStore(smoothStatusStore).setState(target, true);
    }
  }, [smoothStatusStore, text, displayedText, state.status]);

  const [animatorRef] = useState<TextStreamAnimator>(
    new TextStreamAnimator(text, setText),
  );

  useEffect(() => {
    if (!smooth) {
      animatorRef.stop();
      return;
    }

    if (idRef.current !== id || !text.startsWith(animatorRef.targetText)) {
      idRef.current = id;
      setText(text);

      animatorRef.currentText = text;
      animatorRef.targetText = text;
      animatorRef.stop();

      return;
    }

    animatorRef.targetText = text;
    animatorRef.start();
  }, [setText, animatorRef, id, smooth, text]);

  useEffect(() => {
    return () => {
      animatorRef.stop();
    };
  }, [animatorRef]);

  return useMemo(
    () =>
      smooth
        ? {
            type: "text",
            text: displayedText,
            status: text === displayedText ? state.status : SMOOTH_STATUS,
          }
        : state,
    [smooth, displayedText, state, text],
  );
};



================================================
File: packages/react-ai-sdk/README.md
================================================
# `@assistant-ui/react-ai-sdk`

Vercel AI SDK integration for `@assistant-ui/react`.



================================================
File: packages/react-ai-sdk/CHANGELOG.md
================================================
# @assistant-ui/react-ai-sdk

## 0.7.16

### Patch Changes

- ecde41d: feat: useVercelChatChat joinStrategy
- Updated dependencies [3454871]
  - @assistant-ui/react@0.7.85

## 0.7.15

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react@0.7.71

## 0.7.14

### Patch Changes

- 483c360: feat: useChatRuntime
- Updated dependencies [f4d71da]
- Updated dependencies [16cd124]
  - @assistant-ui/react@0.7.66

## 0.7.13

### Patch Changes

- dba4dde: feat(ai-sdk): message.metadata.annotations
- efd60fe: fix(ai-sdk): onSwitchToThread
- Updated dependencies [dba4dde]
- Updated dependencies [efd60fe]
  - @assistant-ui/react@0.7.56

## 0.7.12

### Patch Changes

- 7f8c27e: fix: useInputSync IME composition support
- Updated dependencies [0bf5082]
  - @assistant-ui/react@0.7.55

## 0.7.11

### Patch Changes

- 22272e6: chore: update dependencies
- Updated dependencies [0979334]
- Updated dependencies [22272e6]
  - @assistant-ui/react@0.7.39

## 0.7.10

### Patch Changes

- e8eedae: feat: RSCDisplay
- Updated dependencies [5794b1b]
  - @assistant-ui/react@0.7.38

## 0.7.9

### Patch Changes

- 9e1ce3b: refactor: deprecate getVercelRSCMessage
- Updated dependencies [34d2915]
- Updated dependencies [4f3834a]
- Updated dependencies [b8b11d3]
- Updated dependencies [889a55e]
- Updated dependencies [a7d9e41]
  - @assistant-ui/react@0.7.36

## 0.7.8

### Patch Changes

- 345f3d5: chore: update dependencies
- Updated dependencies [345f3d5]
- Updated dependencies [345f3d5]
- Updated dependencies [2846559]
  - @assistant-ui/react@0.7.35

## 0.7.7

### Patch Changes

- 4c2bf58: chore: update dependencies
- Updated dependencies [9a3dc93]
- Updated dependencies [4c2bf58]
  - @assistant-ui/react@0.7.34

## 0.7.6

### Patch Changes

- 982a6a2: chore: update dependencies
- Updated dependencies [982a6a2]
  - @assistant-ui/react@0.7.30

## 0.7.5

### Patch Changes

- ec3b8cc: chore: update dependencies
- Updated dependencies [ec3b8cc]
  - @assistant-ui/react@0.7.19

## 0.7.4

### Patch Changes

- 4c54273: chore: update dependencies
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
  - @assistant-ui/react@0.7.12

## 0.7.3

### Patch Changes

- 2112ce8: chore: update dependencies
- Updated dependencies [589d37b]
- Updated dependencies [2112ce8]
  - @assistant-ui/react@0.7.8

## 0.7.2

### Patch Changes

- 933b8c0: chore: update deps
- Updated dependencies [933b8c0]
- Updated dependencies [09a2a38]
  - @assistant-ui/react@0.7.6

## 0.7.1

### Patch Changes

- c59d8b5: chore: update dependencies
- Updated dependencies [c59d8b5]
  - @assistant-ui/react@0.7.5

## 0.7.0

### Patch Changes

- Updated dependencies [c6e886b]
- Updated dependencies [2912fda]
  - @assistant-ui/react@0.7.0

## 0.6.19

### Patch Changes

- b5f92fe: fix(external-store): crash on cancel when using separate converter, fix branching
- Updated dependencies [b5f92fe]
  - @assistant-ui/react@0.5.100

## 0.6.18

### Patch Changes

- 1ada091: chore: update deps
- Updated dependencies [cdcfe1e]
- Updated dependencies [cdcfe1e]
- Updated dependencies [94feab2]
- Updated dependencies [472c548]
- Updated dependencies [14da684]
- Updated dependencies [1ada091]
  - @assistant-ui/react@0.5.99

## 0.6.17

### Patch Changes

- ff5b86c: chore: update deps
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
  - @assistant-ui/react@0.5.98

## 0.6.16

### Patch Changes

- d2375cd: build: disable bundling in UI package releases
- Updated dependencies [d2375cd]
  - @assistant-ui/react@0.5.93

## 0.6.15

### Patch Changes

- fb32e61: chore: update deps
- fb32e61: feat: react-19 support
- Updated dependencies [2090544]
- Updated dependencies [be04b5b]
- Updated dependencies [2090544]
- Updated dependencies [fb32e61]
- Updated dependencies [fb32e61]
  - @assistant-ui/react@0.5.90

## 0.6.14

### Patch Changes

- b38165d: feat(ai-sdk): Adapters support (attachment, feedback, speech, ThreadList)
- Updated dependencies [b38165d]
- Updated dependencies [a1bfd26]
- Updated dependencies [b38165d]
  - @assistant-ui/react@0.5.87

## 0.6.13

### Patch Changes

- fa9a441: feat(ai-sdk): replace ai package dependency with @ai-sdk/react

## 0.6.12

### Patch Changes

- c3806f8: fix: do not export internal Runtime types
- Updated dependencies [c3806f8]
- Updated dependencies [899b963]
- Updated dependencies [899b963]
- Updated dependencies [899b963]
- Updated dependencies [8c80f2a]
- Updated dependencies [809c5c1]
  - @assistant-ui/react@0.5.76

## 0.6.11

### Patch Changes

- fb46305: chore: update dependencies
- Updated dependencies [fb46305]
- Updated dependencies [e225116]
- Updated dependencies [0ff22a7]
- Updated dependencies [378ee99]
- Updated dependencies [378ee99]
  - @assistant-ui/react@0.5.73

## 0.6.10

### Patch Changes

- 96b9d1f: feat: new Runtime API part 8
- Updated dependencies [96b9d1f]
- Updated dependencies [9fd85da]
- Updated dependencies [d8bd40b]
- Updated dependencies [42156cf]
  - @assistant-ui/react@0.5.68

## 0.6.9

### Patch Changes

- 88957ac: feat: New unified Runtime API (part 1/n)
- Updated dependencies [88957ac]
- Updated dependencies [1a99132]
- Updated dependencies [3187013]
  - @assistant-ui/react@0.5.61

## 0.6.8

### Patch Changes

- 155d6e7: chore: update dependencies
- Updated dependencies [926dce5]
- Updated dependencies [155d6e7]
- Updated dependencies [f80226f]
  - @assistant-ui/react@0.5.60

## 0.6.7

### Patch Changes

- e4863bb: feat(runtimes/external): add onSwitchToNewThread callback
- Updated dependencies [e4863bb]
- Updated dependencies [e4863bb]
  - @assistant-ui/react@0.5.56

## 0.6.6

### Patch Changes

- c348553: chore: update dependencies
- Updated dependencies [0f99aa6]
- Updated dependencies [c348553]
  - @assistant-ui/react@0.5.54

## 0.6.5

### Patch Changes

- 132b796: feat: improve AI SDK attachments support
- 132b796: refactor: AI SDK message converter
- Updated dependencies [f0f7497]
- Updated dependencies [8555685]
- Updated dependencies [892b019]
  - @assistant-ui/react@0.5.53

## 0.6.4

### Patch Changes

- 04f6fc8: chore: update deps
- Updated dependencies [04f6fc8]
  - @assistant-ui/react@0.5.50

## 0.6.3

### Patch Changes

- bdd3084: feat: allow runtimes to signal support for attachments
- 7dcab47: feat: add AttachmentAdapter for AI SDK
- 7dcab47: fix: message copy handling for runtimes
- a22e6bb: feat: AttachmentAdapter.accept allow attachment adapters to specify supported file types
- 9e00772: feat: add composer attachments state
- 7809584: feat: allow image content types
- 3ab5a6b: refactor: rename `getVercelAIMessage` to `getVercelAIMessages`
- 7809584: feat: AI SDK attachments support
- Updated dependencies [a81b18f]
- Updated dependencies [44d08bd]
- Updated dependencies [b48fbcc]
- Updated dependencies [cc5e7d4]
- Updated dependencies [bdd3084]
- Updated dependencies [7dcab47]
- Updated dependencies [a22e6bb]
- Updated dependencies [9e00772]
- Updated dependencies [d2580d3]
- Updated dependencies [c845fcf]
- Updated dependencies [3ba193e]
- Updated dependencies [d2580d3]
- Updated dependencies [3b0f20b]
- Updated dependencies [3ba193e]
- Updated dependencies [d2580d3]
- Updated dependencies [44d08bd]
  - @assistant-ui/react@0.5.47

## 0.6.2

### Patch Changes

- f526279: feat: SpeechSyntehsis
- e8aa697: refactor: remove unsupported external runtime onCopy callback
- Updated dependencies [f526279]
- Updated dependencies [e8aa697]
  - @assistant-ui/react@0.5.41

## 0.6.1

### Patch Changes

- 554a423: chore: update deps
- Updated dependencies [554a423]
  - @assistant-ui/react@0.5.38

## 0.6.0

### Minor Changes

- cd70d4f: refactor: rewrite ai-sdk integration to use external runtime

### Patch Changes

- Updated dependencies [cd70d4f]
  - @assistant-ui/react@0.5.32

## 0.5.16

### Patch Changes

- 1b9ded0: feat: lift thread composer state to ThreadRuntime.Composer
- Updated dependencies [34621cc]
- Updated dependencies [2df3e73]
- Updated dependencies [1b9ded0]
  - @assistant-ui/react@0.5.31

## 0.5.15

### Patch Changes

- 556001f: chore: update deps
- Updated dependencies [556001f]
- Updated dependencies [556001f]
  - @assistant-ui/react@0.5.29

## 0.5.14

### Patch Changes

- dbf1042: chore: update deps
- Updated dependencies [dbf1042]
- Updated dependencies [dbf1042]
  - @assistant-ui/react@0.5.27

## 0.5.13

### Patch Changes

- 0445cdf: refactor: remove Runtime.isRunning / auto-infer isRunning state from last message state
- Updated dependencies [0445cdf]
- Updated dependencies [0445cdf]
- Updated dependencies [71f4b77]
  - @assistant-ui/react@0.5.25

## 0.5.12

### Patch Changes

- 3ddfde5: feat: assistant message append support

## 0.5.11

### Patch Changes

- 134d39e: fix: undo moving internal utilities to /react/internal
- Updated dependencies [134d39e]
  - @assistant-ui/react@0.5.22

## 0.5.10

### Patch Changes

- 3cc67f2: refactor: move internal utilities to @assistant-ui/react/internal
- Updated dependencies [de04d92]
- Updated dependencies [3cc67f2]
  - @assistant-ui/react@0.5.20

## 0.5.9

### Patch Changes

- 9dc942f: feat: useThread.isDisabled flag
- Updated dependencies [9dc942f]
  - @assistant-ui/react@0.5.16

## 0.5.8

### Patch Changes

- 461bf80: feat(rsc): isRunning support
- Updated dependencies [0418c73]
  - @assistant-ui/react@0.5.15

## 0.5.7

### Patch Changes

- a216fbf: chore: update deps
- Updated dependencies [a216fbf]
  - @assistant-ui/react@0.5.9

## 0.5.6

### Patch Changes

- e5e6b20: feat(runtime): BranchPicker feature detection
- Updated dependencies [e5e6b20]
  - @assistant-ui/react@0.5.6

## 0.5.5

### Patch Changes

- cb74cac: fix: move tsup dependency to devDependencies
- Updated dependencies [f26783a]
  - @assistant-ui/react@0.5.5

## 0.5.4

### Patch Changes

- f2d7590: fix(rsc): hide copy message button
- Updated dependencies [f2d7590]
  - @assistant-ui/react@0.5.4

## 0.5.3

### Patch Changes

- 7e9e774: refactor: align RSC adapter function names with useExternalStore

## 0.5.2

### Patch Changes

- 1acdf45: feat: external store runtime
- Updated dependencies [1acdf45]
  - @assistant-ui/react@0.5.3

## 0.5.1

### Patch Changes

- ee38c0c: feat: message status v2
- 2baa898: chore: v5
- Updated dependencies [ee38c0c]
- Updated dependencies [ee38c0c]
- Updated dependencies [2baa898]
  - @assistant-ui/react@0.5.1

## 0.4.1

### Patch Changes

- 998081b: fix: reduce specificity of built-in CSS styles
- Updated dependencies [998081b]
  - @assistant-ui/react@0.4.4

## 0.4.0

### Minor Changes

- 679cd54: feat: system message support

### Patch Changes

- Updated dependencies [e0e51cf]
- Updated dependencies [c7ba6a2]
- Updated dependencies [e0e51cf]
- Updated dependencies [e0e51cf]
- Updated dependencies [679cd54]
  - @assistant-ui/react@0.4.0

## 0.3.1

### Patch Changes

- 05fd5d6: feat: runtime capabilities API
- Updated dependencies [05fd5d6]
  - @assistant-ui/react@0.3.1

## 0.3.0

### Patch Changes

- Updated dependencies [3dd7384]
- Updated dependencies [23f474e]
- Updated dependencies [5b68f4a]
  - @assistant-ui/react@0.3.0

## 0.2.3

### Patch Changes

- be2c26b: fix: Vercel useAssistant BranchPicker duplicates bug
- Updated dependencies [be2c26b]
  - @assistant-ui/react@0.2.3

## 0.2.2

### Patch Changes

- ff042d8: feat: Vercel AI SDK useAssistant Data Message for tool calling support

## 0.2.1

### Patch Changes

- 62e9f19: feat: AssistantRuntime newThread
- 611fdcc: feat: useAssistantActions
- Updated dependencies [62e9f19]
- Updated dependencies [611fdcc]
- Updated dependencies [ca0eaa1]
  - @assistant-ui/react@0.2.2

## 0.2.0

### Minor Changes

- 2ab2cab: feat!: experimental features are now marked as stable

### Patch Changes

- Updated dependencies [de20b1c]
- Updated dependencies [2ab2cab]
  - @assistant-ui/react@0.2.0

## 0.1.7

### Patch Changes

- 8513f9a: feat: ToolUI addResult API
- Updated dependencies [8513f9a]
  - @assistant-ui/react@0.1.8

## 0.1.6

### Patch Changes

- 36f3a1f: chore: update dependencies
- Updated dependencies [36f3a1f]
- Updated dependencies [36f3a1f]
- Updated dependencies [36f3a1f]
  - @assistant-ui/react@0.1.7

## 0.1.4

### Patch Changes

- 6e9528d: build: add changesets
- 6e9528d: feat: add useAssistantTool API
- Updated dependencies [6e9528d]
- Updated dependencies [6e9528d]
  - @assistant-ui/react@0.1.3



================================================
File: packages/react-ai-sdk/package.json
================================================
{
  "name": "@assistant-ui/react-ai-sdk",
  "version": "0.8.0",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts --sourcemap --clean"
  },
  "dependencies": {
    "@ai-sdk/react": "*",
    "@ai-sdk/ui-utils": "*",
    "@radix-ui/react-use-callback-ref": "^1.1.0",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "peerDependencies": {
    "@assistant-ui/react": "^0.8.5",
    "@types/react": "*",
    "react": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/tsconfig": "workspace:*",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/react-ai-sdk/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-ai-sdk/src/index.ts
================================================
export * from "./rsc";
export * from "./ui";
export * from "./useChatRuntime";



================================================
File: packages/react-ai-sdk/src/useChatRuntime.ts
================================================
import { EdgeRuntimeOptions, useEdgeRuntime } from "@assistant-ui/react";

type UseChatRuntimeOptions = Omit<EdgeRuntimeOptions, "unstable_AISDKInterop">;

export const useChatRuntime = (options: UseChatRuntimeOptions) => {
  return useEdgeRuntime({
    ...options,
    unstable_AISDKInterop: "v2",
  });
};



================================================
File: packages/react-ai-sdk/src/rsc/RSCDisplay.tsx
================================================
"use client";
import {
  useThread,
  useMessage,
  getExternalStoreMessage,
} from "@assistant-ui/react";
import {
  RSCThreadExtras,
  symbolInternalRSCExtras,
} from "./utils/RSCThreadExtras";
import { FC } from "react";

export const RSCDisplay: FC = () => {
  const convertFn = useThread((t) => {
    const extras = (t.extras as RSCThreadExtras)?.[symbolInternalRSCExtras];
    if (!extras)
      throw new Error(
        "This function can only be used inside a Vercel RSC runtime.",
      );
    return extras.convertFn;
  });
  return useMessage((m) => convertFn(getExternalStoreMessage(m)).display);
};



================================================
File: packages/react-ai-sdk/src/rsc/VercelRSCAdapter.tsx
================================================
"use client";
import type { AppendMessage } from "@assistant-ui/react";
import type { VercelRSCMessage } from "./VercelRSCMessage";
import { ExternalStoreAdapter } from "@assistant-ui/react";

type RSCMessageConverter<T> = {
  convertMessage: (message: T) => VercelRSCMessage;
};

type VercelRSCAdapterBase<T> = {
  isRunning?: boolean | undefined;
  messages: T[];

  onNew?: (message: AppendMessage) => Promise<void>;
  onEdit?: ((message: AppendMessage) => Promise<void>) | undefined;
  onReload?: ((parentId: string | null) => Promise<void>) | undefined;
  convertMessage?: ((message: T) => VercelRSCMessage) | undefined;

  adapters?: ExternalStoreAdapter["adapters"] | undefined;
};

export type VercelRSCAdapter<T = VercelRSCMessage> = VercelRSCAdapterBase<T> &
  (T extends VercelRSCMessage ? object : RSCMessageConverter<T>);



================================================
File: packages/react-ai-sdk/src/rsc/VercelRSCMessage.tsx
================================================
"use client";
import type { ReactNode } from "react";

export type VercelRSCMessage = {
  id?: string | undefined;
  role: "user" | "assistant";
  display: ReactNode;
  createdAt?: Date | undefined;
};



================================================
File: packages/react-ai-sdk/src/rsc/getVercelRSCMessage.tsx
================================================
import {
  getExternalStoreMessage,
  type ThreadMessage,
} from "@assistant-ui/react";

/**
 * @deprecated Use `getExternalStoreMessage` instead. This method was specific to Vercel RSC
 * implementation and has been replaced by a more generic external store message handler.
 */
export const getVercelRSCMessage = (message: ThreadMessage) => {
  return getExternalStoreMessage(message);
};



================================================
File: packages/react-ai-sdk/src/rsc/index.ts
================================================
export { useVercelRSCRuntime } from "./useVercelRSCRuntime";
export { getVercelRSCMessage } from "./getVercelRSCMessage";
export type { VercelRSCAdapter } from "./VercelRSCAdapter";
export type { VercelRSCMessage } from "./VercelRSCMessage";
export { RSCDisplay } from "./RSCDisplay";



================================================
File: packages/react-ai-sdk/src/rsc/useVercelRSCRuntime.tsx
================================================
"use client";

import type { VercelRSCAdapter } from "./VercelRSCAdapter";
import {
  ExternalStoreAdapter,
  ThreadMessageLike,
  useExternalMessageConverter,
  useExternalStoreRuntime,
} from "@assistant-ui/react";
import { VercelRSCMessage } from "./VercelRSCMessage";
import { useCallback, useMemo } from "react";
import { symbolInternalRSCExtras } from "./utils/RSCThreadExtras";

const vercelToThreadMessage = <T,>(
  converter: (message: T) => VercelRSCMessage,
  rawMessage: T,
): ThreadMessageLike => {
  const message = converter(rawMessage);

  return {
    id: message.id,
    role: message.role,
    content: [{ type: "text", text: "[Developer: Please set up RSCDisplay]" }],
    createdAt: message.createdAt,
  };
};

export const useVercelRSCRuntime = <T extends WeakKey>(
  adapter: VercelRSCAdapter<T>,
) => {
  const onNew = adapter.onNew;
  if (!onNew)
    throw new Error("You must pass a onNew function to useVercelRSCRuntime");

  const convertFn = useMemo(() => {
    return (
      adapter.convertMessage?.bind(adapter) ?? ((m: T) => m as VercelRSCMessage)
    );
  }, [adapter.convertMessage, adapter]);
  const callback = useCallback(
    (m: T) => {
      return vercelToThreadMessage(convertFn, m);
    },
    [convertFn],
  );

  const messages = useExternalMessageConverter({
    callback,
    isRunning: adapter.isRunning ?? false,
    messages: adapter.messages,
  });

  const eAdapter: ExternalStoreAdapter = {
    isRunning: adapter.isRunning,
    messages,
    onNew,
    onEdit: adapter.onEdit,
    onReload: adapter.onReload,
    adapters: adapter.adapters,
    unstable_capabilities: {
      copy: false,
    },
    extras: {
      [symbolInternalRSCExtras]: { convertFn },
    },
  };

  const runtime = useExternalStoreRuntime(eAdapter);
  return runtime;
};



================================================
File: packages/react-ai-sdk/src/rsc/utils/RSCThreadExtras.tsx
================================================
"use client";
import { VercelRSCMessage } from "../VercelRSCMessage";

export const symbolInternalRSCExtras = Symbol("internal-rsc-extras");
export type RSCThreadExtras =
  | {
      [symbolInternalRSCExtras]?: {
        convertFn: (message: any) => VercelRSCMessage;
      };
    }
  | undefined;



================================================
File: packages/react-ai-sdk/src/ui/getVercelAIMessages.tsx
================================================
import {
  getExternalStoreMessage,
  type ThreadMessage,
} from "@assistant-ui/react";
import type { Message } from "@ai-sdk/ui-utils";

export const getVercelAIMessages = (message: ThreadMessage) => {
  return getExternalStoreMessage(message) as Message[];
};



================================================
File: packages/react-ai-sdk/src/ui/index.ts
================================================
export { useVercelUseChatRuntime } from "./use-chat/useVercelUseChatRuntime";
export { useVercelUseAssistantRuntime } from "./use-assistant/useVercelUseAssistantRuntime";
export { getVercelAIMessages } from "./getVercelAIMessages";



================================================
File: packages/react-ai-sdk/src/ui/use-assistant/useVercelUseAssistantRuntime.tsx
================================================
import type { useAssistant } from "@ai-sdk/react";
import {
  useExternalMessageConverter,
  useExternalStoreRuntime,
} from "@assistant-ui/react";
import { convertMessage } from "../utils/convertMessage";
import { useInputSync } from "../utils/useInputSync";
import { toCreateMessage } from "../utils/toCreateMessage";
import { vercelAttachmentAdapter } from "../utils/vercelAttachmentAdapter";
import { ExternalStoreAdapter } from "@assistant-ui/react";

export type VercelUseChatAdapter = {
  adapters?:
    | Omit<NonNullable<ExternalStoreAdapter["adapters"]>, "attachments">
    | undefined;
};

export const useVercelUseAssistantRuntime = (
  assistantHelpers: ReturnType<typeof useAssistant>,
  adapter: VercelUseChatAdapter = {},
) => {
  const messages = useExternalMessageConverter({
    callback: convertMessage,
    isRunning: assistantHelpers.status === "in_progress",
    messages: assistantHelpers.messages,
  });
  const runtime = useExternalStoreRuntime({
    isRunning: assistantHelpers.status === "in_progress",
    messages,
    onCancel: async () => assistantHelpers.stop(),
    onNew: async (message) => {
      await assistantHelpers.append(await toCreateMessage(message));
    },
    adapters: {
      attachments: vercelAttachmentAdapter,
      ...adapter.adapters,
      threadList: new Proxy(adapter.adapters?.threadList ?? {}, {
        get(target, prop, receiver) {
          if (prop === "onSwitchToNewThread") {
            return () => {
              assistantHelpers.messages = [];
              assistantHelpers.input = "";
              assistantHelpers.setMessages([]);
              assistantHelpers.setInput("");

              if (typeof target.onSwitchToNewThread === "function") {
                return target.onSwitchToNewThread.call(target);
              }
            };
          }

          return Reflect.get(target, prop, receiver);
        },
      }),
    },
  });

  useInputSync(assistantHelpers, runtime);

  return runtime;
};



================================================
File: packages/react-ai-sdk/src/ui/use-chat/useVercelUseChatRuntime.tsx
================================================
import type { useChat } from "@ai-sdk/react";
import { convertMessage } from "../utils/convertMessage";
import {
  useExternalMessageConverter,
  useExternalStoreRuntime,
} from "@assistant-ui/react";
import { useInputSync } from "../utils/useInputSync";
import { sliceMessagesUntil } from "../utils/sliceMessagesUntil";
import { toCreateMessage } from "../utils/toCreateMessage";
import { vercelAttachmentAdapter } from "../utils/vercelAttachmentAdapter";
import { getVercelAIMessages } from "../getVercelAIMessages";
import { ExternalStoreAdapter } from "@assistant-ui/react";
import { useState } from "react";
import { generateId } from "@ai-sdk/ui-utils";

export type VercelUseChatAdapter = {
  adapters?:
    | Omit<NonNullable<ExternalStoreAdapter["adapters"]>, "attachments">
    | undefined;
  unstable_joinStrategy?: "concat-content" | "none";
};

export const useVercelUseChatRuntime = (
  chatHelpers: ReturnType<typeof useChat>,
  adapter: VercelUseChatAdapter = {},
) => {
  const messages = useExternalMessageConverter({
    callback: convertMessage,
    isRunning: chatHelpers.isLoading,
    messages: chatHelpers.messages,
    joinStrategy: adapter.unstable_joinStrategy,
  });

  const [threadId, setThreadId] = useState<string>(generateId());

  const runtime = useExternalStoreRuntime({
    isRunning: chatHelpers.isLoading,
    messages,
    setMessages: (messages) =>
      chatHelpers.setMessages(messages.map(getVercelAIMessages).flat()),
    onCancel: async () => chatHelpers.stop(),
    onNew: async (message) => {
      await chatHelpers.append(await toCreateMessage(message));
    },
    onEdit: async (message) => {
      const newMessages = sliceMessagesUntil(
        chatHelpers.messages,
        message.parentId,
      );
      chatHelpers.setMessages(newMessages);

      await chatHelpers.append(await toCreateMessage(message));
    },
    onReload: async (parentId: string | null) => {
      const newMessages = sliceMessagesUntil(chatHelpers.messages, parentId);
      chatHelpers.setMessages(newMessages);

      await chatHelpers.reload();
    },
    onAddToolResult: ({ toolCallId, result }) => {
      chatHelpers.addToolResult({ toolCallId, result });
    },
    adapters: {
      attachments: vercelAttachmentAdapter,
      ...adapter.adapters,
      threadList: new Proxy(adapter.adapters?.threadList ?? {}, {
        get(target, prop, receiver) {
          if (prop === "threadId") {
            return target.threadId ?? threadId;
          }
          if (prop === "onSwitchToNewThread") {
            return () => {
              chatHelpers.messages = [];
              chatHelpers.input = "";
              chatHelpers.setMessages([]);
              chatHelpers.setInput("");
              setThreadId(generateId());

              if (typeof target.onSwitchToNewThread === "function") {
                return target.onSwitchToNewThread.call(target);
              }
            };
          }

          return Reflect.get(target, prop, receiver);
        },
      }),
    },
  });

  useInputSync(chatHelpers, runtime);

  return runtime;
};



================================================
File: packages/react-ai-sdk/src/ui/utils/convertMessage.ts
================================================
import { Message } from "@ai-sdk/ui-utils";
import { useExternalMessageConverter } from "@assistant-ui/react";
import { ToolCallContentPart } from "@assistant-ui/react";
import { TextContentPart } from "@assistant-ui/react";
import { CompleteAttachment } from "@assistant-ui/react";

export const convertMessage: useExternalMessageConverter.Callback<Message> = (
  message,
) => {
  switch (message.role) {
    case "user":
      return {
        role: "user",
        id: message.id,
        createdAt: message.createdAt,
        content: message.content,

        attachments: message.experimental_attachments?.map(
          (attachment, idx) =>
            ({
              id: idx.toString(),
              type: "file",
              name: attachment.name ?? attachment.url,
              content: [],
              contentType: attachment.contentType ?? "unknown/unknown",
              status: { type: "complete" },
            }) satisfies CompleteAttachment,
        ),
      };

    case "system":
      return {
        role: "system",
        id: message.id,
        createdAt: message.createdAt,
        content: message.content,
      };

    case "assistant":
      return {
        role: "assistant",
        id: message.id,
        createdAt: message.createdAt,
        content: [
          ...(message.content
            ? [
                {
                  type: "text",
                  text: message.content,
                } satisfies TextContentPart,
              ]
            : []),
          ...(message.toolInvocations?.map(
            (t) =>
              ({
                type: "tool-call",
                toolName: t.toolName,
                toolCallId: t.toolCallId,
                argsText: JSON.stringify(t.args),
                args: t.args,
                result: "result" in t ? t.result : undefined,
              }) satisfies ToolCallContentPart,
          ) ?? []),
        ],
        metadata: {
          unstable_annotations: message.annotations,
          unstable_data: Array.isArray(message.data)
            ? message.data
            : message.data
              ? [message.data]
              : undefined,
        },
      };

    case "data": {
      type MaybeSupportedDataMessage =
        | { type?: "unsafe_other" }
        | ToolCallContentPart
        | {
            type: "tool-result";
            toolCallId: string;
            result: any;
          };

      if (
        !message.data ||
        !(typeof message.data === "object") ||
        Array.isArray(message.data)
      )
        return [];

      const data = message.data as MaybeSupportedDataMessage;

      if (data.type === "tool-call") {
        return {
          role: "assistant",
          id: message.id,
          createdAt: message.createdAt,
          content: [data],
        };
      } else if (data.type === "tool-result") {
        return {
          role: "tool",
          id: message.id,
          toolCallId: data.toolCallId,
          result: data.result,
        };
      }
      return [];
    }

    default:
      // TODO handle tool and function messages
      const _unsupported: "function" | "tool" = message.role;
      throw new Error(
        `You have a message with an unsupported role. The role ${_unsupported} is not supported.`,
      );
  }
};



================================================
File: packages/react-ai-sdk/src/ui/utils/sliceMessagesUntil.tsx
================================================
import type { Message } from "@ai-sdk/ui-utils";

export const sliceMessagesUntil = (
  messages: Message[],
  messageId: string | null,
) => {
  if (messageId == null) return [];

  let messageIdx = messages.findIndex((m) => m.id === messageId);
  if (messageIdx === -1)
    throw new Error(
      "useVercelAIThreadState: Message not found. This is liekly an internal bug in assistant-ui.",
    );

  while (messages[messageIdx + 1]?.role === "assistant") {
    messageIdx++;
  }

  return messages.slice(0, messageIdx + 1);
};



================================================
File: packages/react-ai-sdk/src/ui/utils/toCreateMessage.ts
================================================
import { AppendMessage } from "@assistant-ui/react";
import { CreateMessage } from "@ai-sdk/ui-utils";

export const toCreateMessage = async (
  message: AppendMessage,
): Promise<CreateMessage> => {
  const content = message.content
    .filter((part) => part.type === "text")
    .map((t) => t.text)
    .join("\n\n");

  const images = message.content
    .filter((part) => part.type === "image")
    .map((part) => ({ url: part.image }));

  return {
    role: message.role,
    content,
    experimental_attachments: [
      ...images,
      ...(await Promise.all(
        message.attachments.map(async (m) => {
          if (m.file == null)
            throw new Error("Attachment did not contain a file");
          return {
            contentType: m.file.type,
            name: m.file.name,
            url: await getFileDataURL(m.file),
          };
        }),
      )),
    ],
  };
};

const getFileDataURL = (file: File) =>
  new Promise<string>((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);

    reader.readAsDataURL(file);
  });



================================================
File: packages/react-ai-sdk/src/ui/utils/useInputSync.tsx
================================================
import { useEffect } from "react";
import { useAssistant, useChat } from "@ai-sdk/react";
import { AssistantRuntime } from "@assistant-ui/react";

type VercelHelpers =
  | ReturnType<typeof useChat>
  | ReturnType<typeof useAssistant>;

export const useInputSync = (
  { setInput, input }: VercelHelpers,
  runtime: AssistantRuntime,
) => {
  // sync input from vercel to assistant-ui
  useEffect(() => {
    runtime.thread.composer.setText(input);
  }, [runtime, input]);

  // sync input from assistant-ui to vercel
  useEffect(() => {
    return runtime.thread.composer.subscribe(() => {
      setInput(runtime.thread.composer.getState().text);
    });
  }, [runtime, setInput]);
};



================================================
File: packages/react-ai-sdk/src/ui/utils/vercelAttachmentAdapter.ts
================================================
import { AttachmentAdapter } from "@assistant-ui/react";
import { generateId } from "@ai-sdk/ui-utils";

export const vercelAttachmentAdapter: AttachmentAdapter = {
  accept:
    "image/*, text/plain, text/html, text/markdown, text/csv, text/xml, text/json, text/css",
  async add({ file }) {
    return {
      id: generateId(),
      type: "file",
      name: file.name,
      file,
      contentType: file.type,
      content: [],
      status: { type: "requires-action", reason: "composer-send" },
    };
  },
  async send(attachment) {
    // noop
    return {
      ...attachment,
      status: { type: "complete" },
      content: [],
    };
  },
  async remove() {
    // noop
  },
};



================================================
File: packages/react-hook-form/README.md
================================================
# `@assistant-ui/react-hook-form`

React Hook Form integration for `@assistant-ui/react`.

Simply replace `useForm` with `useAssistantForm` to give the chatbot the ability to interact with your form.



================================================
File: packages/react-hook-form/CHANGELOG.md
================================================
# @assistant-ui/react-hook-form

## 0.7.10

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react@0.7.71

## 0.7.9

### Patch Changes

- 22272e6: chore: update dependencies
- Updated dependencies [0979334]
- Updated dependencies [22272e6]
  - @assistant-ui/react@0.7.39

## 0.7.8

### Patch Changes

- 345f3d5: chore: update dependencies
- Updated dependencies [345f3d5]
- Updated dependencies [345f3d5]
- Updated dependencies [2846559]
  - @assistant-ui/react@0.7.35

## 0.7.7

### Patch Changes

- 4c2bf58: chore: update dependencies
- Updated dependencies [9a3dc93]
- Updated dependencies [4c2bf58]
  - @assistant-ui/react@0.7.34

## 0.7.6

### Patch Changes

- 982a6a2: chore: update dependencies
- Updated dependencies [982a6a2]
  - @assistant-ui/react@0.7.30

## 0.7.5

### Patch Changes

- ec3b8cc: chore: update dependencies
- Updated dependencies [ec3b8cc]
  - @assistant-ui/react@0.7.19

## 0.7.4

### Patch Changes

- 4c54273: chore: update dependencies
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
  - @assistant-ui/react@0.7.12

## 0.7.3

### Patch Changes

- 2112ce8: chore: update dependencies
- Updated dependencies [589d37b]
- Updated dependencies [2112ce8]
  - @assistant-ui/react@0.7.8

## 0.7.2

### Patch Changes

- 933b8c0: chore: update deps
- Updated dependencies [933b8c0]
- Updated dependencies [09a2a38]
  - @assistant-ui/react@0.7.6

## 0.7.1

### Patch Changes

- c59d8b5: chore: update dependencies
- Updated dependencies [c59d8b5]
  - @assistant-ui/react@0.7.5

## 0.7.0

### Patch Changes

- Updated dependencies [c6e886b]
- Updated dependencies [2912fda]
  - @assistant-ui/react@0.7.0

## 0.4.15

### Patch Changes

- 1ada091: chore: update deps
- Updated dependencies [cdcfe1e]
- Updated dependencies [cdcfe1e]
- Updated dependencies [94feab2]
- Updated dependencies [472c548]
- Updated dependencies [14da684]
- Updated dependencies [1ada091]
  - @assistant-ui/react@0.5.99

## 0.4.14

### Patch Changes

- ff5b86c: chore: update deps
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
  - @assistant-ui/react@0.5.98

## 0.4.13

### Patch Changes

- d2375cd: build: disable bundling in UI package releases
- Updated dependencies [d2375cd]
  - @assistant-ui/react@0.5.93

## 0.4.12

### Patch Changes

- fb32e61: chore: update deps
- fb32e61: feat: react-19 support
- Updated dependencies [2090544]
- Updated dependencies [be04b5b]
- Updated dependencies [2090544]
- Updated dependencies [fb32e61]
- Updated dependencies [fb32e61]
  - @assistant-ui/react@0.5.90

## 0.4.11

### Patch Changes

- fb46305: chore: update dependencies
- Updated dependencies [fb46305]
- Updated dependencies [e225116]
- Updated dependencies [0ff22a7]
- Updated dependencies [378ee99]
- Updated dependencies [378ee99]
  - @assistant-ui/react@0.5.73

## 0.4.10

### Patch Changes

- 88957ac: feat: New unified Runtime API (part 1/n)
- Updated dependencies [88957ac]
- Updated dependencies [1a99132]
- Updated dependencies [3187013]
  - @assistant-ui/react@0.5.61

## 0.4.9

### Patch Changes

- 155d6e7: chore: update dependencies
- Updated dependencies [926dce5]
- Updated dependencies [155d6e7]
- Updated dependencies [f80226f]
  - @assistant-ui/react@0.5.60

## 0.4.8

### Patch Changes

- c348553: chore: update dependencies
- Updated dependencies [0f99aa6]
- Updated dependencies [c348553]
  - @assistant-ui/react@0.5.54

## 0.4.7

### Patch Changes

- 04f6fc8: chore: update deps
- Updated dependencies [04f6fc8]
  - @assistant-ui/react@0.5.50

## 0.4.6

### Patch Changes

- 554a423: chore: update deps
- Updated dependencies [554a423]
  - @assistant-ui/react@0.5.38

## 0.4.5

### Patch Changes

- 556001f: chore: update deps
- Updated dependencies [556001f]
- Updated dependencies [556001f]
  - @assistant-ui/react@0.5.29

## 0.4.4

### Patch Changes

- 134d39e: fix: undo moving internal utilities to /react/internal
- Updated dependencies [134d39e]
  - @assistant-ui/react@0.5.22

## 0.4.3

### Patch Changes

- 3cc67f2: refactor: move internal utilities to @assistant-ui/react/internal
- Updated dependencies [de04d92]
- Updated dependencies [3cc67f2]
  - @assistant-ui/react@0.5.20

## 0.4.2

### Patch Changes

- a216fbf: chore: update deps
- Updated dependencies [a216fbf]
  - @assistant-ui/react@0.5.9

## 0.4.1

### Patch Changes

- ee38c0c: feat: message status v2
- 2baa898: chore: v5
- Updated dependencies [ee38c0c]
- Updated dependencies [ee38c0c]
- Updated dependencies [2baa898]
  - @assistant-ui/react@0.5.1

## 0.3.2

### Patch Changes

- e220617: feat(runtimes/edge): client side API key, model name, model parameters specification
- Updated dependencies [bc77b4f]
- Updated dependencies [e220617]
  - @assistant-ui/react@0.4.6

## 0.3.1

### Patch Changes

- 998081b: fix: reduce specificity of built-in CSS styles
- Updated dependencies [998081b]
  - @assistant-ui/react@0.4.4

## 0.3.0

### Patch Changes

- Updated dependencies [e0e51cf]
- Updated dependencies [c7ba6a2]
- Updated dependencies [e0e51cf]
- Updated dependencies [e0e51cf]
- Updated dependencies [679cd54]
  - @assistant-ui/react@0.4.0

## 0.2.0

### Patch Changes

- Updated dependencies [3dd7384]
- Updated dependencies [23f474e]
- Updated dependencies [5b68f4a]
  - @assistant-ui/react@0.3.0

## 0.1.0

### Minor Changes

- 2ab2cab: feat!: experimental features are now marked as stable

### Patch Changes

- Updated dependencies [de20b1c]
- Updated dependencies [2ab2cab]
  - @assistant-ui/react@0.2.0

## 0.0.7

### Patch Changes

- 36f3a1f: chore: update dependencies
- Updated dependencies [36f3a1f]
- Updated dependencies [36f3a1f]
- Updated dependencies [36f3a1f]
  - @assistant-ui/react@0.1.7

## 0.0.6

### Patch Changes

- a6769d5: feat: ContentPartComponent types
- 86d4f7f: feat: add UseAssistantFormProps type
- Updated dependencies [a6769d5]
- Updated dependencies [52236ab]
  - @assistant-ui/react@0.1.6

## 0.0.4

### Patch Changes

- 671dc86: feat: Tool Render functions
- Updated dependencies [671dc86]
  - @assistant-ui/react@0.1.5

## 0.0.3

### Patch Changes

- 6e9528d: build: add changesets
- 6e9528d: feat: add useAssistantTool API
- Updated dependencies [6e9528d]
- Updated dependencies [6e9528d]
  - @assistant-ui/react@0.1.3



================================================
File: packages/react-hook-form/package.json
================================================
{
  "name": "@assistant-ui/react-hook-form",
  "version": "0.8.0",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts --sourcemap --clean"
  },
  "dependencies": {
    "zod": "^3.24.1"
  },
  "peerDependencies": {
    "@assistant-ui/react": "^0.8.5",
    "@types/react": "*",
    "react": "^18 || ^19 || ^19.0.0-rc",
    "react-hook-form": "^7"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/tsconfig": "workspace:*",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/react-hook-form/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-hook-form/src/formTools.tsx
================================================
import { z } from "zod";

export const formTools = {
  set_form_field: {
    description:
      "Sets a form field. Call this function as soon as the user provides the data for each field.",
    parameters: z.object({
      name: z.string(),
      value: z.string(),
    }),
  },
  submit_form: {
    description: "Submits the form. Confirm with user before submitting.",
    parameters: z.object({}),
  },
};



================================================
File: packages/react-hook-form/src/index.ts
================================================
export {
  useAssistantForm,
  type UseAssistantFormProps,
} from "./useAssistantForm";
export { formTools } from "./formTools";



================================================
File: packages/react-hook-form/src/useAssistantForm.tsx
================================================
"use client";

import {
  type ModelContext,
  type ToolCallContentPartComponent,
  useAssistantRuntime,
  useAssistantToolUI,
} from "@assistant-ui/react";
import { useEffect } from "react";
import {
  type FieldValues,
  type UseFormProps,
  type UseFormReturn,
  useForm,
} from "react-hook-form";
import type { z } from "zod";
import { formTools } from "./formTools";

export type UseAssistantFormProps<
  TFieldValues extends FieldValues,
  TContext,
> = UseFormProps<TFieldValues, TContext> & {
  assistant?:
    | {
        tools?:
          | {
              set_form_field?:
                | {
                    render?:
                      | ToolCallContentPartComponent<
                          z.infer<
                            (typeof formTools.set_form_field)["parameters"]
                          >,
                          unknown
                        >
                      | undefined;
                  }
                | undefined;
              submit_form?:
                | {
                    render?:
                      | ToolCallContentPartComponent<
                          z.infer<(typeof formTools.submit_form)["parameters"]>,
                          unknown
                        >
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
      }
    | undefined;
};

export const useAssistantForm = <
  TFieldValues extends FieldValues = FieldValues,
  TContext = any,
  TTransformedValues extends FieldValues | undefined = undefined,
>(
  props?: UseAssistantFormProps<TFieldValues, TContext>,
): UseFormReturn<TFieldValues, TContext, TTransformedValues> => {
  const form = useForm<TFieldValues, TContext, TTransformedValues>(props);
  const { control, getValues, setValue } = form;

  const assistantRuntime = useAssistantRuntime();
  useEffect(() => {
    const value: ModelContext = {
      system: `Form State:\n${JSON.stringify(getValues())}`,

      tools: {
        set_form_field: {
          ...formTools.set_form_field,
          execute: async (args) => {
            setValue(args.name, args.value);

            return { success: true };
          },
        },
        submit_form: {
          ...formTools.submit_form,
          execute: async () => {
            const { _names, _fields } = control;
            for (const name of _names.mount) {
              const field = _fields[name];
              if (field?._f && "refs" in field._f) {
                const fieldReference = Array.isArray(field._f.refs)
                  ? field._f.refs[0]
                  : field._f.ref;

                if (fieldReference instanceof HTMLElement) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.requestSubmit();

                    return { success: true };
                  }
                }
              }
            }

            return {
              success: false,
              message:
                "Unable retrieve the form element. This is a coding error.",
            };
          },
        },
      },
    };
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => value,
    });
  }, [control, setValue, getValues, assistantRuntime]);

  const renderFormFieldTool = props?.assistant?.tools?.set_form_field?.render;
  useAssistantToolUI(
    renderFormFieldTool
      ? {
          toolName: "set_form_field",
          render: renderFormFieldTool,
        }
      : null,
  );

  const renderSubmitFormTool = props?.assistant?.tools?.submit_form?.render;
  useAssistantToolUI(
    renderSubmitFormTool
      ? {
          toolName: "submit_form",
          render: renderSubmitFormTool,
        }
      : null,
  );

  return form;
};



================================================
File: packages/react-langgraph/README.md
================================================
# `@assistant-ui/react-langgraph`

LangGraph integration for `@assistant-ui/react`.



================================================
File: packages/react-langgraph/CHANGELOG.md
================================================
# @assistant-ui/react-langgraph

## 0.3.0

### Minor Changes

- a513099: chore: update langgraph package

### Patch Changes

- Updated dependencies
  - @assistant-ui/react@0.8.5

## 0.2.6

### Patch Changes

- feat: LangGraphMessageAccumulator

## 0.2.5

### Patch Changes

- a787c39: feat: LangGraph interrupt persistence support

## 0.2.4

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react@0.7.71

## 0.2.3

### Patch Changes

- 4f5d77f: feat: ToolCallContentPart.args should be JSONObject
- Updated dependencies [8ec1f07]
- Updated dependencies [4f5d77f]
- Updated dependencies [8ec1f07]
  - @assistant-ui/react@0.7.59

## 0.2.2

### Patch Changes

- fix: improved interrupt+Command support
- Updated dependencies
- Updated dependencies
- Updated dependencies [2713487]
  - @assistant-ui/react@0.7.46

## 0.2.1

### Patch Changes

- 177bcce: feat: interrupt state stream support
- Updated dependencies [9934aef]
- Updated dependencies [3a8b55a]
  - @assistant-ui/react@0.7.45

## 0.1.18

### Patch Changes

- 22272e6: chore: update dependencies
- Updated dependencies [0979334]
- Updated dependencies [22272e6]
  - @assistant-ui/react@0.7.39

## 0.1.17

### Patch Changes

- 9dfa127: refactor: rewrite message stream parser
- Updated dependencies [5794b1b]
  - @assistant-ui/react@0.7.38

## 0.1.16

### Patch Changes

- 345f3d5: chore: update dependencies
- Updated dependencies [345f3d5]
- Updated dependencies [345f3d5]
- Updated dependencies [2846559]
  - @assistant-ui/react@0.7.35

## 0.1.15

### Patch Changes

- feat: Feedback and Speech adapter support

## 0.1.14

### Patch Changes

- 4c2bf58: chore: update dependencies
- Updated dependencies [9a3dc93]
- Updated dependencies [4c2bf58]
  - @assistant-ui/react@0.7.34

## 0.1.13

### Patch Changes

- fix: missing type for abortSignal

## 0.1.12

### Patch Changes

- 982a6a2: chore: update dependencies
- Updated dependencies [982a6a2]
  - @assistant-ui/react@0.7.30

## 0.1.11

### Patch Changes

- 392188c: fix: wrong import path causing crash
- Updated dependencies [a8ac203]
  - @assistant-ui/react@0.7.28

## 0.1.10

### Patch Changes

- 18c21b2: feat: cancellation support
- Updated dependencies [528cfd3]
- Updated dependencies [3c70ea1]
  - @assistant-ui/react@0.7.27

## 0.1.9

### Patch Changes

- 738ef3c: feat: manually trigger langgraph sends via useLangGraphRuntimeSend
- 738ef3c: feat: support for Command
- 738ef3c: feat: interrupt+Command support via useLangGraphRuntimeSendCommand
- Updated dependencies [6a17ec2]
  - @assistant-ui/react@0.7.26

## 0.1.8

### Patch Changes

- ec3b8cc: chore: update dependencies
- Updated dependencies [ec3b8cc]
  - @assistant-ui/react@0.7.19

## 0.1.7

### Patch Changes

- 4c54273: chore: update dependencies
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
  - @assistant-ui/react@0.7.12

## 0.1.6

### Patch Changes

- 2112ce8: chore: update dependencies
- Updated dependencies [589d37b]
- Updated dependencies [2112ce8]
  - @assistant-ui/react@0.7.8

## 0.1.5

### Patch Changes

- 933b8c0: chore: update deps
- Updated dependencies [933b8c0]
- Updated dependencies [09a2a38]
  - @assistant-ui/react@0.7.6

## 0.1.4

### Patch Changes

- c59d8b5: chore: update dependencies
- Updated dependencies [c59d8b5]
  - @assistant-ui/react@0.7.5

## 0.1.3

### Patch Changes

- b63fff1: feat: pass a string instead of an array content for text-only messages
- Updated dependencies [5462390]
- Updated dependencies [0fb80c1]
  - @assistant-ui/react@0.7.4

## 0.1.2

### Patch Changes

- 147a8a2: fix: types for adapters
- Updated dependencies [0dcd9cf]
  - @assistant-ui/react@0.7.3

## 0.1.1

### Patch Changes

- ba3ea31: feat: AttachmentAdapter support

## 0.1.0

### Patch Changes

- Updated dependencies [c6e886b]
- Updated dependencies [2912fda]
  - @assistant-ui/react@0.7.0

## 0.0.25

### Patch Changes

- 1ada091: chore: update deps
- Updated dependencies [cdcfe1e]
- Updated dependencies [cdcfe1e]
- Updated dependencies [94feab2]
- Updated dependencies [472c548]
- Updated dependencies [14da684]
- Updated dependencies [1ada091]
  - @assistant-ui/react@0.5.99

## 0.0.24

### Patch Changes

- ff5b86c: chore: update deps
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
  - @assistant-ui/react@0.5.98

## 0.0.23

### Patch Changes

- d2375cd: build: disable bundling in UI package releases
- Updated dependencies [d2375cd]
  - @assistant-ui/react@0.5.93

## 0.0.22

### Patch Changes

- fb32e61: chore: update deps
- fb32e61: feat: react-19 support
- Updated dependencies [2090544]
- Updated dependencies [be04b5b]
- Updated dependencies [2090544]
- Updated dependencies [fb32e61]
- Updated dependencies [fb32e61]
  - @assistant-ui/react@0.5.90

## 0.0.21

### Patch Changes

- 359db5c: fix: hook dependency array inside useLangGraphMessages

## 0.0.20

### Patch Changes

- fix(langgraph): use correct image_url format

## 0.0.19

### Patch Changes

- feat(langgraph): image attachment support

## 0.0.18

### Patch Changes

- fix(langgraph): ignore tool_use content parts

## 0.0.17

### Patch Changes

- 851c10a: fix(langgraph): content part type check should output the content type

## 0.0.16

### Patch Changes

- ea90b84: fix(langgraph): allow complex content in ai messages
- Updated dependencies [0a3bd06]
  - @assistant-ui/react@0.5.77

## 0.0.15

### Patch Changes

- c3806f8: fix: do not export internal Runtime types
- Updated dependencies [c3806f8]
- Updated dependencies [899b963]
- Updated dependencies [899b963]
- Updated dependencies [899b963]
- Updated dependencies [8c80f2a]
- Updated dependencies [809c5c1]
  - @assistant-ui/react@0.5.76

## 0.0.14

### Patch Changes

- ce93e73: feat: handle MessageContentComplex types
- Updated dependencies [3d31f10]
- Updated dependencies [cf872da]
  - @assistant-ui/react@0.5.74

## 0.0.13

### Patch Changes

- fb46305: chore: update dependencies
- Updated dependencies [fb46305]
- Updated dependencies [e225116]
- Updated dependencies [0ff22a7]
- Updated dependencies [378ee99]
- Updated dependencies [378ee99]
  - @assistant-ui/react@0.5.73

## 0.0.12

### Patch Changes

- ff1f478: chore: update

## 0.0.11

### Patch Changes

- 0a8202e: fix: tool UI result can arrive before assistant message is marked as complete

## 0.0.10

### Patch Changes

- 51c5dff: fix: LangGraph python compatibility

## 0.0.9

### Patch Changes

- 88957ac: feat: New unified Runtime API (part 1/n)
- Updated dependencies [88957ac]
- Updated dependencies [1a99132]
- Updated dependencies [3187013]
  - @assistant-ui/react@0.5.61

## 0.0.8

### Patch Changes

- 155d6e7: chore: update dependencies
- Updated dependencies [926dce5]
- Updated dependencies [155d6e7]
- Updated dependencies [f80226f]
  - @assistant-ui/react@0.5.60

## 0.0.7

### Patch Changes

- e4863bb: feat(langgraph): add support for switching threads
- Updated dependencies [e4863bb]
- Updated dependencies [e4863bb]
  - @assistant-ui/react@0.5.56

## 0.0.6

### Patch Changes

- c348553: chore: update dependencies
- Updated dependencies [0f99aa6]
- Updated dependencies [c348553]
  - @assistant-ui/react@0.5.54

## 0.0.5

### Patch Changes

- 934758b: feat: automatically cancel tool calls if user sends a new message

## 0.0.4

### Patch Changes

- 184d836: feat: allow multiple message sends to support pending tool call cancellations

## 0.0.3

### Patch Changes

- c1c0440: refactor: rename to useLangGraphRuntime
- Updated dependencies [164e46c]
- Updated dependencies [5eccae7]
  - @assistant-ui/react@0.5.51

## 0.0.2

### Patch Changes

- 04f6fc8: chore: update deps
- Updated dependencies [04f6fc8]
  - @assistant-ui/react@0.5.50

## 0.0.1

### Patch Changes

- 5c1ca35: feat: initial release
- Updated dependencies [fb8e58f]
  - @assistant-ui/react@0.5.45



================================================
File: packages/react-langgraph/package.json
================================================
{
  "name": "@assistant-ui/react-langgraph",
  "version": "0.3.0",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts --sourcemap --clean"
  },
  "dependencies": {
    "uuid": "^11.0.5",
    "zod": "^3.24.1"
  },
  "peerDependencies": {
    "@assistant-ui/react": "^0.8.5",
    "@types/react": "*",
    "react": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/tsconfig": "workspace:*",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/react-langgraph/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-langgraph/src/LangGraphMessageAccumulator.ts
================================================
import { v4 as uuidv4 } from "uuid";

export type LangGraphMessagesEvent<TMessage> = {
  event:
    | "messages"
    | "messages/partial"
    | "messages/complete"
    | "metadata"
    | "updates"
    | string;
  data: TMessage[] | any;
};

export type LangGraphStateAccumulatorConfig<TMessage> = {
  initialMessages?: TMessage[];
  appendMessage?: (prev: TMessage | undefined, curr: TMessage) => TMessage;
};

export class LangGraphMessageAccumulator<TMessage extends { id?: string }> {
  private messagesMap = new Map<string, TMessage>();
  private appendMessage: (
    prev: TMessage | undefined,
    curr: TMessage,
  ) => TMessage;

  constructor({
    initialMessages = [],
    appendMessage = ((_: TMessage | undefined, curr: TMessage) => curr) as (
      prev: TMessage | undefined,
      curr: TMessage,
    ) => TMessage,
  }: LangGraphStateAccumulatorConfig<TMessage> = {}) {
    this.appendMessage = appendMessage;
    this.addMessages(initialMessages);
  }

  private ensureMessageId(message: TMessage): TMessage {
    return message.id ? message : { ...message, id: uuidv4() };
  }

  public addMessages(newMessages: TMessage[]) {
    if (newMessages.length === 0) return this.getMessages();

    for (const message of newMessages.map(this.ensureMessageId)) {
      const previous = message.id
        ? this.messagesMap.get(message.id)
        : undefined;
      this.messagesMap.set(
        message.id ?? uuidv4(),
        this.appendMessage(previous, message),
      );
    }
    return this.getMessages();
  }

  public getMessages(): TMessage[] {
    return [...this.messagesMap.values()];
  }

  public clear() {
    this.messagesMap.clear();
  }
}



================================================
File: packages/react-langgraph/src/appendLangChainChunk.ts
================================================
import { parsePartialJson } from "../../react/src/utils/json/parse-partial-json";
import { LangChainMessage, LangChainMessageChunk } from "./types";

export const appendLangChainChunk = (
  prev: LangChainMessage | undefined,
  curr: LangChainMessage | LangChainMessageChunk,
): LangChainMessage => {
  if (curr.type !== "AIMessageChunk") {
    return curr;
  }

  if (!prev || prev.type !== "ai") {
    return {
      ...curr,
      type: curr.type.replace("MessageChunk", "").toLowerCase(),
    } as LangChainMessage;
  }

  const newContent =
    typeof prev.content === "string"
      ? [{ type: "text" as const, text: prev.content }]
      : [...prev.content];

  for (const chunk of curr.content) {
    if (chunk.type === "text") {
      const existing = newContent[chunk.index] ?? { type: "text", text: "" };
      if (existing.type !== "text") throw new Error("");
      newContent[chunk.index] = {
        ...existing,
        ...chunk,
        text: existing.text + chunk.text,
      };
    }
  }

  const newToolCalls = [...(prev.tool_calls ?? [])];
  for (const chunk of curr.tool_call_chunks) {
    const existing = newToolCalls[chunk.index - 1] ?? { argsText: "" };
    const newArgsText = existing.argsText + chunk.args;
    newToolCalls[chunk.index - 1] = {
      ...chunk,
      ...existing,
      argsText: newArgsText,
      args: parsePartialJson(newArgsText),
    };
  }

  return {
    ...prev,
    content: newContent,
    tool_calls: newToolCalls,
  };
};



================================================
File: packages/react-langgraph/src/convertLangChainMessages.ts
================================================
"use client";

import { useExternalMessageConverter } from "@assistant-ui/react";
import { LangChainMessage } from "./types";
import { ToolCallContentPart } from "@assistant-ui/react";
import { ThreadUserMessage } from "@assistant-ui/react";

const contentToParts = (content: LangChainMessage["content"]) => {
  if (typeof content === "string")
    return [{ type: "text" as const, text: content }];
  return content
    .map((part): ThreadUserMessage["content"][number] | null => {
      const type = part.type;
      switch (type) {
        case "text":
          return { type: "text", text: part.text };
        case "image_url":
          if (typeof part.image_url === "string") {
            return { type: "image", image: part.image_url };
          } else {
            return {
              type: "image",
              image: part.image_url.url,
            };
          }

        case "tool_use":
          return null;
        default:
          const _exhaustiveCheck: never = type;
          throw new Error(`Unknown content part type: ${_exhaustiveCheck}`);
      }
    })
    .filter((a) => a !== null);
};

export const convertLangChainMessages: useExternalMessageConverter.Callback<
  LangChainMessage
> = (message) => {
  switch (message.type) {
    case "system":
      return {
        role: "system",
        id: message.id,
        content: [{ type: "text", text: message.content }],
      };
    case "human":
      return {
        role: "user",
        id: message.id,
        content: contentToParts(message.content),
      };
    case "ai":
      return {
        role: "assistant",
        id: message.id,
        content: [
          ...contentToParts(message.content),
          ...(message.tool_calls?.map(
            (chunk): ToolCallContentPart => ({
              type: "tool-call",
              toolCallId: chunk.id,
              toolName: chunk.name,
              args: chunk.args,
              argsText:
                message.tool_call_chunks?.find((c) => c.id === chunk.id)
                  ?.args ?? JSON.stringify(chunk.args),
            }),
          ) ?? []),
        ],
      };
    case "tool":
      return {
        role: "tool",
        toolName: message.name,
        toolCallId: message.tool_call_id,
        result: message.content,
      };
  }
};



================================================
File: packages/react-langgraph/src/index.ts
================================================
export {
  useLangGraphRuntime,
  useLangGraphSend,
  useLangGraphSendCommand,
  useLangGraphInterruptState,
} from "./useLangGraphRuntime";

export {
  useLangGraphMessages,
  type LangGraphInterruptState,
  type LangGraphCommand,
  type LangGraphSendMessageConfig,
  type LangGraphStreamCallback,
} from "./useLangGraphMessages";
export { convertLangChainMessages } from "./convertLangChainMessages";

/**
 * @deprecated Use `convertLangChainMessages` instead.
 */
export { convertLangChainMessages as convertLangchainMessages } from "./convertLangChainMessages";

export type {
  LangChainMessage,
  LangChainEvent,
  LangChainToolCall,
  LangChainToolCallChunk,
} from "./types";

export { LangGraphMessageAccumulator } from "./LangGraphMessageAccumulator";
export { appendLangChainChunk } from "./appendLangChainChunk";



================================================
File: packages/react-langgraph/src/types.ts
================================================
import { ReadonlyJSONObject } from "../../react/src/utils/json/json-value";

export type LangChainToolCallChunk = {
  index: number;
  id: string;
  name: string;
  args: string;
};

export type LangChainToolCall = {
  id: string;
  name: string;
  argsText: string;
  args: ReadonlyJSONObject;
};

type MessageContentText = {
  type: "text";
  text: string;
};

type MessageContentImageUrl = {
  type: "image_url";
  image_url: string | { url: string };
};

type MessageContentToolUse = {
  type: "tool_use";
};

type UserMessageContentComplex = MessageContentText | MessageContentImageUrl;
type AssistantMessageContentComplex =
  | MessageContentText
  | MessageContentToolUse;

type UserMessageContent = string | UserMessageContentComplex[];
type AssistantMessageContent = string | AssistantMessageContentComplex[];

export type LangChainMessage =
  | {
      id?: string;
      type: "system";
      content: string;
    }
  | {
      id?: string;
      type: "human";
      content: UserMessageContent;
    }
  | {
      id?: string;
      type: "tool";
      content: string;
      tool_call_id: string;
      name: string;
      artifact?: any;
    }
  | {
      id?: string;
      type: "ai";
      content: AssistantMessageContent;
      tool_call_chunks?: LangChainToolCallChunk[];
      tool_calls?: LangChainToolCall[];
    };

export type LangChainMessageChunk = {
  id: string;
  type: "AIMessageChunk";
  content: (AssistantMessageContentComplex & { index: number })[];
  tool_call_chunks: LangChainToolCallChunk[];
};

export type LangChainEvent = {
  event: "messages/partial" | "messages/complete";
  data: LangChainMessage[];
};



================================================
File: packages/react-langgraph/src/useLangGraphMessages.ts
================================================
import { useState, useCallback, useRef } from "react";
import { v4 as uuidv4 } from "uuid";
import { LangGraphMessageAccumulator } from "./LangGraphMessageAccumulator";

export type LangGraphCommand = {
  resume: string;
};

export type LangGraphSendMessageConfig = {
  command?: LangGraphCommand;
  runConfig?: unknown;
};

type LangGraphMessagesEvent<TMessage> = {
  event:
    | "messages"
    | "messages/partial"
    | "messages/complete"
    | "metadata"
    | "updates"
    | string;
  data: TMessage[] | any;
};
export type LangGraphStreamCallback<TMessage> = (
  messages: TMessage[],
  config: LangGraphSendMessageConfig & { abortSignal: AbortSignal },
) =>
  | Promise<AsyncGenerator<LangGraphMessagesEvent<TMessage>>>
  | AsyncGenerator<LangGraphMessagesEvent<TMessage>>;

export type LangGraphInterruptState = {
  value: any;
  resumable: boolean;
  when: string;
  ns?: string[];
};

const DEFAULT_APPEND_MESSAGE = <TMessage>(
  _: TMessage | undefined,
  curr: TMessage,
) => curr;

export const useLangGraphMessages = <TMessage extends { id?: string }>({
  stream,
  appendMessage = DEFAULT_APPEND_MESSAGE,
}: {
  stream: LangGraphStreamCallback<TMessage>;
  appendMessage?: (prev: TMessage | undefined, curr: TMessage) => TMessage;
}) => {
  const [interrupt, setInterrupt] = useState<
    LangGraphInterruptState | undefined
  >();
  const [messages, setMessages] = useState<TMessage[]>([]);
  const abortControllerRef = useRef<AbortController | null>(null);

  const sendMessage = useCallback(
    async (newMessages: TMessage[], config: LangGraphSendMessageConfig) => {
      // ensure all messages have an ID
      newMessages = newMessages.map((m) => (m.id ? m : { ...m, id: uuidv4() }));

      const accumulator = new LangGraphMessageAccumulator({
        initialMessages: messages,
        appendMessage,
      });
      setMessages(accumulator.addMessages(newMessages));

      const abortController = new AbortController();
      abortControllerRef.current = abortController;
      const response = await stream(newMessages, {
        ...config,
        abortSignal: abortController.signal,
      });

      for await (const chunk of response) {
        if (
          chunk.event === "messages/partial" ||
          chunk.event === "messages/complete"
        ) {
          setMessages(accumulator.addMessages(chunk.data));
        } else if (chunk.event === "updates") {
          setInterrupt(chunk.data.__interrupt__?.[0]);
        }
      }
    },
    [messages, stream, appendMessage],
  );

  const cancel = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
  }, [abortControllerRef]);

  return {
    interrupt,
    messages,
    sendMessage,
    cancel,
    setInterrupt,
    setMessages,
  };
};



================================================
File: packages/react-langgraph/src/useLangGraphRuntime.ts
================================================
import { useEffect, useRef, useState } from "react";
import { LangChainMessage, LangChainToolCall } from "./types";
import {
  useExternalMessageConverter,
  useExternalStoreRuntime,
  useThread,
  useThreadListItemRuntime,
} from "@assistant-ui/react";
import { convertLangChainMessages } from "./convertLangChainMessages";
import {
  LangGraphCommand,
  LangGraphInterruptState,
  LangGraphSendMessageConfig,
  LangGraphStreamCallback,
  useLangGraphMessages,
} from "./useLangGraphMessages";
import { SimpleImageAttachmentAdapter } from "@assistant-ui/react";
import { AttachmentAdapter } from "@assistant-ui/react";
import { AppendMessage } from "@assistant-ui/react";
import { ExternalStoreAdapter } from "@assistant-ui/react";
import { FeedbackAdapter } from "@assistant-ui/react";
import { SpeechSynthesisAdapter } from "@assistant-ui/react";
import { appendLangChainChunk } from "./appendLangChainChunk";

const getPendingToolCalls = (messages: LangChainMessage[]) => {
  const pendingToolCalls = new Map<string, LangChainToolCall>();
  for (const message of messages) {
    if (message.type === "ai") {
      for (const toolCall of message.tool_calls ?? []) {
        pendingToolCalls.set(toolCall.id, toolCall);
      }
    }
    if (message.type === "tool") {
      pendingToolCalls.delete(message.tool_call_id);
    }
  }

  return [...pendingToolCalls.values()];
};

const getMessageContent = (msg: AppendMessage) => {
  const allContent = [
    ...msg.content,
    ...msg.attachments.flatMap((a) => a.content),
  ];
  const content = allContent.map((part) => {
    const type = part.type;
    switch (type) {
      case "text":
        return { type: "text" as const, text: part.text };
      case "image":
        return { type: "image_url" as const, image_url: { url: part.image } };

      case "tool-call":
        throw new Error("Tool call appends are not supported.");

      default:
        const _exhaustiveCheck: "file" | "audio" = type;
        throw new Error(
          `Unsupported append content part type: ${_exhaustiveCheck}`,
        );
    }
  });

  if (content.length === 1 && content[0]?.type === "text") {
    return content[0].text ?? "";
  }

  return content;
};

const symbolLangGraphRuntimeExtras = Symbol("langgraph-runtime-extras");
type LangGraphRuntimeExtras = {
  [symbolLangGraphRuntimeExtras]: true;
  send: (
    messages: LangChainMessage[],
    config: LangGraphSendMessageConfig,
  ) => Promise<void>;
  interrupt: LangGraphInterruptState | undefined;
};

const asLangGraphRuntimeExtras = (extras: unknown): LangGraphRuntimeExtras => {
  if (
    typeof extras !== "object" ||
    extras == null ||
    !(symbolLangGraphRuntimeExtras in extras)
  )
    throw new Error(
      "This method can only be called when you are using useLangGraphRuntime",
    );

  return extras as LangGraphRuntimeExtras;
};

export const useLangGraphInterruptState = () => {
  const { interrupt } = useThread((t) => asLangGraphRuntimeExtras(t.extras));
  return interrupt;
};

export const useLangGraphSend = () => {
  const { send } = useThread((t) => asLangGraphRuntimeExtras(t.extras));
  return send;
};

export const useLangGraphSendCommand = () => {
  const send = useLangGraphSend();
  return (command: LangGraphCommand) => send([], { command });
};

export const useLangGraphRuntime = ({
  autoCancelPendingToolCalls,
  adapters: { attachments, feedback, speech } = {},
  unstable_allowImageAttachments,
  unstable_allowCancellation,
  stream,
  threadId,
  onSwitchToNewThread,
  onSwitchToThread,
}: {
  /**
   * @deprecated For thread management use `useCloudThreadListRuntime` instead. This option will be removed in a future version.
   */
  threadId?: string | undefined;
  autoCancelPendingToolCalls?: boolean | undefined;
  /**
   * @deprecated Use `adapters: { attachments: new SimpleImageAttachmentAdapter() }` instead. This option will be removed in a future version.
   */
  unstable_allowImageAttachments?: boolean | undefined;
  unstable_allowCancellation?: boolean | undefined;
  stream: LangGraphStreamCallback<LangChainMessage>;
  /**
   * @deprecated For thread management use `useCloudThreadListRuntime` instead. This option will be removed in a future version.
   */
  onSwitchToNewThread?: () => Promise<void> | void;
  onSwitchToThread?: (threadId: string) => Promise<{
    messages: LangChainMessage[];
    interrupts?: LangGraphInterruptState[];
  }>;
  adapters?:
    | {
        attachments?: AttachmentAdapter;
        speech?: SpeechSynthesisAdapter;
        feedback?: FeedbackAdapter;
      }
    | undefined;
}) => {
  const {
    interrupt,
    setInterrupt,
    messages,
    sendMessage,
    cancel,
    setMessages,
  } = useLangGraphMessages({
    appendMessage: appendLangChainChunk,
    stream,
  });

  const [isRunning, setIsRunning] = useState(false);
  const handleSendMessage = async (
    messages: LangChainMessage[],
    config: LangGraphSendMessageConfig,
  ) => {
    try {
      setIsRunning(true);
      await sendMessage(messages, config);
    } catch (error) {
      console.error("Error streaming messages:", error);
    } finally {
      setIsRunning(false);
    }
  };

  const threadMessages = useExternalMessageConverter({
    callback: convertLangChainMessages,
    messages,
    isRunning,
  });

  if (attachments && unstable_allowImageAttachments)
    throw new Error(
      "Replace unstable_allowImageAttachments with `adapters: { attachments: new SimpleImageAttachmentAdapter() }`.",
    );
  if (unstable_allowImageAttachments)
    attachments = new SimpleImageAttachmentAdapter();

  const switchToThread = !onSwitchToThread
    ? undefined
    : async (externalId: string) => {
        const { messages, interrupts } = await onSwitchToThread(externalId);
        setMessages(messages);
        setInterrupt(interrupts?.[0]);
      };

  const threadList: NonNullable<
    ExternalStoreAdapter["adapters"]
  >["threadList"] = {
    threadId,
    onSwitchToNewThread: !onSwitchToNewThread
      ? undefined
      : async () => {
          await onSwitchToNewThread();
          setMessages([]);
        },
    onSwitchToThread: switchToThread,
  };

  const loadingRef = useRef(false);
  const threadListItemRuntime = useThreadListItemRuntime({ optional: true });
  useEffect(() => {
    if (!threadListItemRuntime || !switchToThread || loadingRef.current) return;

    const externalId = threadListItemRuntime.getState().externalId;
    if (externalId) {
      loadingRef.current = true;
      switchToThread(externalId).finally(() => {
        loadingRef.current = false;
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return useExternalStoreRuntime({
    isRunning,
    messages: threadMessages,
    adapters: {
      attachments,
      feedback,
      speech,
      threadList,
    },
    extras: {
      [symbolLangGraphRuntimeExtras]: true,
      interrupt,
      send: handleSendMessage,
    } satisfies LangGraphRuntimeExtras,
    onNew: (msg) => {
      const cancellations =
        autoCancelPendingToolCalls !== false
          ? getPendingToolCalls(messages).map(
              (t) =>
                ({
                  type: "tool",
                  name: t.name,
                  tool_call_id: t.id,
                  content: JSON.stringify({ cancelled: true }),
                }) satisfies LangChainMessage & { type: "tool" },
            )
          : [];

      return handleSendMessage(
        [
          ...cancellations,
          {
            type: "human",
            content: getMessageContent(msg),
          },
        ],
        {
          runConfig: msg.runConfig,
        },
      );
    },
    onAddToolResult: async ({ toolCallId, toolName, result }) => {
      // TODO parallel human in the loop calls
      await handleSendMessage(
        [
          {
            type: "tool",
            name: toolName,
            tool_call_id: toolCallId,
            content: JSON.stringify(result),
          },
        ],
        // TODO reuse runconfig here!
        {},
      );
    },
    onCancel: unstable_allowCancellation
      ? async () => {
          cancel();
        }
      : undefined,
  });
};



================================================
File: packages/react-markdown/README.md
================================================
# `@assistant-ui/react-markdown`

`react-markdown` integration for `@assistant-ui/react`.



================================================
File: packages/react-markdown/CHANGELOG.md
================================================
# @assistant-ui/react-markdown

## 0.7.21

### Patch Changes

- 7df4eef: fix: code block memoization
- Updated dependencies [a36fd9e]
  - @assistant-ui/react@0.7.88

## 0.7.20

### Patch Changes

- 87fa024: fix: remove tailwind from peerdeps
- Updated dependencies [87fa024]
  - @assistant-ui/react@0.7.75

## 0.7.19

### Patch Changes

- df35010: feat: use aui-md and data-status for dot animation
- Updated dependencies [61f278b]
  - @assistant-ui/react@0.7.74

## 0.7.18

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react@0.7.71

## 0.7.17

### Patch Changes

- d35e72a: fix: missing "use client" directives

## 0.7.16

### Patch Changes

- 6703842: feat: codemod to migrate to @assistant-ui/react-ui
- Updated dependencies [6703842]
- Updated dependencies [79f7120]
  - @assistant-ui/react@0.7.64

## 0.7.15

### Patch Changes

- 7e5f127: fix: useSmooth unnecessary re-renders
- Updated dependencies [7e5f127]
  - @assistant-ui/react@0.7.62

## 0.7.14

### Patch Changes

- 4506653: feat: memoizeMarkdownComponents

## 0.7.13

### Patch Changes

- 90f6fee: fix: styles/dot.css import support

## 0.7.12

### Patch Changes

- 7345713: feat: add /styles/dot.css
- Updated dependencies [bd78a70]
- Updated dependencies [9ea8100]
  - @assistant-ui/react@0.7.61

## 0.7.11

### Patch Changes

- 22272e6: chore: update dependencies
- Updated dependencies [0979334]
- Updated dependencies [22272e6]
  - @assistant-ui/react@0.7.39

## 0.7.10

### Patch Changes

- 345f3d5: chore: update dependencies
- Updated dependencies [345f3d5]
- Updated dependencies [345f3d5]
- Updated dependencies [2846559]
  - @assistant-ui/react@0.7.35

## 0.7.9

### Patch Changes

- 4c2bf58: chore: update dependencies
- Updated dependencies [9a3dc93]
- Updated dependencies [4c2bf58]
  - @assistant-ui/react@0.7.34

## 0.7.8

### Patch Changes

- 982a6a2: chore: update dependencies
- Updated dependencies [982a6a2]
  - @assistant-ui/react@0.7.30

## 0.7.7

### Patch Changes

- ec3b8cc: chore: update dependencies
- Updated dependencies [ec3b8cc]
  - @assistant-ui/react@0.7.19

## 0.7.6

### Patch Changes

- ee77267: fix: react warning about unsupported prop
- 3214b18: fix: MarkdownText smooth prop not working
- Updated dependencies [1b16dce]
- Updated dependencies [b0f309a]
  - @assistant-ui/react@0.7.18

## 0.7.5

### Patch Changes

- 4c54273: chore: update dependencies
- 4c54273: refactor: rename components.by_language to componentsByLanguage for react 19 types compat
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
  - @assistant-ui/react@0.7.12

## 0.7.4

### Patch Changes

- 2276e57: fix: cjs builds
- Updated dependencies [2276e57]
- Updated dependencies [e8752ac]
  - @assistant-ui/react@0.7.9

## 0.7.3

### Patch Changes

- 2112ce8: chore: update dependencies
- Updated dependencies [589d37b]
- Updated dependencies [2112ce8]
  - @assistant-ui/react@0.7.8

## 0.7.2

### Patch Changes

- 933b8c0: chore: update deps
- Updated dependencies [933b8c0]
- Updated dependencies [09a2a38]
  - @assistant-ui/react@0.7.6

## 0.7.1

### Patch Changes

- c59d8b5: chore: update dependencies
- Updated dependencies [c59d8b5]
  - @assistant-ui/react@0.7.5

## 0.7.0

### Patch Changes

- Updated dependencies [c6e886b]
- Updated dependencies [2912fda]
  - @assistant-ui/react@0.7.0

## 0.2.27

### Patch Changes

- 1ada091: chore: update deps
- Updated dependencies [cdcfe1e]
- Updated dependencies [cdcfe1e]
- Updated dependencies [94feab2]
- Updated dependencies [472c548]
- Updated dependencies [14da684]
- Updated dependencies [1ada091]
  - @assistant-ui/react@0.5.99

## 0.2.26

### Patch Changes

- ff5b86c: build: refactor build script into @assistant-ui/tsbuildutils
- ff5b86c: fix: better ESM compatibility
- ff5b86c: chore: update deps
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
  - @assistant-ui/react@0.5.98

## 0.2.25

### Patch Changes

- fix: include generated css files in bundle
- Updated dependencies
  - @assistant-ui/react@0.5.95

## 0.2.24

### Patch Changes

- fix: correctly include types

## 0.2.23

### Patch Changes

- d2375cd: build: disable bundling in UI package releases
- Updated dependencies [d2375cd]
  - @assistant-ui/react@0.5.93

## 0.2.22

### Patch Changes

- feat: use separate classes for markdown elements, drop aui-md-root class

## 0.2.21

### Patch Changes

- 56f80fa: fix: tailwind plugin turbopack interop
- Updated dependencies [56f80fa]
  - @assistant-ui/react@0.5.91

## 0.2.20

### Patch Changes

- fb32e61: chore: update deps
- fb32e61: feat: react-19 support
- Updated dependencies [2090544]
- Updated dependencies [be04b5b]
- Updated dependencies [2090544]
- Updated dependencies [fb32e61]
- Updated dependencies [fb32e61]
  - @assistant-ui/react@0.5.90

## 0.2.19

### Patch Changes

- fb46305: chore: update dependencies
- Updated dependencies [fb46305]
- Updated dependencies [e225116]
- Updated dependencies [0ff22a7]
- Updated dependencies [378ee99]
- Updated dependencies [378ee99]
  - @assistant-ui/react@0.5.73

## 0.2.18

### Patch Changes

- d8bd40b: chore: update dependencies
- Updated dependencies [96b9d1f]
- Updated dependencies [9fd85da]
- Updated dependencies [d8bd40b]
- Updated dependencies [42156cf]
  - @assistant-ui/react@0.5.68

## 0.2.17

### Patch Changes

- 27208fb: fix: only include "use client" banner in ESM builds
- Updated dependencies [27208fb]
  - @assistant-ui/react@0.5.65

## 0.2.16

### Patch Changes

- ed24305: fix: add newline after "use client" for .js builds
- Updated dependencies [ed24305]
  - @assistant-ui/react@0.5.64

## 0.2.15

### Patch Changes

- c438773: feat: allow disabling ComposerInput keyboard shortcuts
- e1ae3d0: chore: update dependencies
- Updated dependencies [c438773]
- Updated dependencies [e1ae3d0]
  - @assistant-ui/react@0.5.63

## 0.2.14

### Patch Changes

- 155d6e7: chore: update dependencies
- Updated dependencies [926dce5]
- Updated dependencies [155d6e7]
- Updated dependencies [f80226f]
  - @assistant-ui/react@0.5.60

## 0.2.13

### Patch Changes

- c348553: chore: update dependencies
- Updated dependencies [0f99aa6]
- Updated dependencies [c348553]
  - @assistant-ui/react@0.5.54

## 0.2.12

### Patch Changes

- 04f6fc8: chore: update deps
- Updated dependencies [04f6fc8]
  - @assistant-ui/react@0.5.50

## 0.2.11

### Patch Changes

- 554a423: chore: update deps
- Updated dependencies [554a423]
  - @assistant-ui/react@0.5.38

## 0.2.10

### Patch Changes

- 556001f: chore: update deps
- Updated dependencies [556001f]
- Updated dependencies [556001f]
  - @assistant-ui/react@0.5.29

## 0.2.9

### Patch Changes

- 9a55735: chore: update deps
- Updated dependencies [915b5b7]
- Updated dependencies [9a55735]
  - @assistant-ui/react@0.5.28

## 0.2.8

### Patch Changes

- dbf1042: chore: update deps
- Updated dependencies [dbf1042]
- Updated dependencies [dbf1042]
  - @assistant-ui/react@0.5.27

## 0.2.7

### Patch Changes

- 134d39e: fix: undo moving internal utilities to /react/internal
- Updated dependencies [134d39e]
  - @assistant-ui/react@0.5.22

## 0.2.6

### Patch Changes

- de04d92: feat: loading status & smooth streaming interop
- 3cc67f2: refactor: move internal utilities to @assistant-ui/react/internal
- Updated dependencies [de04d92]
- Updated dependencies [3cc67f2]
  - @assistant-ui/react@0.5.20

## 0.2.5

### Patch Changes

- 5114a8f: feat: useIsMarkdownCodeBlock hook

## 0.2.4

### Patch Changes

- 6fdbf47: feat: by_language API
- 6fdbf47: fix: handle non-string code content

## 0.2.3

### Patch Changes

- a216fbf: chore: update deps
- Updated dependencies [a216fbf]
  - @assistant-ui/react@0.5.9

## 0.2.2

### Patch Changes

- 2d7a8bd: fix: markdown loading indicator
- Updated dependencies [2d7a8bd]
- Updated dependencies [2d7a8bd]
- Updated dependencies [2d7a8bd]
  - @assistant-ui/react@0.5.2

## 0.2.1

### Patch Changes

- ee38c0c: feat: message status v2
- 2baa898: chore: v5
- Updated dependencies [ee38c0c]
- Updated dependencies [ee38c0c]
- Updated dependencies [2baa898]
  - @assistant-ui/react@0.5.1

## 0.1.2

### Patch Changes

- 0bc5d9f: feat(markdown): usage without tailwindcss
- Updated dependencies [bc77b4f]
- Updated dependencies [e220617]
  - @assistant-ui/react@0.4.6

## 0.1.1

### Patch Changes

- 998081b: fix: reduce specificity of built-in CSS styles
- Updated dependencies [998081b]
  - @assistant-ui/react@0.4.4

## 0.1.0

### Patch Changes

- e0e51cf: feat: add styled UI components
- Updated dependencies [e0e51cf]
- Updated dependencies [c7ba6a2]
- Updated dependencies [e0e51cf]
- Updated dependencies [e0e51cf]
- Updated dependencies [679cd54]
  - @assistant-ui/react@0.4.0

## 0.0.5

### Patch Changes

- ef25706: feat: Code Header and Syntax Highlighter support
- Updated dependencies [ef25706]
  - @assistant-ui/react@0.3.5

## 0.0.4

### Patch Changes

- 1a8919b: feat: smooth text streaming
- Updated dependencies [1a8919b]
  - @assistant-ui/react@0.3.2

## 0.0.3

### Patch Changes

- export `MarkdownTextPrimitiveProps`

## 0.0.2

### Patch Changes

- Updated dependencies [3dd7384]
- Updated dependencies [23f474e]
- Updated dependencies [5b68f4a]
  - @assistant-ui/react@0.3.0

## 0.0.1

### Patch Changes

- Updated dependencies [de20b1c]
- Updated dependencies [2ab2cab]
  - @assistant-ui/react@0.2.0



================================================
File: packages/react-markdown/package.json
================================================
{
  "name": "@assistant-ui/react-markdown",
  "version": "0.8.0",
  "license": "MIT",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./styles/dot.css": {
      "default": "./styles/dot.css"
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "src",
    "styles",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "dependencies": {
    "@radix-ui/react-primitive": "^2.0.2",
    "@radix-ui/react-use-callback-ref": "^1.1.0",
    "@types/hast": "^3.0.4",
    "classnames": "^2.5.1",
    "react-markdown": "^9.0.3"
  },
  "peerDependencies": {
    "@assistant-ui/react": "^0.8.5",
    "@types/react": "*",
    "react": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/tsbuildutils": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22.13.1",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tsx": "^4.19.2"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/react-markdown/tsconfig.declarations.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "declarationDir": "./dist",
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "paths": null
  },
  "include": ["./src"]
}



================================================
File: packages/react-markdown/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-markdown/scripts/build.mts
================================================
import { Build } from "@assistant-ui/tsbuildutils";

await Build.start().transpileTypescript();



================================================
File: packages/react-markdown/src/index.ts
================================================
export {
  MarkdownTextPrimitive,
  type MarkdownTextPrimitiveProps,
} from "./primitives/MarkdownText";

export type {
  CodeHeaderProps,
  SyntaxHighlighterProps,
} from "./overrides/types";

export { useIsMarkdownCodeBlock } from "./overrides/PreOverride";
export { memoizeMarkdownComponents as unstable_memoizeMarkdownComponents } from "./memoization";



================================================
File: packages/react-markdown/src/memoization.tsx
================================================
import { Element } from "hast";
import { ComponentProps, ComponentType, ElementType, memo } from "react";
import { CodeHeaderProps, SyntaxHighlighterProps } from "./overrides/types";

type Components = {
  [Key in Extract<ElementType, string>]?: ComponentType<ComponentProps<Key>>;
} & {
  SyntaxHighlighter?:
    | ComponentType<Omit<SyntaxHighlighterProps, "node">>
    | undefined;
  CodeHeader?: ComponentType<Omit<CodeHeaderProps, "node">> | undefined;
};

const areChildrenEqual = (prev: string | unknown, next: string | unknown) => {
  if (typeof prev === "string") return prev === next;
  return JSON.stringify(prev) === JSON.stringify(next);
};

export const areNodesEqual = (
  prev: Element | undefined,
  next: Element | undefined,
) => {
  // TODO troubleshoot why this is triggering for code blocks
  if (!prev || !next) return false;
  const isEqual =
    JSON.stringify(prev?.properties) === JSON.stringify(next?.properties) &&
    areChildrenEqual(prev?.children, next?.children);
  return isEqual;
};

export const memoCompareNodes = (
  prev: { node?: Element | undefined },
  next: { node?: Element | undefined },
) => {
  return areNodesEqual(prev.node, next.node);
};

export const memoizeMarkdownComponents = (components: Components = {}) => {
  return Object.fromEntries(
    Object.entries(components ?? {}).map(([key, value]) => {
      if (!value) return [key, value];

      const Component = value as ComponentType;
      const WithoutNode = ({ node, ...props }: { node?: Element }) => {
        return <Component {...props} />;
      };
      return [key, memo(WithoutNode, memoCompareNodes)];
    }),
  );
};



================================================
File: packages/react-markdown/src/overrides/CodeBlock.tsx
================================================
import { ComponentType, FC, useMemo } from "react";

import {
  CodeComponent,
  CodeHeaderProps,
  PreComponent,
  SyntaxHighlighterProps,
} from "./types";
import { DefaultCodeBlockContent } from "./defaultComponents";
import { Element } from "hast";

export type CodeBlockProps = {
  node: Element | undefined;
  language: string;
  code: string;
  components: {
    Pre: PreComponent;
    Code: CodeComponent;
    CodeHeader: ComponentType<CodeHeaderProps>;
    SyntaxHighlighter: ComponentType<SyntaxHighlighterProps>;
  };
};

export const DefaultCodeBlock: FC<CodeBlockProps> = ({
  node,
  components: { Pre, Code, SyntaxHighlighter, CodeHeader },
  language,
  code,
}) => {
  const components = useMemo(() => ({ Pre, Code }), [Pre, Code]);

  const SH = !!language ? SyntaxHighlighter : DefaultCodeBlockContent;

  return (
    <>
      <CodeHeader node={node} language={language} code={code} />
      <SH
        node={node}
        components={components}
        language={language ?? "unknown"}
        code={code}
      />
    </>
  );
};



================================================
File: packages/react-markdown/src/overrides/CodeOverride.tsx
================================================
import {
  ComponentPropsWithoutRef,
  ComponentType,
  FC,
  memo,
  useContext,
} from "react";
import { PreContext, useIsMarkdownCodeBlock } from "./PreOverride";
import {
  CodeComponent,
  CodeHeaderProps,
  PreComponent,
  SyntaxHighlighterProps,
} from "./types";
import { DefaultCodeBlock } from "./CodeBlock";
import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { withDefaultProps } from "./withDefaults";
import { DefaultCodeBlockContent } from "./defaultComponents";
import { memoCompareNodes } from "../memoization";

const CodeBlockOverride: FC<CodeOverrideProps> = ({
  node,
  components: {
    Pre,
    Code,
    SyntaxHighlighter: FallbackSyntaxHighlighter,
    CodeHeader: FallbackCodeHeader,
  },
  componentsByLanguage = {},
  children,
  ...codeProps
}) => {
  const preProps = useContext(PreContext)!;
  const getPreProps = withDefaultProps<any>(preProps);
  const WrappedPre: PreComponent = useCallbackRef((props) => (
    <Pre {...getPreProps(props)} />
  ));

  const getCodeProps = withDefaultProps<any>(codeProps);
  const WrappedCode: CodeComponent = useCallbackRef((props) => (
    <Code {...getCodeProps(props)} />
  ));

  const language = /language-(\w+)/.exec(codeProps.className || "")?.[1] ?? "";

  // if the code content is not string (due to rehype plugins), return a default code block
  if (typeof children !== "string") {
    return (
      <DefaultCodeBlockContent
        node={node}
        components={{ Pre: WrappedPre, Code: WrappedCode }}
        code={children}
      />
    );
  }

  const SyntaxHighlighter: ComponentType<SyntaxHighlighterProps> =
    componentsByLanguage[language]?.SyntaxHighlighter ??
    FallbackSyntaxHighlighter;

  const CodeHeader: ComponentType<CodeHeaderProps> =
    componentsByLanguage[language]?.CodeHeader ?? FallbackCodeHeader;

  return (
    <DefaultCodeBlock
      node={node}
      components={{
        Pre: WrappedPre,
        Code: WrappedCode,
        SyntaxHighlighter,
        CodeHeader,
      }}
      language={language || "unknown"}
      code={children}
    />
  );
};

export type CodeOverrideProps = ComponentPropsWithoutRef<CodeComponent> & {
  components: {
    Pre: PreComponent;
    Code: CodeComponent;
    CodeHeader: ComponentType<CodeHeaderProps>;
    SyntaxHighlighter: ComponentType<SyntaxHighlighterProps>;
  };
  componentsByLanguage?:
    | Record<
        string,
        {
          CodeHeader?: ComponentType<CodeHeaderProps>;
          SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps>;
        }
      >
    | undefined;
};

const CodeOverrideImpl: FC<CodeOverrideProps> = ({
  node,
  components,
  componentsByLanguage,
  ...props
}) => {
  const isCodeBlock = useIsMarkdownCodeBlock();
  if (!isCodeBlock) return <components.Code {...props} />;
  return (
    <CodeBlockOverride
      node={node}
      components={components}
      componentsByLanguage={componentsByLanguage}
      {...props}
    />
  );
};

export const CodeOverride = memo(CodeOverrideImpl, (prev, next) => {
  const isEqual =
    prev.components === next.components &&
    prev.componentsByLanguage === next.componentsByLanguage &&
    memoCompareNodes(prev, next);
  return isEqual;
});



================================================
File: packages/react-markdown/src/overrides/PreOverride.tsx
================================================
"use client";

import {
  createContext,
  ComponentPropsWithoutRef,
  useContext,
  memo,
} from "react";
import { PreComponent } from "./types";
import { memoCompareNodes } from "../memoization";

export const PreContext = createContext<Omit<
  ComponentPropsWithoutRef<PreComponent>,
  "children"
> | null>(null);

export const useIsMarkdownCodeBlock = () => {
  return useContext(PreContext) !== null;
};

const PreOverrideImpl: PreComponent = ({ children, ...rest }) => {
  return <PreContext.Provider value={rest}>{children}</PreContext.Provider>;
};

export const PreOverride = memo(PreOverrideImpl, memoCompareNodes);



================================================
File: packages/react-markdown/src/overrides/defaultComponents.tsx
================================================
import type { ComponentType, ReactNode } from "react";
import { PreComponent, CodeComponent, CodeHeaderProps } from "./types";
import { Element } from "hast";

export const DefaultPre: PreComponent = ({ node, ...rest }) => (
  <pre {...rest} />
);

export const DefaultCode: CodeComponent = ({ node, ...rest }) => (
  <code {...rest} />
);

export const DefaultCodeBlockContent: ComponentType<{
  node: Element | undefined;
  components: { Pre: PreComponent; Code: CodeComponent };
  code: string | ReactNode | undefined;
}> = ({ node, components: { Pre, Code }, code }) => (
  <Pre>
    <Code node={node}>{code}</Code>
  </Pre>
);

export const DefaultCodeHeader: ComponentType<CodeHeaderProps> = () => null;



================================================
File: packages/react-markdown/src/overrides/types.ts
================================================
import { Element } from "hast";
import { ComponentPropsWithoutRef, ComponentType } from "react";

export type PreComponent = ComponentType<
  ComponentPropsWithoutRef<"pre"> & { node?: Element | undefined }
>;
export type CodeComponent = ComponentType<
  ComponentPropsWithoutRef<"code"> & { node?: Element | undefined }
>;

export type CodeHeaderProps = {
  node?: Element | undefined;
  language: string | undefined;
  code: string;
};

export type SyntaxHighlighterProps = {
  node?: Element | undefined;
  components: {
    Pre: PreComponent;
    Code: CodeComponent;
  };
  language: string;
  code: string;
};



================================================
File: packages/react-markdown/src/overrides/withDefaults.tsx
================================================
import classNames from "classnames";

export const withDefaultProps =
  <TProps extends { className?: string | undefined }>({
    className,
    ...defaultProps
  }: Partial<TProps>) =>
  ({ className: classNameProp, ...props }: TProps) => {
    return {
      className: classNames(className, classNameProp),
      ...defaultProps,
      ...props,
    } as TProps;
  };



================================================
File: packages/react-markdown/src/primitives/MarkdownText.tsx
================================================
"use client";

import { INTERNAL, useContentPartText } from "@assistant-ui/react";
import {
  ComponentRef,
  ElementType,
  FC,
  forwardRef,
  ForwardRefExoticComponent,
  RefAttributes,
  useMemo,
  type ComponentPropsWithoutRef,
  type ComponentType,
} from "react";
import ReactMarkdown, { type Options } from "react-markdown";
import { SyntaxHighlighterProps, CodeHeaderProps } from "../overrides/types";
import { PreOverride } from "../overrides/PreOverride";
import {
  DefaultPre,
  DefaultCode,
  DefaultCodeBlockContent,
  DefaultCodeHeader,
} from "../overrides/defaultComponents";
import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { CodeOverride } from "../overrides/CodeOverride";
import { Primitive } from "@radix-ui/react-primitive";
import classNames from "classnames";

const { useSmooth, useSmoothStatus, withSmoothContextProvider } = INTERNAL;

type MarkdownTextPrimitiveElement = ComponentRef<typeof Primitive.div>;
type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;

export type MarkdownTextPrimitiveProps = Omit<
  Options,
  "components" | "children"
> & {
  containerProps?: Omit<PrimitiveDivProps, "children" | "asChild"> | undefined;
  containerComponent?: ElementType | undefined;
  components?:
    | (NonNullable<Options["components"]> & {
        SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;
        CodeHeader?: ComponentType<CodeHeaderProps> | undefined;
        /**
         * @deprecated Use `componentsByLanguage` instead of `components.by_language`. This will be removed in the next major version.
         **/
        by_language?: undefined;
      })
    | undefined;
  componentsByLanguage?:
    | Record<
        string,
        {
          CodeHeader?: ComponentType<CodeHeaderProps> | undefined;
          SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;
        }
      >
    | undefined;
  smooth?: boolean | undefined;
};

const MarkdownTextInner: FC<MarkdownTextPrimitiveProps> = ({
  components: userComponents,
  componentsByLanguage = userComponents?.by_language,
  smooth = true,
  ...rest
}) => {
  const { text } = useSmooth(useContentPartText(), smooth);

  const {
    pre = DefaultPre,
    code = DefaultCode,
    SyntaxHighlighter = DefaultCodeBlockContent,
    CodeHeader = DefaultCodeHeader,
  } = userComponents ?? {};
  const useCodeOverrideComponents = useMemo(() => {
    return {
      Pre: pre,
      Code: code,
      SyntaxHighlighter,
      CodeHeader,
    };
  }, [pre, code, SyntaxHighlighter, CodeHeader]);
  const CodeComponent = useCallbackRef((props) => (
    <CodeOverride
      components={useCodeOverrideComponents}
      componentsByLanguage={componentsByLanguage}
      {...props}
    />
  ));

  const components: Options["components"] = useMemo(() => {
    const {
      pre = DefaultPre,
      code = DefaultCode,
      SyntaxHighlighter = DefaultCodeBlockContent,
      CodeHeader = DefaultCodeHeader,
      by_language,
      ...componentsRest
    } = userComponents ?? {};
    return {
      ...componentsRest,
      pre: PreOverride,
      code: CodeComponent,
    };
  }, [CodeComponent, userComponents]);

  return (
    <ReactMarkdown components={components} {...rest}>
      {text}
    </ReactMarkdown>
  );
};

const MarkdownTextPrimitiveImpl: ForwardRefExoticComponent<MarkdownTextPrimitiveProps> &
  RefAttributes<MarkdownTextPrimitiveElement> = forwardRef<
  MarkdownTextPrimitiveElement,
  MarkdownTextPrimitiveProps
>(
  (
    {
      className,
      containerProps,
      containerComponent: Container = "div",
      ...rest
    },
    forwardedRef,
  ) => {
    const status = useSmoothStatus();
    return (
      <Container
        data-status={status.type}
        {...containerProps}
        className={classNames(className, containerProps?.className)}
        ref={forwardedRef}
      >
        <MarkdownTextInner {...rest}></MarkdownTextInner>
      </Container>
    );
  },
);

MarkdownTextPrimitiveImpl.displayName = "MarkdownTextPrimitive";

export const MarkdownTextPrimitive = withSmoothContextProvider(
  MarkdownTextPrimitiveImpl,
);



================================================
File: packages/react-markdown/styles/dot.css
================================================
@keyframes aui-pulse {
  50% {
    opacity: 0.5;
  }
}

:where(.aui-md[data-status="running"]):empty::after,
:where(.aui-md[data-status="running"])
  > :where(:not(ol):not(ul):not(pre)):last-child::after,
:where(.aui-md[data-status="running"]) > pre:last-child code::after,
:where(.aui-md[data-status="running"])
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child:not(:has(* > li)))::after,
:where(.aui-md[data-status="running"])
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child:not(:has(* > li)))::after,
:where(.aui-md[data-status="running"])
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)::after {
  animation: aui-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  --aui-content: "\25cf";
  content: var(--aui-content);
  margin-left: 0.25rem;
  margin-right: 0.25rem;
}



================================================
File: packages/react-syntax-highlighter/README.md
================================================
# `@assistant-ui/react-syntax-highlighter`

`react-syntax-highlighter` integration for `@assistant-ui/react`.



================================================
File: packages/react-syntax-highlighter/CHANGELOG.md
================================================
# @assistant-ui/react-syntax-highlighter

## 0.7.10

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react-markdown@0.7.18
  - @assistant-ui/react@0.7.71

## 0.7.9

### Patch Changes

- 22272e6: chore: update dependencies
- Updated dependencies [0979334]
- Updated dependencies [22272e6]
  - @assistant-ui/react@0.7.39
  - @assistant-ui/react-markdown@0.7.11

## 0.7.8

### Patch Changes

- 345f3d5: chore: update dependencies
- Updated dependencies [345f3d5]
- Updated dependencies [345f3d5]
- Updated dependencies [2846559]
  - @assistant-ui/react-markdown@0.7.10
  - @assistant-ui/react@0.7.35

## 0.7.7

### Patch Changes

- 4c2bf58: chore: update dependencies
- Updated dependencies [9a3dc93]
- Updated dependencies [4c2bf58]
  - @assistant-ui/react@0.7.34
  - @assistant-ui/react-markdown@0.7.9

## 0.7.6

### Patch Changes

- 982a6a2: chore: update dependencies
- Updated dependencies [982a6a2]
  - @assistant-ui/react-markdown@0.7.8
  - @assistant-ui/react@0.7.30

## 0.7.5

### Patch Changes

- ec3b8cc: chore: update dependencies
- Updated dependencies [ec3b8cc]
  - @assistant-ui/react-markdown@0.7.7
  - @assistant-ui/react@0.7.19

## 0.7.4

### Patch Changes

- 4c54273: chore: update dependencies
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
- Updated dependencies [4c54273]
  - @assistant-ui/react-markdown@0.7.5
  - @assistant-ui/react@0.7.12

## 0.7.3

### Patch Changes

- 2112ce8: chore: update dependencies
- Updated dependencies [589d37b]
- Updated dependencies [2112ce8]
  - @assistant-ui/react@0.7.8
  - @assistant-ui/react-markdown@0.7.3

## 0.7.2

### Patch Changes

- 933b8c0: chore: update deps
- Updated dependencies [933b8c0]
- Updated dependencies [09a2a38]
  - @assistant-ui/react-markdown@0.7.2
  - @assistant-ui/react@0.7.6

## 0.7.1

### Patch Changes

- c59d8b5: chore: update dependencies
- Updated dependencies [c59d8b5]
  - @assistant-ui/react-markdown@0.7.1
  - @assistant-ui/react@0.7.5

## 0.7.0

### Patch Changes

- Updated dependencies [c6e886b]
- Updated dependencies [2912fda]
  - @assistant-ui/react@0.7.0
  - @assistant-ui/react-markdown@0.7.0

## 0.0.18

### Patch Changes

- 1ada091: chore: update deps
- Updated dependencies [cdcfe1e]
- Updated dependencies [cdcfe1e]
- Updated dependencies [94feab2]
- Updated dependencies [472c548]
- Updated dependencies [14da684]
- Updated dependencies [1ada091]
  - @assistant-ui/react@0.5.99
  - @assistant-ui/react-markdown@0.2.27

## 0.0.17

### Patch Changes

- ff5b86c: chore: update deps
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
- Updated dependencies [ff5b86c]
  - @assistant-ui/react-markdown@0.2.26
  - @assistant-ui/react@0.5.98

## 0.0.16

### Patch Changes

- d2375cd: build: disable bundling in UI package releases
- Updated dependencies [d2375cd]
  - @assistant-ui/react-markdown@0.2.23
  - @assistant-ui/react@0.5.93

## 0.0.15

### Patch Changes

- fb32e61: chore: update deps
- Updated dependencies [2090544]
- Updated dependencies [be04b5b]
- Updated dependencies [2090544]
- Updated dependencies [fb32e61]
- Updated dependencies [fb32e61]
  - @assistant-ui/react@0.5.90
  - @assistant-ui/react-markdown@0.2.20

## 0.0.14

### Patch Changes

- fb46305: chore: update dependencies
- Updated dependencies [fb46305]
- Updated dependencies [e225116]
- Updated dependencies [0ff22a7]
- Updated dependencies [378ee99]
- Updated dependencies [378ee99]
  - @assistant-ui/react-markdown@0.2.19
  - @assistant-ui/react@0.5.73

## 0.0.13

### Patch Changes

- 155d6e7: chore: update dependencies
- Updated dependencies [926dce5]
- Updated dependencies [155d6e7]
- Updated dependencies [f80226f]
  - @assistant-ui/react@0.5.60
  - @assistant-ui/react-markdown@0.2.14

## 0.0.12

### Patch Changes

- c348553: chore: update dependencies
- Updated dependencies [0f99aa6]
- Updated dependencies [c348553]
  - @assistant-ui/react@0.5.54
  - @assistant-ui/react-markdown@0.2.13

## 0.0.11

### Patch Changes

- 04f6fc8: chore: update deps
- Updated dependencies [04f6fc8]
  - @assistant-ui/react-markdown@0.2.12
  - @assistant-ui/react@0.5.50

## 0.0.10

### Patch Changes

- 554a423: chore: update deps
- Updated dependencies [554a423]
  - @assistant-ui/react-markdown@0.2.11
  - @assistant-ui/react@0.5.38

## 0.0.9

### Patch Changes

- 556001f: chore: update deps
- Updated dependencies [556001f]
- Updated dependencies [556001f]
  - @assistant-ui/react-markdown@0.2.10
  - @assistant-ui/react@0.5.29

## 0.0.8

### Patch Changes

- 134d39e: fix: undo moving internal utilities to /react/internal
- Updated dependencies [134d39e]
  - @assistant-ui/react-markdown@0.2.7
  - @assistant-ui/react@0.5.22

## 0.0.7

### Patch Changes

- 3cc67f2: refactor: move internal utilities to @assistant-ui/react/internal
- Updated dependencies [de04d92]
- Updated dependencies [3cc67f2]
  - @assistant-ui/react-markdown@0.2.6
  - @assistant-ui/react@0.5.20

## 0.0.6

### Patch Changes

- a216fbf: chore: update deps
- Updated dependencies [a216fbf]
  - @assistant-ui/react-markdown@0.2.3
  - @assistant-ui/react@0.5.9

## 0.0.5

### Patch Changes

- 2baa898: chore: v5
- Updated dependencies [ee38c0c]
- Updated dependencies [ee38c0c]
- Updated dependencies [2baa898]
  - @assistant-ui/react-markdown@0.2.1
  - @assistant-ui/react@0.5.1

## 0.0.3

### Patch Changes

- Updated dependencies [e0e51cf]
- Updated dependencies [c7ba6a2]
- Updated dependencies [e0e51cf]
- Updated dependencies [e0e51cf]
- Updated dependencies [679cd54]
  - @assistant-ui/react@0.4.0
  - @assistant-ui/react-markdown@1.0.0

## 0.0.2

### Patch Changes

- Updated dependencies [ef25706]
  - @assistant-ui/react-markdown@0.0.5
  - @assistant-ui/react@0.3.5



================================================
File: packages/react-syntax-highlighter/package.json
================================================
{
  "name": "@assistant-ui/react-syntax-highlighter",
  "version": "0.8.0",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts --sourcemap --clean"
  },
  "peerDependencies": {
    "@assistant-ui/react": "^0.8.5",
    "@assistant-ui/react-markdown": "^0.8.0",
    "@types/react": "*",
    "@types/react-syntax-highlighter": "*",
    "react": "^18 || ^19 || ^19.0.0-rc",
    "react-syntax-highlighter": "^15.5.0"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@types/react-syntax-highlighter": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/tsconfig": "workspace:*",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/react-syntax-highlighter/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-syntax-highlighter/src/index.ts
================================================
export {
  makeSyntaxHighlighter,
  makeLightSyntaxHighlighter,
  makeLightAsyncSyntaxHighlighter,
  makePrismSyntaxHighlighter,
  makePrismLightSyntaxHighlighter,
  makePrismAsyncSyntaxHighlighter,
  makePrismAsyncLightSyntaxHighlighter,
} from "./react-syntax-highlighter";



================================================
File: packages/react-syntax-highlighter/src/react-syntax-highlighter.tsx
================================================
"use client";

import { ComponentType, type FC } from "react";
import SyntaxHighlighter, {
  Prism,
  PrismAsync,
  PrismAsyncLight,
  PrismLight,
  Light,
  LightAsync,
  SyntaxHighlighterProps as SHP,
} from "react-syntax-highlighter";
import type { SyntaxHighlighterProps } from "@assistant-ui/react-markdown";

const makeMakeSyntaxHighlighter =
  (SyntaxHighlighter: ComponentType<SHP>) =>
  (config: Omit<SHP, "language" | "children">) => {
    const PrismSyntaxHighlighter: FC<SyntaxHighlighterProps> = ({
      components: { Pre, Code },
      language,
      code,
    }) => {
      return (
        <SyntaxHighlighter
          PreTag={Pre}
          CodeTag={Code}
          {...config}
          language={language}
        >
          {code}
        </SyntaxHighlighter>
      );
    };

    PrismSyntaxHighlighter.displayName = "PrismSyntaxHighlighter";

    return PrismSyntaxHighlighter;
  };

export const makeSyntaxHighlighter =
  makeMakeSyntaxHighlighter(SyntaxHighlighter);

export const makePrismSyntaxHighlighter = makeMakeSyntaxHighlighter(Prism);

export const makePrismAsyncSyntaxHighlighter =
  makeMakeSyntaxHighlighter(PrismAsync);

export const makePrismAsyncLightSyntaxHighlighter =
  makeMakeSyntaxHighlighter(PrismAsyncLight);

export const makePrismLightSyntaxHighlighter =
  makeMakeSyntaxHighlighter(PrismLight);

export const makeLightSyntaxHighlighter = makeMakeSyntaxHighlighter(Light);

export const makeLightAsyncSyntaxHighlighter =
  makeMakeSyntaxHighlighter(LightAsync);



================================================
File: packages/react-ui/CHANGELOG.md
================================================
# @assistant-ui/react-ui

## Patch Changes

- 7df4eef: fix: import in code headers

## 0.1.7

### Patch Changes

- 87fa024: fix: remove tailwind from peerdeps
- Updated dependencies [87fa024]
  - @assistant-ui/react-markdown@0.7.20
  - @assistant-ui/react@0.7.75

## 0.1.6

### Patch Changes

- 72e66db: chore: update dependencies
- Updated dependencies [72e66db]
  - @assistant-ui/react-markdown@0.7.18
  - @assistant-ui/react@0.7.71

## 0.1.5

### Patch Changes

- d35e72a: fix: missing "use client" directives
- Updated dependencies [d35e72a]
  - @assistant-ui/react-markdown@0.7.17

## 0.1.4

### Patch Changes

- d37ec8e: fix: move aui to peer deps

## 0.1.3

### Patch Changes

- Updated dependencies [ddf468e]
  - @assistant-ui/react@0.7.67
  - @assistant-ui/react-markdown@0.7.16

## 0.1.2

### Patch Changes

- Updated dependencies [f4d71da]
- Updated dependencies [16cd124]
  - @assistant-ui/react@0.7.66
  - @assistant-ui/react-markdown@0.7.16

## 0.1.1

### Patch Changes

- Updated dependencies [a07d8c1]
  - @assistant-ui/react@0.7.65
  - @assistant-ui/react-markdown@0.7.16

## 0.0.7

### Patch Changes

- Updated dependencies [6703842]
- Updated dependencies [79f7120]
  - @assistant-ui/react@0.7.64
  - @assistant-ui/react-markdown@0.7.16

## 0.0.6

### Patch Changes

- Updated dependencies [843047d]
  - @assistant-ui/react@0.7.63
  - @assistant-ui/react-markdown@0.7.15

## 0.0.5

### Patch Changes

- 7e5f127: fix: useSmooth unnecessary re-renders
- Updated dependencies [7e5f127]
  - @assistant-ui/react-markdown@0.7.15
  - @assistant-ui/react@0.7.62

## 0.0.4

### Patch Changes

- Updated dependencies [4506653]
  - @assistant-ui/react-markdown@0.7.14

## 0.0.3

### Patch Changes

- Updated dependencies [90f6fee]
  - @assistant-ui/react-markdown@0.7.13

## 0.0.2

### Patch Changes

- bd78a70: feat: Markdown styles
- Updated dependencies [7345713]
- Updated dependencies [bd78a70]
- Updated dependencies [9ea8100]
  - @assistant-ui/react-markdown@0.7.12
  - @assistant-ui/react@0.7.61

## 0.0.1

### Patch Changes

- Updated dependencies [246ce4e]
  - @assistant-ui/react@0.7.60



================================================
File: packages/react-ui/package.json
================================================
{
  "name": "@assistant-ui/react-ui",
  "description": "Pre-styled React components for @assistant-ui/react",
  "version": "0.1.8",
  "license": "MIT",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./tailwindcss": {
      "types": "./dist/tailwindcss/index.d.ts",
      "import": "./dist/tailwindcss/index.mjs",
      "require": "./dist/tailwindcss/index.js"
    },
    "./styles/*": {
      "default": "./dist/styles/*"
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "tailwindcss",
    "src",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-primitive": "^2.0.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "classnames": "^2.5.1",
    "lucide-react": "^0.475.0",
    "zustand": "^5.0.3"
  },
  "peerDependencies": {
    "@assistant-ui/react": "*",
    "@assistant-ui/react-markdown": "*",
    "@types/react": "*",
    "@types/react-dom": "*",
    "react": "^18 || ^19 || ^19.0.0-rc",
    "react-dom": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@types/react-dom": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/react": "workspace:^",
    "@assistant-ui/react-markdown": "workspace:^",
    "@assistant-ui/tailwindcss-transformer": "workspace:*",
    "@assistant-ui/tsbuildutils": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22.13.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.2"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "https://github.com/assistant-ui/assistant-ui/tree/main/packages/react-ui"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  },
  "engines": {
    "node": ">=20.10.0"
  }
}



================================================
File: packages/react-ui/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
    "postcss-nested": {},
    "@assistant-ui/tailwindcss-transformer": {},
  },
};

export default config;



================================================
File: packages/react-ui/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";
import auiPlugin from "./src/tailwindcss";
import animatePlugin from "tailwindcss-animate";

const config = {
  content: ["./src/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"],
  corePlugins: {
    backgroundOpacity: false,
    touchAction: false,
    scrollSnapType: false,
    gradientColorStops: false,
    fontVariantNumeric: false,
    ringOffsetWidth: false,
    ringOffsetColor: false,
    ringOpacity: false,
    boxShadowColor: false,
    blur: false,
    brightness: false,
    contrast: false,
    grayscale: false,
    hueRotate: false,
    invert: false,
    saturate: false,
    sepia: false,
    dropShadow: false,
    backdropBlur: false,
    backdropBrightness: false,
    backdropContrast: false,
    backdropGrayscale: false,
    backdropHueRotate: false,
    backdropInvert: false,
    backdropOpacity: false,
    backdropSaturate: false,
    backdropSepia: false,
    container: false,
  },
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      borderRadius: {
        lg: "var(--aui-radius)",
        md: "calc(var(--aui-radius) - 2px)",
        sm: "calc(var(--aui-radius) - 4px)",
      },
    },
  },
  plugins: [animatePlugin, auiPlugin({ components: [] })],
} satisfies Config;

export default config;



================================================
File: packages/react-ui/tsconfig.declarations.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "declarationDir": "./dist",
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "paths": null
  },
  "include": ["src"]
}



================================================
File: packages/react-ui/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/react-ui/scripts/build.mts
================================================
import { Build } from "@assistant-ui/tsbuildutils";

await Build.start()
  .transpileCSS({
    tailwindEntrypoints: [
      "src/styles/tailwindcss/base-components.css",
      "src/styles/tailwindcss/modal.css",
      "src/styles/tailwindcss/thread.css",
      "src/styles/tailwindcss/markdown.css",
      "src/styles/themes/default.css",
      "src/styles/themes/shadcn-extras.css",
    ],
    cssEntrypoints: ["src/styles/index.css", "src/styles/modal.css"],
  })
  .transpileTypescript();



================================================
File: packages/react-ui/src/index.ts
================================================
export * from "./ui";



================================================
File: packages/react-ui/src/styles/base.css
================================================
:where(.aui-root) {
  @tailwind base;
}

@keyframes aui-enter {
  from {
    opacity: var(--tw-enter-opacity, 1);
    transform: translate3d(
        var(--tw-enter-translate-x, 0),
        var(--tw-enter-translate-y, 0),
        0
      )
      scale3d(
        var(--tw-enter-scale, 1),
        var(--tw-enter-scale, 1),
        var(--tw-enter-scale, 1)
      )
      rotate(var(--tw-enter-rotate, 0));
  }
}

@keyframes aui-exit {
  to {
    opacity: var(--tw-exit-opacity, 1);
    transform: translate3d(
        var(--tw-exit-translate-x, 0),
        var(--tw-exit-translate-y, 0),
        0
      )
      scale3d(
        var(--tw-exit-scale, 1),
        var(--tw-exit-scale, 1),
        var(--tw-exit-scale, 1)
      )
      rotate(var(--tw-exit-rotate, 0));
  }
}



================================================
File: packages/react-ui/src/styles/index.css
================================================
@import "./base.css";
@import "./tailwindcss/base-components.css";
@import "./tailwindcss/thread.css";
@import "./themes/default.css";



================================================
File: packages/react-ui/src/styles/modal.css
================================================
@import "./tailwindcss/modal.css";



================================================
File: packages/react-ui/src/styles/tailwindcss/base-components.css
================================================
.aui-root {
  @apply text-aui-foreground;
}

.aui-root * {
  @apply border-aui-border;
}

/* shadcn-ui/button */
.aui-button {
  @apply focus-visible:ring-aui-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0;
}

.aui-button-primary {
  @apply bg-aui-primary text-aui-primary-foreground hover:bg-aui-primary/90 shadow;
}

.aui-button-outline {
  @apply border-aui-input bg-aui-background hover:bg-aui-accent hover:text-aui-accent-foreground border shadow-sm;
}

.aui-button-ghost {
  @apply hover:bg-aui-accent hover:text-aui-accent-foreground;
}

.aui-button-medium {
  @apply h-9 px-4 py-2;
}

/** tooltip icon button */
.aui-button-icon {
  @apply size-6 p-1;
}

.aui-sr-only {
  @apply sr-only;
}

/* shadcn-ui/avatar */

.aui-avatar-root {
  @apply relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full;
}

.aui-avatar-image {
  @apply aspect-square h-full w-full object-cover;
}

.aui-avatar-fallback {
  @apply bg-aui-muted flex h-full w-full items-center justify-center rounded-full;
}

/* shadcn-ui/tooltip */

.aui-tooltip-content {
  @apply bg-aui-primary text-aui-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md px-3 py-1.5 text-xs;
}

/* shadcn-ui/dialog */

.aui-dialog-overlay {
  @apply data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80;
}

.aui-dialog-content {
  @apply data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50;
  @apply grid translate-x-[-50%] translate-y-[-50%] shadow-lg duration-200;
  /* @apply w-full bg-aui-background max-w-lg gap-4 border p-6 sm:rounded-lg; */
}



================================================
File: packages/react-ui/src/styles/tailwindcss/markdown.css
================================================
/* running indicator */
:where(.aui-md-running):empty::after,
:where(.aui-md-running) > :where(:not(ol):not(ul):not(pre)):last-child::after,
:where(.aui-md-running) > pre:last-child code::after,
:where(.aui-md-running)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child:not(:has(* > li)))::after,
:where(.aui-md-running)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child:not(:has(* > li)))::after,
:where(.aui-md-running)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)
  > :where(:is(ol, ul):last-child)
  > :where(li:last-child)::after {
  @apply animate-pulse font-sans content-['\25CF'] ltr:ml-1 rtl:mr-1;
}

/* typography */
.aui-md-h1 {
  @apply mb-8 scroll-m-20 text-4xl font-extrabold tracking-tight last:mb-0;
}

.aui-md-h2 {
  @apply mb-4 mt-8 scroll-m-20 text-3xl font-semibold tracking-tight first:mt-0 last:mb-0;
}

.aui-md-h3 {
  @apply mb-4 mt-6 scroll-m-20 text-2xl font-semibold tracking-tight first:mt-0 last:mb-0;
}

.aui-md-h4 {
  @apply mb-4 mt-6 scroll-m-20 text-xl font-semibold tracking-tight first:mt-0 last:mb-0;
}

.aui-md-h5 {
  @apply my-4 text-lg font-semibold first:mt-0 last:mb-0;
}

.aui-md-h6 {
  @apply my-4 font-semibold first:mt-0 last:mb-0;
}

.aui-md-p {
  @apply mb-5 mt-5 leading-7 first:mt-0 last:mb-0;
}

.aui-md-a {
  @apply text-aui-primary font-medium underline underline-offset-4;
}

.aui-md-blockquote {
  @apply border-l-2 pl-6 italic;
}

.aui-md-ul {
  @apply my-5 ml-6 list-disc [&>li]:mt-2;
}

.aui-md-ol {
  @apply my-5 ml-6 list-decimal [&>li]:mt-2;
}

.aui-md-hr {
  @apply my-5 border-b;
}

.aui-md-table {
  @apply my-5 w-full border-separate border-spacing-0 overflow-y-auto;
}

.aui-md-th {
  @apply bg-aui-muted px-4 py-2 text-left font-bold first:rounded-tl-lg last:rounded-tr-lg [&[align=center]]:text-center [&[align=right]]:text-right;
}

.aui-md-td {
  @apply border-b border-l px-4 py-2 text-left last:border-r [&[align=center]]:text-center [&[align=right]]:text-right;
}

.aui-md-tr {
  @apply m-0 border-b p-0 first:border-t [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg;
}

.aui-md-sup {
  @apply [&>a]:text-xs [&>a]:no-underline;
}

.aui-md-pre {
  @apply overflow-x-auto rounded-b-lg bg-black p-4 text-white;
}

.aui-md-inline-code {
  @apply bg-aui-muted rounded border font-semibold;
}

.aui-code-header-root {
  @apply flex items-center justify-between gap-4 rounded-t-lg bg-zinc-900 px-4 py-2 text-sm font-semibold text-white;
}

.aui-code-header-language {
  @apply lowercase [&>span]:text-xs;
}



================================================
File: packages/react-ui/src/styles/tailwindcss/modal.css
================================================
.aui-modal-content {
  @apply bg-aui-popover text-aui-popover-foreground z-50 h-[500px] w-[400px] overflow-clip rounded-xl border p-0 shadow-md outline-none;
  @apply [&>.aui-thread-root]:bg-inherit;

  @apply data-[state=closed]:animate-out data-[state=open]:animate-in;
  @apply data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0;
  @apply data-[state=closed]:zoom-out data-[state=open]:zoom-in;
  @apply data-[state=open]:slide-in-from-bottom-1/2 data-[state=open]:slide-in-from-right-1/2 data-[state=closed]:slide-out-to-bottom-1/2 data-[state=closed]:slide-out-to-right-1/2;
}

.aui-modal-anchor {
  @apply fixed bottom-4 right-4 size-11;
}

.aui-modal-button {
  @apply size-full rounded-full shadow transition-transform hover:scale-110 active:scale-90;
}

.aui-modal-button-closed-icon {
  @apply absolute size-6 transition-all;
  @apply data-[state=closed]:rotate-0 data-[state=open]:rotate-90;
  @apply data-[state=closed]:scale-100 data-[state=open]:scale-0;
}

.aui-modal-button-open-icon {
  @apply absolute size-6 transition-all;
  @apply data-[state=closed]:-rotate-90 data-[state=open]:rotate-0;
  @apply data-[state=closed]:scale-0 data-[state=open]:scale-100;
}



================================================
File: packages/react-ui/src/styles/tailwindcss/thread.css
================================================
/* thread */
.aui-thread-root {
  @apply bg-aui-background box-border flex h-full flex-col overflow-hidden;
}

.aui-thread-viewport {
  @apply flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8;
}

.aui-thread-viewport-footer {
  @apply sticky bottom-0 mt-3 flex w-full max-w-[var(--aui-thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4;
}

.aui-thread-scroll-to-bottom {
  @apply absolute -top-8 rounded-full disabled:invisible;
}

.aui-thread-followup-suggestions {
  @apply flex min-h-8 items-center justify-center gap-2;
}

.aui-thread-followup-suggestion {
  @apply bg-aui-background hover:bg-aui-muted/80 rounded-full border px-3 py-1 text-sm transition-colors ease-in;
}

/* thread welcome */

.aui-thread-welcome-root {
  @apply flex w-full max-w-[var(--aui-thread-max-width)] flex-grow flex-col;
}

.aui-thread-welcome-center {
  @apply flex w-full flex-grow flex-col items-center justify-center;
}

.aui-thread-welcome-message {
  @apply mt-4 font-medium;
}

.aui-thread-welcome-suggestions {
  @apply mt-3 flex w-full items-stretch justify-center gap-4;
}

.aui-thread-welcome-suggestion {
  @apply hover:bg-aui-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in;
}

.aui-thread-welcome-suggestion-text {
  @apply line-clamp-2 text-ellipsis text-sm font-semibold;
}

/* thread composer */

.aui-composer-root {
  @apply focus-within:border-aui-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in;
}

.aui-composer-input {
  @apply placeholder:text-aui-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed;
}

.aui-composer-send {
  @apply my-2.5 size-8 p-2 transition-opacity ease-in;
}
.aui-composer-cancel {
  @apply my-2.5 size-8 p-2 transition-opacity ease-in;
}
.aui-composer-attach {
  @apply my-2.5 size-8 p-2 transition-opacity ease-in;
}

.aui-composer-attachments {
  @apply flex w-full flex-row gap-3 px-10;
}

/* attachment */

.aui-attachment-root {
  @apply relative mt-3;
}

.aui-attachment-content {
  @apply flex h-12 w-40 items-center justify-center gap-2 rounded-lg border p-1;
}

.aui-attachment-preview-trigger {
  @apply hover:bg-aui-accent/50 cursor-pointer transition-colors;
}

.aui-attachment-thumb {
  @apply bg-aui-muted flex size-10 items-center justify-center rounded border text-sm;
}

.aui-attachment-text {
  @apply flex-grow basis-0;
}

.aui-attachment-name {
  @apply text-aui-muted-foreground line-clamp-1 text-ellipsis break-all text-xs font-bold;
}

.aui-attachment-type {
  @apply text-aui-muted-foreground text-xs;
}

.aui-attachment-remove {
  @apply text-aui-muted-foreground [&>svg]:bg-aui-background absolute -right-3 -top-3 size-6 [&>svg]:size-4 [&>svg]:rounded-full;
}

/* user message */

.aui-user-message-root {
  @apply grid auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 [&:where(>*)]:col-start-2;
  @apply w-full max-w-[var(--aui-thread-max-width)] py-4;
}

:where(.aui-user-message-root) > .aui-branch-picker-root {
  @apply col-span-full col-start-1 row-start-3;
  @apply -mr-1 justify-end;
}

.aui-user-branch-picker {
  @apply col-span-full col-start-1 row-start-3;
  @apply -mr-1 justify-end;
}

.aui-user-message-content {
  @apply bg-aui-muted text-aui-foreground max-w-[calc(var(--aui-thread-max-width)*0.8)] break-words rounded-3xl px-5 py-2.5;

  @apply col-start-2 row-start-2;
}

.aui-user-message-attachments {
  @apply flex w-full flex-row gap-3;

  @apply col-span-full col-start-1 row-start-1;
  @apply justify-end;
}

/* user action bar */

.aui-user-action-bar-root {
  @apply flex flex-col items-end;

  @apply col-start-1 row-start-2 mr-3 mt-2.5;
}

/* edit composer */

.aui-edit-composer-root {
  @apply bg-aui-muted my-4 flex w-full max-w-[var(--aui-thread-max-width)] flex-col gap-2 rounded-xl;
}

.aui-edit-composer-input {
  @apply text-aui-foreground flex h-8 w-full resize-none bg-transparent p-4 pb-0 outline-none;
}

.aui-edit-composer-footer {
  @apply mx-3 mb-3 flex items-center justify-center gap-2 self-end;
}

/* assistant message */

.aui-assistant-message-root {
  @apply grid grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr];
  @apply relative w-full max-w-[var(--aui-thread-max-width)] py-4;
}

:where(.aui-assistant-message-root) > .aui-avatar-root {
  @apply col-start-1 row-span-full row-start-1 mr-4;
}

.aui-assistant-avatar {
  @apply col-start-1 row-span-full row-start-1 mr-4;
}

:where(.aui-assistant-message-root) > .aui-branch-picker-root {
  @apply col-start-2 row-start-2;
  @apply -ml-2 mr-2;
}

.aui-assistant-branch-picker {
  @apply col-start-2 row-start-2;
  @apply -ml-2 mr-2;
}

.aui-assistant-message-content {
  @apply text-aui-foreground max-w-[calc(var(--aui-thread-max-width)*0.8)] break-words leading-7;

  @apply col-span-2 col-start-2 row-start-1 my-1.5;
}

/* assistant action bar */

.aui-assistant-action-bar-root {
  @apply text-aui-muted-foreground flex gap-1;

  @apply col-start-3 row-start-2;
  @apply -ml-1;
  @apply data-[floating]:bg-aui-background data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm;
}

.aui-assistant-action-bar-feedback-positive {
  @apply data-[submitted]:text-green-600 data-[submitted]:hover:text-green-700 dark:data-[submitted]:text-green-500 dark:data-[submitted]:hover:text-green-400;
}

.aui-assistant-action-bar-feedback-negative {
  @apply data-[submitted]:text-red-600 data-[submitted]:hover:text-red-700 dark:data-[submitted]:text-red-500 dark:data-[submitted]:hover:text-red-400;
}

/* branch picker */

.aui-branch-picker-root {
  @apply text-aui-muted-foreground inline-flex items-center text-xs;
}

.aui-branch-picker-state {
  @apply font-medium;
}

/* text */

.aui-text {
  @apply whitespace-pre-line;
}

.aui-text-running::after {
  @apply animate-pulse font-sans content-['\25CF'] ltr:ml-1 rtl:mr-1;
}

/* thread-list */

.aui-thread-list-root {
  @apply flex flex-col items-stretch gap-1.5;
}

.aui-thread-list-item {
  @apply data-[active]:bg-aui-muted hover:bg-aui-muted focus-visible:bg-aui-muted focus-visible:ring-aui-ring flex items-center gap-2 rounded-lg transition-all focus-visible:outline-none focus-visible:ring-2;
}

.aui-thread-list-new {
  @apply data-[active]:bg-aui-muted hover:bg-aui-muted flex items-center justify-start gap-1 rounded-lg px-2.5 py-2 text-start;
}

.aui-thread-list-new > .lucide-plus {
  @apply size-5;
}

.aui-thread-list-item-trigger {
  @apply flex-grow px-3 py-2 text-start;
}

.aui-thread-list-item-title {
  @apply text-sm;
}

.aui-thread-list-item-archive {
  @apply hover:text-aui-primary text-aui-foreground ml-auto mr-3 size-4 p-0;
}



================================================
File: packages/react-ui/src/styles/themes/default.css
================================================
:root {
  --aui-background: 0 0% 100%;
  --aui-foreground: 240 10% 3.9%;

  --aui-card: 0 0% 100%;
  --aui-card-foreground: 240 10% 3.9%;

  --aui-popover: 0 0% 100%;
  --aui-popover-foreground: 240 10% 3.9%;

  --aui-primary: 240 5.9% 10%;
  --aui-primary-foreground: 0 0% 98%;

  --aui-secondary: 240 4.8% 95.9%;
  --aui-secondary-foreground: 240 5.9% 10%;

  --aui-muted: 240 4.8% 95.9%;
  --aui-muted-foreground: 240 3.8% 46.1%;

  --aui-accent: 240 4.8% 95.9%;
  --aui-accent-foreground: 240 5.9% 10%;

  --aui-destructive: 0 84.2% 60.2%;
  --aui-destructive-foreground: 0 0% 98%;

  --aui-border: 240 5.9% 90%;
  --aui-input: 240 5.9% 90%;
  --aui-ring: 240 10% 3.9%;

  --aui-radius: 0.5rem;

  /* aui specific */
  --aui-thread-max-width: 42rem;
}

.dark {
  --aui-background: 0 0% 7%;
  --aui-foreground: 0 0% 98%;

  --aui-card: 240 10% 3.9%;
  --aui-card-foreground: 0 0% 98%;

  --aui-popover: 240 10% 3.9%;
  --aui-popover-foreground: 0 0% 98%;

  --aui-primary: 0 0% 98%;
  --aui-primary-foreground: 240 5.9% 10%;

  --aui-secondary: 240 3.7% 15.9%;
  --aui-secondary-foreground: 0 0% 98%;

  --aui-muted: 240 3.7% 15.9%;
  --aui-muted-foreground: 240 5% 64.9%;

  --aui-accent: 240 3.7% 15.9%;
  --aui-accent-foreground: 0 0% 98%;

  --aui-destructive: 0 62.8% 30.6%;
  --aui-destructive-foreground: 0 0% 98%;

  --aui-border: 240 3.7% 15.9%;
  --aui-input: 240 3.7% 15.9%;
  --aui-ring: 240 4.9% 83.9%;
}



================================================
File: packages/react-ui/src/styles/themes/shadcn-extras.css
================================================
/* duplicates from default.css for properties outside what is included in shadcn-ui themes */
:root {
  --aui-thread-max-width: 42rem;
}



================================================
File: packages/react-ui/src/tailwindcss/index.ts
================================================
import plugin from "tailwindcss/plugin.js";
import baseComponentsCSS from "../../dist/styles/tailwindcss/base-components.css.json" with { type: "json" };
import threadCSS from "../../dist/styles/tailwindcss/thread.css.json" with { type: "json" };
import modalCSS from "../../dist/styles/tailwindcss/modal.css.json" with { type: "json" };
import defaultThemeCSS from "../../dist/styles/themes/default.css.json" with { type: "json" };
import shadcnExtrasCSS from "../../dist/styles/themes/shadcn-extras.css.json" with { type: "json" };
import markdownCSS from "../../dist/styles/tailwindcss/markdown.css.json" with { type: "json" };

type AssistantTailwindPluginColors = {
  border: string;
  input: string;
  ring: string;
  background: string;
  foreground: string;
  primary: {
    DEFAULT: string;
    foreground: string;
  };
  secondary: {
    DEFAULT: string;
    foreground: string;
  };
  destructive: {
    DEFAULT: string;
    foreground: string;
  };
  muted: {
    DEFAULT: string;
    foreground: string;
  };
  accent: {
    DEFAULT: string;
    foreground: string;
  };
  popover: {
    DEFAULT: string;
    foreground: string;
  };
  card: {
    DEFAULT: string;
    foreground: string;
  };
};

type AssisstantTailwindPluginOptions = {
  components?: (
    | "default-theme"
    | "base"
    | "thread"
    | "assistant-modal"
    | "markdown"
  )[];
  colors?: AssistantTailwindPluginColors;
  shadcn?: boolean;
};

const auiPlugin = plugin.withOptions<AssisstantTailwindPluginOptions>(
  ({
    components = ["assistant-modal", "thread", "markdown"],
    shadcn = false,
  } = {}) =>
    ({ addComponents }) => {
      const assistantModal = components.includes("assistant-modal");
      const thread = assistantModal || components.includes("thread");
      const markdown = components.includes("markdown");
      const base = thread || components.includes("base");
      const defaultTheme = components.includes("default-theme");

      if (defaultTheme && shadcn)
        throw new Error("default-theme cannot be used with shadcn");

      if (defaultTheme || (base && !shadcn)) {
        addComponents(defaultThemeCSS);
      }
      if (!defaultTheme && base && shadcn) {
        addComponents(shadcnExtrasCSS);
      }

      if (base) {
        addComponents(baseComponentsCSS);
      }

      if (thread) {
        addComponents(threadCSS);
      }

      if (assistantModal) {
        addComponents(modalCSS);
      }

      if (markdown) {
        addComponents(markdownCSS);
      }
    },
  ({
    // components = ["assistant-modal", "thread"],
    colors = {},
    shadcn = false,
  } = {}) => {
    const prefix = !shadcn ? "--aui-" : "--";
    return {
      safelist: [{ pattern: /^aui-/ }],
      // ...(components.length > 0
      //   ? { safelist: [{ pattern: /^aui-/ }] }
      //   : undefined),
      theme: {
        extend: {
          maxWidth: {
            "aui-thread": "var(--aui-thread-max-width)",
          },
          colors: {
            aui: {
              border: colors.border ?? `hsl(var(${prefix}border))`,
              input: colors.input ?? `hsl(var(${prefix}input))`,
              ring: colors.ring ?? `hsl(var(${prefix}ring))`,
              background: colors.background ?? `hsl(var(${prefix}background))`,
              foreground: colors.foreground ?? `hsl(var(${prefix}foreground))`,
              primary: {
                DEFAULT:
                  colors.primary?.DEFAULT ?? `hsl(var(${prefix}primary))`,
                foreground:
                  colors.primary?.foreground ??
                  `hsl(var(${prefix}primary-foreground))`,
              },
              secondary: {
                DEFAULT:
                  colors.secondary?.DEFAULT ?? `hsl(var(${prefix}secondary))`,
                foreground:
                  colors.secondary?.foreground ??
                  `hsl(var(${prefix}secondary-foreground))`,
              },
              destructive: {
                DEFAULT:
                  colors.destructive?.DEFAULT ??
                  `hsl(var(${prefix}destructive))`,
                foreground: `hsl(var(${prefix}destructive-foreground))`,
              },
              muted: {
                DEFAULT: `hsl(var(${prefix}muted))`,
                foreground:
                  colors.muted?.foreground ??
                  `hsl(var(${prefix}muted-foreground))`,
              },
              accent: {
                DEFAULT: colors.accent?.DEFAULT ?? `hsl(var(${prefix}accent))`,
                foreground:
                  colors.accent?.foreground ??
                  `hsl(var(${prefix}accent-foreground))`,
              },
              popover: {
                DEFAULT:
                  colors.popover?.DEFAULT ?? `hsl(var(${prefix}popover))`,
                foreground:
                  colors.popover?.foreground ??
                  `hsl(var(${prefix}popover-foreground))`,
              },
              card: {
                DEFAULT: colors.card?.DEFAULT ?? `hsl(var(${prefix}card))`,
                foreground:
                  colors.card?.foreground ??
                  `hsl(var(${prefix}card-foreground))`,
              },
            },
          },
        },
      },
    };
  },
);

export default auiPlugin;



================================================
File: packages/react-ui/src/ui/assistant-action-bar.tsx
================================================
"use client";

import { forwardRef, type FC } from "react";
import {
  AudioLinesIcon,
  CheckIcon,
  CopyIcon,
  RefreshCwIcon,
  StopCircleIcon,
  ThumbsDownIcon,
  ThumbsUpIcon,
} from "lucide-react";
import {
  ActionBarPrimitive,
  MessagePrimitive,
  useThread,
} from "@assistant-ui/react";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";

const useAllowCopy = (ensureCapability = false) => {
  const { assistantMessage: { allowCopy = true } = {} } = useThreadConfig();
  const copySupported = useThread((t) => t.capabilities.unstable_copy);
  return allowCopy && (!ensureCapability || copySupported);
};

const useAllowSpeak = (ensureCapability = false) => {
  const { assistantMessage: { allowSpeak = true } = {} } = useThreadConfig();
  const speechSupported = useThread((t) => t.capabilities.speech);
  return allowSpeak && (!ensureCapability || speechSupported);
};

const useAllowReload = (ensureCapability = false) => {
  const { assistantMessage: { allowReload = true } = {} } = useThreadConfig();
  const reloadSupported = useThread((t) => t.capabilities.reload);
  return allowReload && (!ensureCapability || reloadSupported);
};

const useAllowFeedbackPositive = (ensureCapability = false) => {
  const { assistantMessage: { allowFeedbackPositive = true } = {} } =
    useThreadConfig();
  const feedbackSupported = useThread((t) => t.capabilities.feedback);
  return allowFeedbackPositive && (!ensureCapability || feedbackSupported);
};

const useAllowFeedbackNegative = (ensureCapability = false) => {
  const { assistantMessage: { allowFeedbackNegative = true } = {} } =
    useThreadConfig();
  const feedbackSupported = useThread((t) => t.capabilities.feedback);
  return allowFeedbackNegative && (!ensureCapability || feedbackSupported);
};

const AssistantActionBar: FC = () => {
  const allowCopy = useAllowCopy(true);
  const allowReload = useAllowReload(true);
  const allowSpeak = useAllowSpeak(true);
  const allowFeedbackPositive = useAllowFeedbackPositive(true);
  const allowFeedbackNegative = useAllowFeedbackNegative(true);
  if (
    !allowCopy &&
    !allowReload &&
    !allowSpeak &&
    !allowFeedbackPositive &&
    !allowFeedbackNegative
  )
    return null;

  return (
    <AssistantActionBarRoot
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
    >
      {allowSpeak && <AssistantActionBarSpeechControl />}
      {allowCopy && <AssistantActionBarCopy />}
      {allowReload && <AssistantActionBarReload />}
      {allowFeedbackPositive && <AssistantActionBarFeedbackPositive />}
      {allowFeedbackNegative && <AssistantActionBarFeedbackNegative />}
    </AssistantActionBarRoot>
  );
};

AssistantActionBar.displayName = "AssistantActionBar";

const AssistantActionBarRoot = withDefaults(ActionBarPrimitive.Root, {
  className: "aui-assistant-action-bar-root",
});

AssistantActionBarRoot.displayName = "AssistantActionBarRoot";

namespace AssistantActionBarCopy {
  export type Element = ActionBarPrimitive.Copy.Element;
  export type Props = Partial<TooltipIconButton.Props> & {
    copiedDuration?: number | undefined;
  };
}

const AssistantActionBarCopy = forwardRef<
  AssistantActionBarCopy.Element,
  AssistantActionBarCopy.Props
>(({ copiedDuration, ...props }, ref) => {
  const {
    strings: {
      assistantMessage: { copy: { tooltip = "Copy" } = {} } = {},
    } = {},
  } = useThreadConfig();

  return (
    <ActionBarPrimitive.Copy copiedDuration={copiedDuration} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? (
          <>
            <MessagePrimitive.If copied>
              <CheckIcon />
            </MessagePrimitive.If>
            <MessagePrimitive.If copied={false}>
              <CopyIcon />
            </MessagePrimitive.If>
          </>
        )}
      </TooltipIconButton>
    </ActionBarPrimitive.Copy>
  );
});

AssistantActionBarCopy.displayName = "AssistantActionBarCopy";

const AssistantActionBarSpeechControl: FC = () => {
  return (
    <>
      <MessagePrimitive.If speaking={false}>
        <AssistantActionBarSpeak />
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <AssistantActionBarStopSpeaking />
      </MessagePrimitive.If>
    </>
  );
};

namespace AssistantActionBarSpeak {
  export type Element = ActionBarPrimitive.Speak.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantActionBarSpeak = forwardRef<
  AssistantActionBarSpeak.Element,
  AssistantActionBarSpeak.Props
>((props, ref) => {
  const {
    strings: {
      assistantMessage: { speak: { tooltip = "Read aloud" } = {} } = {},
    } = {},
  } = useThreadConfig();
  const allowSpeak = useAllowSpeak();

  return (
    <ActionBarPrimitive.Speak disabled={!allowSpeak} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <AudioLinesIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.Speak>
  );
});

AssistantActionBarSpeak.displayName = "AssistantActionBarSpeak";

namespace AssistantActionBarStopSpeaking {
  export type Element = ActionBarPrimitive.StopSpeaking.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantActionBarStopSpeaking = forwardRef<
  AssistantActionBarStopSpeaking.Element,
  AssistantActionBarStopSpeaking.Props
>((props, ref) => {
  const {
    strings: {
      assistantMessage: {
        speak: { stop: { tooltip: stopTooltip = "Stop" } = {} } = {},
      } = {},
    } = {},
  } = useThreadConfig();
  const allowSpeak = useAllowSpeak();

  return (
    <ActionBarPrimitive.StopSpeaking disabled={!allowSpeak} asChild>
      <TooltipIconButton tooltip={stopTooltip} {...props} ref={ref}>
        {props.children ?? <StopCircleIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.StopSpeaking>
  );
});

AssistantActionBarStopSpeaking.displayName = "AssistantActionBarStopSpeaking";

namespace AssistantActionBarReload {
  export type Element = ActionBarPrimitive.Reload.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantActionBarReload = forwardRef<
  AssistantActionBarReload.Element,
  AssistantActionBarReload.Props
>((props, ref) => {
  const {
    strings: {
      assistantMessage: { reload: { tooltip = "Refresh" } = {} } = {},
    } = {},
  } = useThreadConfig();
  const allowReload = useAllowReload();
  return (
    <ActionBarPrimitive.Reload disabled={!allowReload} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <RefreshCwIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.Reload>
  );
});

AssistantActionBarReload.displayName = "AssistantActionBarReload";

namespace AssistantActionBarFeedbackPositive {
  export type Element = ActionBarPrimitive.FeedbackPositive.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantActionBarFeedbackPositive = forwardRef<
  AssistantActionBarFeedbackPositive.Element,
  AssistantActionBarFeedbackPositive.Props
>((props, ref) => {
  const {
    strings: {
      assistantMessage: {
        feedback: { positive: { tooltip = "Good response" } = {} } = {},
      } = {},
    } = {},
  } = useThreadConfig();
  const allowFeedbackPositive = useAllowFeedbackPositive();
  return (
    <ActionBarPrimitive.FeedbackPositive
      disabled={!allowFeedbackPositive}
      className="aui-assistant-action-bar-feedback-positive"
      asChild
    >
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <ThumbsUpIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.FeedbackPositive>
  );
});

AssistantActionBarFeedbackPositive.displayName =
  "AssistantActionBarFeedbackPositive";

namespace AssistantActionBarFeedbackNegative {
  export type Element = ActionBarPrimitive.FeedbackNegative.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantActionBarFeedbackNegative = forwardRef<
  AssistantActionBarFeedbackNegative.Element,
  AssistantActionBarFeedbackNegative.Props
>((props, ref) => {
  const {
    strings: {
      assistantMessage: {
        feedback: { negative: { tooltip = "Bad response" } = {} } = {},
      } = {},
    } = {},
  } = useThreadConfig();
  const allowFeedbackNegative = useAllowFeedbackNegative();
  return (
    <ActionBarPrimitive.FeedbackNegative
      disabled={!allowFeedbackNegative}
      className="aui-assistant-action-bar-feedback-negative"
      asChild
    >
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <ThumbsDownIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.FeedbackNegative>
  );
});

AssistantActionBarFeedbackNegative.displayName =
  "AssistantActionBarFeedbackNegative";

const exports = {
  Root: AssistantActionBarRoot,
  Reload: AssistantActionBarReload,
  Copy: AssistantActionBarCopy,
  Speak: AssistantActionBarSpeak,
  StopSpeaking: AssistantActionBarStopSpeaking,
  SpeechControl: AssistantActionBarSpeechControl,
  FeedbackPositive: AssistantActionBarFeedbackPositive,
  FeedbackNegative: AssistantActionBarFeedbackNegative,
};

export default Object.assign(
  AssistantActionBar,
  exports,
) as typeof AssistantActionBar & typeof exports;



================================================
File: packages/react-ui/src/ui/assistant-message.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, useMemo, type FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";
import BranchPicker from "./branch-picker";
import { Avatar } from "./base/avatar";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import AssistantActionBar from "./assistant-action-bar";
import ContentPart from "./content-part";

const AssistantMessage: FC = () => {
  return (
    <AssistantMessageRoot>
      <AssistantMessageAvatar />
      <AssistantMessageContent />
      <BranchPicker />
      <AssistantActionBar />
    </AssistantMessageRoot>
  );
};

AssistantMessage.displayName = "AssistantMessage";

const AssistantMessageAvatar: FC = () => {
  const { assistantAvatar: avatar = { fallback: "A" } } = useThreadConfig();
  return <Avatar {...avatar} />;
};

const AssistantMessageRoot = withDefaults(MessagePrimitive.Root, {
  className: "aui-assistant-message-root",
});

AssistantMessageRoot.displayName = "AssistantMessageRoot";

const AssistantMessageContentWrapper = withDefaults("div", {
  className: "aui-assistant-message-content",
});

namespace AssistantMessageContent {
  export type Element = HTMLDivElement;
  export type Props = MessagePrimitive.Content.Props &
    ComponentPropsWithoutRef<"div">;
}

const AssistantMessageContent = forwardRef<
  AssistantMessageContent.Element,
  AssistantMessageContent.Props
>(({ components: componentsProp, ...rest }, ref) => {
  const { tools, assistantMessage: { components = {} } = {} } =
    useThreadConfig();

  const toolsComponents = useMemo(
    () => ({
      by_name: !tools
        ? undefined
        : Object.fromEntries(
            tools.map((t) => [
              t.unstable_tool.toolName,
              t.unstable_tool.render,
            ]),
          ),
      Fallback: components.ToolFallback,
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...(tools ?? []), components.ToolFallback],
  );
  const Footer = components.Footer;

  return (
    <AssistantMessageContentWrapper {...rest} ref={ref}>
      <MessagePrimitive.Content
        components={{
          ...componentsProp,
          Text: componentsProp?.Text ?? components.Text ?? ContentPart.Text,
          Empty: componentsProp?.Empty ?? components.Empty,
          tools: toolsComponents,
        }}
      />
      {Footer && <Footer />}
    </AssistantMessageContentWrapper>
  );
});

AssistantMessageContent.displayName = "AssistantMessageContent";

const exports = {
  Root: AssistantMessageRoot,
  Avatar: AssistantMessageAvatar,
  Content: AssistantMessageContent,
};

export default Object.assign(
  AssistantMessage,
  exports,
) as typeof AssistantMessage & typeof exports;



================================================
File: packages/react-ui/src/ui/assistant-modal.tsx
================================================
"use client";

import { type FC, forwardRef } from "react";
import { BotIcon, ChevronDownIcon } from "lucide-react";

import { AssistantModalPrimitive } from "@assistant-ui/react";
import Thread from "./thread";
import { withDefaults } from "./utils/withDefaults";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import {
  ThreadConfig,
  ThreadConfigProvider,
  ThreadConfigProviderProps,
  useThreadConfig,
} from "./thread-config";

const AssistantModal: FC<ThreadConfig> = (config) => {
  return (
    <AssistantModalRoot config={config}>
      <AssistantModalTrigger />
      <AssistantModalContent>
        <Thread />
      </AssistantModalContent>
    </AssistantModalRoot>
  );
};

AssistantModal.displayName = "AssistantModal";

namespace AssistantModalRoot {
  export type Props = AssistantModalPrimitive.Root.Props &
    ThreadConfigProviderProps;
}

const AssistantModalRoot: FC<AssistantModalRoot.Props> = ({
  config,
  ...props
}) => {
  return (
    <ThreadConfigProvider config={config}>
      <AssistantModalPrimitive.Root {...props} />
    </ThreadConfigProvider>
  );
};

AssistantModalRoot.displayName = "AssistantModalRoot";

namespace AssistantModalTrigger {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AssistantModalTrigger = forwardRef<
  AssistantModalTrigger.Element,
  AssistantModalTrigger.Props
>((props, ref) => {
  return (
    <AssistantModalAnchor>
      <AssistantModalPrimitive.Trigger asChild>
        <AssistantModalButton {...props} ref={ref} />
      </AssistantModalPrimitive.Trigger>
    </AssistantModalAnchor>
  );
});

AssistantModalTrigger.displayName = "AssistantModalTrigger";

const AssistantModalAnchor = withDefaults(AssistantModalPrimitive.Anchor, {
  className: "aui-root aui-modal-anchor",
});

AssistantModalAnchor.displayName = "AssistantModalAnchor";

const ModalButtonStyled = withDefaults(TooltipIconButton, {
  variant: "default",
  className: "aui-modal-button",
});

namespace AssistantModalButton {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props> & {
    "data-state"?: "open" | "closed";
  };
}

const AssistantModalButton = forwardRef<
  AssistantModalButton.Element,
  AssistantModalButton.Props
>(({ "data-state": state, ...rest }, ref) => {
  const {
    strings: {
      assistantModal: {
        open: {
          button: { tooltip: openTooltip = "Close Assistant" } = {},
        } = {},
        closed: {
          button: { tooltip: closedTooltip = "Open Assistant" } = {},
        } = {},
      } = {},
    } = {},
  } = useThreadConfig();
  const tooltip = state === "open" ? openTooltip : closedTooltip;

  return (
    <ModalButtonStyled
      side="left"
      tooltip={tooltip}
      data-state={state}
      {...rest}
      ref={ref}
    >
      {rest.children ?? (
        <>
          <BotIcon
            data-state={state}
            className="aui-modal-button-closed-icon"
          />
          <ChevronDownIcon
            data-state={state}
            className="aui-modal-button-open-icon"
          />
        </>
      )}
    </ModalButtonStyled>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";

const AssistantModalContent = withDefaults(AssistantModalPrimitive.Content, {
  className: "aui-root aui-modal-content",
  sideOffset: 16,
});

AssistantModalContent.displayName = "AssistantModalContent";

const exports = {
  Root: AssistantModalRoot,
  Trigger: AssistantModalTrigger,
  Content: AssistantModalContent,
  Button: AssistantModalButton,
  Anchor: AssistantModalAnchor,
};

export default Object.assign(AssistantModal, exports) as typeof AssistantModal &
  typeof exports;



================================================
File: packages/react-ui/src/ui/attachment-ui.tsx
================================================
"use client";

import {
  forwardRef,
  PropsWithChildren,
  useEffect,
  useState,
  type FC,
} from "react";
import { CircleXIcon, FileIcon } from "lucide-react";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import { AttachmentPrimitive, useAttachment } from "@assistant-ui/react";
import {
  AvatarImage,
  AvatarRoot,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "./base";
import { Dialog, DialogTrigger, DialogContent } from "./base/dialog";
import { AvatarFallback } from "@radix-ui/react-avatar";
import { useShallow } from "zustand/shallow";
import { DialogTitle } from "@radix-ui/react-dialog";

const AttachmentRoot = withDefaults(AttachmentPrimitive.Root, {
  className: "aui-attachment-root",
});

const AttachmentContent = withDefaults("div", {
  className: "aui-attachment-content",
});

AttachmentRoot.displayName = "AttachmentRoot";

const useFileSrc = (file: File | undefined) => {
  const [src, setSrc] = useState<string | undefined>(undefined);

  useEffect(() => {
    if (!file) {
      setSrc(undefined);
      return;
    }

    const objectUrl = URL.createObjectURL(file);
    setSrc(objectUrl);

    return () => {
      URL.revokeObjectURL(objectUrl);
    };
  }, [file]);

  return src;
};

const useAttachmentSrc = () => {
  const { file, src } = useAttachment(
    useShallow((a): { file?: File; src?: string } => {
      if (a.type !== "image") return {};
      if (a.file) return { file: a.file };
      const src = a.content?.filter((c) => c.type === "image")[0]?.image;
      if (!src) return {};
      return { src };
    }),
  );

  return useFileSrc(file) ?? src;
};

type AttachmentPreviewProps = {
  src: string;
};

const AttachmentPreview: FC<AttachmentPreviewProps> = ({ src }) => {
  const [isLoaded, setIsLoaded] = useState(false);

  return (
    // eslint-disable-next-line @next/next/no-img-element
    <img
      src={src}
      style={{
        width: "auto",
        height: "auto",
        maxWidth: "75dvh",
        maxHeight: "75dvh",
        display: isLoaded ? "block" : "none",
        overflow: "clip",
      }}
      onLoad={() => setIsLoaded(true)}
      alt="Preview"
    />
  );
};

const AttachmentPreviewDialog: FC<PropsWithChildren> = ({ children }) => {
  const src = useAttachmentSrc();

  if (!src) return children;

  return (
    <Dialog>
      <DialogTrigger className="aui-attachment-preview-trigger" asChild>
        {children}
      </DialogTrigger>
      <DialogContent>
        <DialogTitle className="aui-sr-only">
          Image Attachment Preview
        </DialogTitle>
        <AttachmentPreview src={src} />
      </DialogContent>
    </Dialog>
  );
};

const AttachmentThumb: FC = () => {
  const isImage = useAttachment((a) => a.type === "image");
  const src = useAttachmentSrc();
  return (
    <AvatarRoot className="aui-attachment-thumb">
      <AvatarFallback delayMs={isImage ? 200 : 0}>
        <FileIcon />
      </AvatarFallback>
      <AvatarImage src={src} />
    </AvatarRoot>
  );
};

const AttachmentUI: FC = () => {
  const canRemove = useAttachment((a) => a.source !== "message");
  const typeLabel = useAttachment((a) => {
    const type = a.type;
    switch (type) {
      case "image":
        return "Image";
      case "document":
        return "Document";
      case "file":
        return "File";
      default:
        const _exhaustiveCheck: never = type;
        throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
    }
  });
  return (
    <Tooltip>
      <AttachmentRoot>
        <AttachmentPreviewDialog>
          <TooltipTrigger asChild>
            <AttachmentContent>
              <AttachmentThumb />
              <div className="aui-attachment-text">
                <p className="aui-attachment-name">
                  <AttachmentPrimitive.Name />
                </p>
                <p className="aui-attachment-type">{typeLabel}</p>
              </div>
            </AttachmentContent>
          </TooltipTrigger>
        </AttachmentPreviewDialog>
        {canRemove && <AttachmentRemove />}
      </AttachmentRoot>
      <TooltipContent side="top">
        <AttachmentPrimitive.Name />
      </TooltipContent>
    </Tooltip>
  );
};

AttachmentUI.displayName = "Attachment";

namespace AttachmentRemove {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const AttachmentRemove = forwardRef<
  AttachmentRemove.Element,
  AttachmentRemove.Props
>((props, ref) => {
  const {
    strings: {
      composer: { removeAttachment: { tooltip = "Remove file" } = {} } = {},
    } = {},
  } = useThreadConfig();

  return (
    <AttachmentPrimitive.Remove asChild>
      <TooltipIconButton
        tooltip={tooltip}
        className="aui-attachment-remove"
        side="top"
        {...props}
        ref={ref}
      >
        {props.children ?? <CircleXIcon />}
      </TooltipIconButton>
    </AttachmentPrimitive.Remove>
  );
});

AttachmentRemove.displayName = "AttachmentRemove";

const exports = {
  Root: AttachmentRoot,
  Remove: AttachmentRemove,
};

export default Object.assign(AttachmentUI, exports) as typeof AttachmentUI &
  typeof exports;



================================================
File: packages/react-ui/src/ui/branch-picker.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, type FC } from "react";
import { ChevronLeftIcon, ChevronRightIcon } from "lucide-react";

import { TooltipIconButton } from "./base/tooltip-icon-button";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import { BranchPickerPrimitive, useThread } from "@assistant-ui/react";

const useAllowBranchPicker = (ensureCapability = false) => {
  const { branchPicker: { allowBranchPicker = true } = {} } = useThreadConfig();
  const branchPickerSupported = useThread((t) => t.capabilities.edit);
  return allowBranchPicker && (!ensureCapability || branchPickerSupported);
};

const BranchPicker: FC = () => {
  const allowBranchPicker = useAllowBranchPicker(true);
  if (!allowBranchPicker) return null;
  return (
    <BranchPickerRoot hideWhenSingleBranch>
      <BranchPickerPrevious />
      <BranchPickerState />
      <BranchPickerNext />
    </BranchPickerRoot>
  );
};

BranchPicker.displayName = "BranchPicker";

const BranchPickerRoot = withDefaults(BranchPickerPrimitive.Root, {
  className: "aui-branch-picker-root",
});

BranchPickerRoot.displayName = "BranchPickerRoot";

namespace BranchPickerPrevious {
  export type Element = BranchPickerPrimitive.Previous.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const BranchPickerPrevious = forwardRef<
  BranchPickerPrevious.Element,
  BranchPickerPrevious.Props
>((props, ref) => {
  const {
    strings: {
      branchPicker: { previous: { tooltip = "Previous" } = {} } = {},
    } = {},
  } = useThreadConfig();
  const allowBranchPicker = useAllowBranchPicker();
  return (
    <BranchPickerPrimitive.Previous disabled={!allowBranchPicker} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <ChevronLeftIcon />}
      </TooltipIconButton>
    </BranchPickerPrimitive.Previous>
  );
});

BranchPickerPrevious.displayName = "BranchPickerPrevious";

const BranchPickerStateWrapper = withDefaults("span", {
  className: "aui-branch-picker-state",
});

namespace BranchPickerState {
  export type Element = HTMLSpanElement;
  export type Props = ComponentPropsWithoutRef<"span">;
}

const BranchPickerState = forwardRef<
  BranchPickerState.Element,
  BranchPickerState.Props
>((props, ref) => {
  return (
    <BranchPickerStateWrapper {...props} ref={ref}>
      <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
    </BranchPickerStateWrapper>
  );
});

BranchPickerState.displayName = "BranchPickerState";

namespace BranchPickerNext {
  export type Element = BranchPickerPrimitive.Next.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const BranchPickerNext = forwardRef<
  BranchPickerNext.Element,
  BranchPickerNext.Props
>((props, ref) => {
  const {
    strings: { branchPicker: { next: { tooltip = "Next" } = {} } = {} } = {},
  } = useThreadConfig();
  const allowBranchPicker = useAllowBranchPicker();
  return (
    <BranchPickerPrimitive.Next disabled={!allowBranchPicker} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <ChevronRightIcon />}
      </TooltipIconButton>
    </BranchPickerPrimitive.Next>
  );
});

BranchPickerNext.displayName = "BranchPickerNext";

const exports = {
  Root: BranchPickerRoot,
  Previous: BranchPickerPrevious,
  Next: BranchPickerNext,
};

export default Object.assign(BranchPicker, exports) as typeof BranchPicker &
  typeof exports;



================================================
File: packages/react-ui/src/ui/composer.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, type FC } from "react";

import { PaperclipIcon, SendHorizontalIcon } from "lucide-react";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import { CircleStopIcon } from "./base/CircleStopIcon";
import {
  ComposerPrimitive,
  ThreadPrimitive,
  useThread,
} from "@assistant-ui/react";
import Attachment from "./attachment-ui";

const useAllowAttachments = (ensureCapability = false) => {
  const { composer: { allowAttachments = true } = {} } = useThreadConfig();
  const attachmentsSupported = useThread((t) => t.capabilities.attachments);
  return allowAttachments && (!ensureCapability || attachmentsSupported);
};

const Composer: FC = () => {
  const allowAttachments = useAllowAttachments(true);
  return (
    <ComposerRoot>
      {allowAttachments && <ComposerAttachments />}
      {allowAttachments && <ComposerAddAttachment />}
      <ComposerInput autoFocus />
      <ComposerAction />
    </ComposerRoot>
  );
};

Composer.displayName = "Composer";

const ComposerRoot = withDefaults(ComposerPrimitive.Root, {
  className: "aui-composer-root",
});

ComposerRoot.displayName = "ComposerRoot";

const ComposerInputStyled = withDefaults(ComposerPrimitive.Input, {
  rows: 1,
  autoFocus: true,
  className: "aui-composer-input",
});

namespace ComposerInput {
  export type Element = HTMLTextAreaElement;
  export type Props = ComponentPropsWithoutRef<typeof ComposerInputStyled>;
}

const ComposerInput = forwardRef<ComposerInput.Element, ComposerInput.Props>(
  (props, ref) => {
    const {
      strings: {
        composer: { input: { placeholder = "Write a message..." } = {} } = {},
      } = {},
    } = useThreadConfig();
    return (
      <ComposerInputStyled placeholder={placeholder} {...props} ref={ref} />
    );
  },
);

ComposerInput.displayName = "ComposerInput";

const ComposerAttachmentsContainer = withDefaults("div", {
  className: "aui-composer-attachments",
});

namespace ComposerAttachments {
  export type Props = Partial<ComposerPrimitive.Attachments.Props>;
}

const ComposerAttachments: FC<ComposerAttachments.Props> = ({ components }) => {
  return (
    <ComposerAttachmentsContainer>
      <ComposerPrimitive.Attachments
        components={{
          ...components,
          Attachment: components?.Attachment ?? Attachment,
        }}
      />
    </ComposerAttachmentsContainer>
  );
};

const ComposerAttachButton = withDefaults(TooltipIconButton, {
  variant: "default",
  className: "aui-composer-attach",
});

namespace ComposerAddAttachment {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const ComposerAddAttachment = forwardRef<
  ComposerAddAttachment.Element,
  ComposerAddAttachment.Props
>((props, ref) => {
  const {
    strings: {
      composer: { addAttachment: { tooltip = "Attach file" } = {} } = {},
    } = {},
  } = useThreadConfig();
  const allowAttachments = useAllowAttachments();
  return (
    <ComposerPrimitive.AddAttachment disabled={!allowAttachments} asChild>
      <ComposerAttachButton
        tooltip={tooltip}
        variant={"ghost"}
        {...props}
        ref={ref}
      >
        {props.children ?? <PaperclipIcon />}
      </ComposerAttachButton>
    </ComposerPrimitive.AddAttachment>
  );
});

ComposerAddAttachment.displayName = "ComposerAddAttachment";

const useAllowCancel = () => {
  const cancelSupported = useThread((t) => t.capabilities.cancel);
  return cancelSupported;
};

const ComposerAction: FC = () => {
  const allowCancel = useAllowCancel();
  if (!allowCancel) return <ComposerSend />;
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerSend />
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerCancel />
      </ThreadPrimitive.If>
    </>
  );
};

ComposerAction.displayName = "ComposerAction";

const ComposerSendButton = withDefaults(TooltipIconButton, {
  variant: "default",
  className: "aui-composer-send",
});

namespace ComposerSend {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const ComposerSend = forwardRef<ComposerSend.Element, ComposerSend.Props>(
  (props, ref) => {
    const {
      strings: { composer: { send: { tooltip = "Send" } = {} } = {} } = {},
    } = useThreadConfig();
    return (
      <ComposerPrimitive.Send asChild>
        <ComposerSendButton tooltip={tooltip} {...props} ref={ref}>
          {props.children ?? <SendHorizontalIcon />}
        </ComposerSendButton>
      </ComposerPrimitive.Send>
    );
  },
);

ComposerSend.displayName = "ComposerSend";

const ComposerCancelButton = withDefaults(TooltipIconButton, {
  variant: "default",
  className: "aui-composer-cancel",
});

namespace ComposerCancel {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const ComposerCancel = forwardRef<ComposerCancel.Element, ComposerCancel.Props>(
  (props, ref) => {
    const {
      strings: { composer: { cancel: { tooltip = "Cancel" } = {} } = {} } = {},
    } = useThreadConfig();
    return (
      <ComposerPrimitive.Cancel asChild>
        <ComposerCancelButton tooltip={tooltip} {...props} ref={ref}>
          {props.children ?? <CircleStopIcon />}
        </ComposerCancelButton>
      </ComposerPrimitive.Cancel>
    );
  },
);

ComposerCancel.displayName = "ComposerCancel";

const exports = {
  Root: ComposerRoot,
  Input: ComposerInput,
  Action: ComposerAction,
  Send: ComposerSend,
  Cancel: ComposerCancel,
  AddAttachment: ComposerAddAttachment,
  Attachments: ComposerAttachments,
};

export default Object.assign(Composer, exports) as typeof Composer &
  typeof exports;



================================================
File: packages/react-ui/src/ui/content-part.tsx
================================================
"use client";

import { FC } from "react";
import { ContentPartPrimitive } from "@assistant-ui/react";
import { INTERNAL } from "@assistant-ui/react";
import classNames from "classnames";

const { useSmoothStatus, withSmoothContextProvider } = INTERNAL;

export const Text: FC = () => {
  const status = useSmoothStatus();
  return (
    <ContentPartPrimitive.Text
      className={classNames(
        "aui-text",
        status.type === "running" && "aui-text-running",
      )}
      component="p"
    />
  );
};

const exports = { Text: withSmoothContextProvider(Text) };

export default exports;



================================================
File: packages/react-ui/src/ui/edit-composer.tsx
================================================
"use client";

import { forwardRef, type FC } from "react";

import { Button, ButtonProps } from "./base/button";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import { ComposerPrimitive } from "@assistant-ui/react";

const EditComposer: FC = () => {
  return (
    <EditComposerRoot>
      <EditComposerInput />

      <EditComposerFooter>
        <EditComposerCancel />
        <EditComposerSend />
      </EditComposerFooter>
    </EditComposerRoot>
  );
};

EditComposer.displayName = "EditComposer";

const EditComposerRoot = withDefaults(ComposerPrimitive.Root, {
  className: "aui-edit-composer-root",
});

EditComposerRoot.displayName = "EditComposerRoot";

const EditComposerInput = withDefaults(ComposerPrimitive.Input, {
  className: "aui-edit-composer-input",
});

EditComposerInput.displayName = "EditComposerInput";

const EditComposerFooter = withDefaults("div", {
  className: "aui-edit-composer-footer",
});

EditComposerFooter.displayName = "EditComposerFooter";

namespace EditComposerCancel {
  export type Element = HTMLButtonElement;
  export type Props = Partial<ButtonProps>;
}

const EditComposerCancel = forwardRef<
  EditComposerCancel.Element,
  EditComposerCancel.Props
>((props, ref) => {
  const {
    strings: { editComposer: { cancel: { label = "Cancel" } = {} } = {} } = {},
  } = useThreadConfig();
  return (
    <ComposerPrimitive.Cancel asChild>
      <Button variant="ghost" {...props} ref={ref}>
        {props.children ?? label}
      </Button>
    </ComposerPrimitive.Cancel>
  );
});

EditComposerCancel.displayName = "EditComposerCancel";

namespace EditComposerSend {
  export type Element = HTMLButtonElement;
  export type Props = Partial<ButtonProps>;
}

const EditComposerSend = forwardRef<
  EditComposerSend.Element,
  EditComposerSend.Props
>((props, ref) => {
  const {
    strings: { editComposer: { send: { label = "Send" } = {} } = {} } = {},
  } = useThreadConfig();
  return (
    <ComposerPrimitive.Send asChild>
      <Button {...props} ref={ref}>
        {props.children ?? label}
      </Button>
    </ComposerPrimitive.Send>
  );
});

EditComposerSend.displayName = "EditComposerSend";

const exports = {
  Root: EditComposerRoot,
  Input: EditComposerInput,
  Footer: EditComposerFooter,
  Cancel: EditComposerCancel,
  Send: EditComposerSend,
};

export default Object.assign(EditComposer, exports) as typeof EditComposer &
  typeof exports;



================================================
File: packages/react-ui/src/ui/index.ts
================================================
export {
  ThreadConfigProvider,
  useThreadConfig,
  type ThreadConfig,
  type ThreadWelcomeConfig,
  type UserMessageConfig,
  type AssistantMessageConfig,
  type StringsConfig,
  type SuggestionConfig,
  type ThreadConfigProviderProps,
} from "./thread-config";

export { default as AssistantActionBar } from "./assistant-action-bar";

export { default as AssistantMessage } from "./assistant-message";

export { default as AssistantModal } from "./assistant-modal";

export { default as BranchPicker } from "./branch-picker";

export { default as Composer } from "./composer";

export { default as ContentPart } from "./content-part";

export {
  default as AttachmentUI, // TODO name collision with Attachment
} from "./attachment-ui";

export { default as EditComposer } from "./edit-composer";

export { default as Thread } from "./thread";

export { default as ThreadList } from "./thread-list";

export { default as ThreadListItem } from "./thread-list-item";

export { default as ThreadWelcome } from "./thread-welcome";

export { default as UserMessage } from "./user-message";

export { default as UserActionBar } from "./user-action-bar";

export {
  makeMarkdownText,
  type MakeMarkdownTextProps,
} from "./markdown/markdown-text";

export { CodeHeader } from "./markdown/code-header";



================================================
File: packages/react-ui/src/ui/thread-config.tsx
================================================
"use client";

import {
  ComponentType,
  FC,
  PropsWithChildren,
  ReactNode,
  createContext,
  useContext,
} from "react";

import { AvatarProps } from "./base/avatar";
import {
  AssistantRuntime,
  EmptyContentPartComponent,
  TextContentPartComponent,
  ToolCallContentPartProps,
  AssistantRuntimeProvider,
  AssistantToolUI,
  useAssistantRuntime,
} from "@assistant-ui/react";

export type SuggestionConfig = {
  text?: ReactNode | undefined;
  prompt: string;
};

export type ThreadWelcomeConfig = {
  message?: string | null | undefined;
  suggestions?: SuggestionConfig[] | undefined;
};

export type UserMessageConfig = {
  allowEdit?: boolean | undefined;
};

export type AssistantMessageConfig = {
  allowReload?: boolean | undefined;
  allowCopy?: boolean | undefined;
  allowSpeak?: boolean | undefined;
  allowFeedbackPositive?: boolean | undefined;
  allowFeedbackNegative?: boolean | undefined;
  components?:
    | {
        Text?: TextContentPartComponent | undefined;
        Empty?: EmptyContentPartComponent | undefined;
        ToolFallback?: ComponentType<ToolCallContentPartProps> | undefined;
        Footer?: ComponentType | undefined;
      }
    | undefined;
};

export type BranchPickerConfig = {
  allowBranchPicker?: boolean | undefined;
};

export type ComposerConfig = {
  allowAttachments?: boolean | undefined;
};

export type StringsConfig = {
  assistantModal?: {
    open: {
      button: {
        tooltip?: string | undefined;
      };
    };
    closed: {
      button: {
        tooltip?: string | undefined;
      };
    };
  };
  threadList?: {
    new?: {
      label?: string | undefined;
    };
    item?: {
      title?: {
        fallback?: string | undefined;
      };
      archive?: {
        tooltip?: string | undefined;
      };
    };
  };
  thread?: {
    scrollToBottom?: {
      tooltip?: string | undefined;
    };
  };
  welcome?: {
    message?: string | undefined;
  };
  userMessage?: {
    edit?: {
      tooltip?: string | undefined;
    };
  };
  assistantMessage?: {
    reload?: {
      tooltip?: string | undefined;
    };
    copy?: {
      tooltip?: string | undefined;
    };
    speak?: {
      tooltip?: string | undefined;
      stop?: {
        tooltip?: string | undefined;
      };
    };
    feedback?: {
      positive?: {
        tooltip?: string | undefined;
      };
      negative?: {
        tooltip?: string | undefined;
      };
    };
  };
  branchPicker?: {
    previous?: {
      tooltip?: string | undefined;
    };
    next?: {
      tooltip?: string | undefined;
    };
  };
  composer?: {
    send?:
      | {
          tooltip?: string | undefined;
        }
      | undefined;
    cancel?:
      | {
          tooltip?: string | undefined;
        }
      | undefined;
    addAttachment?:
      | {
          tooltip?: string | undefined;
        }
      | undefined;
    removeAttachment?: {
      tooltip?: string | undefined;
    };
    input?: {
      placeholder?: string | undefined;
    };
  };
  editComposer?: {
    send?: {
      label?: string | undefined;
    };
    cancel?: {
      label?: string | undefined;
    };
  };
  code?: {
    header?: {
      copy?: {
        tooltip?: string | undefined;
      };
    };
  };
};

const ThreadConfigContext = createContext<ThreadConfig>({});

export type ThreadConfig = {
  runtime?: AssistantRuntime | undefined;

  assistantAvatar?: AvatarProps | undefined;

  welcome?: ThreadWelcomeConfig | undefined;
  assistantMessage?: AssistantMessageConfig | undefined;
  userMessage?: UserMessageConfig | undefined;

  branchPicker?: BranchPickerConfig | undefined;

  composer?: ComposerConfig | undefined;

  strings?: StringsConfig | undefined;

  tools?: AssistantToolUI[] | undefined; // TODO add AssistantTool support

  components?:
    | {
        UserMessage?: ComponentType | undefined;
        AssistantMessage?: ComponentType | undefined;
        EditComposer?: ComponentType | undefined;
        Composer?: ComponentType | undefined;
        ThreadWelcome?: ComponentType | undefined;
        MessagesFooter?: ComponentType | undefined;
      }
    | undefined;
};

export const useThreadConfig = (): Omit<ThreadConfig, "runtime"> => {
  return useContext(ThreadConfigContext);
};

export type ThreadConfigProviderProps = PropsWithChildren<{
  config?: ThreadConfig | undefined;
}>;

export const ThreadConfigProvider: FC<ThreadConfigProviderProps> = ({
  children,
  config,
}) => {
  const hasAssistant = !!useAssistantRuntime({ optional: true });

  const hasConfig = config && Object.keys(config).length > 0;
  const outerConfig = useThreadConfig();

  if (hasConfig && Object.keys(outerConfig).length > 0) {
    throw new Error(
      "You are providing ThreadConfig to several nested components. Please provide all configuration to the same component.",
    );
  }

  const configProvider = hasConfig ? (
    <ThreadConfigContext.Provider value={config}>
      {children}
    </ThreadConfigContext.Provider>
  ) : (
    <>{children}</>
  );

  if (!config?.runtime) return configProvider;

  if (hasAssistant) {
    throw new Error(
      "You provided a runtime to <Thread> while simulataneously using <AssistantRuntimeProvider>. This is not allowed.",
    );
  }
  return (
    <AssistantRuntimeProvider runtime={config.runtime}>
      {configProvider}
    </AssistantRuntimeProvider>
  );
};

ThreadConfigProvider.displayName = "ThreadConfigProvider";



================================================
File: packages/react-ui/src/ui/thread-list-item.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, type FC } from "react";
import { ArchiveIcon } from "lucide-react";

import { withDefaults } from "./utils/withDefaults";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import { ThreadListItemPrimitive } from "@assistant-ui/react";
import { useThreadConfig } from "./thread-config";
import classNames from "classnames";

const ThreadListItem: FC = () => {
  return (
    <ThreadListItemRoot>
      <ThreadListItemTrigger>
        <ThreadListItemTitle />
      </ThreadListItemTrigger>
      <ThreadListItemArchive />
    </ThreadListItemRoot>
  );
};

const ThreadListItemRoot = withDefaults(ThreadListItemPrimitive.Root, {
  className: "aui-thread-list-item",
});

ThreadListItemRoot.displayName = "ThreadListItemRoot";

const ThreadListItemTrigger = withDefaults(ThreadListItemPrimitive.Trigger, {
  className: "aui-thread-list-item-trigger",
});

namespace ThreadListItemPrimitiveTitle {
  export type Element = HTMLParagraphElement;
  export type Props = ComponentPropsWithoutRef<"p">;
}

const ThreadListItemTitle = forwardRef<
  ThreadListItemPrimitiveTitle.Element,
  ThreadListItemPrimitiveTitle.Props
>(({ className, ...props }, ref) => {
  const config = useThreadConfig();
  const fallback =
    config.strings?.threadList?.item?.title?.fallback ?? "New Chat";

  return (
    <p
      ref={ref}
      className={classNames("aui-thread-list-item-title", className)}
      {...props}
    >
      <ThreadListItemPrimitive.Title fallback={fallback} />
    </p>
  );
});

ThreadListItemTitle.displayName = "ThreadListItemTitle";

const ThreadListItemArchive = forwardRef<
  HTMLButtonElement,
  Partial<TooltipIconButton.Props>
>(({ className, ...props }, ref) => {
  const config = useThreadConfig();
  const tooltip =
    config.strings?.threadList?.item?.archive?.tooltip ?? "Archive thread";

  return (
    <ThreadListItemPrimitive.Archive asChild>
      <TooltipIconButton
        ref={ref}
        className={classNames("aui-thread-list-item-archive", className)}
        variant="ghost"
        tooltip={tooltip}
        {...props}
      >
        <ArchiveIcon />
      </TooltipIconButton>
    </ThreadListItemPrimitive.Archive>
  );
});

ThreadListItemArchive.displayName = "ThreadListItemArchive";

const exports = {
  Root: ThreadListItemRoot,
  Title: ThreadListItemTitle,
  Archive: ThreadListItemArchive,
};

export default Object.assign(ThreadListItem, exports) as typeof ThreadListItem &
  typeof exports;



================================================
File: packages/react-ui/src/ui/thread-list.tsx
================================================
"use client";

import { forwardRef, type FC } from "react";
import { PlusIcon } from "lucide-react";

import { withDefaults } from "./utils/withDefaults";
import { ThreadListPrimitive } from "@assistant-ui/react";
import ThreadListItem from "./thread-list-item";
import { useThreadConfig } from "./thread-config";
import { Button, ButtonProps } from "./base";

const ThreadList: FC = () => {
  return (
    <ThreadListRoot>
      <ThreadListNew />
      <ThreadListItems />
    </ThreadListRoot>
  );
};

const ThreadListRoot = withDefaults(ThreadListPrimitive.Root, {
  className: "aui-root aui-thread-list-root",
});
ThreadListRoot.displayName = "ThreadListRoot";

const ThreadListNew = forwardRef<
  HTMLButtonElement,
  ThreadListPrimitive.New.Props & ButtonProps
>((props, ref) => {
  const config = useThreadConfig();
  const label = config.strings?.threadList?.new?.label ?? "New Thread";

  return (
    <ThreadListPrimitive.New asChild>
      <Button
        ref={ref}
        className="aui-thread-list-new"
        variant="ghost"
        {...props}
      >
        <PlusIcon />
        {label}
      </Button>
    </ThreadListPrimitive.New>
  );
});
ThreadListNew.displayName = "ThreadListNew";

namespace ThreadListItems {
  export type Props = {
    /**
     * Optional custom components to override default thread list items
     */
    components?: Partial<ThreadListPrimitive.Items.Props["components"]>;
  };
}

const ThreadListItems: FC<ThreadListItems.Props> = ({ components }) => {
  return (
    <ThreadListPrimitive.Items
      components={{
        ...components,
        ThreadListItem: components?.ThreadListItem ?? ThreadListItem,
      }}
    />
  );
};

ThreadListItems.displayName = "ThreadListItems";

const exports = {
  Root: ThreadListRoot,
  New: ThreadListNew,
  Items: ThreadListItems,
};

export default Object.assign(ThreadList, exports) as typeof ThreadList &
  typeof exports;



================================================
File: packages/react-ui/src/ui/thread-welcome.tsx
================================================
"use client";

import { ComponentPropsWithoutRef, forwardRef, type FC } from "react";
import { withDefaults } from "./utils/withDefaults";
import { Avatar } from "./base/avatar";
import { SuggestionConfig, useThreadConfig } from "./thread-config";
import { ThreadPrimitive, useThread } from "@assistant-ui/react";

const ThreadWelcome: FC = () => {
  return (
    <ThreadWelcomeRoot>
      <ThreadWelcomeCenter>
        <ThreadWelcomeAvatar />
        <ThreadWelcomeMessage />
      </ThreadWelcomeCenter>
      <ThreadWelcomeSuggestions />
    </ThreadWelcomeRoot>
  );
};

ThreadWelcome.displayName = "ThreadWelcome";

const ThreadWelcomeRootStyled = withDefaults("div", {
  className: "aui-thread-welcome-root",
});

const ThreadWelcomeCenter = withDefaults("div", {
  className: "aui-thread-welcome-center",
});

namespace ThreadWelcomeRoot {
  export type Element = HTMLDivElement;
  export type Props = ComponentPropsWithoutRef<"div">;
}

const ThreadWelcomeRoot = forwardRef<
  ThreadWelcomeRoot.Element,
  ThreadWelcomeRoot.Props
>((props, ref) => {
  return (
    <ThreadPrimitive.Empty>
      <ThreadWelcomeRootStyled {...props} ref={ref} />
    </ThreadPrimitive.Empty>
  );
});

ThreadWelcomeRoot.displayName = "ThreadWelcomeRoot";

const ThreadWelcomeAvatar: FC = () => {
  const { assistantAvatar: avatar = { fallback: "A" } } = useThreadConfig();
  return <Avatar {...avatar} />;
};

const ThreadWelcomeMessageStyled = withDefaults("p", {
  className: "aui-thread-welcome-message",
});

namespace ThreadWelcomeMessage {
  export type Element = HTMLParagraphElement;
  export type Props = Omit<
    ComponentPropsWithoutRef<typeof ThreadWelcomeMessageStyled>,
    "children"
  > & { message?: string | undefined };
}

const ThreadWelcomeMessage = forwardRef<
  ThreadWelcomeMessage.Element,
  ThreadWelcomeMessage.Props
>(({ message: messageProp, ...rest }, ref) => {
  const {
    welcome: { message } = {},
    strings: {
      welcome: { message: defaultMessage = "How can I help you today?" } = {},
    } = {},
  } = useThreadConfig();
  return (
    <ThreadWelcomeMessageStyled {...rest} ref={ref}>
      {messageProp ?? message ?? defaultMessage}
    </ThreadWelcomeMessageStyled>
  );
});

ThreadWelcomeMessage.displayName = "ThreadWelcomeMessage";

const ThreadWelcomeSuggestionContainer = withDefaults("div", {
  className: "aui-thread-welcome-suggestions",
});

const ThreadWelcomeSuggestionStyled = withDefaults(ThreadPrimitive.Suggestion, {
  className: "aui-thread-welcome-suggestion",
});

export namespace ThreadWelcomeSuggestion {
  export type Props = {
    suggestion: SuggestionConfig;
  };
}

const ThreadWelcomeSuggestion: FC<ThreadWelcomeSuggestion.Props> = ({
  suggestion: { text, prompt },
}) => {
  return (
    <ThreadWelcomeSuggestionStyled prompt={prompt} method="replace" autoSend>
      <span className="aui-thread-welcome-suggestion-text">
        {text ?? prompt}
      </span>
    </ThreadWelcomeSuggestionStyled>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  const suggestions2 = useThread((t) => t.suggestions);
  const { welcome: { suggestions } = {} } = useThreadConfig();

  const finalSuggestions = suggestions2.length ? suggestions2 : suggestions;

  return (
    <ThreadWelcomeSuggestionContainer>
      {finalSuggestions?.map((suggestion, idx) => {
        const key = `${suggestion.prompt}-${idx}`;
        return <ThreadWelcomeSuggestion key={key} suggestion={suggestion} />;
      })}
    </ThreadWelcomeSuggestionContainer>
  );
};

ThreadWelcomeSuggestions.displayName = "ThreadWelcomeSuggestions";

const exports = {
  Root: ThreadWelcomeRoot,
  Center: ThreadWelcomeCenter,
  Avatar: ThreadWelcomeAvatar,
  Message: ThreadWelcomeMessage,
  Suggestions: ThreadWelcomeSuggestions,
  Suggestion: ThreadWelcomeSuggestion,
};

export default Object.assign(ThreadWelcome, exports) as typeof ThreadWelcome &
  typeof exports;



================================================
File: packages/react-ui/src/ui/thread.tsx
================================================
"use client";

import { ComponentType, forwardRef, type FC } from "react";
import { ArrowDownIcon } from "lucide-react";

import { withDefaults } from "./utils/withDefaults";
import Composer from "./composer";
import ThreadWelcome from "./thread-welcome";
import { TooltipIconButton } from "./base/tooltip-icon-button";
import AssistantMessage from "./assistant-message";
import UserMessage from "./user-message";
import EditComposer from "./edit-composer";
import {
  ThreadConfig,
  ThreadConfigProvider,
  ThreadConfigProviderProps,
  useThreadConfig,
} from "./thread-config";
import { ThreadPrimitive, useThread } from "@assistant-ui/react";

const Thread: FC<ThreadConfig> = (config) => {
  const {
    components: {
      Composer: ComposerComponent = Composer,
      ThreadWelcome: ThreadWelcomeComponent = ThreadWelcome,
      MessagesFooter,
      ...messageComponents
    } = {},
  } = config;
  return (
    <ThreadRoot config={config}>
      <ThreadViewport>
        <ThreadWelcomeComponent />
        <ThreadMessages
          MessagesFooter={MessagesFooter}
          components={messageComponents}
        />
        <ThreadFollowupSuggestions />
        <ThreadViewportFooter>
          <ThreadScrollToBottom />
          <ComposerComponent />
        </ThreadViewportFooter>
      </ThreadViewport>
    </ThreadRoot>
  );
};

namespace ThreadRoot {
  export type Element = HTMLDivElement;
  export type Props = ThreadPrimitive.Root.Props & ThreadConfigProviderProps;
}

const ThreadRootStyled = withDefaults(ThreadPrimitive.Root, {
  className: "aui-root aui-thread-root",
});

const ThreadRoot = forwardRef<ThreadRoot.Element, ThreadRoot.Props>(
  ({ config, ...props }, ref) => {
    return (
      <ThreadConfigProvider config={config}>
        <ThreadRootStyled {...props} ref={ref} />
      </ThreadConfigProvider>
    );
  },
);

ThreadRoot.displayName = "ThreadRoot";

const ThreadViewport = withDefaults(ThreadPrimitive.Viewport, {
  className: "aui-thread-viewport",
});

ThreadViewport.displayName = "ThreadViewport";

const ThreadViewportFooter = withDefaults("div", {
  className: "aui-thread-viewport-footer",
});

ThreadViewportFooter.displayName = "ThreadViewportFooter";

const ThreadMessages: FC<{
  unstable_flexGrowDiv?: boolean;
  components?: Partial<ThreadPrimitive.Messages.Props["components"]>;
  MessagesFooter?: ComponentType | undefined;
}> = ({
  components,
  MessagesFooter,
  unstable_flexGrowDiv: flexGrowDiv = true,
  ...rest
}) => {
  return (
    <>
      <ThreadPrimitive.Messages
        components={{
          ...components,
          UserMessage: components?.UserMessage ?? UserMessage,
          AssistantMessage: components?.AssistantMessage ?? AssistantMessage,
          EditComposer: components?.EditComposer ?? EditComposer,
        }}
        {...rest}
      />
      {MessagesFooter && <MessagesFooter />}
      {flexGrowDiv && (
        <ThreadPrimitive.If empty={false}>
          <div style={{ flexGrow: 1 }} />
        </ThreadPrimitive.If>
      )}
    </>
  );
};

ThreadMessages.displayName = "ThreadMessages";

const ThreadFollowupSuggestions: FC = () => {
  const suggestions = useThread((t) => t.suggestions);

  return (
    <ThreadPrimitive.If empty={false} running={false}>
      <div className="aui-thread-followup-suggestions">
        {suggestions?.map((suggestion, idx) => (
          <ThreadPrimitive.Suggestion
            key={idx}
            className="aui-thread-followup-suggestion"
            prompt={suggestion.prompt}
            method="replace"
            autoSend
          >
            {suggestion.prompt}
          </ThreadPrimitive.Suggestion>
        ))}
      </div>
    </ThreadPrimitive.If>
  );
};

const ThreadScrollToBottomIconButton = withDefaults(TooltipIconButton, {
  variant: "outline",
  className: "aui-thread-scroll-to-bottom",
});

namespace ThreadScrollToBottom {
  export type Element = HTMLButtonElement;
  export type Props = Partial<TooltipIconButton.Props>;
}

const ThreadScrollToBottom = forwardRef<
  ThreadScrollToBottom.Element,
  ThreadScrollToBottom.Props
>((props, ref) => {
  const {
    strings: {
      thread: { scrollToBottom: { tooltip = "Scroll to bottom" } = {} } = {},
    } = {},
  } = useThreadConfig();
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <ThreadScrollToBottomIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <ArrowDownIcon />}
      </ThreadScrollToBottomIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
});

ThreadScrollToBottom.displayName = "ThreadScrollToBottom";

const exports = {
  Root: ThreadRoot,
  Viewport: ThreadViewport,
  Messages: ThreadMessages,
  FollowupSuggestions: ThreadFollowupSuggestions,
  ScrollToBottom: ThreadScrollToBottom,
  ViewportFooter: ThreadViewportFooter,
};

export default Object.assign(Thread, exports) as typeof Thread & typeof exports;



================================================
File: packages/react-ui/src/ui/user-action-bar.tsx
================================================
"use client";

import { forwardRef, type FC } from "react";
import { PencilIcon } from "lucide-react";

import { TooltipIconButton } from "./base/tooltip-icon-button";
import { withDefaults } from "./utils/withDefaults";
import { useThreadConfig } from "./thread-config";
import { useThread, ActionBarPrimitive } from "@assistant-ui/react";

const useAllowEdit = (ensureCapability = false) => {
  const { userMessage: { allowEdit = true } = {} } = useThreadConfig();
  const editSupported = useThread((t) => t.capabilities.edit);
  return allowEdit && (!ensureCapability || editSupported);
};

const UserActionBar: FC = () => {
  const allowEdit = useAllowEdit(true);
  if (!allowEdit) return null;
  return (
    <UserActionBarRoot hideWhenRunning autohide="not-last">
      <UserActionBarEdit />
    </UserActionBarRoot>
  );
};

UserActionBar.displayName = "UserActionBar";

const UserActionBarRoot = withDefaults(ActionBarPrimitive.Root, {
  className: "aui-user-action-bar-root",
});

UserActionBarRoot.displayName = "UserActionBarRoot";

namespace UserActionBarEdit {
  export type Element = ActionBarPrimitive.Edit.Element;
  export type Props = Partial<TooltipIconButton.Props>;
}

const UserActionBarEdit = forwardRef<
  UserActionBarEdit.Element,
  UserActionBarEdit.Props
>((props, ref) => {
  const {
    strings: { userMessage: { edit: { tooltip = "Edit" } = {} } = {} } = {},
  } = useThreadConfig();
  const allowEdit = useAllowEdit();
  return (
    <ActionBarPrimitive.Edit disabled={!allowEdit} asChild>
      <TooltipIconButton tooltip={tooltip} {...props} ref={ref}>
        {props.children ?? <PencilIcon />}
      </TooltipIconButton>
    </ActionBarPrimitive.Edit>
  );
});

UserActionBarEdit.displayName = "UserActionBarEdit";

const exports = {
  Root: UserActionBarRoot,
  Edit: UserActionBarEdit,
};

export default Object.assign(UserActionBar, exports) as typeof UserActionBar &
  typeof exports;



================================================
File: packages/react-ui/src/ui/user-message.tsx
================================================
import { ComponentPropsWithoutRef, forwardRef, type FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";

import BranchPicker from "./branch-picker";
import { withDefaults } from "./utils/withDefaults";
import UserActionBar from "./user-action-bar";
import ContentPart from "./content-part";
import Attachment from "./attachment-ui";

const UserMessage: FC = () => {
  return (
    <UserMessageRoot>
      <UserMessageAttachments />
      {/* TODO this is temporary until we place the UserActionBar in a better place */}
      <MessagePrimitive.If hasContent>
        <UserActionBar />
        <UserMessageContent />
      </MessagePrimitive.If>
      <BranchPicker />
    </UserMessageRoot>
  );
};

UserMessage.displayName = "UserMessage";

const UserMessageRoot = withDefaults(MessagePrimitive.Root, {
  className: "aui-user-message-root",
});

UserMessageRoot.displayName = "UserMessageRoot";

const UserMessageContentWrapper = withDefaults("div", {
  className: "aui-user-message-content",
});

namespace UserMessageContent {
  export type Element = HTMLDivElement;
  export type Props = MessagePrimitive.Content.Props &
    ComponentPropsWithoutRef<"div">;
}

const UserMessageContent = forwardRef<
  UserMessageContent.Element,
  UserMessageContent.Props
>(({ components, ...props }, ref) => {
  return (
    <UserMessageContentWrapper {...props} ref={ref}>
      <MessagePrimitive.Content
        components={{
          ...components,
          Text: components?.Text ?? ContentPart.Text,
        }}
      />
    </UserMessageContentWrapper>
  );
});

UserMessageContent.displayName = "UserMessageContent";

const UserMessageAttachmentsContainer = withDefaults("div", {
  className: "aui-user-message-attachments",
});

namespace UserMessageAttachments {
  export type Props = Partial<MessagePrimitive.Attachments.Props>;
}

const UserMessageAttachments: FC<UserMessageAttachments.Props> = ({
  components,
}) => {
  return (
    <MessagePrimitive.If hasAttachments>
      <UserMessageAttachmentsContainer>
        <MessagePrimitive.Attachments
          components={{
            ...components,
            Attachment: components?.Attachment ?? Attachment,
          }}
        />
      </UserMessageAttachmentsContainer>
    </MessagePrimitive.If>
  );
};

const exports = {
  Root: UserMessageRoot,
  Content: UserMessageContent,
  Attachments: UserMessageAttachments,
};

export default Object.assign(UserMessage, exports) as typeof UserMessage &
  typeof exports;



================================================
File: packages/react-ui/src/ui/base/CircleStopIcon.tsx
================================================
import { FC } from "react";

export const CircleStopIcon: FC = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};

CircleStopIcon.displayName = "CircleStopIcon";



================================================
File: packages/react-ui/src/ui/base/avatar.tsx
================================================
import type { FC } from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { withDefaults } from "../utils/withDefaults";

export type AvatarProps = {
  src?: string | undefined;
  alt?: string | undefined;
  fallback?: string | undefined;
};

export const Avatar: FC<AvatarProps> = ({ src, alt, fallback }) => {
  if (src == null && fallback == null) return null;

  return (
    <AvatarRoot>
      {src != null && <AvatarImage src={src} alt={alt} />}
      {fallback != null && <AvatarFallback>{fallback}</AvatarFallback>}
    </AvatarRoot>
  );
};

Avatar.displayName = "Avatar";

export const AvatarRoot = withDefaults(AvatarPrimitive.Root, {
  className: "aui-avatar-root",
});

AvatarRoot.displayName = "AvatarRoot";

export const AvatarImage = withDefaults(AvatarPrimitive.Image, {
  className: "aui-avatar-image",
});

AvatarImage.displayName = "AvatarImage";

export const AvatarFallback = withDefaults(AvatarPrimitive.Fallback, {
  className: "aui-avatar-fallback",
});

AvatarFallback.displayName = "AvatarFallback";



================================================
File: packages/react-ui/src/ui/base/button.tsx
================================================
import { cva, type VariantProps } from "class-variance-authority";
import { Primitive } from "@radix-ui/react-primitive";
import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";

const buttonVariants = cva("aui-button", {
  variants: {
    variant: {
      default: "aui-button-primary",
      outline: "aui-button-outline",
      ghost: "aui-button-ghost",
    },
    size: {
      default: "aui-button-medium",
      icon: "aui-button-icon",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

type ButtonElement = ComponentRef<typeof Primitive.button>;

export type ButtonProps = ComponentPropsWithoutRef<typeof Primitive.button> &
  VariantProps<typeof buttonVariants>;

const Button = forwardRef<ButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <Primitive.button
        className={buttonVariants({ variant, size, className })}
        {...props}
        ref={ref}
      />
    );
  },
);

Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: packages/react-ui/src/ui/base/dialog.tsx
================================================
import * as DialogPrimitive from "@radix-ui/react-dialog";

import classNames from "classnames";
import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from "react";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = forwardRef<
  ComponentRef<typeof DialogPrimitive.Overlay>,
  ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={classNames("aui-dialog-overlay", className)}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = forwardRef<
  ComponentRef<typeof DialogPrimitive.Content>,
  ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={classNames("aui-dialog-content", className)}
      {...props}
    >
      {children}
      {/* <DialogPrimitive.Close className="ring-offset-aui-background focus:ring-aui-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
        <XIcon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close> */}
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

// const DialogHeader = ({
//   className,
//   ...props
// }: HTMLAttributes<HTMLDivElement>) => (
//   <div
//     className={classNames(
//       "flex flex-col space-y-1.5 text-center sm:text-left",
//       className,
//     )}
//     {...props}
//   />
// );
// DialogHeader.displayName = "DialogHeader";

// const DialogFooter = ({
//   className,
//   ...props
// }: HTMLAttributes<HTMLDivElement>) => (
//   <div
//     className={classNames(
//       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
//       className,
//     )}
//     {...props}
//   />
// );
// DialogFooter.displayName = "DialogFooter";

// const DialogTitle = forwardRef<
//   ComponentRef<typeof DialogPrimitive.Title>,
//   ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
// >(({ className, ...props }, ref) => (
//   <DialogPrimitive.Title
//     ref={ref}
//     className={classNames(
//       "text-lg font-semibold leading-none tracking-tight",
//       className,
//     )}
//     {...props}
//   />
// ));
// DialogTitle.displayName = DialogPrimitive.Title.displayName;

// const DialogDescription = forwardRef<
//   ComponentRef<typeof DialogPrimitive.Description>,
//   ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
// >(({ className, ...props }, ref) => (
//   <DialogPrimitive.Description
//     ref={ref}
//     className={classNames("text-muted-foreground text-sm", className)}
//     {...props}
//   />
// ));
// DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  // DialogHeader,
  // DialogFooter,
  // DialogTitle,
  // DialogDescription,
};



================================================
File: packages/react-ui/src/ui/base/index.ts
================================================
export {
  Avatar,
  AvatarRoot,
  AvatarImage,
  AvatarFallback,
  type AvatarProps,
} from "./avatar";

export { Button, buttonVariants, type ButtonProps } from "./button";

export { Tooltip, TooltipContent, TooltipTrigger } from "./tooltip";

export { TooltipIconButton } from "./tooltip-icon-button";

export { CircleStopIcon } from "./CircleStopIcon";



================================================
File: packages/react-ui/src/ui/base/tooltip-icon-button.tsx
================================================
import { forwardRef } from "react";
import { Tooltip, TooltipContent, TooltipTrigger } from "./tooltip";
import { Button, ButtonProps } from "./button";

export namespace TooltipIconButton {
  export type Props = ButtonProps & {
    tooltip: string;
    side?: "top" | "bottom" | "left" | "right";
  };
}

export const TooltipIconButton = forwardRef<
  HTMLButtonElement,
  TooltipIconButton.Props
>(({ children, tooltip, side = "bottom", ...rest }, ref) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button variant="ghost" size="icon" {...rest} ref={ref}>
          {children}
          <span className="aui-sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side={side}>{tooltip}</TooltipContent>
    </Tooltip>
  );
});

TooltipIconButton.displayName = "TooltipIconButton";



================================================
File: packages/react-ui/src/ui/base/tooltip.tsx
================================================
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { withDefaults } from "../utils/withDefaults";
import { FC } from "react";

export const Tooltip: FC<TooltipPrimitive.TooltipProps> = (props) => {
  return (
    <TooltipPrimitive.Provider>
      <TooltipPrimitive.Root {...props} />
    </TooltipPrimitive.Provider>
  );
};

Tooltip.displayName = "Tooltip";

export const TooltipTrigger = TooltipPrimitive.Trigger;

export const TooltipContent = withDefaults(TooltipPrimitive.Content, {
  sideOffset: 4,
  className: "aui-tooltip-content",
});

TooltipContent.displayName = "TooltipContent";



================================================
File: packages/react-ui/src/ui/markdown/code-header.tsx
================================================
import { FC } from "react";
import { CheckIcon, CopyIcon } from "lucide-react";
import { CodeHeaderProps } from "@assistant-ui/react-markdown";
import { useCopyToClipboard } from "./useCopyToClipboard";
import { useThreadConfig } from "../thread-config";
import { TooltipIconButton } from "../base";

export const CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {
  const {
    strings: {
      code: { header: { copy: { tooltip = "Copy" } = {} } = {} } = {},
    } = {},
  } = useThreadConfig();

  const { isCopied, copyToClipboard } = useCopyToClipboard();
  const onCopy = () => {
    if (!code || isCopied) return;
    copyToClipboard(code);
  };

  return (
    <div className="aui-code-header-root">
      <span className="aui-code-header-language">{language}</span>
      <TooltipIconButton tooltip={tooltip} onClick={onCopy}>
        {!isCopied && <CopyIcon />}
        {isCopied && <CheckIcon />}
      </TooltipIconButton>
    </div>
  );
};



================================================
File: packages/react-ui/src/ui/markdown/markdown-text.tsx
================================================
import { FC, memo } from "react";
import { CodeHeader } from "./code-header";
import classNames from "classnames";
import {
  MarkdownTextPrimitive,
  MarkdownTextPrimitiveProps,
  unstable_memoizeMarkdownComponents,
  useIsMarkdownCodeBlock,
} from "@assistant-ui/react-markdown";
import { INTERNAL } from "@assistant-ui/react";

const { withSmoothContextProvider, useSmoothStatus } = INTERNAL;

export type MakeMarkdownTextProps = MarkdownTextPrimitiveProps;

const defaultComponents = unstable_memoizeMarkdownComponents({
  h1: ({ className, ...props }) => (
    <h1 className={classNames("aui-md-h1", className)} {...props} />
  ),
  h2: ({ className, ...props }) => (
    <h2 className={classNames("aui-md-h2", className)} {...props} />
  ),
  h3: ({ className, ...props }) => (
    <h3 className={classNames("aui-md-h3", className)} {...props} />
  ),
  h4: ({ className, ...props }) => (
    <h4 className={classNames("aui-md-h4", className)} {...props} />
  ),
  h5: ({ className, ...props }) => (
    <h5 className={classNames("aui-md-h5", className)} {...props} />
  ),
  h6: ({ className, ...props }) => (
    <h6 className={classNames("aui-md-h6", className)} {...props} />
  ),
  p: ({ className, ...props }) => (
    <p className={classNames("aui-md-p", className)} {...props} />
  ),
  a: ({ className, ...props }) => (
    <a className={classNames("aui-md-a", className)} {...props} />
  ),
  blockquote: ({ className, ...props }) => (
    <blockquote
      className={classNames("aui-md-blockquote", className)}
      {...props}
    />
  ),
  ul: ({ className, ...props }) => (
    <ul className={classNames("aui-md-ul", className)} {...props} />
  ),
  ol: ({ className, ...props }) => (
    <ol className={classNames("aui-md-ol", className)} {...props} />
  ),
  hr: ({ className, ...props }) => (
    <hr className={classNames("aui-md-hr", className)} {...props} />
  ),
  table: ({ className, ...props }) => (
    <table className={classNames("aui-md-table", className)} {...props} />
  ),
  th: ({ className, ...props }) => (
    <th className={classNames("aui-md-th", className)} {...props} />
  ),
  td: ({ className, ...props }) => (
    <td className={classNames("aui-md-td", className)} {...props} />
  ),
  tr: ({ className, ...props }) => (
    <tr className={classNames("aui-md-tr", className)} {...props} />
  ),
  sup: ({ className, ...props }) => (
    <sup className={classNames("aui-md-sup", className)} {...props} />
  ),
  pre: ({ className, ...props }) => (
    <pre className={classNames("aui-md-pre", className)} {...props} />
  ),
  code: function Code({ className, ...props }) {
    const isCodeBlock = useIsMarkdownCodeBlock();
    return (
      <code
        className={classNames(!isCodeBlock && "aui-md-inline-code", className)}
        {...props}
      />
    );
  },
  CodeHeader,
});

export const makeMarkdownText = ({
  className,
  components: userComponents,
  ...rest
}: MakeMarkdownTextProps = {}) => {
  const components = {
    ...defaultComponents,
    ...Object.fromEntries(
      // ignore undefined values, so undefined values do not override default components
      Object.entries(userComponents ?? {}).filter(([_, v]) => v !== undefined),
    ),
  };

  const MarkdownTextImpl: FC = () => {
    const status = useSmoothStatus();
    return (
      <MarkdownTextPrimitive
        components={components}
        {...rest}
        className={classNames(
          status.type === "running" && "aui-md-running",
          className,
        )}
      />
    );
  };
  MarkdownTextImpl.displayName = "MarkdownText";

  return memo(withSmoothContextProvider(MarkdownTextImpl), () => true);
};



================================================
File: packages/react-ui/src/ui/markdown/useCopyToClipboard.tsx
================================================
"use client";

import { useState } from "react";

namespace useCopyToClipboard {
  export interface Options {
    copiedDuration?: number;
  }
}

export const useCopyToClipboard = ({
  copiedDuration = 3000,
}: useCopyToClipboard.Options = {}) => {
  const [isCopied, setIsCopied] = useState<boolean>(false);

  const copyToClipboard = (value: string) => {
    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  };

  return { isCopied, copyToClipboard };
};



================================================
File: packages/react-ui/src/ui/utils/withDefaults.tsx
================================================
import { ComponentPropsWithoutRef, ElementType, forwardRef } from "react";
import classNames from "classnames";
import { ComponentRef } from "react";

export const withDefaultProps =
  <TProps extends { className?: string }>({
    className,
    ...defaultProps
  }: Partial<TProps>) =>
  ({ className: classNameProp, ...props }: TProps) => {
    return {
      className: classNames(className, classNameProp),
      ...defaultProps,
      ...props,
    } as TProps;
  };

export const withDefaults = <TComponent extends ElementType>(
  Component: TComponent,
  defaultProps: Partial<ComponentPropsWithoutRef<TComponent>>,
) => {
  type TComponentProps = typeof defaultProps;
  const getProps = withDefaultProps<TComponentProps>(defaultProps);
  const WithDefaults = forwardRef<ComponentRef<TComponent>, TComponentProps>(
    (props, ref) => {
      const ComponentAsAny = Component as any;
      return <ComponentAsAny {...getProps(props as any)} ref={ref} />;
    },
  );
  WithDefaults.displayName =
    "withDefaults(" +
    (typeof Component === "string" ? Component : Component.displayName) +
    ")";
  return WithDefaults;
};



================================================
File: packages/react-ui/tailwindcss/README.md
================================================
This directory exists to support subpath imports for TypeScript projects using --moduleResolution node.


================================================
File: packages/react-ui/tailwindcss/package-lock.json
================================================
{
  "name": "tailwindcss",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}



================================================
File: packages/react-ui/tailwindcss/package.json
================================================
{
  "main": "../dist/tailwindcss/index.js",
  "module": "../dist/tailwindcss/index.mjs",
  "types": "../dist/tailwindcss/index.d.ts"
}


================================================
File: packages/tailwindcss-transformer/package.json
================================================
{
  "name": "@assistant-ui/tailwindcss-transformer",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "main": "./src/index.ts",
  "dependencies": {
    "postcss": "^8.5.1",
    "postcss-value-parser": "^4.2.0"
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "eslint-config-next": "15.1.6"
  }
}



================================================
File: packages/tailwindcss-transformer/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    },
    "moduleResolution": "Node",
    "module": "CommonJS"
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/tailwindcss-transformer/src/index.ts
================================================
import { type Declaration, Plugin } from "postcss";
import valueParser, { type ParsedValue } from "postcss-value-parser";

const tailwindcssAui = (): Plugin => ({
  postcssPlugin: "@assistant-ui/tailwindcss-transformer",
  AtRule: {
    keyframes: (atRule) => {
      if (!atRule.params.startsWith("aui-")) {
        atRule.params = `aui-${atRule.params}`;
      }
    },
  },
  Declaration(decl: Declaration) {
    if (decl.prop.startsWith("--tw-")) {
      decl.prop = decl.prop.replace("--tw-", "--aui-");
    }
    const value: ParsedValue = valueParser(decl.value);
    value.walk((node) => {
      if (node.type === "function" && node.value === "var") {
        node.nodes.forEach((n) => {
          if (n.type === "word" && n.value.startsWith("--tw-")) {
            n.value = n.value.replace("--tw-", "--aui-");
          }
        });
      }
    });
    decl.value = value.toString();

    if (
      (decl.prop === "animation" || decl.prop === "animation-name") &&
      !decl.value.startsWith("aui-")
    ) {
      decl.value = `aui-${decl.value}`;
    }
  },
});

tailwindcssAui.postcss = true;

export = tailwindcssAui;



================================================
File: packages/tool-ui-weather/README.md
================================================
# `@too-ui/weather`

A `<Weather />` component for `@assistant-ui/react`.



================================================
File: packages/tool-ui-weather/CHANGELOG.md
================================================
# @tool-ui/weather

## 0.0.24

### Patch Changes

- 72e66db: chore: update dependencies

## 0.0.23

### Patch Changes

- 22272e6: chore: update dependencies

## 0.0.22

### Patch Changes

- 345f3d5: chore: update dependencies

## 0.0.21

### Patch Changes

- 4c2bf58: chore: update dependencies

## 0.0.20

### Patch Changes

- 982a6a2: chore: update dependencies

## 0.0.19

### Patch Changes

- ec3b8cc: chore: update dependencies

## 0.0.18

### Patch Changes

- 4c54273: chore: update dependencies

## 0.0.17

### Patch Changes

- 2112ce8: chore: update dependencies

## 0.0.16

### Patch Changes

- 933b8c0: chore: update deps

## 0.0.15

### Patch Changes

- c59d8b5: chore: update dependencies

## 0.0.14

### Patch Changes

- 1ada091: chore: update deps

## 0.0.13

### Patch Changes

- ff5b86c: chore: update deps

## 0.0.12

### Patch Changes

- d2375cd: build: disable bundling in UI package releases

## 0.0.11

### Patch Changes

- fb32e61: chore: update deps
- fb32e61: feat: react-19 support

## 0.0.10

### Patch Changes

- fb46305: chore: update dependencies

## 0.0.9

### Patch Changes

- d8bd40b: chore: update dependencies

## 0.0.8

### Patch Changes

- 27208fb: fix: only include "use client" banner in ESM builds

## 0.0.7

### Patch Changes

- ed24305: fix: add newline after "use client" for .js builds

## 0.0.6

### Patch Changes

- c438773: feat: allow disabling ComposerInput keyboard shortcuts
- e1ae3d0: chore: update dependencies

## 0.0.5

### Patch Changes

- 155d6e7: chore: update dependencies

## 0.0.4

### Patch Changes

- c348553: chore: update dependencies

## 0.0.3

### Patch Changes

- 04f6fc8: chore: update deps



================================================
File: packages/tool-ui-weather/package.json
================================================
{
  "name": "@tool-ui/weather",
  "version": "0.0.24",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "build": "tsx scripts/build.mts"
  },
  "peerDependencies": {
    "@types/react": "*",
    "react": "^18 || ^19 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "devDependencies": {
    "@assistant-ui/tsconfig": "workspace:*",
    "@types/node": "^22.13.1",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "tsup": "8.3.6",
    "tsx": "^4.19.2"
  },
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "homepage": "https://www.assistant-ui.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assistant-ui/assistant-ui.git"
  },
  "bugs": {
    "url": "https://github.com/assistant-ui/assistant-ui/issues"
  }
}



================================================
File: packages/tool-ui-weather/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";
import animatePlugin from "tailwindcss-animate";

const config = {
  content: ["./src/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"],
  corePlugins: {
    backgroundOpacity: false,
    touchAction: false,
    scrollSnapType: false,
    gradientColorStops: false,
    fontVariantNumeric: false,
    ringOffsetWidth: false,
    ringOffsetColor: false,
    ringOpacity: false,
    boxShadowColor: false,
    blur: false,
    brightness: false,
    contrast: false,
    grayscale: false,
    hueRotate: false,
    invert: false,
    saturate: false,
    sepia: false,
    dropShadow: false,
    backdropBlur: false,
    backdropBrightness: false,
    backdropContrast: false,
    backdropGrayscale: false,
    backdropHueRotate: false,
    backdropInvert: false,
    backdropOpacity: false,
    backdropSaturate: false,
    backdropSepia: false,
    container: false,
  },
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      borderRadius: {
        lg: "var(--aui-radius)",
        md: "calc(var(--aui-radius) - 2px)",
        sm: "calc(var(--aui-radius) - 4px)",
      },
    },
  },
  plugins: [
    animatePlugin,
    require("@assistant-ui/react-ui/tailwindcss")({ components: [] }),
  ],
} satisfies Config;

export default config;



================================================
File: packages/tool-ui-weather/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/tool-ui-weather/scripts/build.mts
================================================
import { build } from "tsup";

// JS
await build({
  entry: ["src/index.ts"],
  format: ["cjs", "esm"],
  dts: true,
  sourcemap: true,
  clean: true,
  esbuildOptions: (options, { format }) => {
    if (format === "esm") {
      options.banner = {
        js: '"use client";',
      };
    }
  },
});



================================================
File: packages/tool-ui-weather/src/Weather.tsx
================================================
import { CSSProperties, FC } from "react";

export declare namespace Weather {
  export interface ForecastItem {
    time: string;
    temperature: number;
    weatherIcon: "sunny" | "partly-cloudy";
  }

  export interface WeatherData {
    currentTemperature: number;
    currentWeatherIcon: string;
    weatherDescription: string;
    forecast: ForecastItem[];
  }

  export type WeatherProps = {
    data: WeatherData | undefined;
  };
}

export const Weather: FC<Weather.WeatherProps> = ({ data }) => {
  const containerStyle: CSSProperties = {
    display: "flex",
    flexDirection: "column",
    gap: "0.5rem",
    borderRadius: "0.5rem",
    backgroundColor: "#409edc",
    padding: "1rem",
    width: "360px",
    alignSelf: "center",
    margin: "0.5rem 0",
  };

  const headerStyle: CSSProperties = {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
  };

  const dateStyle: CSSProperties = {
    color: "rgba(239, 246, 255, 1)",
    marginBottom: "0.25rem",
    textTransform: "capitalize",
  };

  const temperatureContainerStyle: CSSProperties = {
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    gap: "0.5rem",
  };

  const temperatureStyle: CSSProperties = {
    color: "rgba(239, 246, 255, 1)",
    fontSize: "3rem",
    fontWeight: "bold",
  };

  const weatherIconStyle: CSSProperties = {
    height: "2.5rem",
    width: "2.5rem",
    borderRadius: "9999px",
    backgroundColor: "#fff082",
  };

  const weatherDescriptionStyle: CSSProperties = {
    color: "rgba(239, 246, 255, 1)",
    textTransform: "capitalize",
  };

  const forecastContainerStyle: CSSProperties = {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: "1rem",
    marginBottom: "1rem",
  };

  const forecastItemStyle: CSSProperties = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
  };

  const forecastTimeStyle: CSSProperties = {
    color: "rgba(239, 246, 255, 1)",
    marginBottom: "0.5rem",
    fontSize: "0.75rem",
  };

  const forecastIconStyle: CSSProperties = {
    height: "1.5rem",
    width: "1.5rem",
    borderRadius: "9999px",
    backgroundColor: "#fff082",
  };

  const forecastTemperatureStyle: CSSProperties = {
    color: "rgba(239, 246, 255, 1)",
    marginTop: "0.25rem",
    fontSize: "0.875rem",
  };

  const cloudIconStyle: CSSProperties = {
    position: "absolute",
    right: "-0.25rem",
    bottom: "0",
    height: "0.75rem",
    width: "1rem",
    borderRadius: "9999px",
    backgroundColor: "rgb(209, 213, 219)",
  };

  if (!data) return null;

  return (
    <div style={containerStyle}>
      <div style={headerStyle}>
        <div>
          <div style={dateStyle}>
            {new Date().toLocaleString("en-US", {
              weekday: "long",
              month: "long",
              day: "numeric",
            })}
          </div>
          <div style={temperatureContainerStyle}>
            <div style={temperatureStyle}>{data.currentTemperature}°</div>
            <div style={weatherIconStyle}></div>
          </div>
        </div>
        <div>
          <div style={weatherDescriptionStyle}>{data.weatherDescription}</div>
        </div>
      </div>
      <div style={forecastContainerStyle}>
        {data.forecast.map((item) => (
          <div key={item.time} style={forecastItemStyle}>
            <div style={forecastTimeStyle}>{item.time}</div>
            <div style={{ position: "relative" }}>
              <div style={forecastIconStyle}></div>
              {item.weatherIcon === "partly-cloudy" && (
                <div style={cloudIconStyle}></div>
              )}
            </div>
            <div style={forecastTemperatureStyle}>{item.temperature}°</div>
          </div>
        ))}
      </div>
    </div>
  );
};



================================================
File: packages/tool-ui-weather/src/index.ts
================================================
export { Weather } from "./Weather";



================================================
File: packages/tsbuildutils/package.json
================================================
{
  "name": "@assistant-ui/tsbuildutils",
  "version": "0.0.1",
  "private": true,
  "main": "./src/index.ts",
  "type": "module",
  "dependencies": {
    "@assistant-ui/tailwindcss-transformer": "workspace:^",
    "@assistant-ui/tsconfig": "workspace:*",
    "cross-spawn": "^7.0.6",
    "esbuild-plugin-file-path-extensions": "^2.1.4",
    "postcss": "^8.5.1",
    "postcss-js": "^4.0.1",
    "tsup": "8.3.6",
    "typescript": "^5.7.3"
  },
  "devDependencies": {
    "@types/cross-spawn": "^6.0.6",
    "@types/node": "^22.13.1",
    "@types/postcss-js": "^4.0.4"
  }
}



================================================
File: packages/tsbuildutils/tsconfig.json
================================================
{
  "extends": "@assistant-ui/tsconfig/base.json",
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: packages/tsbuildutils/src/index.ts
================================================
import { build } from "tsup";
import { promises as fs } from "node:fs";
import postcss from "postcss";
import postcssJs from "postcss-js";
import { esbuildPluginFilePathExtensions } from "esbuild-plugin-file-path-extensions";
import path from "node:path";
import { spawn } from "cross-spawn";

const replaceNullWithObject = (obj: object): object => {
  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => {
      if (value === true) return [key, {}];
      if (typeof value === "object" && value !== null)
        return [key, replaceNullWithObject(value)];
      return [key, value];
    }),
  );
};

const transformCssToJson = async (files: string[]) => {
  await Promise.all(
    files.map(async (file) => {
      const cssContent = await fs.readFile(file, "utf8");
      const root = postcss.parse(cssContent);
      const formattedComponents = replaceNullWithObject(
        postcssJs.objectify(root),
      );

      const outputFile = "dist/" + file.split("/").slice(1).join("/") + ".json";
      const outputContent = JSON.stringify(formattedComponents, null, 2);

      await fs.mkdir(path.dirname(outputFile), { recursive: true });
      await fs.writeFile(outputFile, outputContent);
    }),
  );
};

const transpileTypescript = async () => {
  await build({
    entry: ["src/**/*.{ts,tsx,js,jsx}", "!src/**/*.test.{ts,tsx}"],
    format: ["cjs", "esm"],
    bundle: true,
    minify: false,
    sourcemap: true,
    splitting: false,
    silent: true,
    esbuildOptions: (config) => {
      config.dropLabels = ["DEV"];
    },
    esbuildPlugins: [
      esbuildPluginFilePathExtensions({
        cjsExtension: "js",
      }),
    ],
  });
};

const transpileTypescriptDts = async () => {
  const child = spawn("pnpm", [
    "exec",
    "tsc",
    "-p",
    "tsconfig.declarations.json",
  ]);
  child.stdout.pipe(process.stdout);
  child.stderr.pipe(process.stderr);
  return new Promise((r, e) => {
    child.on("exit", r);
    child.on("error", e);
  });
};

const transformTailwindToCss = async (entrypoints: string[]) => {
  await build({
    entry: entrypoints,
    outDir: "dist/styles",
    sourcemap: true,
  });
};

const copyFiles = async (entrypoints: string[]) => {
  await Promise.all(
    entrypoints.map(async (entrypoint) => {
      const source = entrypoint;
      const target = "dist/" + entrypoint.split("/").slice(1).join("/");

      await fs.mkdir(path.dirname(target), { recursive: true });
      await fs.copyFile(source, target);
    }),
  );
};

export class Build {
  private tasks: Promise<unknown>[] = [];

  private constructor(private initTask: Promise<void>) {}

  public then(...args: Parameters<Promise<void>["then"]>) {
    return Promise.all(this.tasks)
      .then(() => {})
      .then(...args);
  }

  public transpileTypescript() {
    this.tasks.push(
      this.initTask.then(() => {
        return Promise.all([
          transpileTypescript(), // cjs and esm
          transpileTypescriptDts(), // declarations
        ]);
      }),
    );
    return this;
  }

  public transpileCSS({
    tailwindEntrypoints,
    cssEntrypoints = tailwindEntrypoints,
  }: {
    tailwindEntrypoints: string[];
    cssEntrypoints?: string[];
  }) {
    this.initTask = this.initTask.then(() =>
      transformCssToJson(tailwindEntrypoints),
    );
    this.tasks.push(
      this.initTask.then(() => {
        return Promise.all([
          copyFiles(tailwindEntrypoints), // tailwind direct imports
          transformTailwindToCss(cssEntrypoints), // css imports
        ]);
      }),
    );
    return this;
  }

  public static start() {
    const cleanTask = fs.rm("dist", { recursive: true, force: true });
    return new Build(cleanTask);
  }
}



================================================
File: packages/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "@tsconfig/strictest/tsconfig.json",
  "compilerOptions": {
    "moduleResolution": "bundler",
    "target": "ESNext",
    "module": "ESNext",
    "noEmit": true,
    "resolveJsonModule": true,
    "jsx": "react-jsx",
    "lib": ["dom", "dom.iterable", "ES2022"],
    "paths": {
      "@assistant-ui/*": ["../../packages/*/src"],
      "assistant-stream": ["../../packages/assistant-stream/src"],
    }
  }
}



================================================
File: packages/tsconfig/package-lock.json
================================================
{
  "name": "@assistant-ui/tsconfig",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "@assistant-ui/tsconfig",
      "version": "0.0.0",
      "dependencies": {
        "@tsconfig/strictest": "^2.0.5"
      }
    },
    "../../node_modules/.pnpm/@tsconfig+strictest@2.0.5/node_modules/@tsconfig/strictest": {
      "version": "2.0.5",
      "license": "MIT"
    },
    "node_modules/@tsconfig/strictest": {
      "resolved": "../../node_modules/.pnpm/@tsconfig+strictest@2.0.5/node_modules/@tsconfig/strictest",
      "link": true
    }
  }
}



================================================
File: packages/tsconfig/package.json
================================================
{
  "name": "@assistant-ui/tsconfig",
  "version": "0.0.0",
  "private": true,
  "dependencies": {
    "@tsconfig/strictest": "^2.0.5"
  }
}



================================================
File: python/assistant-stream/README.md
================================================
## assistant-stream



================================================
File: python/assistant-stream/LICENSE
================================================
MIT License

Copyright (c) 2024 Simon Farshid

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: python/assistant-stream/poetry.lock
================================================
# This file is automatically @generated by Poetry 2.0.1 and should not be changed by hand.

[[package]]
name = "anyio"
version = "4.5.2"
description = "High level compatibility layer for multiple asynchronous event loop implementations"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "anyio-4.5.2-py3-none-any.whl", hash = "sha256:c011ee36bc1e8ba40e5a81cb9df91925c218fe9b778554e0b56a21e1b5d4716f"},
    {file = "anyio-4.5.2.tar.gz", hash = "sha256:23009af4ed04ce05991845451e11ef02fc7c5ed29179ac9a420e5ad0ac7ddc5b"},
]

[package.dependencies]
exceptiongroup = {version = ">=1.0.2", markers = "python_version < \"3.11\""}
idna = ">=2.8"
sniffio = ">=1.1"
typing-extensions = {version = ">=4.1", markers = "python_version < \"3.11\""}

[package.extras]
doc = ["Sphinx (>=7.4,<8.0)", "packaging", "sphinx-autodoc-typehints (>=1.2.0)", "sphinx-rtd-theme"]
test = ["anyio[trio]", "coverage[toml] (>=7)", "exceptiongroup (>=1.2.0)", "hypothesis (>=4.0)", "psutil (>=5.9)", "pytest (>=7.0)", "pytest-mock (>=3.6.1)", "trustme", "truststore (>=0.9.1)", "uvloop (>=0.21.0b1)"]
trio = ["trio (>=0.26.1)"]

[[package]]
name = "exceptiongroup"
version = "1.2.2"
description = "Backport of PEP 654 (exception groups)"
optional = false
python-versions = ">=3.7"
groups = ["main"]
markers = "python_version < \"3.11\""
files = [
    {file = "exceptiongroup-1.2.2-py3-none-any.whl", hash = "sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b"},
    {file = "exceptiongroup-1.2.2.tar.gz", hash = "sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc"},
]

[package.extras]
test = ["pytest (>=6)"]

[[package]]
name = "idna"
version = "3.10"
description = "Internationalized Domain Names in Applications (IDNA)"
optional = false
python-versions = ">=3.6"
groups = ["main"]
files = [
    {file = "idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3"},
    {file = "idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9"},
]

[package.extras]
all = ["flake8 (>=7.1.1)", "mypy (>=1.11.2)", "pytest (>=8.3.2)", "ruff (>=0.6.2)"]

[[package]]
name = "sniffio"
version = "1.3.1"
description = "Sniff out which async library your code is running under"
optional = false
python-versions = ">=3.7"
groups = ["main"]
files = [
    {file = "sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2"},
    {file = "sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc"},
]

[[package]]
name = "starlette"
version = "0.44.0"
description = "The little ASGI library that shines."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "starlette-0.44.0-py3-none-any.whl", hash = "sha256:19edeb75844c16dcd4f9dd72f22f9108c1539f3fc9c4c88885654fef64f85aea"},
    {file = "starlette-0.44.0.tar.gz", hash = "sha256:e35166950a3ccccc701962fe0711db0bc14f2ecd37c6f9fe5e3eae0cbaea8715"},
]

[package.dependencies]
anyio = ">=3.4.0,<5"
typing-extensions = {version = ">=3.10.0", markers = "python_version < \"3.10\""}

[package.extras]
full = ["httpx (>=0.27.0,<0.29.0)", "itsdangerous", "jinja2", "python-multipart (>=0.0.18)", "pyyaml"]

[[package]]
name = "typing-extensions"
version = "4.12.2"
description = "Backported and Experimental Type Hints for Python 3.8+"
optional = false
python-versions = ">=3.8"
groups = ["main"]
markers = "python_version < \"3.11\""
files = [
    {file = "typing_extensions-4.12.2-py3-none-any.whl", hash = "sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d"},
    {file = "typing_extensions-4.12.2.tar.gz", hash = "sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.8.0"
content-hash = "fea0de7a43ddbcdfe649592f67edec395ed29c859e50f9efc42c0fe7800706bf"



================================================
File: python/assistant-stream/pyproject.toml
================================================
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "assistant-stream"
version = "0.0.14"
authors = [
  { name="Simon Farshid", email="simon@assistant-ui.com" },
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/assistant-ui/assistant-ui"
Issues = "https://github.com/assistant-ui/assistant-ui/issues"

[tool.poetry]
name = "assistant-stream"
version = "0.0.14"
description = ""
authors = ["Simon Farshid <simon@assistant-ui.com>"]

[tool.poetry.dependencies]
python = ">=3.8.0"
starlette = ">=0.37.2"




================================================
File: python/assistant-stream/src/assistant_stream/__init__.py
================================================
from assistant_stream.serialization.assistant_stream_response import (
    AssistantStreamResponse,
)
from assistant_stream.create_run import (
    create_run,
    RunController,
)

__all__ = [
    "AssistantStreamResponse",
    "create_run",
    "RunController",
]



================================================
File: python/assistant-stream/src/assistant_stream/assistant_stream_chunk.py
================================================
from dataclasses import dataclass
from typing import Any, Union


# Define the data classes for different chunk types
@dataclass
class TextDeltaChunk:
    text_delta: str
    type: str = "text-delta"


@dataclass
class ToolCallBeginChunk:
    tool_call_id: str
    tool_name: str
    type: str = "tool-call-begin"


@dataclass
class ToolCallDeltaChunk:
    tool_call_id: str
    args_text_delta: str
    type: str = "tool-call-delta"


@dataclass
class ToolResultChunk:
    tool_call_id: str
    result: Any
    type: str = "tool-result"


@dataclass
class DataChunk:
    data: Any
    type: str = "data"

@dataclass
class ErrorChunk:
    error: str
    type: str = "error"


# Define the union type for AssistantStreamChunk
AssistantStreamChunk = Union[
    TextDeltaChunk, ToolCallBeginChunk, ToolCallDeltaChunk, ToolResultChunk, DataChunk, ErrorChunk
]



================================================
File: python/assistant-stream/src/assistant_stream/create_run.py
================================================
import asyncio
from typing import Any, AsyncGenerator, Callable, Coroutine
from assistant_stream.assistant_stream_chunk import (
    AssistantStreamChunk,
    TextDeltaChunk,
    ToolResultChunk,
    DataChunk,
    ErrorChunk,
)
from assistant_stream.modules.tool_call import (
    create_tool_call,
    ToolCallController,
    generate_openai_style_tool_call_id,
)


class RunController:
    def __init__(self, queue):
        self._queue = queue
        self._loop = asyncio.get_event_loop()
        self._dispose_callbacks = []
        self._stream_tasks = []

    def append_text(self, text_delta: str) -> None:
        """Append a text delta to the stream."""
        chunk = TextDeltaChunk(text_delta=text_delta)
        self._loop.call_soon_threadsafe(self._queue.put_nowait, chunk)

    async def add_tool_call(
        self, tool_name: str, tool_call_id: str = generate_openai_style_tool_call_id()
    ) -> ToolCallController:
        """Add a tool call to the stream."""

        stream, controller = await create_tool_call(tool_name, tool_call_id)
        self._dispose_callbacks.append(controller.close)
        self.add_stream(stream)
        return controller

    def add_tool_result(self, tool_call_id: str, result: Any) -> None:
        """Add a tool result to the stream."""

        self._loop.call_soon_threadsafe(
            self._queue.put_nowait,
            ToolResultChunk(
                tool_call_id=tool_call_id,
                result=result,
            ),
        )

    def add_stream(self, stream: AsyncGenerator[AssistantStreamChunk, None]) -> None:
        """Append a substream to the main stream."""

        async def reader():
            async for chunk in stream:
                await self._queue.put(chunk)

        task = asyncio.create_task(reader())
        self._stream_tasks.append(task)

    def add_data(self, data: Any) -> None:
        """Emit an event to the main stream."""

        self._loop.call_soon_threadsafe(
            self._queue.put_nowait,
            DataChunk(data=data),
        )

    def add_error(self, error: str) -> None:
        """Emit an event to the main stream."""

        self._loop.call_soon_threadsafe(
            self._queue.put_nowait,
            ErrorChunk(error=error),
        )


async def create_run(
    callback: Callable[[RunController], Coroutine[Any, Any, None]]
) -> AsyncGenerator[AssistantStreamChunk, None]:
    queue = asyncio.Queue()
    controller = RunController(queue)

    async def background_task():
        try:
            await callback(controller)
        except Exception as e:
            controller.add_error(str(e))
            raise
        finally:
            for dispose in controller._dispose_callbacks:
                dispose()
            try:
                for task in controller._stream_tasks:
                    await task
            finally:
                asyncio.get_event_loop().call_soon_threadsafe(queue.put_nowait, None)

    task = asyncio.create_task(background_task())

    while True:
        chunk = await controller._queue.get()
        if chunk is None:
            break
        yield chunk
        controller._queue.task_done()

    await task



================================================
File: python/assistant-stream/src/assistant_stream/modules/text.py
================================================



================================================
File: python/assistant-stream/src/assistant_stream/modules/tool_call.py
================================================
import asyncio
from typing import Any, AsyncGenerator
from assistant_stream.assistant_stream_chunk import (
    AssistantStreamChunk,
    ToolCallBeginChunk,
    ToolCallDeltaChunk,
    ToolResultChunk,
)
import string
import random


def generate_openai_style_tool_call_id():
    prefix = "call_"
    characters = string.ascii_letters + string.digits
    random_id = "".join(random.choices(characters, k=24))
    return prefix + random_id


class ToolCallController:
    def __init__(self, queue, tool_name: str, tool_call_id: str):
        self.tool_name = tool_name
        self.tool_call_id = tool_call_id
        self.queue = queue
        self.loop = asyncio.get_event_loop()

        begin_chunk = ToolCallBeginChunk(
            tool_call_id=self.tool_call_id,
            tool_name=self.tool_name,
        )
        self.queue.put_nowait(begin_chunk)

    def append_args_text(self, args_text_delta: str) -> None:
        """Append an args text delta to the stream."""
        chunk = ToolCallDeltaChunk(
            tool_call_id=self.tool_call_id,
            args_text_delta=args_text_delta,
        )
        self.loop.call_soon_threadsafe(self.queue.put_nowait, chunk)

    def set_result(self, result: Any) -> None:
        """Set the result of the tool call."""

        chunk = ToolResultChunk(
            tool_call_id=self.tool_call_id,
            result=result,
        )
        self.loop.call_soon_threadsafe(self.queue.put_nowait, chunk)
        self.close()

    def close(self) -> None:
        """Close the stream."""
        self.loop.call_soon_threadsafe(self.queue.put_nowait, None)


async def create_tool_call(
    tool_name: str,
    tool_call_id: str,
) -> tuple[AsyncGenerator[AssistantStreamChunk, None], ToolCallController]:
    queue = asyncio.Queue()
    controller = ToolCallController(queue, tool_name, tool_call_id)

    async def stream():
        while True:
            chunk = await controller.queue.get()
            if chunk is None:
                break
            yield chunk
            controller.queue.task_done()

    return stream(), controller



================================================
File: python/assistant-stream/src/assistant_stream/serialization/__init__.py
================================================
from assistant_stream.serialization.data_stream import (
    DataStreamEncoder,
    DataStreamResponse,
)
from assistant_stream.serialization.openai_stream import (
    OpenAIStreamEncoder,
    OpenAIStreamResponse,
)

__all__ = [
    "DataStreamEncoder",
    "DataStreamResponse",
    "OpenAIStreamEncoder",
    "OpenAIStreamResponse",
]



================================================
File: python/assistant-stream/src/assistant_stream/serialization/assistant_stream_response.py
================================================
from assistant_stream.assistant_stream_chunk import AssistantStreamChunk
from assistant_stream.serialization.stream_encoder import StreamEncoder
from typing import AsyncGenerator

from starlette.responses import StreamingResponse


class AssistantStreamResponse(StreamingResponse):
    def __init__(
        self,
        stream: AsyncGenerator[AssistantStreamChunk, None],
        stream_encoder: StreamEncoder,
    ):
        super().__init__(
            stream_encoder.encode_stream(stream),
            media_type=stream_encoder.get_media_type(),
        )



================================================
File: python/assistant-stream/src/assistant_stream/serialization/data_stream.py
================================================
from assistant_stream.assistant_stream_chunk import AssistantStreamChunk
import json
from typing import AsyncGenerator
from assistant_stream.serialization.assistant_stream_response import (
    AssistantStreamResponse,
)
from assistant_stream.serialization.stream_encoder import StreamEncoder


class DataStreamEncoder(StreamEncoder):
    def __init__(self):
        pass

    def encode_chunk(self, chunk: AssistantStreamChunk) -> str:
        if chunk.type == "text-delta":
            return f"0:{json.dumps(chunk.text_delta)}\n"
        elif chunk.type == "tool-call-begin":
            return f'b:{json.dumps({ "toolCallId": chunk.tool_call_id, "toolName": chunk.tool_name })}\n'
        elif chunk.type == "tool-call-delta":
            return f'c:{json.dumps({ "toolCallId": chunk.tool_call_id, "argsTextDelta": chunk.args_text_delta })}\n'
        elif chunk.type == "tool-result":
            return f'a:{json.dumps({ "toolCallId": chunk.tool_call_id, "result": chunk.result })}\n'
        elif chunk.type == "data":
            return f"2:{json.dumps([chunk.data])}\n"
        elif chunk.type == "error":
            return f"3:{json.dumps(chunk.error)}\n"

    def get_media_type(self) -> str:
        return "text/plain"

    async def encode_stream(
        self, stream: AsyncGenerator[AssistantStreamChunk, None]
    ) -> AsyncGenerator[str, None]:
        async for chunk in stream:
            encoded = self.encode_chunk(chunk)
            if encoded is None:
                continue
            yield encoded


class DataStreamResponse(AssistantStreamResponse):
    def __init__(
        self,
        stream: AsyncGenerator[AssistantStreamChunk, None],
    ):
        super().__init__(stream, DataStreamEncoder())



================================================
File: python/assistant-stream/src/assistant_stream/serialization/openai_stream.py
================================================
from assistant_stream.assistant_stream_chunk import AssistantStreamChunk
import json
import time
import string
import random
from typing import AsyncGenerator
from assistant_stream.serialization.assistant_stream_response import (
    AssistantStreamResponse,
)
from assistant_stream.serialization.stream_encoder import StreamEncoder


def generate_openai_style_id():
    prefix = "chatcmpl-"
    characters = string.ascii_letters + string.digits
    random_id = "".join(random.choices(characters, k=24))
    return prefix + random_id


class OpenAIStreamEncoder(StreamEncoder):
    def __init__(self, model="assistant_stream", system_fingerprint="fp_0000000000"):
        self.id = generate_openai_style_id()
        self.model = model
        self.system_fingerprint = system_fingerprint
        pass

    def get_media_type(self) -> str:
        return "text/event-stream"

    def _create_chunk(self, delta={}, finish_reason=None):
        response = {
            "id": self.id,
            "object": "chat.completion.chunk",
            "created": int(time.time()),
            "model": self.model,
            "system_fingerprint": self.system_fingerprint,
            "choices": [
                {
                    "index": 0,
                    "delta": delta,
                    "logprobs": None,
                    "finish_reason": finish_reason,
                }
            ],
        }
        return f"data: {json.dumps(response, ensure_ascii=False)}\n\n"

    def encode_chunk(self, chunk: AssistantStreamChunk) -> str:
        """
        Encodes the chunk into OpenAI's SSE format.
        """
        if chunk.type == "text-delta":
            # Construct the delta for text content
            return self._create_chunk({"content": chunk.text_delta})
        else:
            # Handle unknown chunk types gracefully
            return ""

    async def encode_stream(
        self, stream: AsyncGenerator[AssistantStreamChunk, None]
    ) -> AsyncGenerator[str, None]:
        """
        Asynchronously encodes chunks into SSE-formatted strings.
        """
        async for chunk in stream:
            encoded_chunk = self.encode_chunk(chunk)
            if encoded_chunk:
                yield encoded_chunk

        yield self._create_chunk(finish_reason="stop")
        yield "data: [DONE]\n\n"


class OpenAIStreamResponse(AssistantStreamResponse):
    def __init__(
        self,
        stream: AsyncGenerator[AssistantStreamChunk, None],
    ):
        """
        Initializes the response with the OpenAI SSE encoder.
        """
        super().__init__(stream, OpenAIStreamEncoder())



================================================
File: python/assistant-stream/src/assistant_stream/serialization/stream_encoder.py
================================================
from abc import ABC, abstractmethod
from typing import AsyncGenerator
from assistant_stream.assistant_stream_chunk import AssistantStreamChunk


class StreamEncoder(ABC):
    """
    Abstract base class for stream encoders, requiring an implementation of `encode_stream`.
    """

    @abstractmethod
    def get_media_type(self) -> str:
        """
        Returns the MIME type of the stream.
        """
        pass

    @abstractmethod
    async def encode_stream(
        self, stream: AsyncGenerator[AssistantStreamChunk, None]
    ) -> AsyncGenerator[str, None]:
        """
        Encode the stream of AssistantStreamChunk into a specific format.
        This method must be implemented by subclasses.
        """
        pass



================================================
File: python/assistant-stream-hello-world/requirements.txt
================================================
assistant-stream==0.0.7
fastapi==0.115.0



================================================
File: python/assistant-stream-hello-world/.gitignore
================================================
.vercel



================================================
File: python/assistant-stream-hello-world/api/chat/completions/index.py
================================================
from assistant_stream import create_run, RunController
from assistant_stream.serialization import DataStreamResponse

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

import asyncio

app = FastAPI()
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_methods=["*"])


@app.post("/api/chat/completions")
async def chat_completions():
    async def run(controller: RunController):
        controller.append_text("Hello ")
        await asyncio.sleep(1)
        controller.append_text("world.")

    return DataStreamResponse(create_run(run))



================================================
File: .changeset/README.md
================================================
# Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)



================================================
File: .changeset/config.json
================================================
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.1/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "privatePackages": { "version": false },
  "updateInternalDependencies": "minor"
}



================================================
File: .changeset/short-plants-march.md
================================================
---
"@assistant-ui/react": patch
---

fix: useAssistantInstructions should correctly update on disabled change




================================================
File: .github/workflows/changeset.yaml
================================================
name: Changesets
on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  CI: true

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create and publish versions
        uses: changesets/action@v1
        with:
          commit: "chore: update versions"
          title: "chore: update versions"
          version: pnpm ci:version
          publish: pnpm ci:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}



================================================
File: .github/workflows/code-quality.yaml
================================================
name: Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: ESLint & Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm eslint
        continue-on-error: true # Don't fail the workflow if ESLint has errors
        # TODO: fix all eslint errors

      - name: Run Prettier
        run: pnpm prettier
        # This will fail the workflow if Prettier has warnings



================================================
File: .github/workflows/registry.yaml
================================================
name: Deploy Shadcn Registry
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_REGISTRY_PROJECT_ID }}
on:
  push:
    branches:
      - main
    paths:
      - apps/registry/**
      - .github/workflows/**

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Pull Vercel Environment Information
        working-directory: apps/registry
        run: vercel pull --yes --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        working-directory: apps/registry
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        working-directory: apps/registry
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}


